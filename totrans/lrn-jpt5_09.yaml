- en: Interactive Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a mechanism for Jupyter to gather input from the user while the script
    is running. To do this, we put coding in the use of a widget or user interface
    control in the script. The widgets we will use in this chapter are defined at [http://ipywidgets.readthedocs.io/en/latest/](http://ipywidgets.readthedocs.io/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, there are widgets for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text input**:The Notebook user enters a string that will be used later in
    the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Button clicks**:Thesepresent the user with multiple options by way of buttons.
    Then, depending on which button is selected (clicked on); your script can change
    direction according to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slider**:You can provide the user with a slider where the user can select
    a value within the range you specify, and then your script can use that value
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle box and checkboxes**:Theselet the user select the different options
    of your script that they are interested in working with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Progress bar**:Aprogress bar can be used to show how far along they are in
    a multi-step process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, this can be wide open as the underlying *gather input from the
    user* is generally available. Therefore, you could make really interesting widgets
    that do not fit the standard user, input a control paradigm. For example, there
    is a widget allowing a user to click on a geographical map to discover data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widgets package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The widgets package is an upgrade to the standard Jupyter installation. You
    can update the widgets package using this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once complete, you must then upgrade your Jupyter installation using this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And then you must use this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We put together a basic example widget Notebook to make sure everything is
    working:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We end up with the following screenshot, where the container widget is displayed
    enclosing the slider and the message box:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eb4e0f64-ff6d-4e04-a27f-8cbe06b8a4b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Widget basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All widgets work the same, generally:'
  prefs: []
  type: TYPE_NORMAL
- en: You can create or define an instance of a widget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can preset the attributes of a widget, such as its initial value, or a label
    to be displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widgets can react to different inputs from a user. The inputs are gathered by
    a handler or Python function that is invoked when a user performs some action
    on a widget, for example, to call the handler if the user clicks on a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of a widget can be used later in your script just as any other variable.
    For example, you can use a widget to determine how many circles to draw.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interact is the basic widget which is appears to be used to derive all other
    widgets. It has variable arguments, and depending on the arguments, will portray
    a different kind of user input control.
  prefs: []
  type: TYPE_NORMAL
- en: Interact widget slidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use interact to produce a slidebar by passing in an extent. For example,
    we have the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that the semicolon following the `interact` function call is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a script which does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: References the package we want to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines a function that is called for every user input of a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls to interact, passing our handler and a range of values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we run this script, we get a scrollbar that is modifiable by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd952981-9135-4f32-9feb-9b1a599b69d2.png)'
  prefs: []
  type: TYPE_IMG
- en: The user is able to slide the vertical bar over the range of values. The upper
    end is 27 and the lower end is -1 (assuming we could pass additional arguments
    to interact to set the range of values selectable). `myfunction` is called every
    time the value in the interact widget is changed and the result printed. Hence,
    we see 27 selected and the number 28 displayed (following the processing of `myfunction`
    - 27 + 1).
  prefs: []
  type: TYPE_NORMAL
- en: Interact widget checkbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can change the type of control generated, based on the arguments passed
    to interact. If we had the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We are doing the same steps as before; however, the value passed is `False`
    (but it could also be `True`). The `interact` function examines the argument passed,
    determines it is a Boolean value, and presents the appropriate control for a Boolean:
    a checkbox.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the preceding script in a Notebook, we get a display like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc2e0301-501b-4ebd-8baf-693a23c29c0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Interact widget textbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can generate a text input control, again by passing in different arguments
    to interact. For example, see the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces a text input control with the initial value of `Hello World`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e76f1816-f446-4848-b31b-90448398e899.png)'
  prefs: []
  type: TYPE_IMG
- en: Interact dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use the interact function to produce a drop-down listbox for the
    user to select from. In the following script we produce a dropdown with two choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pull in the interact reference,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a function that will be called whenever the user changes the value of
    the control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls the `interact` function with a set of values, which interact will interpret
    to mean create a dropdown for the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we run this script in a Notebook, we get the following display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/540c3757-470d-424d-bb5f-766841b31846.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows us that the value printed at the bottom will
    change according to what is selected in the dropdown by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is also an interactive widget. The interactive widget works like the interact
    widget, but does not display the user input control until called upon directly
    by the script. This would be useful if you had some calculations that had to be
    performed for the parameters of the widget display, or even if you wanted to decide
    whether you needed a control at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could have a script (similar to the previous script) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have made a couple of changes to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: We are referencing the interactive widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interactive function returns a widget, rather than immediately displaying
    a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must script the display of the widget ourselves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we run the following script, to the user it looks very similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4173c7c-347a-4156-9f31-f53f900dbdd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is another package of widgets, called `widgets`, that has all of the standard
    controls you might want to use, with many optional parameters available to customize
    your display.
  prefs: []
  type: TYPE_NORMAL
- en: The progress bar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the widgets available in this package displays a progress bar to the
    user. We could have the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding script would display our progress bar as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6615908-832a-474a-98d0-b7766bd0a2d0.png)'
  prefs: []
  type: TYPE_IMG
- en: We see a progress bar that looks to be 45%.
  prefs: []
  type: TYPE_NORMAL
- en: The listbox widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We could also use the `listbox` widget, called a `Dropdown`, as in the following
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will display a listbox to the user with the values `Pen`, `Pencil`,
    and `Pad`. When the user selects one of the values, the associated value is returned
    in the `w` variable, which we display as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b28ed7dc-5743-4f0b-a3f8-7668f78ebc7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Therefore, we see the inventory value associated with Pen.
  prefs: []
  type: TYPE_NORMAL
- en: The text widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `text` widget gathers a text string from the user for reuse elsewhere in
    your script. A text widget has a description (label) and a value (entered by the
    user or preset in your script).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will just gather a text string and display it on the screen
    as part of the output for the script. We will use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Python package that contains the basic widgets is `ipywidgets`, so we need
    to reference that. We define a handler for the text field that will be called
    when the user hits submit after entering their text value. When we do this, we
    are using the `text` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the preceding script in a Notebook, we get a display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf36f06c-4c69-4726-809f-6c8ed62076d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should point out some of the highlights of this page:'
  prefs: []
  type: TYPE_NORMAL
- en: The ordering of the elements of the page is important. The text field referenced
    by the handler must be defined before the reference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When invoking a widget, the widget automatically looks for any handlers that
    might be associated with the script. In this case, we have a `submit` handler.
    There are many other handlers available. `text.on_submit` assigns the handler
    to the widget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, we have a standard Python Notebook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we run the script (Cell | Run All), we get the preceding screenshot (waiting
    for us to enter a value in the text box):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, our script has set up a widget for gathering input from the user and later
    done something with that value. (We are just displaying it here, but we could
    use the input for further processing.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, we can use a `Button` widget in our script, as can be seen in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: References the features we want to use from the `widgets` packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates our button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines a handler for the click event on a button. The handler receives the
    `Button` object that was clicked upon (the widget).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The handler displays information about the button clicked on (you can imagine
    if we had several buttons in a display, we would want to determine which button
    was clicked).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we assign the defined handler to the `Button` object we created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the indentation of the coding for the handler; this is the standard Python
    style that must be followed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the preceding script in a Notebook, we get a display like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1b16a32-4ec3-4fc2-87b7-1e51f2254c05.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the `Submit` button at the bottom of the following image. You could change
    other attributes of the button, such as its position, size, color, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we then click on the `Submit` button, we get the following display where
    our message about the button being clicked is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f44534d8-c48b-4002-8116-24ca9797d8bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Widget properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All widgets controls have a set of properties for your display that can be
    adjusted as needed. You can see the list of properties by taking an instance of
    a control and running the `control.keys` command in a Notebook, as can be seen
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This script pulls in a blanket reference to all of the controls available in
    widgets. We then create an `IntSlider` instance and display the list of properties
    that we can adjust. So, we end up with a display like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea4e5151-a04d-45b9-b646-eea168991996.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the list is extensive:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | Whether left align, right align or justified |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | Color of font |'
  prefs: []
  type: TYPE_TB
- en: '| `height` | Height of control |'
  prefs: []
  type: TYPE_TB
- en: '| `disabled` | Whether control is disabled or not |'
  prefs: []
  type: TYPE_TB
- en: '| `visible` | Is the control displayed? |'
  prefs: []
  type: TYPE_TB
- en: '| `font_style` | Style of font, for example, italic |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | Minimum value (used in range list) |'
  prefs: []
  type: TYPE_TB
- en: '| `background_color` | Background color of control |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | Width of control |'
  prefs: []
  type: TYPE_TB
- en: '| `font_family` | Font family to be used for text in control |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | The description field is used for documentation purposes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | Maximum value (of range) |'
  prefs: []
  type: TYPE_TB
- en: '| `padding` | Padding applied (to edges of control) |'
  prefs: []
  type: TYPE_TB
- en: '| `font_weight` | Weight of font used in control, for example, bold |'
  prefs: []
  type: TYPE_TB
- en: '| `font_size` | Size of font used for text in control |'
  prefs: []
  type: TYPE_TB
- en: '| `value` | Selected and entered value for control |'
  prefs: []
  type: TYPE_TB
- en: '| `margin` | Margin to use when displaying control |'
  prefs: []
  type: TYPE_TB
- en: Adjusting widget properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We could adjust any of these in our scripts using something like this script,
    where we disable a text box (the text box will display, but the user cannot enter
    a value into it). We could have the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the screenshot of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e4f94a8-7cce-4c5a-bea5-095bd7cd8503.png)'
  prefs: []
  type: TYPE_IMG
- en: When a field is disabled, the textbox is grayed out. When the user hovers the
    cursor over the field, they get a red circle with a slash through it, which means
    it cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the properties shown previously are accessible to read and write. We
    can show this transition with a small script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The script creates a slider, retrieves its current value, changes the value
    to `5`, and then displays the original and current value of the control.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to run the preceding script in a Notebook, we would see the following
    expected results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50bcbc29-eb89-4ddd-a672-676f52456d49.png)'
  prefs: []
  type: TYPE_IMG
- en: Widget events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the controls work by reacting to user actions, either with a mouse or
    keyboard. The default actions for controls are built into the software, but you
    can add your own handling of events (user actions).
  prefs: []
  type: TYPE_NORMAL
- en: We have seen this kind of event handling previously (for example, in the section
    on the slidebar, a function is called whenever the slider value is changed by
    the user). But, let's explore it in a little more depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could have the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displays the button to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines a handler click event. It prints a message that you clicked on the screen.
    You can have any Python statements you want in the handler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lastly, we associated the click handler with the button we created. So, now
    when the user clicks on our button, the handler is called and the `Button clicked`
    message is displayed on screen (as shown in the following screenshot):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we run the preceding script in a Notebook and click on the button a few
    times, we get the following display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc1accae-6da3-42a8-8395-b418f96e43a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Widget containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also assemble containers of widgets directly, using Python syntax,
    by passing the child elements in the constructor. For example, we could have the
    following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding script shows that we are creating a container (which is a `Box`
    widget), in which we are specifying the child, contained controls. The call to
    display the container will iteratively display the child elements as well. So,
    we end up with a display like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fcb2b87-1ddb-4f5c-b476-f72145e45f86.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the border around the box and the two controls in the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we could have added the children to the container after the container
    was displayed, by using syntax like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When we add the child to the container, the container repaints, which will cause
    the repainting of any children.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run this script in another Notebook, we get a very similar result to
    the previous example, with a display like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad5198ea-6314-441e-8586-c83a8d723dc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added widgets to our Jupyter installation and we used the
    interact and interactive widgets to produce a variety of user input controls.
    We then looked at the widgets package in depth to investigate some of the user
    controls available, properties available in the containers, events that are available
    emitting from the controls, and how to build containers for the controls.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into sharing Notebooks and converting them
    into different formats.
  prefs: []
  type: TYPE_NORMAL
