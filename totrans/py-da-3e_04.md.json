["```py\n# Import pandas library\nimport pandas as pd\n\n# Create dataframe\nsample_data = {'name': ['John', 'Alia', 'Ananya', 'Steve', 'Ben'], \n               'gender': ['M', 'F', 'F', 'M', 'M'], \n               'communication_skill_score': [40, 45, 23, 39, 39],\n               'quantitative_skill_score': [38, 41, 42, 48, 32]}\n\ndata = pd.DataFrame(sample_data, columns = ['name', 'gender', 'communcation_skill_score', 'quantitative_skill_score'])\n\n# find mean of communication_skill_score column \ndata['communcation_skill_score'].mean(axis=0)\n\nOutput:\n37.2\n```", "```py\n# find mode of communication_skill_score column\ndata['communcation_skill_score'].mode()\n\nOutput:\n39\n```", "```py\n# find median of communication_skill_score column\ndata['communcation_skill_score'].median()\n\nOutput:\n39.0\n```", "```py\ncolumn_range=data['communcation_skill_score'].max()-data['communcation_skill_score'].min()\nprint(column_range)\n\nOutput:\n22\n```", "```py\n# First Quartile\nq1 = data['communcation_skill_score'].quantile(.25)\n\n# Third Quartile\nq3 = data['communcation_skill_score'].quantile(.75)\n\n# Inter Quartile Ratio\niqr=q3-q1\nprint(iqr)\n\nOutput:\n1.0\n```", "```py\n# Variance of communication_skill_score\ndata['communcation_skill_score'].var()\n\nOutput:\n69.2\n```", "```py\n# Standard deviation of communication_skill_score\ndata['communcation_skill_score'].std()\n\nOutput:\n8.318653737234168\n```", "```py\n# Describe dataframe\ndata.describe()\n\nOutput:\n      communcation_skill_score quantitative_skill_score\ncount         5.000000         5.000000\nmean         37.200000         40.200000\nstd           8.318654         5.848077\nmin          23.000000         32.000000\n25%          39.000000         38.000000\n50%          39.000000         41.000000\n75%          40.000000         42.000000\nmax          45.000000         48.000000\n\n```", "```py\n# skewness of communication_skill_score column\ndata['communcation_skill_score'].skew()\n\nOutput:\n-1.704679180800373\n\n```", "```py\n# kurtosis of communication_skill_score column\ndata['communcation_skill_score'].kurtosis()\n\nOutput:\n3.6010641852384015\n```", "```py\n# Covariance between columns of dataframe\ndata.cov()\n```", "```py\n# Correlation between columns of dataframe\ndata.corr(method ='pearson')\n```", "```py\nimport numpy as np\n\nfrom scipy.stats import ttest_1samp\n\n# Create data\ndata=np.array([63, 75, 84, 58, 52, 96, 63, 55, 76, 83])\n\n# Find mean\nmean_value = np.mean(data)\n\nprint(\"Mean:\",mean_value)\n\nOutput:\n\nMean: 70.5\n```", "```py\n# Perform one-sample t-test\nt_test_value, p_value = ttest_1samp(data, 68)\n\nprint(\"P Value:\",p_value)\n\nprint(\"t-test Value:\",t_test_value)\n\n# 0.05 or 5% is significance level or alpha.\nif p_value < 0.05: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n\n    print(\"Hypothesis Accepted\")\n\nOutput: \nP Value: 0.5986851106160134\nt-test Value: 0.5454725779039431\nHypothesis Accepted\n```", "```py\nfrom scipy.stats import ttest_ind\n\n# Create numpy arrays\ndata1=np.array([63, 75, 84, 58, 52, 96, 63, 55, 76, 83])\n\ndata2=np.array([53, 43, 31, 113, 33, 57, 27, 23, 24, 43])\n```", "```py\n# Compare samples\n\nstat, p = ttest_ind(data1, data2)\n\nprint(\"p-values:\",p)\n\nprint(\"t-test:\",stat)\n\n# 0.05 or 5% is significance level or alpha.\n\nif p < 0.05: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n\n    print(\"Hypothesis Accepted\") \n\nOutput:\np-values: 0.015170931362451255\nt-test: 2.6835879913819185\nHypothesis Rejected\n```", "```py\n# paired test\nfrom scipy.stats import ttest_rel\n\n# Weights before treatment\ndata1=np.array([63, 75, 84, 58, 52, 96, 63, 65, 76, 83])\n\n# Weights after treatment\ndata2=np.array([53, 43, 67, 59, 48, 57, 65, 58, 64, 72])\n```", "```py\n# Compare weights\n\nstat, p = ttest_rel(data1, data2)\n\nprint(\"p-values:\",p)\n\nprint(\"t-test:\",stat)\n\n# 0.05 or 5% is the significance level or alpha.\n\nif p < 0.05: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.013685575312467715\nt-test: 3.0548295044306903\nHypothesis Rejected\n```", "```py\nfrom scipy.stats import f_oneway\n\n# Performance scores of Mumbai location\nmumbai=[0.14730927, 0.59168541, 0.85677052, 0.27315387, 0.78591207,0.52426114, 0.05007655, 0.64405363, 0.9825853 , 0.62667439]\n\n# Performance scores of Chicago location\nchicago=[0.99140754, 0.76960782, 0.51370154, 0.85041028, 0.19485391,0.25269917, 0.19925735, 0.80048387, 0.98381235, 0.5864963 ]\n\n# Performance scores of London location\nlondon=[0.40382226, 0.51613408, 0.39374473, 0.0689976 , 0.28035865,0.56326686, 0.66735357, 0.06786065, 0.21013306, 0.86503358]\n```", "```py\n# Compare results using Oneway ANOVA\nstat, p = f_oneway(mumbai, chicago, london)\n\nprint(\"p-values:\", p)\n\nprint(\"ANOVA:\", stat)\n\nif p < 0.05: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.27667556390705783\nANOVA: 1.3480446381965452\nHypothesis Accepted\n```", "```py\nfrom scipy.stats import chi2_contingency\n\n# Average performing employees\naverage=[20, 16, 13, 7]\n\n# Outstanding performing employees\noutstanding=[31, 40, 60, 13]\n\n# contingency table\ncontingency_table= [average, outstanding]\n```", "```py\n# Apply Test\nstat, p, dof, expected = chi2_contingency(contingency_table)\n\nprint(\"p-values:\",p)\n\nif p < 0.05: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.059155602774381234\nHypothesis Accepted\n```", "```py\nfrom scipy.stats import mannwhitneyu\n\n# Sample1\n\ndata1=[7,8,4,9,8]\n\n# Sample2\n\ndata2=[3,4,2,1,1]\n```", "```py\n# Apply Test\n\nstat, p = mannwhitneyu(data1, data2)\n\nprint(\"p-values:\",p)\n\n# 0.01 or 1% is significance level or alpha.\n\nif p < 0.01: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.007666581056801412\nHypothesis Rejected\n```", "```py\nfrom scipy.stats import wilcoxon\n\n# Sample-1\ndata1 = [1, 3, 5, 7, 9]\n\n# Sample-2 after treatement \ndata2 = [2, 4, 6, 8, 10]\n```", "```py\n# Apply \nstat, p = wilcoxon(data1, data2)\n\nprint(\"p-values:\",p)\n\n# 0.01 or 1% is significance level or alpha.\n\nif p < 0.01: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.025347318677468252\nHypothesis Accepted\n```", "```py\nfrom scipy.stats import kruskal\n\n# Data sample-1\nx = [38, 18, 39, 83, 15, 38, 63, 1, 34, 50]\n\n# Data sample-2\ny = [78, 32, 58, 59, 74, 77, 29, 77, 54, 59]\n\n# Data sample-3\nz = [117, 92, 42, 79, 58, 117, 46, 114, 86, 26]\n```", "```py\n# Apply kruskal-wallis test\nstat, p = kruskal(x,y,z)\n\nprint(\"p-values:\",p)\n\n# 0.01 or 1% is significance level or alpha.\n\nif p < 0.01: \n\n    print(\"Hypothesis Rejected\")\n\nelse:\n    print(\"Hypothesis Accepted\")\n\nOutput:\np-values: 0.01997922369138151\nHypothesis Accepted\n```"]