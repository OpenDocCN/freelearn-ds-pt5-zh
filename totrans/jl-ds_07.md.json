["```py\njulia> Pkg.update() \njulia> Pkg.add(\"ScikitLearn\") \njulia> Pkg.add(\"PyPlot\") \n\n```", "```py\n$ conda install scikit-learn \n\n```", "```py\njulia> @sk_import datasets: (make_circles, make_moons, make_blobs) \njulia> @sk_import cluster: (estimate_bandwidth, MeanShift, MiniBatchKMeans, AgglomerativeClustering, SpectralClustering) \n\njulia> @sk_import cluster: (DBSCAN, AffinityPropagation, Birch) \njulia> @sk_import preprocessing: StandardScaler \njulia> @sk_import neighbors: kneighbors_graph \n\n```", "```py\njulia> srand(33) \n\njulia> # Generate datasets. \n\njulia> n_samples = 1500 \njulia> noisy_circles = make_circles(n_samples=n_samples, factor=.5, noise=.05) \njulia> noisy_moons = make_moons(n_samples=n_samples, noise=.05) \njulia> blobs = make_blobs(n_samples=n_samples, random_state=8) \njulia> no_structure = rand(n_samples, 2), nothing \n\n```", "```py\njulia> colors0 = collect(\"bgrcmykbgrcmykbgrcmykbgrcmyk\") \njulia> colors = vcat(fill(colors0, 20)...) \n\njulia> clustering_names = [ \n    \"MiniBatchKMeans\", \"AffinityPropagation\", \"MeanShift\", \n    \"SpectralClustering\", \"Ward\", \"AgglomerativeClustering\", \n    \"DBSCAN\", \"Birch\"]; \n\n```", "```py\njulia> figure(figsize=(length(clustering_names) * 2 + 3, 9.5)) \njulia> subplots_adjust(left=.02, right=.98, bottom=.001, top=.96, wspace=.05, hspace=.01) \n\njulia> plot_num = 1 \n\njulia> datasets = [noisy_circles, noisy_moons, blobs, no_structure] \n\n```", "```py\nfor (name, algorithm) in zip(clustering_names, clustering_algorithms) \n    fit!(algorithm, X) \n    y_pred = nothing \n    try \n        y_pred = predict(algorithm, X) \n    catch e \n        if isa(e, KeyError) \n            y_pred = map(Int, algorithm[:labels_]) \n            clamp!(y_pred, 0, 27) # not sure why some algorithms return -1 \n        else rethrow() end \n    end \n    subplot(4, length(clustering_algorithms), plot_num) \n    if i_dataset == 1 \n        title(name, size=18) \n    end \n\n    for y_val in unique(y_pred) \n        selected = y_pred.==y_val \n        scatter(X[selected, 1], X[selected, 2], color=string(colors0[y_val+1]), s=10) \n    end \n\n    xlim(-2, 2) \n    ylim(-2, 2) \n    xticks(()) \n    yticks(()) \n    plot_num += 1 \nend \n\n```"]