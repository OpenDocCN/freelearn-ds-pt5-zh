- en: Managing Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preface, we mentioned that this book is for readers who are looking
    for tools in the area of data science. For the researchers or practitioners working
    in the area of data science, there are several important issues. First, they need
    to understand their raw data, such as its purpose, structure, how reliable and
    complex it is, and how it is collected. Second, researchers and practitioners
    should have a good method of processing that data. In other words, they should
    master at least one computer language, such as R, Python, or Julia. After learning
    a language''s basics, they should turn to some related packages, since understanding
    these packages might determine how far they can go in the area of data science.
    In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to packages, modules, or toolboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two examples of using packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding all packages in R, Python, Julia, and Octave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task views for R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding manuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package management in R, Python, Julia, and Octave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda-the package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a set of programs in R and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding environmental variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to packages, modules, or toolboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, researchers or users have generated many packages around different
    specific tasks for various programming languages. For this book, we treat *module*
    or *toolbox* as a synonym for *package.* For the analyses in the area of data
    science, it is very important to use various packages to achieve our goals. There
    are several advantages in using various packages. First, we don't have to write
    our code from scratch if we can find some relevant programs contained in certain
    packages. This would save us a huge amount of time. In other words, we don't have
    to reinvent the wheel, and this is especially true for developers. Second, packages
    are usually developed by people who have certain expertise in relevant areas.
    Because of this, the quality of a package is usually higher than the programs
    written by a, relatively speaking, new user. Third, for beginners, the knowledge
    of packaging and related skill sets would help them speed up their learning process.
  prefs: []
  type: TYPE_NORMAL
- en: Two examples of using packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always a good idea to use examples to illustrate how useful or important
    it is to understand some closely related packages. The first example is extremely
    simple: generate a QR code for the CNN website. It has just two lines. Note that
    you need to run `install.packages("qrcode")` if the package is not preinstalled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated QR code is shown here. Users can use the QR scanner installed
    on their cell phone to go to the CNN website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6470e0a7-a4c1-491a-a6d9-5e429c3d185a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the second example, we believe the best example for the researchers and
    users in the area of data science is an R package called `rattle`. If a user hasn''t
    preinstalled the package, they can type the following line of R code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To launch the package, type the following two lines of R code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application is opened follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you hit the *Enter* key, the screen displays the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/857a8a46-2c84-4be7-a3b8-10ce066a4704.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a powerful package for users in the area of data science. If we take
    the Project, Tools, Settings, and Help tabs as the first row, then the default
    location after we launch the package is on the Data tab (see the third row). Under
    Data, we can see that there are eight ways to retrieve data. Assume that we choose
    R Dataset. The advantage of this choice is that we can generate our own dataset
    with a data frame format. The following line of R code will retrieve the historical
    data for IBM. Users can also go to Yahoo! finance at [https://finance.yahoo.com](https://finance.yahoo.com)
    to download a more updated dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After clicking R Dataset, followed by the down arrow key to the right of Data
    Name, we will see x. Select it and click Execute – we will see the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce9c6f64-5dc9-4643-b592-1a728e9f1a6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Explore, we can see several options on how to look at this specific
    dataset. For the Summary of the dataset, we have the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e59e39db-5cc7-40d0-aeb7-d06066a85087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is our third example. Click Data | Library, and then choose the
    Titanic dataset, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3efdb22a-3214-4ca9-905c-f8def0c8f33d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Execute, the screen will display the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ebc4cade-0842-4425-816c-7cde82712aef.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's try to use a decision tree to find out the impacts of **Sepal.Length**,
    **Sepal.width**, **Petal.Length**, and **Petal.width** on the classification of
    **Species**.
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Species **as our target variable as shown in the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Model | Tree | Execute. From that, we will get the following result.
    To make our presentation better, the final output is divided into two parts. The
    top part is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7af1b79e-b470-4265-a399-1c07b93b7852.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second part is shown next. On the right-hand side of the previous screenshot,
    we can see Draw, which can be used to draw a decision tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f31bdbc6-4507-469f-86cb-b39b878316ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other hand, we can draw a decision tree based on the previous result
    by clicking on Draw (see the following diagram):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf74d646-03c8-48b3-a3f7-b1275a7d5d6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous tree, the first layer or question is whether the **Petal.Length**
    is smaller than **2.6** or not. From the green box, we know that there were 100%
    change that it is **setosa**. If the answer is **no** (that is, the **Petal.Length**
    is bigger than **2.6**), we have another question: is the **Petal.Length** is
    longer than **4.8**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on Rules, we will see several layers of rules, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Another great thing is that we can recover the R program or R scripts to run
    the previous decision tree model, after clicking on Log. To save space, the related
    graph and script will not be shown here. The related code can be found at the
    bottom of the log file, where users can save it or copy and paste it to generate
    their own program. Readers will find it at [http://.canisius.edu/~yany/R/iris02.txt](http://.canisius.edu/~yany/R/iris02.txt) (This
    link will be active from June 2018).
  prefs: []
  type: TYPE_NORMAL
- en: Finding all R packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For R-related packages, go to [http://r-project.org](http://r-project.org)
    first. Click on CRAN and choose a mirror location, then click Packages on the
    left-hand side. We can see two lists, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eebc1e16-8ff2-47a4-a5a0-b6a6fd1f27ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On February 22, 2018, there are 12,173 R packages available. The first list
    contains all available packages sorted by their publication dates (that is, the
    dates they updated, or published if they were never updated). The second list
    is sorted by their names. If we just want to find relevant packages, either list
    will be fine. For example, for the first list, here is a snapshot of a few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05c693e8-6578-45df-959c-00d2ad1e3c08.png)'
  prefs: []
  type: TYPE_IMG
- en: The first column shows when the packages were last updated, or published if
    no updates were available. The second column shows the names of the packages,
    while the last column offers a short description of the usage for each package.
    We can use keywords to find the packages we want. Later in the chapter, we will
    discuss **task views**, which is a summary of all the related R packages around
    a topic.
  prefs: []
  type: TYPE_NORMAL
- en: Finding all Python packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find all Python packages, we can go to [https://pypi.python.org/](https://pypi.python.org/).
    The following screenshot shows the top part of the website. As of February 22,
    2018, there are 130,230 packages available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8c13db3-9e5f-4156-a3d7-bf5864440eb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find the packages we want, just click Browse packages and use keywords.
    For example, after entering `Data Science`, we will see the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5925270-9473-402d-91ed-658d5d3f7066.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous screenshot, we can see three columns: the first one gives
    the name of the package; the second one is called Weight, which can be viewed
    as the popularity index; and the last one offers a short description. The related
    URL is [https://pypi.python.org/pypi?%3Aaction=search&term=data+science&submit=search](https://pypi.python.org/pypi?%3Aaction=search&term=data+science&submit=search).'
  prefs: []
  type: TYPE_NORMAL
- en: Finding all Julia packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the packages written in Julia, we can go to [https://pkg.julialang.org/](https://pkg.julialang.org/).
    As of February 22, 2018, there are 1,725 packages available, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca4a4ed4-57f8-4dbb-b426-43f9f5e3ab25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, we can use keywords to search this list. For example, if we use `data`
    as our keyword, we will find 94 locations – the first one is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19000b7f-80d5-47b7-8275-ca8d39ad1b0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Finding all Octave packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At [https://octave.sourceforge.io/packages.php](https://octave.sourceforge.io/packages.php),
    we can find a list of all available packages for Octave:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed830aff-6d9a-48bd-be93-701f691fbe35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, we can search for keywords. If the word  `data` is used, we will find
    10 locations – the first few are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ade8641-e758-4fc3-a0b4-bb4e695fa68f.png)'
  prefs: []
  type: TYPE_IMG
- en: Task views for R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A task view is a set of R packages grouped by one or more experts around a
    specific topic. For example, for data visualization, we could choose the task
    view called Graphics. For a text analysis, we could choose the NaturalLanguageAnalysis
    task view. To find a list of all these task views, we can go to the R home page
    at [http://r-project.org](http://r-project.org). After clicking CRAN, choose a
    mirror server, then click Task Views on the left-hand side. The following screen
    will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f19bddd2-c7d8-4b90-a9a1-8aa7b4cdcbda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we are interested in data visualization, then we can click on Graphics (see
    the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45168e36-cc4e-4a6a-9175-31ac514124cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To save space, only the top part is shown. The task view gives many R-related
    packages around the topics of **Graphic Display & Visualization**. Another great
    benefit is installing all related packages by issuing just three lines of R code.
    Assume that we are interested in the task view related to finance. We can install
    all R packages listed with the task view by issuing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To update a specific view, we use the R function `update.views()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finding manuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For an R package, the best way to find the manual is to find the location of
    the installed R package. In the following example, we use the R package called
    `rattle` as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that different readers will definitively get different paths. Our result
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad343331-59d8-4720-9283-c988b011a2e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The PDF manual and HTML manuals are located under the `doc` subdirectory. It
    is a great idea to explore these subdirectories. To save space, we will not show
    the detailed files contained under the subdirectories. The second best way is
    to go to [http://r-project.org](http://r-project.org), click `CRAN`, choose a
    nearby mirror location and click packages on the left-hand side. Then, from one
    of the two lists, search for the package. After clicking on the package, we will
    find the PDF file. For Python documentation, we can visit two websites  [https://www.python.org/doc/](https://www.python.org/doc/)
    and [https://packaging.python.org/](https://packaging.python.org/). The second
    one is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47ad178c-8441-443d-bdfe-1495060ead4e.png)'
  prefs: []
  type: TYPE_IMG
- en: To find related manuals for Julia and Octave, we can go to the website of the
    related package and find more information. Again, the two related websites are
    [https://pkg.julialang.org/](https://pkg.julialang.org/) and [https://octave.sourceforge.io/packages.php](https://octave.sourceforge.io/packages.php).
  prefs: []
  type: TYPE_NORMAL
- en: Package dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of package dependencies. The first one is the package depending
    on the version of underlying software. For example, take the Octave package called
    `statistics`, available at [https://octave.sourceforge.io/statistics](https://octave.sourceforge.io/statistics).
    On February 22, 2018, it has a version of **1.3.0** and it requires an underlying
    Octave with a version of at least **4.0.0**, as shown in the last line of the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cbc000b-8527-4c47-9cd6-086dd368a186.png)'
  prefs: []
  type: TYPE_IMG
- en: The second type of dependency is between packages. Developers of various packages
    use many functions embedded in other developed packages. Not only does this save
    time, but it also means they don't have to reinvent the wheel. From the last line
    of the previous screenshot, we know that this package depends on another Octave
    package called `io`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following, we show the process of installation. First, we download the
    ZIP file from [https://octave.sourceforge.io/statistics/](https://octave.sourceforge.io/statistics/).
    After using the correct path directing us to the ZIP file, we issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `error` message indicates that we have to install another package first.
    After installing the `io` package, the problem is solved, and here is the result
    after issuing the previous command the second time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For information about changes from previous versions of the `statistics` package,
    run  `news statistics`. Most of the time, users should not worry about package
    dependencies since many packages will update those packages automatically when
    we install them.
  prefs: []
  type: TYPE_NORMAL
- en: Package management in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three ways to install an R package. The first way is to use the `install.packages()`
    function. For example, assume that we plan to install an R package called `rattle`.
    We can use the following code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way is to click Packages on the menu bar, choose a mirror location,
    then find the R package from a list (see the following screenshot showing the
    top part of the list):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a343207-84b1-4fa3-9445-efb590b97d89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third way to install an R package is to install it from a local ZIP file.
    To do so, first, manually download a ZIP file to your computer. Then click Packages
    on the menu bar and choose Install package(s) from local files..., as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23a7ffd4-df99-46ea-8f34-5022cce98fea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To update a package, click Packages on the menu bar, then choose Update packages...
    from the drop-down menu (that is, the fifth entry in the previous screenshot).
    Another way to update is to use the update.packages() function, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists the most frequently used commands related to handling
    R packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Action** | **R command** |'
  prefs: []
  type: TYPE_TB
- en: '| Load an R package | `>library(rattle)``>require(rattle)` |'
  prefs: []
  type: TYPE_TB
- en: '| Install a package | `>install.packages("rattle")` |'
  prefs: []
  type: TYPE_TB
- en: '| Update a package | `>update.packages("rattle")` |'
  prefs: []
  type: TYPE_TB
- en: '| List all loaded packages | `>search()` |'
  prefs: []
  type: TYPE_TB
- en: '| List all preinstall packages | `>library()` |'
  prefs: []
  type: TYPE_TB
- en: '| XML package loaded or not | `>"package:XML" %in% search()` |'
  prefs: []
  type: TYPE_TB
- en: '| XML package installed or not | `>"package:XML" %in% .packages(all.available=T)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Unload a package | `detach(package:rattle)``>detach("package:rattle",unload=TRUE)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Find more information | `help(package=rattle)``>library(help="rattle")` |'
  prefs: []
  type: TYPE_TB
- en: Table 6.1 R commands for handling packages
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned before, we could install all R packages listed within a specific
    task view by issuing just three lines of code. Since machine learning is one of
    the most important areas for data science, the related task view will be used
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As of February 22, 2018, there are about 168 R packages (see a list at [http://canisius.edu/~yany/doc/taskViewMachineLearning.txt](http://canisius.edu/~yany/doc/taskViewMachineLearning.txt)). We
    can also update its specific view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Package management in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use conda to install Python-related packages (see the related section
    later in the chapter). If we have various Python compilers, we can install Python
    packages easily. For example, if we use the Canopy compiler by `Enthought`, we
    can use Package Manager, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4f448bf-2449-451d-91c7-7fd5f634a70f.png)'
  prefs: []
  type: TYPE_IMG
- en: From this, we can find out how many packages were installed and how many are
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s quite simple to install or update a package. For example, to install
    a package, we simply choose one from the list. The same logic applies when we
    update one. To find all embedded functions within a package, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The related screenshot is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/579e9b75-1810-4505-90ad-6159ab5398ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Package management in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see a list of installed packages, we use the `Pkg.status()` function, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/384dd845-a6d3-4d8a-8db5-11e1ec3cd5da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To save space, only the first several lines are shown. Alternatively, we can
    issue `Pkg.installed()`, which returns a dictionary, mapping installed package
    names to the versions of those which are installed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3c07f10-e576-4ca5-aa2b-c801799960f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add or remove a package, we apply the `Pkg.add()` and `Pkg.rm()` functions,
    as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all the latest versions, we issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Package management in Octave
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the Octave package called `statistics` as an example. First, we
    find the ZIP file for the package at [https://octave.sourceforge.io/statistics/](https://octave.sourceforge.io/statistics/),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d410c3a-5434-440b-8010-b9385e66b001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Second, we set up our path to the directory containing the previously downloaded
    ZIP file. Third, we issue `pkg install package_name`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For information about changes from previous versions of the `statistics` package,
    run `news statistics`. To get more information about the new version, we type
    `news statistics` as mentioned previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f41c3c8f-dc16-4e6f-8e14-e4e97f17362d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To load and unload a package, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As for all the other functions included in the `statistics` package, see [https://octave.sourceforge.io/statistics/overview.html](https://octave.sourceforge.io/statistics/overview.html).
  prefs: []
  type: TYPE_NORMAL
- en: Conda – the package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we launch Anaconda Prompt and issue `conda help`, we will see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bb6556a-d35f-4ab9-a67e-17fdc29e88d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the previous help menu, we know that we can install, update, and uninstall
    a package. Usually, we can use `conda` to install a package. However, we may receive
    an error message (see the following example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32bbc595-8a56-40ed-80ab-8dfaf41cd484.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To update conda itself, we use `conda update -n base conda` command, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25b12823-2fc3-445a-8abc-4bf719a1e5e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We could find more information about specific Python packages by using the
    search function, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/456f341a-4ef9-463d-9dc0-79b9e6f1ae8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table lists several of the most used commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `Conda help``Conda info` | Get help about the usages of `conda` |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update -n base conda` | Get information related to `conda`, such as
    the current version, base environment and the related websites |'
  prefs: []
  type: TYPE_TB
- en: '| `conda search matplotlib` | Find all versions about this specific Python
    package |'
  prefs: []
  type: TYPE_TB
- en: '| `conda install matploblit` | Install the Python package called `matplotlib`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update matploblit` | Update the Python packaged called `matplotlib`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conda remove matploblit` | Remove the Python package called `matplotlib`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 6.2 Most used Conda commands
  prefs: []
  type: TYPE_NORMAL
- en: Creating a set of programs in R and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On numerous occasions, for a specific research topic, researchers will collect
    many datasets and write many programs. Why not write a big program? There are
    several reasons for not doing so. First, we might need several steps to finish
    the project. Second, the project might be too complex, so we have divided the
    whole project into several small portions. Each researcher will be responsible
    for one or a few portions. Third, according to the flow of the whole process,
    we might want to have several parts, such as devoting a part to processing data,
    a part to running various regressions, and a part to summarizing the results.
    Because of this, we need a way of putting all the programs together. In the following
    example, we will show you how to achieve this in both R and Python. For R, assume
    that we have the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To make our task easy, we deliberately chose these one-line functions. Assume
    that the file is called `financalCalculator.R` under `c:/temp`. We use the `source()`
    command to activate them and use the `ls()` function to list all contained functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For Python, we can generate a file containing all related functions. Then we
    can use an import function to load them all. First, download a Python program
    at [http://canisius.edu/~yany/python/myPackage.py](http://canisius.edu/~yany/python/myPackage.py).
    Assume that it is saved under `c:/temp`/. We type the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering these two lines, we have generated a file with an extension
    of `pyc`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a81a1722-a13e-4717-96c7-fcd4c70d77c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can use the import function to import the contained functions, as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the first command adds `c:/temp/` to the path, while the second one
    imports our package. The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fca015e0-0ec3-4b22-b2f5-ef5d4eeee01b.png)'
  prefs: []
  type: TYPE_IMG
- en: Finding environmental variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For R, we can use the `Sys.getenv()` function to find all environmental variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a55d650a-fe07-4eee-9f84-b0e71deb3967.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To save space, only the top part is shown. Again, different users will get
    different results. For Python, we use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The top part of the output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b79931f-e13e-4929-ade6-7fd15a45c2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For Julia, we use the `ENV` function, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/458f07ec-19f7-4b92-b47c-75bd396ca010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For Octave, we can use the `getenv()` function, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have first discussed the importance of managing packages.
    Then, we have shown how to find all the available packages for R, Python, Julia,
    and Octave, how to install and update individual packages, and how to find the
    manual for teaching the packages. In addition, we have explained the issue of
    package dependencies and how to make our programming a little easier when dealing
    with packages. The topic of systematic environment was touched on as well.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](d21074f6-dd03-4801-bd06-995b58b56947.xhtml), *Optimization in
    Anaconda*, we will discuss several topics around optimization, such as general
    issues for optimization problems and expressing various kinds of optimization
    problems (for example, LP and quadratic optimization). Several examples are offered
    to make our discussion more practice-oriented, such as how to choose an optimal
    stock portfolio and how to optimize wealth and resources to promote sustainable
    development and how much the government should tax. In addition, we will introduce
    several packages for optimization in R, Python, Julia, and Octave, such as `optimization`,
    `MlBayesOpt`, `rgenoud`, `colf`, and `mize`.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is understanding various packages important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are package dependencies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For R, Python, Julia, and Octave, find out how many packages are available for
    each of them, today.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we install a package in R, Python, and Julia?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we update a package in R, Python, and Julia?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the task view for R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we install all R packages included in a task view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After an R package is installed, how do you find its related directory? What
    is the usage to find its related directory? You could use the R package called
    `healthcare` as an example. Note that the package is about tools for healthcare
    machine learning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find out more details about the task views related to the subject of Econometrics.
    Then install all related R packages. How many are there?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we update one R package? How would we do it for Octave?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we find the manual for a specific package written in R, Python, Julia,
    or Octave?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a subject, such as graph, data visualization, find 10 packages for each
    language of R, Python, Julia, and Octave. Use machine learning as an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write an R program to test if a specific R package is loaded or not. If it is
    not loaded but preinstalled, then load the R package. Also, if the R package is
    not installed, then remind users to install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we use conda to install a Python package called `Matplotlib`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can we find the manual related to a Python package called `Matplotlib`?
    How do we find all the embedded functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we find the manual for an R package called Stats?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For exchanging data between Excel and R, we can use an R package called `XLConnect`.
    Install the package and issue the following two lines. Comment on your result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Try about a dozen R packages to see if the function is valid for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: How do we find the so-called environment variables in R, Python, Julia, and
    Octave?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate two dozen R programs around a topic, such as text mining. Save them
    within one file. Activate them and use them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous exercise for the Python language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
