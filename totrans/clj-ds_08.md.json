["```py\nscript/download-data.sh\n\n```", "```py\n(defn to-long [l]\n  (Long/parseLong l))\n\n(defn line->edge [line]\n  (->> (str/split line #\" \")\n       (mapv to-long)))\n\n(defn load-edges [file]\n  (->> (io/resource file)\n       (io/reader)\n       (line-seq)\n       (map line->edge)))\n\n(defn ex-8-1 []\n  (load-edges \"twitter/98801140.edges\"))\n```", "```py\nlein run –e 8.1\n;;([100873813 3829151] [35432131 3829151] [100742942 35432131]\n;;  [35432131 27475761] [27475761 35432131])\n\n```", "```py\ndot –V\n\n```", "```py\n(defn ex-8-2 []\n  (->> (load-edges \"twitter/98801140.edges\")\n       (apply loom/graph)\n       (lio/view)))\n```", "```py\n(defn ex-8-3 []\n  (->> (load-edges \"twitter/98801140.edges\")\n       (apply loom/digraph)\n       (lio/view)))\n```", "```py\n(defn ex-8-4 []\n  (->> (load-edges \"twitter/98801140.edges\")\n       (apply loom/weighted-digraph)\n       (lio/view)))\n```", "```py\n(defneuler-tour? [graph]\n  (let [degree (partial loom/out-degree graph)]\n    (->> (loom/nodes graph)\n         (filter (comp odd? degree))\n         (count)\n         (contains? #{0 2}))))\n```", "```py\n(defn ex-8-5 []\n  (let [graph (->> (load-edges \"twitter/98801140.edges\")\n                   (apply loom/digraph))]\n    (alg/bf-traverse graph 100742942)))\n\n;;(100742942 35432131 27475761 3829151)\n```", "```py\n(defn ex-8-6 []\n  (let [graph (->> (load-edges \"twitter/98801140.edges\")\n                   (apply loom/digraph))]\n    (alg/pre-traverse graph 100742942)))\n\n;;(100742942 35432131 3829151 27475761)\n```", "```py\n(defn ex-8-7 []\n  (->> (load-edges \"twitter/396721965.edges\")\n       (apply loom/digraph)\n       (lio/view)))\n```", "```py\n(defn ex-8-8 []\n  (let [graph (->> (load-edges \"twitter/396721965.edges\")\n                   (apply loom/digraph))]\n    (alg/bf-path graph 75914648 32122637)))\n\n;;(75914648 28719244 163629705 32122637)\n```", "```py\n(defn ex-8-9 []\n  (let [graph (->> (load-edges \"twitter/396721965.edges\")\n                   (apply loom/weighted-digraph))]\n    (-> (loom/add-edges graph [28719244 163629705 100])\n        (alg/dijkstra-path 75914648 32122637))))\n\n;;(75914648 28719244 31477674 163629705 32122637)\n```", "```py\n(defn ex-8-10 []\n  (let [graph (->> (load-edges \"twitter/396721965.edges\")\n                   (apply loom/weighted-graph))]\n    (-> (alg/prim-mst graph)\n        (lio/view))))\n```", "```py\n(defn ex-8-11 []\n  (let [graph (->> (load-edges \"twitter/396721965.edges\")\n                   (apply loom/weighted-graph))]\n    (-> (loom/add-edges graph [28719244 163629705 100])\n        (alg/prim-mst)\n        (lio/view))))\n```", "```py\n(defn ex-8-12 []\n  (->> (load-edges \"twitter/15053535.edges\")\n       (apply loom/graph)\n       (lio/view)))\n```", "```py\n(defn ex-8-13 []\n  (->> (load-edges \"twitter/15053535.edges\")\n       (apply loom/graph)\n       (alg/connected-components)))\n\n;;[[30705196 58166411] [25521487 34173635 14230524 52831025 30973\n;; 55137311 50201146 19039286 20978103 19562228 46186400\n;;14838506 14596164 14927205] [270535212 334927007]]\n```", "```py\n(defn ex-8-14 []\n  (->> (load-edges \"twitter/15053535.edges\")\n       (apply loom/digraph)\n       (lio/view)))\n```", "```py\n(defn ex-8-15 []\n  (->> (load-edges \"twitter/15053535.edges\")\n       (apply loom/digraph)\n       (alg/scc)\n       (count)))\n\n;; 13\n```", "```py\n(defn ex-8-16 []\n  (->> (load-edges \"twitter/15053535.edges\")\n       (apply loom/digraph)\n       (alg/scc)\n       (sort-by count >)\n       (first)))\n\n;;[14927205 14596164 14838506]\n```", "```py\n(defn ex-8-17 []\n  (->> (load-edges \"twitter_combined.txt\")\n       (apply loom/digraph)\n       (alg/density)\n       (double)))\n\n;; 2.675E-4\n```", "```py\n(defn ex-8-18 []\n  (let [graph (->> (load-edges \"twitter_combined.txt\")\n                   (apply loom/digraph))\n        out-degrees (map #(loom/out-degree graph %)\n                         (loom/nodes graph))]\n    (-> (c/histogram out-degrees :nbins 50\n                     :x-label \"Twitter Out Degrees\")\n        (i/view))))\n```", "```py\n(defn ex-8-20 []\n  (let [graph (generate/gen-rand (loom/graph) 10000 1000000)\n        out-degrees (map #(loom/out-degree graph %)\n                         (loom/nodes graph))]\n    (-> (c/histogram out-degrees :nbins 50\n                     :x-label \"Random out degrees\")\n        (i/view))))\n```", "```py\n(defn ex-8-21 []\n  (let [graph (->> (load-edges \"twitter_combined.txt\")\n                   (apply loom/digraph))\n        out-degrees (map #(loom/out-degree graph %)\n                         (loom/nodes graph))\n        points (frequencies out-degrees)]\n    (-> (c/scatter-plot (keys points) (vals points))\n        (c/set-axis :x (c/log-axis :label \"log(out-degree)\"))\n        (c/set-axis :y (c/log-axis :label \"log(frequency)\"))\n        (i/view))))\n```", "```py\n (defn ex-8-22 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (let [vertices [[1 \"A\"] [2 \"B\"] [3 \"C\"]]\n          edges [(g/edge 1 2 0.5)\n                 (g/edge 2 1 0.5)\n                 (g/edge 3 1 1.0)]]\n      (g/graph (spark/parallelize sc vertices)\n               (spark/parallelize sc edges)))))\n\n;; #<GraphImpl org.apache.spark.graphx.impl.GraphImpl@adb2324>\n```", "```py\n(defn line->edge [line]\n  (let [[from to] (map to-long (str/split line #\" \"))]\n    (g/edge from to 1.0)))\n\n(defn load-edgelist [sc path]\n  (let [edges (->> (spark/text-file sc path)\n                   (spark/map line->edge))]\n    (g/graph-from-edges edges 1.0)))\n\n(defn ex-8-23 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (load-edgelist sc \"data/twitter_combined.txt\")))\n\n;;#<GraphImpl org.apache.spark.graphx.impl.GraphImpl@c63044d>\n```", "```py\n(defn line->canonical-edge [line]\n  (let [[from to] (sort (map to-long (str/split line #\" \")))]\n    (glitter/edge from to 1.0)))\n\n(defn load-canonical-edgelist [sc path]\n  (let [edges (->> (spark/text-file sc path)\n                   (spark/map line->canonical-edge))]\n    (glitter/graph-from-edges edges 1.0)))\n```", "```py\n(defn ex-8-24 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (let [triangles (->> (load-canonical-edgelist\n                          sc \"data/twitter_combined.txt\")\n                         (g/partition-by :random-vertex-cut)\n                         (ga/triangle-count)\n                         (g/vertices)\n                         (to-java-pair-rdd)\n                         (spark/values)\n                         (spark/collect)\n                         (into []))\n          data (frequencies triangles)]\n      (-> (c/scatter-plot (keys data) (vals data))\n          (c/set-axis :x (c/log-axis :label \"# Triangles\"))\n          (c/set-axis :y (c/log-axis :label \"# Vertices\"))\n          (i/view)))))\n```", "```py\n(defn triangle-m [{:keys [src-id src-attr dst-id dst-attr]}]\n  (let [c (count (set/intersection src-attr dst-attr))]\n    {:src c :dst c}))\n\n(defn triangle-count [graph]\n  (let [graph (->> (g/partition-by :random-vertex-cut graph)\n                   (g/group-edges (fn [a b] a)))\n        adjacent (->> (g/collect-neighbor-ids :either graph)\n                      (to-java-pair-rdd)\n                      (spark/map-values set))\n        graph (g/outer-join-vertices\n               (fn [vid attr adj] adj) adjacent graph)\n        counters (g/aggregate-messages triangle-m + graph)]\n    (->> (g/outer-join-vertices (fn  [vid vattr counter]\n                                  (/ counter 2))\n                                counters graph)\n         (g/vertices))))\n```", "```py\n(defn ex-8-25 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"triangle-count\"))\n    (->> (load-canonical-edgelist\n          sc \"data/twitter/396721965.edges\")\n         (triangle-count)\n         (spark/collect)\n         (into []))))\n\n;; #sparkling/tuple [21938120 1] #sparkling/tuple [31477674 3]\n;; #sparkling/tuple [32122637 0] ...]\n```", "```py\n(defn ex-8-26 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"triangle-count\"))\n    (let [triangles (->> (load-canonical-edgelist\n                          sc \"data/twitter_combined.txt\")\n                         (triangle-count)\n                         (to-java-pair-rdd)\n                         (spark/values)\n                         (spark/reduce +))]\n      (/ triangles 3))))\n```", "```py\n(defn connected-component-m [{:keys [src-attr dst-attr]}]\n  (cond\n    (< src-attr dst-attr) {:dst src-attr}\n    (> src-attr dst-attr) {:src dst-attr}))\n\n(defn connected-components [graph]\n  (->> (glitter/map-vertices (fn [id attr] id) graph)\n       (p/pregel {:vertex-fn (fn [id attr msg]\n                               (min attr msg))\n                  :message-fn connected-component-m\n                  :combiner min})))\n```", "```py\n (defn ex-8-27 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"cljds.ch8\"))\n    (->> (load-edgelist sc \"data/twitter/396721965.edges\")\n         (connected-components)\n         (g/vertices)\n         (spark/collect)\n         (into []))))\n\n;; [#sparkling/tuple [163629705 21938120] #sparkling/tuple\n;; [88491375 21938120] #sparkling/tuple [142960504 21938120] ...\n```", "```py\n(defn ex-8-28 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (->> (load-canonical-edgelist\n          sc \"data/twitter_combined.txt\")\n         (connected-components)\n         (g/vertices)\n         (to-java-pair-rdd)\n         (spark/values)\n         (spark/count-by-value)\n         (into []))))\n\n;; [[12 81306]]\n```", "```py\n(defn label-propagation-v [id attr msg]\n  (key (apply max-key val msg)))\n\n(defn label-propagation-m [{:keys [src-attr dst-attr]}]\n  {:src {dst-attr 1}\n   :dst {src-attr 1}})\n\n(defn label-propagation [graph]\n  (->> (glitter/map-vertices (fn [vid attr] vid) graph)\n       (p/pregel {:message-fn label-propagation-m\n                  :combiner (partial merge-with +)\n                  :vertex-fn label-propagation-v\n                  :max-iterations 10})))\n```", "```py\n (defn ex-8-29 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (let [xs (->> (load-canonical-edgelist\n                   sc \"data/twitter_combined.txt\")\n                  (label-propagation)\n                  (g/vertices)\n                  (to-java-pair-rdd)\n                  (spark/values)\n                  (spark/count-by-value)\n                  (vals)\n                  (frequencies))]\n      (-> (c/scatter-plot (keys xs) (vals xs))\n          (c/set-axis :x (c/log-axis :label \"Community Size\"))\n          (c/set-axis :y (c/log-axis :label \"# Communities\"))\n          (i/view)))))\n```", "```py\n(def damping-factor 0.85)\n\n(defn page-rank-v [id prev msgsum]\n  (let [[rank delta] prev\n        new-rank (+ rank (* damping-factor msgsum))]\n    [new-rank (- new-rank rank)]))\n\n(defn page-rank-m [{:keys [src-attr attr]}]\n  (let [delta (second src-attr)]\n    (when (> delta 0.1)\n      {:dst (* delta attr)})))\n\n(defn page-rank [graph]\n  (->> (glitter/outer-join-vertices (fn [id attr deg] (or deg 0))\n                                    (glitter/out-degrees graph)\n                                    graph)\n       (glitter/map-triplets (fn [edge]\n                               (/ 1.0 (glitter/src-attr edge))))\n       (glitter/map-vertices (fn [id attr] (vector 0 0)))\n       (p/pregel {:initial-message (/ (- 1 damping-factor)\n                                      damping-factor)\n                  :direction :out\n                  :vertex-fn page-rank-v\n                  :message-fn page-rank-m\n                  :combiner +\n                  :max-iterations 20})\n       (glitter/map-vertices (fn [id attr] (first attr)))))\n```", "```py\n(defn top-n-by-pagerank [n graph]\n  (->> (page-rank graph)\n       (g/vertices)\n       (to-java-pair-rdd)\n       (spark/map-to-pair\n        (s-de/key-value-fn\n         (fn [k v]\n           (spark/tuple v k))))\n       (spark/sort-by-key false)\n       (spark/take n)\n       (into [])))\n```", "```py\n(defn most-frequent-attributes [graph]\n  (->> (g/vertices graph)\n       (to-java-pair-rdd)\n       (spark/values)\n       (spark/count-by-value)\n       (sort-by second >)\n       (map first)))\n```", "```py\n (defn ex-8-30 []\n  (spark/with-context sc (-> (g/conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch8\"))\n    (let [communities (->> (load-edgelist\n                            sc \"data/twitter_combined.txt\")\n                           (label-propagation))\n          by-popularity (most-frequent-attributes 2 communities)]\n      (doseq [community (take 10 by-popularity)]\n        (println\n         (pagerank-for-community community communities))))))\n```", "```py\n;;[#sparkling/tuple [132.8254006818738 115485051]\n;;#sparkling/tuple [62.13049747055527 62581962]\n;;#sparkling/tuple [49.80716333905785 65357070]\n;;#sparkling/tuple [46.248688749879875 90420314] ...]\n```"]