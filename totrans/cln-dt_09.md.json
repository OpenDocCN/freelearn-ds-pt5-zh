["```py\nhead PostLinks.xml\n\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<postlinks>\n <row Id=\"19\" CreationDate=\"2010-04-26T02:59:48.130\" PostId=\"109\" RelatedPostId=\"32412\" LinkTypeId=\"1\" />\n <row Id=\"37\" CreationDate=\"2010-04-26T02:59:48.600\" PostId=\"1970\" RelatedPostId=\"617600\" LinkTypeId=\"1\" />\n\n```", "```py\nCREATE TABLE post_links (\n  Id INT NOT NULL PRIMARY KEY,\n  CreationDate DATETIME DEFAULT NULL,\n  PostId INT NOT NULL,\n  RelatedPostId INT NOT NULL,\n  LinkTypeId INT DEFAULT NULL\n);\n\nCREATE TABLE tags (\n  Id INT NOT NULL PRIMARY KEY,\n  TagName VARCHAR(50) DEFAULT NULL,\n  Count INT DEFAULT NULL,\n  ExcerptPostId INT DEFAULT NULL,\n  WikiPostId INT DEFAULT NULL\n);\n\nLOAD XML LOCAL INFILE 'PostLinks.xml'\nINTO TABLE post_links\nROWS IDENTIFIED BY '<row>';\n\nLOAD XML LOCAL INFILE 'Tags.xml'\nINTO TABLE tags\nROWS IDENTIFIED BY '<row>';\n```", "```py\nDROP TABLE IF EXISTS test_post_links;\nCREATE TABLE test_post_links (\n  Id INT NOT NULL PRIMARY KEY,\n  CreationDate INT,\n  PostId INT,\n  RelatedPostId INT,\n  LinkTypeId INT\n);\n```", "```py\n    SELECT min(Id) FROM post_links;\n    SELECT max(Id) FROM post_links;\n    ```", "```py\n    SELECT * FROM post_links WHERE Id = [random value];\n    ```", "```py\n<?php //randomizer.php\n// how many rows should be in each of the test tables?\n$table_target_size = 1000;\n\n// connect to db, set up query, run the query\n$dbc = mysqli_connect('localhost','username','password','stackoverflow')\n       or die('Error connecting to database!' . mysqli_error());\n$dbc->set_charset(\"utf8\");\n\n$tables = array(\"badges\",\n    \"comments\",\n    \"posts\",\n    \"post_history\",\n    \"post_links\",\n    \"tags\",\n    \"users\",\n    \"votes\");\n\nforeach ($tables as $table)\n{\n  echo \"\\n=== Now working on $table ===\\n\";\n    $select_table_info = \"SELECT count(Id) as c, min(Id) as mn, max(Id) as mx FROM $table\";\n    $table_info = mysqli_query($dbc, $select_table_info);\n    $table_stuff = mysqli_fetch_object($table_info);\n    $table_count = $table_stuff->c;\n    $table_min = $table_stuff->mn;\n    $table_max = $table_stuff->mx;\n\n    // set up loop to grab a random row and insert into new table\n    $i=0;\n    while($i < $table_target_size)\n    {\n        $r = rand($table_min, $table_max);\n        echo \"\\nIteration $i: $r\";\n        $insert_rowx = \"INSERT IGNORE INTO test_$table (SELECT * FROM $table WHERE Id = $r)\";\n        $current_row = mysqli_query($dbc, $insert_rowx);\n\n        $select_current_count = \"SELECT count(*) as rc FROM test_$table\";\n        $current_count= mysqli_query($dbc, $select_current_count);\n        $row_count = mysqli_fetch_object($current_count)->rc;\n        $i = $row_count;\n    }\n}\n?>\n```", "```py\nCREATE TABLE clean_comments_urls (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  commentId INT NOT NULL,\n  url VARCHAR(255) NOT NULL\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8;\n\nCREATE TABLE IF NOT EXISTS clean_posts_urls (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  postId INT NOT NULL,\n  url VARCHAR(255) NOT NULL\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8;\n```", "```py\nCREATE TABLE clean_posts_code (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  postId INT NOT NULL,\n  code TEXT NOT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```", "```py\n<?php // urlExtractor.php\n// connect to db\n$dbc = mysqli_connect('localhost', 'username', 'password', 'stackoverflow')\n    or die('Error connecting to database!' . mysqli_error());\n$dbc->set_charset(\"utf8\");\n\n// pull out the text for posts with\n// postTypeId=1 (questions)\n// or postTypeId=2 (answers)\n$post_query = \"SELECT Id, Body\n    FROM test_posts\n    WHERE postTypeId=1 OR postTypeId=2\";\n\n$comment_query = \"SELECT tc.Id, tc.Text\n    FROM test_comments tc\n    INNER JOIN posts p ON tc.postId = p.Id\n    WHERE p.postTypeId=1 OR p.postTypeId=2\";\n\n$post_result = mysqli_query($dbc, $post_query);\n// die if the query failed\nif (!$post_result)\n    die (\"post SELECT failed! [$post_query]\" .  mysqli_error());\n\n// pull out the URLS, if any\n$urls = array();\n$pattern  = '#\\b(([\\w]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))#';\n\nwhile($row = mysqli_fetch_array($post_result))\n{\n    echo \"\\nworking on post: \" . $row[\"id\"];\n    if (preg_match_all(\n        $pattern,\n        $row[\"Body\"],\n        $urls\n    ))\n    {\n        foreach ($urls[0] as $url)\n        {\n          $url = mysqli_escape_string($dbc, $url);\n            echo \"\\n----url: \".$url;\n            $post_insert = \"INSERT INTO clean_posts_urls (id, postid, url)\n                VALUES (NULL,\" . $row[\"Id\"] . \",'$url')\";\n            echo \"\\n$post_insert\";\n            $post_insert_result = mysqli_query($dbc, $post_insert);\n        }\n    }\n}\n\n$comment_result = mysqli_query($dbc, $comment_query);\n// die if the query failed\nif (!$comment_result)\n    die (\"comment SELECT failed! [$comment_query]\" .  mysqli_error());\n\nwhile($row = mysqli_fetch_array($comment_result))\n{\n    echo \"\\nworking on comment: \" . $row[\"id\"];\n    if (preg_match_all(\n        $pattern,\n        $row[\"Text\"],\n        $urls\n    ))\n    {\n        foreach ($urls[0] as $url)\n        {\n            echo \"\\n----url: \".$url;\n            $comment_insert = \"INSERT INTO clean_comments_urls (id, commentid, url)\n                VALUES (NULL,\" . $row[\"Id\"] . \",'$url')\";\n            echo \"\\n$comment_insert\";\n            $comment_insert_result = mysqli_query($dbc, $comment_insert);\n        }\n    }\n}\n?>\n```", "```py\n<?php // codeExtractor.php\n// connect to db\n$dbc = mysqli_connect('localhost', 'username, 'password', 'stackoverflow')\n    or die('Error connecting to database!' . mysqli_error());\n$dbc->set_charset(\"utf8\");\n\n// pull out the text for posts with\n// postTypeId=1 (questions)\n// or postTypeId=2 (answers)\n$code_query = \"SELECT Id, Body\n    FROM test_posts\n    WHERE postTypeId=1 OR postTypeId=2\n    AND Body LIKE '%<code>%'\";\n\n$code_result = mysqli_query($dbc, $code_query);\n// die if the query failed\nif (!$code_result)\n    die (\"SELECT failed! [$code_query]\" .  mysqli_error());\n\n// pull out the code snippets from each post\n$codesnippets = array();\n$pattern  = '/<code>(.*?)<\\/code>/';\n\nwhile($row = mysqli_fetch_array($code_result))\n{\n    echo \"\\nworking on post: \" . $row[\"Id\"];\n    if (preg_match_all(\n        $pattern,\n        $row[\"Body\"],\n        $codesnippets\n    ))\n    {\n      $i=0;\n        foreach ($codesnippets[0] as $code)\n        {\n          $code = mysqli_escape_string($dbc, $code);\n            $code_insert = \"INSERT INTO clean_posts_code (id, postid, code)\n                VALUES (NULL,\" . $row[\"Id\"] . \",'$code')\";\n            $code_insert_result = mysqli_query($dbc, $code_insert);\n            if (!$code_insert_result)\n                die (\"INSERT failed! [$code_insert]\" .  mysqli_error());\n            $i++;\n        }\n        if($i>0)\n        {\n          echo \"\\n   Found $i snippets\";\n        }\n    }\n}\n?>\n```", "```py\n<?php // q1.php\n// connect to db\n$dbc = mysqli_connect('localhost', 'username', 'password', 'stackoverflow')\n    or die('Error connecting to database!' . mysqli_error());\n$dbc->set_charset(\"utf8\");\n\n// these are the web urls we want to look for and count\n$pastebins = array(\"pastebin\",\n    \"jsfiddle\",\n    \"gists\",\n    \"jsbin\",\n    \"dpaste\",\n    \"pastie\");\n$pastebin_counts = array();\n\nforeach ($pastebins as $pastebin)\n{\n    $url_query = \"SELECT count(id) AS cp,\n          (SELECT count(id)\n          FROM clean_comments_urls\n          WHERE url LIKE '%$pastebin%') AS cc\n        FROM clean_posts_urls\n        WHERE url LIKE '%$pastebin%'\";\n    $query = mysqli_query($dbc, $url_query);\n    if (!$query)\n        die (\"SELECT failed! [$url_query]\" .  mysqli_error());\n    $result = mysqli_fetch_object($query);\n    $countp = $result->cp;\n    $countc = $result->cc;\n    $sum = $countp + $countc;\n\n    array_push($pastebin_counts, array('bin' => $pastebin,\n                                        'count' => $sum));\n}\n// sort the final list before json encoding it\n// put them in order by count, high to low\nforeach ($pastebin_counts as $key => $row)\n{\n    $first[$key]  = $row['bin'];\n    $second[$key] = $row['count'];\n}\n\narray_multisort($second, SORT_DESC, $pastebin_counts);\necho json_encode($pastebin_counts);\n?>\n```", "```py\n[{\"bin\":\"jsfiddle\",\"count\":44},{\"bin\":\"jsbin\",\"count\":4},{\"bin\":\"pastebin\",\"count\":3},{\"bin\":\"dpaste\",\"count\":0},{\"bin\":\"gists\",\"count\":0},{\"bin\":\"pastie\",\"count\":0}]\n```", "```py\nSELECT tp.postTypeId, COUNT(cpu.id)\nFROM test_posts tp\nINNER JOIN clean_posts_urls cpu ON tp.Id = cpu.postid\nGROUP BY 1;\n```", "```py\nSELECT  tp.postTypeId, count(cpu.id)\nFROM test_posts tp\nINNER JOIN clean_posts_urls cpu ON tp.Id = cpu.postId\nWHERE cpu.url LIKE '%jsfiddle%'\nOR cpu.url LIKE '%jsbin%'\nOR cpu.url LIKE '%pastebin%'\nOR cpu.url LIKE '%dpaste%'\nOR cpu.url LIKE '%gist%'\nOR cpu.url LIKE '%pastie%'\nGROUP BY 1;\n```", "```py\nSELECT tp.postTypeId, COUNT(DISTINCT cpu.postId)\nFROM test_posts tp\nINNER JOIN clean_posts_urls cpu ON tp.Id = cpu.postId\nGROUP BY 1;\n```", "```py\nSELECT  tp.postTypeId, count(DISTINCT cpu.postId)\nFROM test_posts tp\nINNER JOIN clean_posts_urls cpu ON tp.Id = cpu.postId\nWHERE cpu.url LIKE '%jsfiddle%'\nOR cpu.url LIKE '%jsbin%'\nOR cpu.url LIKE '%pastebin%'\nOR cpu.url LIKE '%dpaste%'\nOR cpu.url LIKE '%gist%'\nOR cpu.url LIKE '%pastie%'\nGROUP BY 1;\n```", "```py\nSELECT count(DISTINCT postid)\nFROM clean_posts_code;\n```", "```py\nSELECT count(DISTINCT cpc.postid)\nFROM clean_posts_code cpc\nINNER JOIN clean_posts_urls cpu\nON cpu.postId = cpc.postId;\n```", "```py\nSELECT count(DISTINCT cpc.postid)\nFROM clean_posts_code cpc\nINNER JOIN clean_posts_urls cpu\nON cpu.postId = cpc.postId\nWHERE cpu.url LIKE '%jsfiddle%'\nOR cpu.url LIKE '%jsbin%'\nOR cpu.url LIKE '%pastebin%'\nOR cpu.url LIKE '%dpaste%'\nOR cpu.url LIKE '%gist%'\nOR cpu.url LIKE '%pastie%';\n```", "```py\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<!--\nthis code is modeled on mbostock's\n\"Let's Make a Bar Chart\" D3 tutorial\navailable at http://bl.ocks.org/mbostock/3885304\nMy modifications:\n* formatting for space\n* colors\n* y axis labels\n* changed variable names to match our data\n* loads data via JSON rather than .tsv file\n-->\n\n<style>\n.bar {fill: lightgrey;}\n.bar:hover {fill: lightblue;}\n.axis {font: 10px sans-serif;}\n.axis path, .axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n.x.axis path {display: none;}\n</style>\n<body>\n<script src=\"img/d3.min.js\"></script>\n<script>\n\nvar margin = {top: 20, right: 20, bottom: 30, left: 40},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.ordinal()\n    .rangeRoundBands([0, width], .1);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\nvar yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nd3.json(\"bincounter.php\", function(error, json)\n{\n    data = json;\n    draw(data);\n});\n\nfunction draw(data)\n{\n  x.domain(data.map(function(d) { return d.bin; }));\n  y.domain([0, d3.max(data, function(d) { return d.count; })]);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n    .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".71em\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Frequency\");\n\n  svg.selectAll(\".bar\")\n      .data(data)\n    .enter().append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", function(d) { return x(d.bin) ; })\n      .attr(\"width\", x.rangeBand())\n      .attr(\"y\", function(d) { return y(d.count); })\n      .attr(\"height\", function(d) { return height - y(d.count); });\n}\n\n</script>\n</body>\n</html>\n```", "```py\n    DROP TABLE IF EXISTS test_badges;\n    DROP TABLE IF EXISTS test_comments;\n    DROP TABLE IF EXISTS test_posts;\n    DROP TABLE IF EXISTS test_post_history;\n    DROP TABLE IF EXISTS test_post_links;\n    DROP TABLE IF EXISTS test_tags;\n    DROP TABLE IF EXISTS test_users;\n    DROP TABLE IF EXISTS test_votes;\n    ```", "```py\n    TRUNCATE TABLE cleaned_posts_code;\n    TRUNCATE TABLE cleaned_posts_urls;\n    TRUNCATE TABLE cleaned_comments_urls;\n    ```", "```py\n    SELECT Id, Body FROM posts\n    ```"]