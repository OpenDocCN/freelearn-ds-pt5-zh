["```py\n#import the pixieapp decorators\nfrom pixiedust.display.app import *\n\n@PixieApp   #decorator for making the class a PixieApp\nclass HelloWorldApp():\n    @route()  #decorator for making a method a route (no arguments means default route)\n    def main_screen(self):\n        return \"\"\"<div>Hello World</div>\"\"\"\n\n#Instantiate the application and run it\napp = HelloWorldApp()\napp.run()\n```", "```py\n               @route(state1=\"value1\", state2=\"value2\")\n        ```", "```py\n    {%for message in messages%}\n    <li>{{message}}</li>\n    {%endfor%}\n    ```", "```py\n    {%if status.error%}\n    <div class=\"error\">{{status.error}}</div>\n    {%elif status.warning%}\n    <div class=\"warning\">{{status.warning}}</div>\n    {%else%}\n    <div class=\"ok\">{{status.message}}</div>\n    {%endif%}\n    ```", "```py\n    @route(state1=\"*\", state2=\"*\")\n    def my_method(self, state1, state2):\n        return \"<div>State1 is {{state1}}. State2 is {{state2}}</div>\"\n    ```", "```py\n    @route()\n    @templateArgs\n    def main_screen(self):\n        var1 = self.compute_something()\n        var2 = self.compute_something_else()\n        return \"<div>var1 is {{var1}}. var2 is {{var2}}</div>\"\n    ```", "```py\n    pd_options=\"state1=value1;state2=value2;..;staten=valuen\"\n    ```", "```py\n    <div>\n        <pd_options>\n            {\"state1\":\"value1\",\"state2\":\"value2\",...,\n            \"staten\":\"valuen\"}\n        </pd_options>\n    </div>\n    ```", "```py\n    self.invoke_route(self.route_method, state1='value1', state2='value2')\n    ```", "```py\n    <div>\n        <pd_options>\n            {\"state1\":\"$val(my_element_id)\",\"state2\":\"value2\"}\n        <pd_options>\n    </div>\n    ```", "```py\n    <script>\n        function resValue(){\n                return \"my_query\";\n        }\n    </script>\n    ...\n    <div pd_options=\"state1=$val(resValue)\"></div>\n    ```", "```py\nfrom pixiedust.display.app import *\n\n@PixieApp\nclass GitHubTracking():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n<style>\n    div.outer-wrapper {\n        display: table;width:100%;height:300px;\n    }\n    div.inner-wrapper {\n        display: table-cell;vertical-align: middle;height: 100%;width: 100%;\n    }\n</style>\n<div class=\"outer-wrapper\">\n    <div class=\"inner-wrapper\">\n        <div class=\"col-sm-3\"></div>\n        <div class=\"input-group col-sm-6\">\n            <input id=\"query{{prefix}}\" type=\"text\" class=\"form-control\" placeholder=\"Search projects on GitHub\">\n            <span class=\"input-group-btn\">\n                <button class=\"btn btn-default\" type=\"button\">Submit Query</button>\n            </span>\n        </div>\n    </div>\n</div>\n\"\"\"\n\napp = GitHubTracking()\napp.run()\n```", "```py\nimport requests\nimport pandas\n[[GitHubTracking]]\n@route(query=\"*\")\n@templateArgs\ndef do_search(self, query):\n    response = requests.get( \"https://api.github.com/search/repositories?q={}\".format(query))\n    frames = [pandas.DataFrame(response.json()['items'])]\n    while response.ok and \"next\" in response.links:\n        response = requests.get(response.links['next']['url'])\n        frames.append(pandas.DataFrame(response.json()['items']))\n\n    pdf = pandas.concat(frames)\n    response = requests.get( \"https://api.github.com/search/repositories?q={}\".format(query))\n    if not response.ok:\n        return \"<div>An Error occurred: {{response.text}}</div>\"\n    return \"\"\"<h1><center>{{pdf|length}} repositories were found</center></h1>\"\"\"\n```", "```py\n<div class=\"input-group col-sm-6\">\n    <input id=\"query{{prefix}}\" type=\"text\"\n     class=\"form-control\"\n     placeholder=\"Search projects on GitHub\">\n    <span class=\"input-group-btn\">\n        <button class=\"btn btn-default\" type=\"button\" pd_options=\"query=$val(query{{prefix}})\">\n            Submit Query\n        </button>\n    </span>\n</div>\n```", "```py\n[[GitHubTracking]]\n@route(query=\"*\")\n@templateArgs\ndef do_search(self, query):\n    self.first_url = \"https://api.github.com/search/repositories?q={}\".format(query)\n    self.prev_url = None\n    self.next_url = None\n    self.last_url = None\n\n    response = requests.get(self.first_url)\n    if not response.ok:\n        return \"<div>An Error occurred: {{response.text}}</div>\"\n\n    total_count = response.json()['total_count']\n    self.next_url = response.links.get('next', {}).get('url', None)\n    self.last_url = response.links.get('last', {}).get('url', None)\n    return \"\"\"\n<h1><center>{{total_count}} repositories were found</center></h1>\n<ul class=\"pagination\">\n    <li><a href=\"#\" pd_options=\"page=first_url\" pd_target=\"body{{prefix}}\">First</a></li>\n    <li><a href=\"#\" pd_options=\"page=prev_url\" pd_target=\"body{{prefix}}\">Prev</a></li>\n    <li><a href=\"#\" pd_options=\"page=next_url\" pd_target=\"body{{prefix}}\">Next</a></li>\n    <li><a href=\"#\" pd_options=\"page=last_url\" pd_target=\"body{{prefix}}\">Last</a></li>\n</ul>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Repo Name</th>\n            <th>Lastname</th>\n            <th>URL</th>\n            <th>Stars</th>\n        </tr>\n    </thead>\n    <tbody id=\"body{{prefix}}\">\n        {{this.invoke_route(this.do_retrieve_page, page='first_url')}}\n    </tbody>\n</table>\n\"\"\"\n```", "```py\n<button type=\"button\">Multiple Targets\n    <target pd_target=\"elementid1\" pd_options=\"state1=value1\"></target>\n    <target pd_target=\"elementid2\" pd_options=\"state2=value2\"></target>\n</button>\n```", "```py\n[[GitHubTracking]]\n@route(page=\"*\")\n@templateArgs\ndef do_retrieve_page(self, page):\n    url = getattr(self, page)\n    if url is None:\n        return \"<div>No more rows</div>\"\n    response = requests.get(url)\n    self.prev_url = response.links.get('prev', {}).get('url', None)\n    self.next_url = response.links.get('next', {}).get('url', None)\n    items = response.json()['items']\n    return \"\"\"\n{%for row in items%}\n<tr>\n    <td>{{row['name']}}</td>\n    <td>{{row.get('owner',{}).get('login', 'N/A')}}</td>\n    <td><a href=\"{{row['html_url']}}\" target=\"_blank\">{{row['html_url']}}</a></td>\n    <td>{{row['stargazers_count']}}</td>\n</tr>\n{%endfor%}\n        \"\"\"\n```", "```py\n<thead>\n    <tr>\n        <th>Repo Name</th>\n        <th>Lastname</th>\n        <th>URL</th>\n        <th>Stars</th>\n <th>Actions</th>\n    </tr>\n</thead>\n```", "```py\n{%for row in items%}\n<tr>\n    <td>{{row['name']}}</td>\n    <td>{{row.get('owner',{}).get('login', 'N/A')}}</td>\n    <td><a href=\"{{row['html_url']}}\" target=\"_blank\">{{row['html_url']}}</a></td>\n    <td>{{row['stargazers_count']}}</td>\n <td>\n <button pd_options=\n \"analyse_repo_owner={{row[\"owner\"][\"login\"]}};\n analyse_repo_name={{row['name']}}\"\n class=\"btn btn-default btn-sm\" title=\"Analyze Repo\">\n <i class=\"fa fa-line-chart\"></i>\n </button>\n </td>\n</tr>\n{%endfor%}\n```", "```py\ngithub_user = \"dtaieb\"\ngithub_token = \"XXXXXXXXXX\"\n```", "```py\nanalyses = [(\"Commit Activity\", load_commit_activity)]\n```", "```py\n@PixieApp\nclass RepoAnalysis():\n    @route(analyse_repo_owner=\"*\", analyse_repo_name=\"*\")\n    @templateArgs\n    def do_analyse_repo(self, analyse_repo_owner, analyse_repo_name):\n        self._analyse_repo_owner = analyse_repo_owner\n        self._analyse_repo_name = analyse_repo_name\n        return \"\"\"\n<div class=\"container-fluid\">\n    <div class=\"dropdown center-block col-sm-2\">\n        <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n            Select Repo Data Set\n            <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\" style=\"list-style:none;margin:0px;padding:0px\">\n            {%for analysis,_ in this.analyses%}\n                <li>\n                    <a href=\"#\" pd_options=\"analyse_type={{analysis}}\" pd_target=\"analyse_vis{{prefix}}\"\n                     style=\"text-decoration: none;background-color:transparent\">\n                        {{analysis}}\n                    </a>\n                </li>\n            {%endfor%}\n        </ul>\n    </div>\n    <div id=\"analyse_vis{{prefix}}\" class=\"col-sm-10\"></div>\n</div>\n\"\"\"\n```", "```py\ndef compute_pdf(key):\n    return pandas.DataFrame([\n        {\"col{}\".format(i): \"{}{}-{}\".format(key,i,j) for i in range(4)} for j in range(10)\n    ])\n```", "```py\nfrom pixiedust.display.app import *\n@PixieApp\nclass TestEntity():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n        <h1><center>\n            Simple PixieApp with dynamically computed dataframe\n        </center></h1>\n        <div pd_entity=\"compute_pdf('prefix')\" pd_options=\"handlerId=dataframe\" pd_render_onload></div>\n        \"\"\"\ntest = TestEntity()\ntest.run()\n```", "```py\nfrom datetime import datetime\nimport requests\nimport pandas\ndef load_commit_activity(owner, repo_name):\n    response = requests.get(\n        \"https://api.github.com/repos/{}/{}/stats/commit_activity\".format(owner, repo_name),\n        auth=(github_user, github_token)\n    ).json()\n    pdf = pandas.DataFrame([\n        {\"total\": item[\"total\"], \"week\":datetime.fromtimestamp(item[\"week\"])} for item in response\n    ])\n\n    return {\n        \"pdf\":pdf,\n        \"chart_options\": {\n          \"handlerId\": \"lineChart\",\n          \"keyFields\": \"week\",\n          \"valueFields\": \"total\",\n          \"aggregation\": \"SUM\",\n          \"rendererId\": \"bokeh\"\n        }\n    }\n```", "```py\n[\n{\"days\":[0,0,0,0,0,0,0],\"total\":0,\"week\":1485046800},\n{\"days\":[0,0,0,0,0,0,0],\"total\":0,\"week\":1485651600},\n{\"days\":[0,0,0,0,0,0,0],\"total\":0,\"week\":1486256400},\n{\"days\":[0,0,0,0,0,0,0],\"total\":0,\"week\":1486861200}\n...\n]\n```", "```py\n[{\"total\": item[\"total\"], \"week\":datetime.fromtimestamp(item[\"week\"])} for item in response]\n```", "```py\nreturn {\n        \"pdf\":pdf,\n        \"chart_options\": {\n          \"handlerId\": \"lineChart\",\n          \"keyFields\": \"week\",\n          \"valueFields\": \"total\",\n          \"aggregation\": \"SUM\",\n          \"rendererId\": \"bokeh\"\n        }\n    }\n```", "```py\n[[RepoAnalysis]]\n@route(analyse_type=\"*\")\n@templateArgs\ndef do_analyse_type(self, analyse_type):\n    fn = [analysis_fn for a_type,analysis_fn in analyses if a_type == analyse_type]\n    if len(fn) == 0:\n        return \"No loader function found for {{analyse_type}}\"\n    vis_info = fn[0](self._analyse_repo_owner, self._analyse_repo_name)\n    self.pdf = vis_info[\"pdf\"]\n    return \"\"\"\n    <div pd_entity=\"pdf\" pd_render_onload>\n        <pd_options>{{vis_info[\"chart_options\"] | tojson}}</pd_options>\n    </div>\n    \"\"\"\n```", "```py\n@PixieApp\nclass GitHubTracking(RepoAnalysis):\n    @route()\n    def main_screen(self):\n        <<Code omitted here>>\n\n    @route(query=\"*\")\n    @templateArgs\n    def do_search(self, query):\n        <<Code omitted here>>\n\n    @route(page=\"*\")\n    @templateArgs\n    def do_retrieve_page(self, page):\n        <<Code omitted here>>\n\napp = GitHubTracking()\napp.run()\n```", "```py\n    <button type=\"submit\" pd_script=\"self.state='value'\">Click me</button>\n    ```", "```py\n    from pixiedust.display.app import *\n\n    def call_me():\n        print(\"Hello from call_me\")\n\n    @PixieApp\n    class Test():\n        @route()\n        def main_screen(self):\n            return \"\"\"\n            <button type=\"submit\" pd_script=\"call_me()\" pd_target=\"target{{prefix}}\">Click me</button>\n\n            <div id=\"target{{prefix}}\"></div>\n            \"\"\"\n    Test().run()\n    ```", "```py\n    @PixieApp\n    class Test():\n        @route()\n        def main_screen(self):\n            return \"\"\"\n            <button type=\"submit\" pd_script=\"call_me()\" pd_target=\"target{{prefix}}\">\n                <pd_script>\n                    self.name=\"some value\"\n                    print(\"This is a multi-line pd_script\")\n                </pd_script>\n                Click me\n            </button>\n\n            <div id=\"target{{prefix}}\"></div>\n            \"\"\"\n    Test().run()\n    ```", "```py\n[[RepoAnalysis]]\n...\nreturn \"\"\"\n<div class=\"container-fluid\">\n    <div class=\"col-sm-2\">\n        <div class=\"dropdown center-block\">\n            <button class=\"btn btn-primary\n             dropdown-toggle\" type=\"button\"\n             data-toggle=\"dropdown\">\n                Select Repo Data Set\n                <span class=\"caret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\"\n             style=\"list-style:none;margin:0px;padding:0px\">\n                {%for analysis,_ in this.analyses%}\n                    <li>\n                        <a href=\"#\"\n                        pd_options=\"analyse_type={{analysis}}\"\n                        pd_target=\"analyse_vis{{prefix}}\"\n                        style=\"text-decoration: none;background-color:transparent\">\n                            {{analysis}}\n                        </a>\n                    </li>\n                {%endfor%}\n            </ul>\n        </div>\n        <div class=\"checkbox\">\n            <label>\n                <input id=\"show_stats{{prefix}}\" type=\"checkbox\"\n                  pd_script=\"self.show_stats=('$val(show_stats{{prefix}})' == 'true')\">\n                Show Statistics\n            </label>\n        </div>\n    </div>\n    <div id=\"analyse_vis{{prefix}}\" class=\"col-sm-10\"></div>\n</div>\n\"\"\"\n```", "```py\n[[RepoAnalysis]]\n@route(analyse_type=\"*\")\n@templateArgs\ndef do_analyse_type(self, analyse_type):\n    fn = [analysis_fn for a_type,analysis_fn in analyses if a_type == analyse_type]\n    if len(fn) == 0:\n        return \"No loader function found for {{analyse_type}}\"\n    vis_info = fn[0](self._analyse_repo_owner, self._analyse_repo_name)\n    self.pdf = vis_info[\"pdf\"]\n    chart_options = {\"handlerId\":\"dataframe\"} if self.show_stats else vis_info[\"chart_options\"]\n    return \"\"\"\n    <div pd_entity=\"get_pdf()\" pd_render_onload>\n        <pd_options>{{chart_options | tojson}}</pd_options>\n    </div>\n    \"\"\"\n```", "```py\ndef get_pdf(self):\n    if self.show_stats:\n        summary = self.pdf.describe()\n        summary.insert(0, \"Stat\", summary.index)\n        return summary\n    return self.pdf\n```", "```py\n@PixieApp\nclass RepoAnalysis():\n    def setup(self):\n        self.show_stats = False\n    ...\n```", "```py\n<a href=\"#\" pd_options=\"analyse_type={{analysis}}\"\n            pd_target=\"analyse_vis{{prefix}}\"\n            style=\"text-decoration: none;background-color:transparent\">\n      {{analysis}}\n</a>\n```", "```py\n<a href=\"#\" pd_script=\"self.analyse_type='{{analysis}}'\"\n pd_refresh=\"analyse_vis{{prefix}}\"\n style=\"text-decoration: none;background-color:transparent\">\n    {{analysis}}\n</a>\n```", "```py\n<div class=\"checkbox\">\n    <label>\n        <input type=\"checkbox\"\n         id=\"show_stats{{prefix}}\"\npd_script=\"self.show_stats='$val(show_stats{{prefix}})'=='true'\">\n        Show Statistics\n    </label>\n</div>\n```", "```py\n<div class=\"checkbox\">\n    <label>\n        <input type=\"checkbox\"\n         id=\"show_stats{{prefix}}\"\n  pd_script=\"self.show_stats='$val(show_stats{{prefix}})'=='true'\"\n         pd_refresh=\"analyse_vis{{prefix}}\">\n         Show Statistics\n    </label>\n</div>\n```", "```py\n<div id=\"analyse_vis{{prefix}}\" class=\"col-sm-10\"></div>\n```", "```py\n<div id=\"analyse_vis{{prefix}}\" class=\"col-sm-10\"\n     pd_options=\"display_analysis=true\"\n     pd_target=\"analyse_vis{{prefix}}\">\n</div>\n```", "```py\n    @route(widget=\"my_widget\")\n    ```", "```py\nfrom pixiedust.display.app import *\n\n@PixieApp\nclass WidgetApp():\n    @route(widget=\"my_widget\")\n    def widget_main_screen(self):\n        return \"<div>Hello World Widget</div>\"\n\n@PixieApp\nclass ConsumerApp(WidgetApp):\n    @route()\n    def main_screen(self):\n        return \"\"\"<div pd_widget=\"my_widget\"></div>\"\"\"\n\nConsumerApp.run()\n```"]