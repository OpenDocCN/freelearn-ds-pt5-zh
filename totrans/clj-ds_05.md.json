["```py\nscript/download-data.sh\n\n```", "```py\n(defn ex-5-1 []\n  (-> (slurp \"data/soi.csv\")\n      (str/split #\"\\n\")\n      (first)))\n```", "```py\n(defn ex-5-2 []\n  (-> (io/reader \"data/soi.csv\")\n      (line-seq)\n      (first)))\n```", "```py\n\"STATEFIPS,STATE,zipcode,AGI_STUB,N1,MARS1,MARS2,MARS4,PREP,N2,NUMDEP,A00100,N00200,A00200,N00300,A00300,N00600,A00600,N00650,A00650,N00900,A00900,SCHF,N01000,A01000,N01400,A01400,N01700,A01700,N02300,A02300,N02500,A02500,N03300,A03300,N00101,A00101,N04470,A04470,N18425,A18425,N18450,A18450,N18500,A18500,N18300,A18300,N19300,A19300,N19700,A19700,N04800,A04800,N07100,A07100,N07220,A07220,N07180,A07180,N07260,A07260,N59660,A59660,N59720,A59720,N11070,A11070,N09600,A09600,N06500,A06500,N10300,A10300,N11901,A11901,N11902,A11902\"\n```", "```py\n(defn ex-5-3 []\n  (-> (io/reader \"data/soi.csv\")\n      (line-seq)\n      (count)))\n```", "```py\n(defn ex-5-4 []\n  (->> (io/reader \"data/soi.csv\")\n       (line-seq)\n       (reduce (fn [i x]\n                 (inc i)) 0)))\n```", "```py\n(defn ex-5-5 []\n  (->> (io/reader \"data/soi.csv\")\n       (line-seq)\n       (r/fold + (fn [i x]\n                   (inc i)))))\n```", "```py\n(defn ex-5-6 []\n  (+))\n\n;; 0\n```", "```py\n(defn ex-5-7 []\n  (->> (iota/seq \"data/soi.csv\")\n       (r/fold + (fn [i x]\n                   (inc i)))))\n```", "```py\n(defn parse-double [x]\n  (Double/parseDouble x))\n\n(defn parse-line [line]\n  (let [[text-fields double-fields] (->> (str/split line #\",\")\n                                         (split-at 2))]\n    (concat text-fields\n            (map parse-double double-fields))))\n```", "```py\n(defn ex-5-8 []\n   (->> (iota/seq \"data/soi.csv\")\n        (r/drop 1)\n        (r/map parse-line)\n        (r/take 1)\n        (into [])))\n\n;; [(\"01\" \"AL\" 0.0 1.0 889920.0 490850.0 ...)]\n```", "```py\n(defn parse-columns [line]\n  (->> (str/split line #\",\")\n       (map keyword)))\n\n(defn ex-5-9 []\n  (let [data (iota/seq \"data/soi.csv\")\n        column-names (parse-columns (first data))]\n    (->> (r/drop 1 data)\n         (r/map parse-line)\n         (r/map (fn [fields]\n                  (zipmap column-names fields)))\n         (r/take 1)\n         (into []))))\n```", "```py\n[{:N2 1505430.0, :A19300 181519.0, :MARS4 256900.0 ...}]\n```", "```py\n(defn ex-5-10 []\n  (let [data (iota/seq \"data/soi.csv\")\n        column-names (parse-columns (first data))]\n    (->> (r/drop 1 data)\n         (r/map parse-line)\n         (r/map (fn [fields]\n                  (zipmap column-names fields)))\n         (r/remove (fn [record]\n                     (zero? (:zipcode record))))\n         (r/take 1)\n         (into []))))\n```", "```py\n(def line-formatter\n  (r/map parse-line))\n\n(defn record-formatter [column-names]\n  (r/map (fn [fields]\n           (zipmap column-names fields))))\n\n(def remove-zero-zip\n  (r/remove (fn [record]\n              (zero? (:zipcode record)))))\n```", "```py\n(defn load-data [file]\n  (let [data (iota/seq file)\n        col-names  (parse-columns (first data))\n        parse-file (comp remove-zero-zip\n                         (record-formatter col-names)\n                         line-formatter)]\n    (parse-file (rest data))))\n```", "```py\n(defn ex-5-11 []\n  (let [data (load-data \"data/soi.csv\")\n        xs (into [] (r/map :N1 data))]\n    (/ (reduce + xs)\n       (count xs))))\n\n;; 853.37\n```", "```py\n(defn mean\n  ([] 0)\n  ([x y] (/ (+ x y) 2)))\n```", "```py\n(defn ex-5-12 []\n  (->> (load-data \"data/soi.csv\")\n       (r/map :N1)\n       (r/fold mean)))\n\n;; 930.54\n```", "```py\n(mean (mean (mean 0 a) b) c)\n```", "```py\n(+ 1 (+ 2 3))\n\n```", "```py\n(+ (+ 1 2) 3)\n\n```", "```py\n(defn mean-combiner\n  ([] {:count 0 :sum 0})\n  ([a b] (merge-with + a b)))\n```", "```py\n(defn mean-reducer [acc x]\n  (-> acc\n      (update-in [:count] inc)\n      (update-in [:sum] + x)))\n```", "```py\n(defn ex-5-13 []\n  (->> (load-data \"data/soi.csv\")\n       (r/map :N1)\n       (r/fold mean-combiner\n               mean-reducer)))\n\n;; {:count 166598, :sum 1.4216975E8}\n```", "```py\n(defn mean-post-combiner [{:keys [count sum]}]\n  (if (zero? count) 0 (/ sum count)))\n\n(defn ex-5-14 []\n  (->> (load-data \"data/soi.csv\")\n       (r/map :N1)\n       (r/fold mean-combiner\n               mean-reducer)\n       (mean-post-combiner)))\n\n;; 853.37\n```", "```py\n(defn ex-5-15 []\n   (let [data (->> (load-data \"data/soi.csv\")\n                   (r/map :N1))\n         mean-x (->> data\n                     (r/fold mean-combiner\n                             mean-reducer)\n                     (mean-post-combine))\n         sq-diff (fn [x] (i/pow (- x mean-x) 2))]\n     (->> data\n          (r/map sq-diff)\n          (r/fold mean-combiner\n                  mean-reducer)\n          (mean-post-combine))))\n\n;; 3144836.86\n```", "```py\n(defn variance-combiner\n  ([] {:count 0 :mean 0 :sum-of-squares 0})\n  ([a b]\n   (let [count (+ (:count a) (:count b))]\n     {:count count\n      :mean (/ (+ (* (:count a) (:mean a))\n                  (* (:count b) (:mean b)))\n               count)\n      :sum-of-squares (+ (:sum-of-squares a)\n                         (:sum-of-squares b)\n                         (/ (* (- (:mean b)\n                                  (:mean a))\n                               (- (:mean b)\n                                  (:mean a))\n                               (:count a)\n                               (:count b))\n                            count))})))\n```", "```py\n(defn variance-reducer [{:keys [count mean sum-of-squares]} x]\n  (let [count' (inc count)\n        mean'  (+ mean (/ (- x mean) count'))]\n    {:count count'\n     :mean mean'\n     :sum-of-squares (+ sum-of-squares\n                        (* (- x mean') (- x mean)))}))\n```", "```py\n(defn variance-post-combiner [{:keys [count mean sum-of-squares]}]\n   (if (zero? count) 0 (/ sum-of-squares count)))\n```", "```py\n(defn ex-5-16 []\n  (->> (load-data \"data/soi.csv\")\n       (r/map :N1)\n       (r/fold variance-combiner\n               variance-reducer)\n       (variance-post-combiner)))\n\n;; 3144836.86\n```", "```py\n(defn ex-5-17 []\n  (let [data (into [] (load-data \"data/soi.csv\"))]\n    (->> (m/covariance :A02300 :A00200)\n         (t/tesser (t/chunk 512 data )))))\n\n;; 3.496E7\n```", "```py\n(defn chunks [coll]\n  (->> (into [] coll)\n       (t/chunk 1024)))\n```", "```py\n(def column-names\n  [:STATEFIPS :STATE :zipcode :AGI_STUB :N1 :MARS1 :MARS2 ...])\n\n(defn prepare-data []\n  (->> (t/remove #(.startsWith % \"STATEFIPS\"))\n       (t/map parse-line)\n       (t/map (partial format-record column-names))\n       (t/remove  #(zero? (:zipcode %)))))\n```", "```py\n(defn ex-5-18 []\n  (let [data (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (m/covariance :A02300 :A00200)\n         (t/tesser (chunks data)))))\n\n;; 3.496E7\n```", "```py\n(defn ex-5-19 []\n  (let [data (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (m/correlation :A02300 :A00200)\n         (t/tesser (chunks data)))))\n\n;; 0.353\n```", "```py\n(defn ex-5-20 []\n  (let [data (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (t/map :A00200)\n         (t/fuse {:A00200-mean (m/mean)\n                  :A00200-sd   (m/standard-deviation)})\n         (t/tesser (chunks data)))))\n\n;; {:A00200-sd 89965.99846545042, :A00200-mean 37290.58880658831}\n```", "```py\n(defn ex-5-21 []\n  (let [data (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (t/map #(select-keys % [:A00200 :A02300]))\n         (t/facet)\n         (m/mean)\n         (t/tesser (chunks data)))))\n\n;; {:A02300 419.67862159209596, :A00200 37290.58880658831}\n```", "```py\n(defn calculate-coefficients [{:keys [covariance variance-x\n                                      mean-x mean-y]}]\n  (let [slope     (/ covariance variance-x)\n        intercept (- mean-y (* mean-x slope))]\n    [intercept slope]))\n\n(defn ex-5-22 []\n  (let [data (iota/seq \"data/soi.csv\")\n        fx :A00200\n        fy :A02300]\n    (->> (prepare-data)\n         (t/fuse {:covariance (m/covariance fx fy)\n                  :variance-x (m/variance (t/map fx))\n                  :mean-x (m/mean (t/map fx))\n                  :mean-y (m/mean (t/map fx))})\n         (t/post-combine calculate-coefficients)\n         (t/tesser (chunks data)))))\n\n;; [37129.529236553506 0.0043190406799462925]\n```", "```py\n(defn ex-5-23 []\n  (let [data (iota/seq \"data/soi.csv\")\n        attributes {:unemployment-compensation :A02300\n                    :salary-amount             :A00200\n                    :gross-income              :AGI_STUB\n                    :joint-submissions         :MARS2\n                    :dependents                :NUMDEP}]\n    (->> (prepare-data)\n         (m/correlation-matrix attributes)\n         (t/tesser (chunks data)))))\n```", "```py\n(defn feature-scales [features]\n  (->> (prepare-data)\n       (t/map #(select-keys % features))\n       (t/facet)\n       (t/fuse {:mean (m/mean)\n                :sd   (m/standard-deviation)})))\n```", "```py\n(defn ex-5-24 []\n  (let [data (iota/seq \"data/soi.csv\")\n        features [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]]\n    (->> (feature-scales features)\n         (t/tesser (chunks data)))))\n\n;; {:MARS2 {:sd 533.4496892658647, :mean 317.0412009748016}...}\n```", "```py\n(defn scale-features [factors]\n  (let [f (fn [x {:keys [mean sd]}]\n            (/ (- x mean) sd))]\n    (fn [x]\n      (merge-with f x factors))))\n```", "```py\n(defn unscale-features [factors]\n  (let [f (fn [x {:keys [mean sd]}]\n            (+ (* x sd) mean))]\n    (fn [x]\n      (merge-with f x factors))))\n```", "```py\n(defn ex-5-25 []\n  (let [data     (iota/seq \"data/soi.csv\")\n        features [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n        factors (->> (feature-scales features)\n                     (t/tesser (chunks data)))]\n    (->> (load-data \"data/soi.csv\")\n         (r/map #(select-keys % features ))\n         (r/map (scale-features factors))\n         (into [])\n         (first))))\n\n;; {:MARS2 -0.14837567114357617, :NUMDEP 0.30617757526890155,\n;;  :AGI_STUB -0.714280814223704, :A00200 -0.5894942801950217,\n;;  :A02300 0.031741856083514465}\n```", "```py\n(defn feature-matrix [record features]\n  (let [xs (map #(% record) features)]\n    (i/matrix (cons 1 xs))))\n\n(defn extract-features [fy features]\n  (fn [record]\n    {:y  (fy record)\n     :xs (feature-matrix record features)}))\n```", "```py\n(defn ex-5-26 []\n  (let [data     (iota/seq \"data/soi.csv\")\n        features [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n        factors (->> (feature-scales features)\n                     (t/tesser (chunks data)))]\n    (->> (load-data \"data/soi.csv\")\n         (r/map (scale-features factors))\n         (r/map (extract-features :A02300 features))\n         (into [])\n         (first))))\n\n;; {:y 433.0, :xs  A 5x1 matrix\n;;  -------------\n;;  1.00e+00\n;; -5.89e-01\n;; -7.14e-01\n;;  3.06e-01\n;; -1.48e-01\n;; }\n```", "```py\n{:reducer-identity  (constantly [0 0])\n :reducer           (fn reducer [[s c] x]\n                     [(+ s x) (inc c)])\n :post-reducer      identity\n :combiner-identity (constantly [0 0])\n :combiner          (fn combiner [x y] (map + x y))\n :post-combiner     (fn post-combiner [x]\n                      (double (/ (first x)\n                                 (max 1 (last x)))))}\n```", "```py\n(defn matrix-sum [nrows ncols]\n  (let [zeros-matrix (i/matrix 0 nrows ncols)]\n    {:reducer-identity (constantly zeros-matrix)\n     :reducer i/plus\n     :combiner-identity (constantly zeros-matrix)\n     :combiner i/plus}))\n```", "```py\n(defn ex-5-27 []\n   (let [columns [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n         data    (iota/seq \"data/soi.csv\")]\n     (->> (prepare-data)\n          (t/map (extract-features :A02300 columns))\n          (t/map :xs)\n          (t/fold (matrix-sum (inc (count columns)) 1))\n          (t/tesser (chunks data)))))\n\n;; A 6x1 matrix\n;; -------------\n;; 1.67e+05\n;; 6.99e+07\n;; 6.21e+09\n;; ...\n;; 5.83e+05\n;; 9.69e+07\n;; 5.28e+07\n```", "```py\n(defn calculate-error [coefs-t]\n  (fn [{:keys [y xs]}]\n    (let [y-hat (first (i/mmult coefs-t xs))\n          error (- y-hat y)]\n      (i/mult xs error))))\n```", "```py\n(defn ex-5-28 []\n  (let [columns [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount  (inc (count columns))\n        coefs   (vec (replicate fcount 0))\n        data    (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (t/map (extract-features :A02300 columns))\n         (t/map (calculate-error (i/trans coefs)))\n         (t/fold (matrix-sum fcount 1))\n         (t/tesser (chunks data)))))\n\n;; A 6x1 matrix\n;;  -------------\n;; -6.99e+07\n;; -2.30e+11\n;; -8.43e+12\n;;  ...\n;; -1.59e+08\n;; -2.37e+11\n;; -8.10e+10\n```", "```py\n(defn ex-5-29 []\n  (let [columns [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount  (inc (count columns))\n        coefs   (vec (replicate fcount 0))\n        data    (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (t/map (extract-features :A02300 columns))\n         (t/map (calculate-error (i/trans coefs)))\n         (t/fuse {:sum   (t/fold (matrix-sum fcount 1))\n                  :count (t/count)})\n         (t/post-combine (fn [{:keys [sum count]}]\n                           (i/div sum count)))\n         (t/tesser (chunks data)))))\n```", "```py\n(defn matrix-mean [nrows ncols]\n  (let [zeros-matrix (i/matrix 0 nrows ncols)]\n    {:reducer-identity  (constantly [zeros-matrix 0])\n     :reducer           (fn [[sum counter] x]\n                          [(i/plus sum x) (inc counter)])\n     :combiner-identity (constantly [zeros-matrix 0])\n     :combiner          (fn [[sum-a count-a] [sum-b count-b]]\n                          [(i/plus sum-a sum-b)\n                           (+ count-a count-b)])\n     :post-combiner     (fn [[sum count]]\n                          (i/div sum count))}))\n```", "```py\n(defn ex-5-30 []\n  (let [features [:A02300 :A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        coefs    (vec (replicate fcount 0))\n        data     (iota/seq \"data/soi.csv\")]\n    (->> (prepare-data)\n         (t/map (extract-features :A02300 features))\n         (t/map (calculate-error (i/trans coefs)))\n         (t/fold (matrix-mean fcount 1))\n         (t/tesser (chunks data)))))\n\n;;  A 5x1 matrix\n;;  -------------\n;;  4.20e+01\n;;  3.89e+01\n;;  -3.02e+01\n;;  9.02e+01\n;;  6.62e+01\n```", "```py\n(defn update-coefficients [coefs alpha]\n  (fn [cost]\n    (->> (i/mult cost alpha)\n         (i/minus coefs))))\n```", "```py\n(defn gradient-descent-fold [{:keys [fy features factors\n                                     coefs alpha]}]\n  (let [zeros-matrix (i/matrix 0 (count features) 1)]\n    (->> (prepare-data)\n         (t/map (scale-features factors))\n         (t/map (extract-features fy features))\n         (t/map (calculate-error (i/trans coefs)))\n         (t/fold (matrix-mean (inc (count features)) 1))\n         (t/post-combine (update-coefficients coefs alpha)))))\n\n(defn ex-5-31 []\n  (let [features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        coefs    (vec (replicate fcount 0))\n        data     (chunks (iota/seq \"data/soi.csv\"))\n        factors  (->> (feature-scales features)\n                      (t/tesser data))\n        options {:fy :A02300 :features features\n                 :factors factors :coefs coefs :alpha 0.1}]\n    (->> (gradient-descent-fold options)\n         (t/tesser data))))\n\n;; A 6x1 matrix\n;; -------------\n;; -4.20e+02\n;; -1.38e+06\n;; -5.06e+07\n;; -9.53e+02\n;; -1.42e+06\n;; -4.86e+05\n```", "```py\n(defn descend [options data]\n  (fn [coefs]\n    (->> (gradient-descent-fold (assoc options :coefs coefs))\n         (t/tesser data))))\n\n(defn ex-5-32 []\n  (let [features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        coefs    (vec (replicate fcount 0))\n        data     (chunks (iota/seq \"data/soi-sample.csv\"))\n        factors  (->> (feature-scales features)\n                      (t/tesser data))\n        options  {:fy :A02300 :features features\n                  :factors factors :coefs coefs :alpha 0.1}\n        iterations 100\n        xs (range iterations)\n        ys (->> (iterate (descend options data) coefs)\n                (take iterations))]\n    (-> (c/xy-plot xs (map first ys)\n                   :x-label \"Iterations\"\n                   :y-label \"Coefficient\")\n        (c/add-lines xs (map second ys))\n        (c/add-lines xs (map #(nth % 2) ys))\n        (c/add-lines xs (map #(nth % 3) ys))\n        (c/add-lines xs (map #(nth % 4) ys))\n        (i/view))))\n```", "```py\n(defn ex-5-33 []\n  (->> (text/dseq \"data/soi.csv\")\n       (r/take 2)\n       (into [])))\n```", "```py\n(defn rand-file [path]\n  (io/file path (str (long (rand 0x100000000)))))\n\n(defn ex-5-34 []\n  (let [conf     (conf/ig)\n        input    (text/dseq \"data/soi.csv\")\n        workdir  (rand-file \"tmp\")\n        features [:A00200 :AGI_STUB :NUMDEP :MARS2]]\n    (h/fold conf input workdir #'feature-scales features)))\n```", "```py\n;; {:MARS2 317.0412009748016, :NUMDEP 581.8504423822615,\n;; :AGI_STUB 3.499939975269811, :A00200 37290.58880658831}\n```", "```py\n(defn hadoop-gradient-descent [conf input-file workdir]\n  (let [features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount  (inc (count features))\n        coefs   (vec (replicate fcount 0))\n        input   (text/dseq input-file)\n        options {:column-names column-names\n                 :features features\n                 :coefs coefs\n                 :fy :A02300\n                 :alpha 1e-3}\n        factors (h/fold conf input (rand-file workdir)\n                        #'feature-scales\n                        features)\n        descend (fn [coefs]\n                  (h/fold conf input (rand-file workdir)\n                          #'gradient-descent-fold\n                          (merge options {:coefs coefs\n                                          :factors factors})))]\n    (take 5 (iterate descend coefs))))\n```", "```py\n(defn ex-5-35 []\n  (let [workdir  \"tmp\"\n        out-file (rand-file workdir)]\n    (hadoop-gradient-descent (conf/ig) \"data/soi.csv\" workdir)))\n```", "```py\n;; ([0 0 0 0 0]\n;; (20.9839310796048 46.87214911003046 -7.363493937722712\n;;  101.46736841329326 55.67860863427868)\n;; (40.918665605227744 56.55169901254631 -13.771345753228694\n;;  162.1908841131747 81.23969785586247)\n;; (59.85666340457121 50.559130068258995 -19.463888245285332\n;;  202.32407094149158 92.77424653758085)\n;; (77.8477613139478 38.67088624825574 -24.585818946408523\n;;  231.42399118694212 97.75201693843269))\n```", "```py\n(ns cljds.ch5.hadoop\n  (:gen-class)\n  ...)\n```", "```py\n(defn -main [& args]\n  (tool/run hadoop-gradient-descent args))\n```", "```py\n{:main cljds.ch5.hadoop\n :aot [cljds.ch5.hadoop]}\n```", "```py\nlein uberjar\n\n```", "```py\nhadoop jar target/ch5-0.1.0-standalone.jar data/soi.csv tmp\n\n```", "```py\n(defn stochastic-gradient-descent [options data]\n  (let [batches (->> (into [] data)\n                     (shuffle)\n                     (partition 250))\n        descend (fn [coefs batch]\n                  (->> (gradient-descent-fold\n                        (assoc options :coefs coefs))\n                       (t/tesser (chunks batch))))]\n    (reductions descend (:coefs options) batches)))\n```", "```py\n(defn ex-5-36 []\n  (let [features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        coefs    (vec (replicate fcount 0))\n        data     (chunks (iota/seq \"data/soi.csv\"))\n        factors  (->> (feature-scales features)\n                      (t/tesser data))\n        options  {:fy :A02300 :features features\n                  :factors factors :coefs coefs :alpha 1e-3}\n        ys       (stochastic-gradient-descent options data)\n        xs       (range (count ys))]\n    (-> (c/xy-plot xs (map first ys)\n                   :x-label \"Iterations\"\n                   :y-label \"Coefficient\")\n        (c/add-lines xs (map #(nth % 1) ys))\n        (c/add-lines xs (map #(nth % 2) ys))\n        (c/add-lines xs (map #(nth % 3) ys))\n        (c/add-lines xs (map #(nth % 4) ys))\n        (i/view))))\n```", "```py\n(defn parse-m\n  {::mr/source-as :vals\n   ::mr/sink-as   :vals}\n  [fy features factors lines]\n  (->> (skip-header lines)\n       (r/map parse-line)\n       (r/map (partial format-record column-names))\n       (r/map (scale-features factors))\n       (r/map (extract-features fy features))\n       (into [])\n       (shuffle)\n       (partition 250)))\n```", "```py\n(defn sum-r\n  {::mr/source-as :vals\n   ::mr/sink-as   :vals}\n  [fcount alpha batches]\n  (let [initial-coefs (vec (replicate fcount 0))\n        descend-batch (fn [coefs batch]\n                        (->> (t/map (calculate-error\n                                     (i/trans coefs)))\n                             (t/fold (matrix-mean fcount 1))\n                             (t/post-combine\n                              (update-coefficients coefs alpha))\n                             (t/tesser (chunks batch))))]\n    (r/reduce descend-batch initial-coefs batches)))\n```", "```py\n(defn hadoop-extract-features [conf workdir input output]\n  (let [fy       :A02300\n        features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        input   (text/dseq input)\n        factors (h/fold conf input (rand-file workdir)\n                        #'feature-scales\n                        features)\n        conf (conf/ig)]\n    (-> (pg/input input)\n        (pg/map #'parse-m fy features factors)\n        (pg/output (text/dsink output))\n        (pg/execute conf \"extract-features-job\"))))\n\n(defn ex-5-37 []\n  (let [workdir  \"tmp\"\n        out-file (rand-file workdir)]\n    (hadoop-extract-features (conf/ig) \"tmp\"\n                             \"data/soi.csv\" out-file)\n    (str out-file)))\n\n;; \"tmp/1935333306\"\n```", "```py\n(:import [org.apache.hadoop.io NullWritable]\n         [tesser.hadoop_support FressianWritable])\n```", "```py\n(defn hadoop-sgd [conf workdir input-file output]\n  (let [kv-classes [NullWritable FressianWritable]\n        fy       :A02300\n        features [:A00200 :AGI_STUB :NUMDEP :MARS2]\n        fcount   (inc (count features))\n        input   (text/dseq input-file)\n        factors (h/fold conf input (rand-file workdir)\n                        #'feature-scales\n                        features)\n        conf (conf/assoc! conf \"mapred.reduce.tasks\" 1)]\n    (-> (pg/input input)\n        (pg/map #'parse-m fy features factors)\n        (pg/partition kv-classes)\n        (pg/reduce #'sum-r fcount 1e-8)\n        (pg/output (text/dsink output))\n        (pg/execute conf \"sgd-job\"))))\n```", "```py\n(defn ex-5-38 []\n  (let [workdir  \"tmp\"\n        out-file (rand-file workdir)]\n    (hadoop-sgd (conf/ig) \"tmp\" \"data/soi.csv\" out-file)\n    (str out-file)))\n\n;; \"tmp/4046267961\"\n```"]