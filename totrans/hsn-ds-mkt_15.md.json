["```py\nimport pandas as pd\n\ndf = pd.read_excel('../data/WA_Fn-UseC_-Telco-Customer-Churn.xlsx')\n```", "```py\n        df['Churn'] = df['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)\n```", "```py\n        df['Churn'].mean()\n```", "```py\n        df['TotalCharges'] = df['TotalCharges'].replace(' ',   \n                             np.nan).astype(float)\n\n        df = df.dropna()\n```", "```py\n        df[['tenure', 'MonthlyCharges', 'TotalCharges']].describe()\n```", "```py\n        df['MonthlyCharges'] = np.log(df['MonthlyCharges'])\n        df['MonthlyCharges'] = (df['MonthlyCharges'] -    \n        df['MonthlyCharges'].mean())/df['MonthlyCharges'].std()\n\n        df['TotalCharges'] = np.log(df['TotalCharges'])\n        df['TotalCharges'] = (df['TotalCharges'] -       \n        df['TotalCharges'].mean())/df['TotalCharges'].std()\n\n        df['tenure'] = (df['tenure'] - df['tenure'].mean())/df['tenure'].std()\n```", "```py\n        for col in list(df.columns):\n            print(col, df[col].nunique())\n```", "```py\ndf.groupby('gender').count()['customerID'].plot(\n    kind='bar', color='skyblue', grid=True, figsize=(8,6), title='Gender'\n)\nplt.show()\n```", "```py\ndummy_cols = []\n\nsample_set = df[['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']].copy(deep=True)\n\nfor col in list(df.columns):\n    if col not in ['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn'] and df[col].nunique() < 5:\n        dummy_vars = pd.get_dummies(df[col])\n        dummy_vars.columns = [col+str(x) for x in dummy_vars.columns] \n        sample_set = pd.concat([sample_set, dummy_vars], axis=1)\n```", "```py\npip install tensorflow\npip install keras\n```", "```py\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(16, input_dim=len(features), activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n```", "```py\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\ntarget_var = 'Churn'\nfeatures = [x for x in list(sample_set.columns) if x != target_var]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    sample_set[features], \n    sample_set[target_var], \n    test_size=0.3\n)\n```", "```py\nmodel.fit(X_train, y_train, epochs=50, batch_size=100)\n```", "```py\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nin_sample_preds = [round(x[0]) for x in model.predict(X_train)]\nout_sample_preds = [round(x[0]) for x in model.predict(X_test)]\n\n# Accuracy\nprint('In-Sample Accuracy: %0.4f' % accuracy_score(y_train, in_sample_preds))\nprint('Out-of-Sample Accuracy: %0.4f' % accuracy_score(y_test, out_sample_preds))\n\n# Precision\nprint('In-Sample Precision: %0.4f' % precision_score(y_train, in_sample_preds))\nprint('Out-of-Sample Precision: %0.4f' % precision_score(y_test, out_sample_preds))\n\n# Recall\nprint('In-Sample Recall: %0.4f' % recall_score(y_train, in_sample_preds))\nprint('Out-of-Sample Recall: %0.4f' % recall_score(y_test, out_sample_preds))\n```", "```py\nfrom sklearn.metrics import roc_curve, auc\n\nin_sample_preds = [x[0] for x in model.predict(X_train)]\nout_sample_preds = [x[0] for x in model.predict(X_test)]\n\nin_sample_fpr, in_sample_tpr, in_sample_thresholds = roc_curve(y_train, in_sample_preds)\nout_sample_fpr, out_sample_tpr, out_sample_thresholds = roc_curve(y_test, out_sample_preds)\n\nin_sample_roc_auc = auc(in_sample_fpr, in_sample_tpr)\nout_sample_roc_auc = auc(out_sample_fpr, out_sample_tpr)\n\nprint('In-Sample AUC: %0.4f' % in_sample_roc_auc)\nprint('Out-Sample AUC: %0.4f' % out_sample_roc_auc)\n```", "```py\nplt.figure(figsize=(10,7))\n\nplt.plot(\n    out_sample_fpr, out_sample_tpr, color='darkorange', label='Out-Sample ROC curve (area = %0.4f)' % in_sample_roc_auc\n)\nplt.plot(\n    in_sample_fpr, in_sample_tpr, color='navy', label='In-Sample ROC curve (area = %0.4f)' % out_sample_roc_auc\n)\nplt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')\nplt.grid()\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\n\nplt.show()\n```", "```py\nlibrary(readxl)\n\n#### 1\\. Load Data ####\ndf <- read_excel(\n  path=\"~/Documents/data-science-for-marketing/ch.11/data/WA_Fn-UseC_-Telco-Customer-Churn.xlsx\"\n)\n```", "```py\n        library(tidyr)\n\n        df <- df %>% drop_na()\n```", "```py\n       apply(df, 2, function(x) length(unique(x)))\n```", "```py\n        ggplot(df %>% group_by(gender) %>% summarise(Count=n()),\n         aes(x=gender, y=Count)) +\n          geom_bar(width=0.5, stat=\"identity\") +\n          ggtitle('') +\n          xlab(\"Gender\") +\n          ylab(\"Count\") +\n          theme(plot.title = element_text(hjust = 0.5))\n```", "```py\n        # Binary & Continuous Vars\n        sampleDF <- df %>%\n         select(tenure, MonthlyCharges, TotalCharges, gender, Partner,    \n        Dependents, PhoneService, PaperlessBilling, Churn) %>%\n         mutate(\n          # transforming continuous vars\n         tenure=(tenure - mean(tenure))/sd(tenure),\n          MonthlyCharges=(log(MonthlyCharges) -      \n        mean(log(MonthlyCharges)))/sd(log(MonthlyCharges)),\n         TotalCharges=(log(TotalCharges) -     \n         mean(log(TotalCharges)))/sd(log(TotalCharges)),\n\n          # encoding binary categorical vars\n         gender=gender %>% as.factor() %>% as.numeric() - 1,\n         Partner=Partner %>% as.factor() %>% as.numeric() - 1,\n        Dependents=Dependents %>% as.factor() %>% as.numeric() - 1,\n         PhoneService=PhoneService %>% as.factor() %>% as.numeric() - 1,\n         PaperlessBilling=PaperlessBilling %>% as.factor() %>% as.numeric() - 1,\n          Churn=Churn %>% as.factor() %>% as.numeric() - 1\n          )\n```", "```py\n        # Dummy vars\n         # install.packages('dummies')\n          library(dummies)\n\n        sampleDF <- cbind(sampleDF, dummy(df$MultipleLines, sep=\".\"))\n         names(sampleDF) = gsub(\"sampleDF\", \"MultipleLines\", names(sampleDF))\n```", "```py\n        sampleDF <- cbind(sampleDF, dummy(df$InternetService, sep=\".\"))\n        names(sampleDF) = gsub(\"sampleDF\", \"InternetService\", names(sampleDF))\n\n        sampleDF <- cbind(sampleDF, dummy(df$OnlineSecurity, sep=\".\"))\n        names(sampleDF) = gsub(\"sampleDF\", \"OnlineSecurity\", names(sampleDF))\n\n        sampleDF <- cbind(sampleDF, dummy(df$OnlineBackup, sep=\".\"))\n         names(sampleDF) = gsub(\"sampleDF\", \"OnlineBackup\", names(sampleDF))\n\n        sampleDF <- cbind(sampleDF, dummy(df$DeviceProtection, sep=\".\"))\n        names(sampleDF) = gsub(\"sampleDF\", \"DeviceProtection\", names(sampleDF))\n\n         sampleDF <- cbind(sampleDF, dummy(df$TechSupport, sep=\".\"))\n         names(sampleDF) = gsub(\"sampleDF\", \"TechSupport\", names(sampleDF))\n\n         sampleDF <- cbind(sampleDF, dummy(df$StreamingTV, sep=\".\"))\n         names(sampleDF) = gsub(\"sampleDF\", \"StreamingTV\", names(sampleDF))\n\n         sampleDF <- cbind(sampleDF, dummy(df$StreamingMovies, sep=\".\"))\n          names(sampleDF) = gsub(\"sampleDF\", \"StreamingMovies\", names(sampleDF))\n\n          sampleDF <- cbind(sampleDF, dummy(df$Contract, sep=\".\"))\n          names(sampleDF) = gsub(\"sampleDF\", \"Contract\", names(sampleDF))\n\n         sampleDF <- cbind(sampleDF, dummy(df$PaymentMethod, sep=\".\"))\n        names(sampleDF) = gsub(\"sampleDF\", \"PaymentMethod\", names(sampleDF))\n```", "```py\ninstall.packages(\"devtools\")\ndevtools::install_github(\"rstudio/tensorflow\")\nlibrary(tensorflow)\ninstall_tensorflow()\n\ndevtools::install_github(\"rstudio/keras\")\nlibrary(keras)\ninstall_keras()\n```", "```py\nmodel <- keras_model_sequential() \nmodel %>% \n  layer_dense(units = 16, kernel_initializer = \"uniform\", activation = 'relu', input_shape=ncol(train)-1) %>% \n  layer_dense(units = 8, kernel_initializer = \"uniform\", activation = 'relu') %>%\n  layer_dense(units = 1, kernel_initializer = \"uniform\", activation = 'sigmoid') %>% \n  compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = c('accuracy')\n  )\n```", "```py\nlibrary(caTools)\n\nsample <- sample.split(sampleDF$Churn, SplitRatio = .7)\n\ntrain <- as.data.frame(subset(sampleDF, sample == TRUE))\ntest <- as.data.frame(subset(sampleDF, sample == FALSE))\n\ntrainX <- as.matrix(train[,names(train) != \"Churn\"])\ntrainY <- train$Churn\ntestX <- as.matrix(test[,names(test) != \"Churn\"])\ntestY <- test$Churn\n```", "```py\nhistory <- model %>% fit(\n  trainX, \n  trainY, \n  epochs = 50, \n  batch_size = 100, \n  validation_split = 0.2\n)\n```", "```py\n# Evaluating ANN model\ninSamplePreds <- as.double(model %>% predict_classes(trainX))\noutSamplePreds <- as.double(model %>% predict_classes(testX))\n\n# - Accuracy, Precision, and Recall\ninSampleAccuracy <- mean(trainY == inSamplePreds)\noutSampleAccuracy <- mean(testY == outSamplePreds)\nprint(sprintf('In-Sample Accuracy: %0.4f', inSampleAccuracy))\nprint(sprintf('Out-Sample Accuracy: %0.4f', outSampleAccuracy))\n\ninSamplePrecision <- sum(inSamplePreds & trainY) / sum(inSamplePreds)\noutSamplePrecision <- sum(outSamplePreds & testY) / sum(outSamplePreds)\nprint(sprintf('In-Sample Precision: %0.4f', inSamplePrecision))\nprint(sprintf('Out-Sample Precision: %0.4f', outSamplePrecision))\n\ninSampleRecall <- sum(inSamplePreds & trainY) / sum(trainY)\noutSampleRecall <- sum(outSamplePreds & testY) / sum(testY)\nprint(sprintf('In-Sample Recall: %0.4f', inSampleRecall))\nprint(sprintf('Out-Sample Recall: %0.4f', outSampleRecall))\n```", "```py\n# - ROC & AUC\nlibrary(ROCR)\n\noutSamplePredProbs <- as.double(predict(model, testX))\n\npred <- prediction(outSamplePredProbs, testY)\nperf <- performance(pred, measure = \"tpr\", x.measure = \"fpr\") \nauc <- performance(pred, measure='auc')@y.values[[1]]\n\nplot(\n  perf, \n  main=sprintf('Model ROC Curve (AUC: %0.2f)', auc), \n  col='darkorange', \n  lwd=2\n) + grid()\nabline(a = 0, b = 1, col='darkgray', lty=3, lwd=2)\n```"]