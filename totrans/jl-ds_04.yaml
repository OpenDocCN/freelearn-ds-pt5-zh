- en: Chapter 4. Deep Dive into Inferential Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our world is a big data generating machine. These day-to-day activities consist
    of random and complex events that can be used to better understandUnivariate distributions:
    Normal, gamma, binomial the world. To achieve this, we will try to gain a deeper
    understanding of the processes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inferential statistics** is to reach to a conclusion on the basis of evidence
    and reasoning gained from the sample data that is generalized for the population.
    Inferential statistics considers that there will be some sampling errors, which
    means the sample that we have drawn from the population may not be perfectly representing
    the population.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inferential statistics include:'
  prefs: []
  type: TYPE_NORMAL
- en: Estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypothesis testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the difference between a sample and population? A population is a collection
    of all the events or observations about which we want want to gain knowledge.
    But its size can be so huge that it is not always convenient or feasible to analyze
    every event of this observation. In such a scenario, we take a subset that well
    defines the population that we want to analyze. We refer to this subset as a sample
    of the population.
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter, we discussed descriptive statistics. Although inferential
    and descriptive statistics are both done on the same set of data, they are quite
    different. We may apply descriptive statistics only on this sample data, but inferential
    statistics make use of this sample data with others to make generalizations that
    are valid for the larger population.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, descriptive statistics provide the summary of the data numerically
    or graphically. It only helps us to understand the data that we have, but we cannot
    use these results to form a conclusion that is generalized for the whole population.
  prefs: []
  type: TYPE_NORMAL
- en: 'With inferential statistics, we try to build a conclusion that is applicable
    for the whole population. But inferential statistics is limited by two main conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the sample data that we have actually represents the population or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the calculated assumptions that we form to make the sample data represent
    the population are correct or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is always a degree of uncertainty that the sample data taken from the
    population may or may not represent the population perfectly. Therefore, we make
    some estimations or assumptions to handle this uncertainty that again can have
    consequences on the results that we generate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, we have various packages, which are used for inferential statistics.
    One such package is `Distributions.jl`, which provides functions related to probabilistic
    distributions. `Distributions.jl` covers the following statistical methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Properties of distribution - mean, variance, skewness, and kurtosis (moment)
    and entropy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probability density/mass functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Characteristic functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximum likelihood estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum-A-Posteriori (MAP)** probability estimate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Distributions.jl` is a registered Julia package so it can be added using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Further sections would require the package to be installed. So, we would assume
    you have added the package now.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the sampling distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sampling distribution is the likelihood of gathering every possible statistic
    from a sample of a population that is taken randomly. Useful information can be
    derived using the sampling distribution without the complete knowledge of the
    population. Suppose we are calculating the sample mean but we don't know the population.
    Still, we can assume that the sample mean is within a certain number of standard
    deviations of the population mean.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the normal distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The normal distribution is the core of inferential statistics. It is like a
    bell curve (also called a Gaussian curve). Most of the complex processes can be
    defined by the normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what a normal distribution looks like. First, we will import the
    necessary packages. We are including RDatasets now, but will be using it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We first set the seed and then explore the normal function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As per the warning given, we can also use `fieldnames` instead of `names`. It
    is recommended to use `fieldnames` only from the newer versions of Julia.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see that the Normal function is in the Distributions package and
    has the features Univariate and Continuous. The constructor of the `normal()`
    function accepts two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Mean (μ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard deviation (σ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s instantiate a normal distribution. We will keep the mean (μ) as 1.0
    and the standard deviation (σ) as `3.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can check the mean and standard deviation that we have kept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using this normal distribution object, we can now create a distribution using
    a random function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To better understand the function, let''s plot a histogram using Gadfly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the normal distribution](img/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Parameter estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is used to find out by what kind of distribution it is best described.
    We can use the `fit` function for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Parameter estimation](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We used `[1.0, 3.0]` to create the `x` and we can see that the estimates are
    quite close.
  prefs: []
  type: TYPE_NORMAL
- en: Type hierarchy in Distributions.jl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The functions provided in `Distributions.jl` follow a hierarchy. Let's go through
    it to understand the capabilities of the package.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Sampleable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sampleable is an abstract type that includes samplers and distributions from
    which one can draw samples. It is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Sampleable](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The kinds of samples that can be drawn are defined by the two parameter types:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VariateForm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Univariate: Scalar number'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multivariate: Numeric vector'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Matrixvariate: Numeric matrix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ValueSupport:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Discrete: Int'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Continuous: Float64'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can extract the information about the sample that the Sampleable object
    generates. An array can contain multiple samples depending on the variate form.
    We can use various functions to get the information (let''s assume `sampobj` is
    the sampleable object):'
  prefs: []
  type: TYPE_NORMAL
- en: '`length(sampobj)`: As the name suggests, it gives the length of the sample,
    which is 1 when the object is Univariate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size(sampobj)`: This returns the shape of the sample'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nsamples(sampobj, X)`: This returns the number of samples that are in X'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eltype(sampobj)`: This returns the default type of elements in the sample'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rand(sampobj, x)`: This returns x number of samples taken from the sample:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `sampobj=univariate`, a vector of length x is returned
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `sampobj=multivariate`, a matrix of x columns is returned
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `sampobj=matrix-variate`, an array of a sample matrix is returned
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Representing probabilistic distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To better represent probabilistic distributions, Distribution, which is a subtype
    of Sampleable, is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Representing probabilistic distributions](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For ease of use, we generally use `typealias` for commonly used distributions
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Univariate distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The distributions where each sample is scalar are Univariate distributions.
    We can categorize them further into two distributions based on the values they
    support:'
  prefs: []
  type: TYPE_NORMAL
- en: Univariate Continuous Distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Univariate Discrete Distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Abstract types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Many methods are implemented for Univariate distributions in the package, which
    provides necessary functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`params(distributionX)`: This will return a tuple of parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`succprob(distributionX)`: This returns the probability of success'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`failprob(distributionX)`: This returns the probability of failure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dof(distributionX):` This returns the degree of freedom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ncategories(distributionX)`: This returns the number of categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ntrials(distributionX)`: This returns the number of trials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistical functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Common statistical functions such as `mean()`, `median()`, `mode()`, `std()`,
    `var()`, and so on, are applicable on these distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of probability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to various statistical functions, Julia also provides functions
    for evaluating probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pdf(distributionX)`: `pdf` refers to the probability density function. It
    returns the probability vector of `distributionX`. A range of values can also
    be provided as the second argument to the function in the form of `a:b`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cdf(distributionX)`: `cdf` refers to the cumulative distribution function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insupport(distributionX,x)`: This supports function returns if the `distributionX,
    x` is in support or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sampling in Univariate distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have previously discussed random number generation. It can also be used
    to draw a sample from a distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will draw a single sample from `distributionX`. It uses multiple dispatch
    and we can provide other arguments depending on our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will return from the `distributionX` a vector of n independent samples.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Discrete Univariate distributions and types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discrete Univariate Distribution is the super type of these distributions and
    the sample drawn from such distributions is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: Bernoulli distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bernoulli distribution is a discrete distribution. It has two possible outcomes,
    let's say these are *n=0* and *n=1*. Here, if we take *n=1* as success and its
    probability as *p*, then *n=0* is failure and has the probability *q=1-p* where
    *0<p<1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, Bernoulli distribution is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, `p` is the success rate (probability).
  prefs: []
  type: TYPE_NORMAL
- en: Binomial distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Binomial distribution is another discrete probability distribution. It is given
    by *P[p](n|N)*, which is obtaining n number of successes out of N Bernoulli trials.
    After a sequence of independent trials, the number of successes obtained is the
    binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial distribution](img/B05321_04_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a Binomial distribution with number of trials=1 and success rate, `p=0.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial distribution](img/B05321_04_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we have specified the number of `trials=5`. The success rate remains as
    default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial distribution](img/B05321_04_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also define the success rate. So, this will return a distribution with
    the number of trials=5 and success rate, `p=0.3`.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous Univariate Distribution is the super type of all the continuous univariate
    distributions, and each sample drawn from a continuous univariate distribution
    is of type `Float64`.
  prefs: []
  type: TYPE_NORMAL
- en: Cauchy distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Cauchy distribution is also called Lorentz distribution. It is a continuous
    distribution that describes the resonance behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cauchy distribution](img/B05321_04_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This gives the standard Cauchy distribution (location = 0.0, scale = 1.0):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cauchy distribution](img/B05321_04_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can pass parameters. This one gives us the Cauchy distribution with location
    `u` and scale `s`.
  prefs: []
  type: TYPE_NORMAL
- en: Chi distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chi distribution with k degrees of freedom is the distribution formed by the
    square root of a chi-squared random variable, which is the sum of squares of k
    independent variables that are normally distributed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will form a Chi distribution with `k` degrees of freedom.
  prefs: []
  type: TYPE_NORMAL
- en: It is used to yield the correction factor in the unbiased estimation of the
    standard deviation of the normal distribution by dividing by the mean of the chi
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Chi-square distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chi-square distribution with *k* degrees of freedom is the distribution of a
    sum of the squares of *k* independent standard normal random variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, `k` is the degree of freedom.
  prefs: []
  type: TYPE_NORMAL
- en: 'The significance of Chi-square distribution commonly used in chi-squared tests
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: It is used to get the goodness of fit of an observed distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of a normal distribution, it is used to get the confidence interval estimation
    for a population standard deviation from a sample standard deviation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also used to get the independence of classification criteria of qualitative
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Truncated distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes it is required to limit a distribution within a specific domain or
    range and the result from restricting a distribution is called truncated distribution.
    These are useful when we can only record the events in a specified range or when
    a threshold is given:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Truncated distributions](img/image_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the truncated distribution when it is restricted between two constants.
    In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Truncated distributions](img/image_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The nontruncated case: −∞ = a, b = +∞.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The lower truncated case: −∞ < a, b = +∞.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The upper truncated case: −∞ = a, b < +∞.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The doubly truncated case: −∞ < a, b < +∞'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Truncated distributions](img/image_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: However, a few statistical functions that are available to Univariate Distributions
    are available to general Truncated distributions too. The reason for non-availability
    of those functions is that it gets complex to compute because of the truncation.
  prefs: []
  type: TYPE_NORMAL
- en: Truncated normal distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a special type of distribution in which the truncated distribution forms
    a normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be made using the dedicated constructor, `TruncatedNormal`, or by providing
    the Normal constructor as an argument to the Truncated constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As this is the normal distribution, the statistical functions that are not available
    to general truncated distributions are available to truncated normal distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding multivariate distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A multivariate probability distribution is one containing more than one random
    variable. There may or may not be any correlation among these random variables.
    A sample drawn from this distribution is a vector. `Distributions.jl` has implementations
    of commonly used multivariate functions—*Multinomial*, Multivariate *Normal,*
    and *Dirichlet.* They are implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding multivariate distributions](img/image_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Its type aliases are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Most of the methods available to Univariate distributions are also available
    to Multivariate distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Multinomial distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This generalizes the binomial distribution. Suppose that over a finite set of
    size k of a categorical distribution, we take *n* independent draws.
  prefs: []
  type: TYPE_NORMAL
- en: Let's represent this as : *X = X[1], X[2], ............ X[k]*.
  prefs: []
  type: TYPE_NORMAL
- en: Then this *X* represents a multinomial distribution whose every sample is a
    k-dimensional integer vector that sums to *n*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, p represents the probability vector and we are creating the distribution
    with n trials.
  prefs: []
  type: TYPE_NORMAL
- en: Multivariate normal distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a multidimensional generalization of the normal distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multivariate normal distribution](img/B05321_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reasons why multivariate normal distribution is important:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mathematical simplicity**: It is easier to work with this distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multivariate version of the Central Limit Theorem**: If we have a collection
    of random vectors *X[1], X[2],…,X[n]* that are independent and identically distributed,
    then the sample mean vector, x¯x¯, is going to be approximately multivariate normally
    distributed for large samples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is used in the modeling of many natural phenomena
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Multivariate normal distribution](img/image_04_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three types of covariances matrices that are implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: Full covariance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagonal covariance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isotropic covariance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The mean vector is either of an instance of `Vector{Float64}` or `ZeroVector{Float64}.ZeroVector{Float64}`
    is a vector filled with zeros.
  prefs: []
  type: TYPE_NORMAL
- en: 'A multivariate normal distribution is constructed in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MvNormal(mu, sig)`: `mu` refers to mean and sig refers to covariance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MvNormal(sig)`: We are not passing the mean, therefore the mean will be zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MvNormal(d,sig)`: `d` refers to the dimension here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dirichlet distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dirichlet distribution represents the conjugate prior to the multinomial distribution.
    This refers to the condition that the posterior distribution is also a Dirichlet
    distribution if the prior distribution of the multinomial parameters is Dirichlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dirichlet distribution](img/B05321_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This tells us that the Dirichlet is part of the Multivariate family and is
    a Continuous distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dirichlet distribution](img/B05321_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are parameters accepted by the Dirichlet method. This is used as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here alpha is a vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this, `a` is a positive scalar.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding matrixvariate distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a distribution from which any sample drawn is of type matrix. Many of
    the methods that can be used with Univariate and Multivariate distributions can
    be used with Matrix-variate distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Wishart distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a type of matrix-variate distribution and is a generalization of the
    Chi-square distribution to two or more variables. It is constructed by adding
    the inner products of identically distributed, independent, and zero-mean multivariate
    normal random vectors. It is used as a model for the distribution of the sample
    covariance matrix for multivariate normal random data, after scaling by the sample
    size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, `v` refers to the degrees of freedom and `S` is the base matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Inverse-Wishart distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the conjugate prior to the covariance matrix of a multivariate normal
    distribution. In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This represents an Inverse-Wishart distribution with `v` degrees of freedom
    and base matrix `P`.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution fitting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Distribution fitting is the fitting of a probability distribution to a series
    of data to predict the probability of variable phenomena in a certain interval.
    We can get good predictions from the distribution, which is a close fit to the
    data. Depending on the characteristics of the distribution and of the phenomenon,
    some can be fitted more closely with the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This fits a distribution of type `Distribution_type` to a given dataset; `dataset.x`
    is of the array type and comprises all the samples. The fit function finds the
    best way to fit the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The distribution is selected by the symmetry or the skewness of the data with
    respect to the mean value.
  prefs: []
  type: TYPE_NORMAL
- en: Symmetrical distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For symmetrical distributions tending to have the bell curve, the normal distribution
    and the logistic distributions are most suited. When the kurtosis is higher, the
    values are spread far away from the center, and then one can also use Student's
    t-distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Skew distributions to the right
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also called positive skewness, this is when the distance of the larger values
    from the mean is greater than the distance of the smaller values from the mean.
    In these scenarios, log-normal distribution, and log-logistic distribution are
    most suited. Also, the exponential distribution, the Weibull distribution, the
    Pareto distribution, and the Gumbel distribution can be suited in some of these
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Skew distributions to the left
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The negative skewness or skewness to the left is when the distance of the smaller
    values from the mean is greater than the distance of the larger values from the
    mean. For such data, square-normal distribution, Gompertz distribution, and the
    inverted or mirrored Gumbel distributions are suited.
  prefs: []
  type: TYPE_NORMAL
- en: Maximum Likelihood Estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Maximum Likelihood Estimation** (**MLE**) is a procedure of estimating the
    parameters for a given statistic, which makes the given distribution a maximum.
    It is an analytic maximization procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have a sample from a population but for some reason we couldn't
    measure the whole population. We want to know some statistics of this population;
    this could be done by Maximum Likelihood Estimation assuming that the data is
    normally distributed. MLE would give the parametric values that would have the
    highest probability according to the data that we have and the given model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample properties of MLEs:'
  prefs: []
  type: TYPE_NORMAL
- en: Unbiased minimum variance estimators (large sample size)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidence bounds can be generated by calculating approximate normal distributions
    and approximate sample variances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be used to test hypotheses about models and parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drawbacks to MLEs:'
  prefs: []
  type: TYPE_NORMAL
- en: MLEs can be heavy with a small number of failures (large sample size is not
    able to overcome this)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating MLEs requires solving complex non-linear equations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MLE maximizes the likelihood function by selecting the set of values of the
    model parameters for the defined statistical model and given dataset. With large
    sample sizes (tending to infinity), MLEs have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Efficiency**: The asymptotic mean squared error of the MLE is the lowest
    among all the consistent estimators'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Asymptotic normality**: The MLE distribution tends to the Gaussian distribution
    with increase in sample size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency**: The probability of the sequences converges to the estimated
    value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the correction for bias, it has second-order efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Julia, we have a function for maximum likelihood estimation, `fit_mle`.
    This uses multiple dispatches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`dataset` can be an array for univariate distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset` is a matrix for multivariate distribution:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This includes an additional parameter, weights, which is an array of length
    `n`. `n` is equal to the number of samples contained in the dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the time of writing, `fit_mle` has been implemented for the following most
    used distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Univariate distributions**: Normal, gamma, binomial, Bernoulli, categorical,
    uniform, laplace, exponential, geometric, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multivariate distributions**: Multinomial, multivariate normal, and Dirichlet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, the `fit_mle` uses multiple dispatches. The implementation for
    some of the distributions is quite different to the others.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for Binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fit_mle(BinomialDistribution, numOfTrials, dataset, weights)`: The number
    of trials is an additional parameter that represents it for each experiment. `weights` is
    an optional argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As for categorical distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fit_mle(CategoricalDistribution, spaceSize, dataset, weights)`: `spaceSize` is
    an additional parameter that represents the number of distinct values. `weights` is
    an optional argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sufficient statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Julia provides a function that can be used to generate the estimation and then
    apply the Maximum Likelihood Estimation (`fit_mle`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `weights` is an optional parameter. This generates the sufficient statistics
    of the dataset, and now we can apply the `fit_mle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The reason for using the sufficient statistics function is because it is more
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Maximum-a-Posteriori estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is also known as energy minimization. The parameter to be estimated, although
    it is unknown, is considered fixed unlike MLE, which is considered a random variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Bayesian analysis, for the parameters that we want to estimate of the physical
    process, we may have priori information, which may have come from empirical evidence
    or other scientific knowledge. Such information can be encoded in the **probability
    distribution function** (**pdf**) on the parameter to be estimated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This returns the posterior distribution, which is based on the data provided
    by the sufficient statistics and is of the same type as a priori (the priori distribution).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can generate the Maximum-a-Posteriori estimation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here `G` is the likelihood model (or a distribution).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can generate a completed distribution as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will give a completed distribution given parameter, param, and likelihood
    model, G.
  prefs: []
  type: TYPE_NORMAL
- en: Confidence interval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This describes the amount of uncertainty associated with the unknown population
    parameter in the estimated range of values of the population.
  prefs: []
  type: TYPE_NORMAL
- en: '![Confidence interval](img/image_04_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interpreting the confidence intervals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose it is given that the population mean is greater than 100 and less than
    300, with a confidence interval of 95%.
  prefs: []
  type: TYPE_NORMAL
- en: General perception is that the chance of the population mean falling between
    100 and 300 is 95%. This is wrong, as the population mean is not a random variable
    but is constant and doesn't change, and its probability of falling in any specified
    range is 0 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: The uncertainty level associated with a sampling method is described by the
    confidence level. Suppose to select different samples and for each of these samples
    to compute a different interval estimate we used the same sampling method. The
    true population parameter would be included in some of these interval estimates,
    but not in every one.
  prefs: []
  type: TYPE_NORMAL
- en: So, the 95% confidence level means that the population parameter is included
    in 95% of the interval estimates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to construct a confidence interval:'
  prefs: []
  type: TYPE_NORMAL
- en: A sample statistic is identified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a confidence level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Calculate the margin of error:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Margin of error = standard deviation (error) of statistic* critical value*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Describe the confidence level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Confidence interval = margin of error + sample statistic*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Julia, a confidence interval is calculated using the `ci` function. There
    are 12 methods for the generic function `ci`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get the confidence interval of the Binomial proportions, it is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will compute the confidence interval that will have a coverage of 1-alpha.
    The method used is clopper pearson.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other methods can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: Wald interval (`:wald`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wilson score interval (`:wilson`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeffreys interval (`:jeffrey`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agresti Coull interval (`:agresti_coull`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the confidence interval of the multinomial proportions, it is used as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Other methods than `sison_glaz`:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap intervals (`:bootstrap`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quesenberry, Hurst intervals (`:quesenberry_hurst`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gold intervals (`:gold`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding z-score
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Z-score refers to the standard deviations the element is away from the mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is given by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding z-score](img/image_04_024-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here `X` represents the value of the element, σ is the standard deviation, and
    μ is the population mean.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting z-scores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`z-score<0`: The element is less than the mean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z-score>0`: The element is greater than the mean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z-score=0`: The element is equal to the mean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z-score=0.5`: The element is 0.5 SD greater than the mean'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Julia, it is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: μ and σ are optional as they can be calculated by the function.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the significance of the P-value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The probability that a null-hypothesis will be rejected even if it is proven
    true is the p-value. When there is no difference between two measures, then the
    hypothesis is said to be a null-hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if there is a hypothesis that, in the game of football, every player
    who plays 90 minutes will also score a goal then the null hypothesis would be
    that there is no relation between the number of minutes played and the goals scored.
  prefs: []
  type: TYPE_NORMAL
- en: Another example would be a hypothesis that a person with blood group A will
    have higher blood pressure than the person with blood group B. In a null hypothesis,
    there will be no difference, that is, no relation between the blood type and the
    pressure.
  prefs: []
  type: TYPE_NORMAL
- en: The significance level is given by (α) and if the p-value is equal or less than
    it, then the null hypothesis is declared inconsistent or invalid. Such a hypothesis
    is rejected.
  prefs: []
  type: TYPE_NORMAL
- en: One-tailed and two-tailed test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following diagram represents the two-tails being used for a hypothesis test.
  prefs: []
  type: TYPE_NORMAL
- en: '![One-tailed and two-tailed test](img/5321_4_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Julia, it is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will return the p-value for the two-tailed test. To get the p-value of
    the one-tailed test use `tail=:left` or `tail=:right`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived deep into inferential statistics and learned about
    various concepts and methods in Julia to work with different kinds of datasets.
    We started with understanding the normal distribution, which is a must when dealing
    with statistics. In parallel, we started exploring Distributions.jl and various
    methods provided by Julia. We then moved on to Univariate distributions and understanding
    why they are so important. We also explored some other distributions, such as
    Chi, Chi-square, and Cauchy. Later in the chapter, we studied what z-score, p-value,
    one-tailed, and two-tailed tests are about. After studying the chapter, we should
    be able to understand the datasets and apply inferential statistics to gain insights
    as well as using the z-score and p-value to accept or reject our hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[http://docs.julialang.org/en/release-0.4/manual/](http://docs.julialang.org/en/release-0.4/manual/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/JuliaStats/Distributions.jl](https://github.com/JuliaStats/Distributions.jl)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf](https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://onlinecourses.science.psu.edu/](https://onlinecourses.science.psu.edu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
