["```py\n!pip install wordcloud\n\n```", "```py\nfrom pixiedust.display.app import *\nimport requests\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n@PixieApp\nclass WordCloudApp():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n        <div style=\"text-align:center\">\n            <label>Enter a url: </label>\n            <input type=\"text\" size=\"80\" id=\"url{{prefix}}\">\n            <button type=\"submit\"\n                pd_options=\"url=$val(url{{prefix}})\"\n                pd_target=\"wordcloud{{prefix}}\">\n                Go\n            </button>\n        </div>\n        <center><div id=\"wordcloud{{prefix}}\"></div></center>\n        \"\"\"\n\n    @route(url=\"*\")\n    @captureOutput\n    def generate_word_cloud(self, url):\n        text = requests.get(url).text\n        plt.axis(\"off\")\n        plt.imshow(\n            WordCloud(max_font_size=40).generate(text),\n            interpolation='bilinear'\n        )\n\napp = WordCloudApp()\napp.run()\n```", "```py\nfrom pixiedust.display.app import *\nfrom IPython.display import display_markdown\n\n@PixieApp\nclass TestMarkdown():\n    @route()\n    @captureOutput\n    def main_screen(self):\n        display_markdown(\"\"\"\n# Main Header:\n## Secondary Header with bullet\n1\\. item1\n2\\. item2\n3\\. item3\n\nShowing image of the PixieDust logo\n![alt text](https://github.com/pixiedust/pixiedust/raw/master/docs/_static/PixieDust%202C%20\\(256x256\\).png \"PixieDust Logo\")\n    \"\"\", raw=True)\n\nTestMarkdown().run()\n```", "```py\nfrom pixiedust.display.app import *\nimport requests\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n@PixieApp\nclass WCChildApp():\n    @route(url='*')\n    @captureOutput\n    def generate_word_cloud(self, url):\n        text = requests.get(url).text\n        plt.axis(\"off\")\n        plt.imshow(\n            WordCloud(max_font_size=40).generate(text),\n            interpolation='bilinear'\n        )\n```", "```py\n@PixieApp\nclass WordCloudApp():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n        <div style=\"text-align:center\">\n            <label>Enter a url: </label>\n            <input type=\"text\" size=\"80\" id=\"url{{prefix}}\">\n            <button type=\"submit\"\n                pd_options=\"url=$val(url{{prefix}})\"\n                pd_app=\"WCChildApp\"\n                pd_target=\"wordcloud{{prefix}}\">\n                Go\n            </button>\n        </div>\n        <center><div id=\"wordcloud{{prefix}}\"></div></center>\n        \"\"\"\n\napp = WordCloudApp()\napp.run()\n```", "```py\nfrom pixiedust.display.app import *\nimport requests\nfrom word cloud import WordCloud\nimport matplotlib.pyplot as plt\n\n@PixieApp\nclass WCChildApp():\n    @route(widget='wordcloud')\n    @captureOutput\n    def generate_word_cloud(self):\n        text = requests.get(self.url).text if self.url else \"\"\n        plt.axis(\"off\")\n        plt.imshow(\n            WordCloud(max_font_size=40).generate(text),\n            interpolation='bilinear'\n        )\n```", "```py\n@PixieApp\nclass WordCloudApp(WCChildApp):\n    @route()\n    def main_screen(self):\n        self.url=None\n        return \"\"\"\n        <div style=\"text-align:center\">\n            <label>Enter a url: </label>\n            <input type=\"text\" size=\"80\" id=\"url{{prefix}}\">\n            <button type=\"submit\"\n                pd_script=\"self.url = '$val(url{{prefix}})'\"\n                pd_refresh=\"wordcloud{{prefix}}\">\n                Go\n            </button>\n        </div>\n        <center><div pd_widget=\"wordcloud\" id=\"wordcloud{{prefix}}\"></div></center>\n        \"\"\"\n\napp = WordCloudApp()\napp.run()\n```", "```py\n@abstractmethod\ndef doGetNextData(self):\n    \"\"\"Return the next batch of data from the underlying stream.\n    Accepted return values are:\n    1\\. (x,y): tuple of list/numpy arrays representing the x and y axis\n    2\\. pandas dataframe\n    3\\. y: list/numpy array representing the y axis. In this case, theÂ x axis is automatically created\n    4\\. pandas serie: similar to #3\n    5\\. json\n    6\\. geojson\n    7\\. url with supported payload (json/geojson)\n    \"\"\"\n    Pass\n```", "```py\n{\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            -93.824908715741202, 10.875051131034805\n        ]\n    },\n    \"type\": \"Feature\",\n    \"properties\": {}\n}\n```", "```py\nfrom pixiedust.display.streaming import *\n\nclass DroneStreamingAdapter(StreamingDataAdapter):\n    def getMetadata(self):\n        iconImage = \"rocket-15\"\n        return {\n            \"layout\": {\"icon-image\": iconImage, \"icon-size\": 1.5},\n            \"type\": \"symbol\"\n        }\n    def doGetNextData(self):\n        return \"https://wanderdrone.appspot.com/\"\nadapter = DroneStreamingAdapter()\ndisplay(adapter)\n```", "```py\n    @route(topic=\"*\",streampreview=\"*\",schemaX=\"*\")\n    def showChart(self, schemaX):\n        self.schemaX = schemaX\n        self.avgChannelData = self.streamingData.getStreamingChannel(self.computeAverages)\n        return \"\"\"\n<div class=\"well\" style=\"text-align:center\">\n    <div style=\"font-size:x-large\">Real-time chart for {{this.schemaX}}(average).</div>\n</div>\n\n<div pd_refresh_rate=\"1000\" pd_entity=\"avgChannelData\"></div>\n        \"\"\"\n```", "```py\ndef newDisplayHandler(self, options, entity):\n    if self.streamingDisplay is None:\n        self.streamingDisplay = LineChartStreamingDisplay(options, entity)\n    else:\n        self.streamingDisplay.options = options\n    return self.streamingDisplay\n```", "```py\nfrom pixiedust.apps.messageHub import *\nMessageHubStreamingApp().run(\n    credentials={\n        \"username\": \"XXXX\",\n        \"password\": \"XXXX\",\n        \"api_key\" : \"XXXX\",\n        \"prod\": True\n    }\n)\n```", "```py\n        <button type=\"submit\" pd_event_payload=\"type=topicA;message=Button clicked\">\n            Send event A\n        </button>\n        ```", "```py\n        <button type=\"submit\">\n            <pd_event_payload>\n            {\n                \"type\":\"topicA\",\n                \"message\":\"Button Clicked\"\n            }\n            </pd_event_payload>\n            Send event A\n        </button>\n        ```", "```py\n    <table\n    onclick=\"pixiedust.sendEvent({type:'topicB',text:event.srcElement.innerText})\">\n        <tr><td>Row 1</td></tr>\n        <tr><td>Row 2</td></tr>\n        <tr><td>Row 3</td></tr>\n    </table>\n    ```", "```py\n<div class=\"col-sm-6\" id=\"listenerA{{prefix}}\">\n    Listening to button event\n    <pd_event_handler\n        pd_source=\"topicA\"\n        pd_script=\"print(eventInfo)\"\n        pd_target=\"listenerA{{prefix}}\">\n    </pd_event_handler>\n</div>\n```", "```py\nfrom pixiedust.display.app import *\n@PixieApp\nclass TestEvents():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n<div>\n    <button type=\"submit\">\n        <pd_event_payload>\n        {\n            \"type\":\"topicA\",\n            \"message\":\"Button Clicked\"\n        }\n        </pd_event_payload>\n        Send event A\n    </button>\n    <table onclick=\"pixiedust.sendEvent({type:'topicB',text:event.srcElement.innerText})\">\n        <tr><td>Row 1</td></tr>\n        <tr><td>Row 2</td></tr>\n        <tr><td>Row 3</td></tr>\n    </table>\n</div>\n<div class=\"container\" style=\"margin-top:30px\">\n    <div class=\"row\">\n        <div class=\"col-sm-6\" id=\"listenerA{{prefix}}\">\n            Listening to button event\n            <pd_event_handler pd_source=\"topicA\" pd_script=\"print(eventInfo)\" pd_target=\"listenerA{{prefix}}\">\n            </pd_event_handler>\n        </div>\n        <div class=\"col-sm-6\" id=\"listenerB{{prefix}}\">\n            Listening to table event\n            <pd_event_handler pd_source=\"topicB\" pd_script=\"print(eventInfo)\" pd_target=\"listenerB{{prefix}}\">\n            </pd_event_handler>\n        </div>\n    </div>\n</div>\n        \"\"\"\napp = TestEvents()\napp.run()\n```", "```py\nfrom pixiedust.display.display import *\nimport pandas\n@PixiedustDisplay()\nclass SimpleDisplayMeta(DisplayHandlerMeta):\n    @addId\n    def getMenuInfo(self,entity,dataHandler):\n        if type(entity) is pandas.core.frame.DataFrame:\n            return [\n               {\"categoryId\": \"Table\", \"title\": \"Simple Table\", \"icon\": \"fa-table\", \"id\": \"simpleTest\"}\n            ]\n        return []\n    def newDisplayHandler(self,options,entity):\n        return SimpleDisplay(options,entity)\n```", "```py\nclass SimpleDisplay(Display):\n    def doRender(self, handlerId):\n        self._addHTMLTemplateString(\"\"\"\n<table class=\"table table-striped\">\n   <thead>\n       {%for column in entity.columns.tolist()%}\n       <th>{{column}}</th>\n       {%endfor%}\n   </thead>\n   <tbody>\n       {%for _, row in entity.iterrows()%}\n       <tr>\n           {%for value in row.tolist()%}\n           <td>{{value}}</td>\n           {%endfor%}\n       </tr>\n       {%endfor%}\n   </tbody>\n</table>\n        \"\"\")\n```", "```py\nself._addHTMLTemplate('simpleTable.html', custom_arg = \"Some value\")\n```", "```py\nfrom pixiedust.display.chart.renderers import PixiedustRenderer\nfrom pixiedust.display.chart.renderers.baseChartDisplay import BaseChartDisplay\n\n@PixiedustRenderer(rendererId=\"simpletable\", id=\"tableView\")\nclass SimpleDisplayWithRenderer(BaseChartDisplay):\n    def get_options_dialog_pixieapp(self):\n        return None #No options needed\n\n    def doRenderChart(self):\n        return self.renderTemplateString(\"\"\"\n<table class=\"table table-striped\">\n   <thead>\n       {%for column in entity.columns.tolist()%}\n       <th>{{column}}</th>\n       {%endfor%}\n   </thead>\n   <tbody>\n       {%for _, row in entity.iterrows()%}\n       <tr>\n           {%for value in row.tolist()%}\n           <td>{{value}}</td>\n           {%endfor%}\n       </tr>\n       {%endfor%}\n   </tbody>\n</table>\n        \"\"\")\n```", "```py\n    python -m pdb <script_file>\n\n    ```", "```py\n    import pdb\n    pdb.run(\"<insert a valid python statement here>\")\n    ```", "```py\n    import pdb\n    def my_function(arg1, arg2):\n        pdb.set_trace()\n        do_something_here()\n    ```", "```py\n    #call the pwd line magic to get the current working directory\n    #and assign the result into a Python variable called pwd\n    pwd = %pwd\n    print(pwd)\n    ```", "```py\n    %%html\n    <div>Hello World</div>\n    ```", "```py\n%%pixie_debugger\nimport pixiedust\ncars = pixiedust.sampleData(1, forcePandas=True)\n\ndef count_cars(name):\n    count = 0\n    for row in cars.itertuples():\n        if name in row.name:\n            count += 1â©    return count\n\ncount_cars('chevrolet')\n```", "```py\n%%pixie_debugger -b count_cars 11\nimport pixiedust\ncars = pixiedust.sampleData(1, forcePandas=True)\n\ndef count_cars(name):\n    count = 0\n    for row in cars.itertuples():\n        if name in row.name:\n            count += 1\n    return count\n\ncount_cars('chevrolet')\n```", "```py\nfrom pixiedust.display.app import *\n\nimport pixiedust\ncars = pixiedust.sampleData(1, forcePandas=True)\n\n@PixieApp\nclass DisplayCars():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n        <div>\n            <label>Column to search</label>\n            <input id=\"column{{prefix}}\" value=\"name\">\n            <label>Query</label>\n            <input id=\"search{{prefix}}\">\n            <button type=\"submit\" pd_options=\"col=$val(column{{prefix}});query=$val(search{{prefix}})\"\n                pd_target=\"target{{prefix}}\">\n                Search\n            </button>\n        </div>\n        <div id=\"target{{prefix}}\"></div>\n        \"\"\"\n    @route(col=\"*\", query=\"*\")\n    def display_screen(self, col, query):\n        self.pdf = cars.loc[cars[col].str.contains(query)]\n        return \"\"\"\n        <div pd_render_onload pd_entity=\"pdf\">\n            <pd_options>\n            {\n              \"handlerId\": \"tableView\",\n              \"table_noschema\": \"true\",\n              \"table_nosearch\": \"true\",\n              \"table_nocount\": \"true\"\n            }\n            </pd_options>\n        </div>\n        \"\"\"\napp = DisplayCars()\napp.run()\n```", "```py\n...\napp = DisplayCars()\napp.run(debug_route=\"display_screen\")\n```", "```py\nimport pixiedust\nmy_logger = pixiedust.getLogger(__name__)\n```", "```py\nfrom pixiedust.display.app import *\nfrom pixiedust.utils import Logger\n\n@PixieApp\n@Logger()\nclass AppWithLogger():\n    @route()\n    def main_screen(self):\n        self.info(\"Calling default route\")\n        return \"<div>hello world</div>\"\n\napp = AppWithLogger()\napp.run()\n```", "```py\nfrom pixiedust.display.app import *\n\n@PixieApp\nclass TestJSDebugger():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n<script>\nfunction FooJS(){\n    debugger;\n    return \"value\"\n}\n</script>\n<button type=\"submit\" pd_options=\"state=$val(FooJS)\">Call route</button>\n        \"\"\"\n\n    @route(state=\"*\")\n    def my_route(self, state):\n        return \"<div>Route called with state <b>{{state}}</b></div>\"\n\napp = TestJSDebugger()\napp.run()\n```", "```py\n!pip install pixiedust_node\n\n```", "```py\nimport pixiedust_node\n```", "```py\n%%node\nvar date = new Date()\nprint(\"Today's date is \" + date)\n```", "```py\n\"Today's date is Sun May 27 2018 20:36:35 GMT-0400 (EDT)\"\n```", "```py\n%%node\ndata = {\n    \"name\": [\"Bob\",\"Alice\",\"Joan\",\"Christian\"],\n    \"age\": [20, 25, 19, 45]\n}\nprint(data)\n```", "```py\n{\"age\": [20, 25, 19, 45], \"name\": [\"Bob\", \"Alice\", \"Joan\", \"Christian\"]}\n```", "```py\ndf = pandas.DataFrame(data)\ndisplay(df)\n```", "```py\n%%node\ndata = {\n    \"name\": [\"Bob\",\"Alice\",\"Joan\",\"Christian\"],\n    \"age\": [20, 25, 19, 45]\n}\ndisplay(data)\n```"]