["```py\npip install opencv-python\n```", "```py\n# Import cv2 latest version of OpenCV library \nimport cv2\n\n# Import numeric python (NumPy) library\nimport numpy as np\n\n# Import matplotlib for showing the image \nimport matplotlib.pyplot as plt \n\n# magic function to render the figure in a notebook \n%matplotlib inline \n\n# Read image using imread() function\nimage = cv2.imread('google.jpg') \n\n# Let's check image data type\nprint('Image Type:',type(image)) \n\n# Let's check dimension of image \nprint('Image Dimension:',image.shape) \n\n# Let's show the image \nplt.imshow(image)\nplt.show()\n```", "```py\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(rgb_image)\nplt.show()\n```", "```py\n# Write image using imwrite()\ncv2.imwrite('image.jpg',image)\n\nOutput: True\n```", "```py\n# Import cv2 latest version of OpenCV library\nimport cv2\n\n# Import numeric python (NumPy) library\nimport numpy as np\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# Magic function to render the figure in a notebook\n%matplotlib inline\n\n# Let's create a black image\nimage_shape=(600,600,3)\nblack_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Show the image\nplt.imshow(black_image)\n```", "```py\n# Create a white image\nimage_shape=(600,600,3)\nwhite_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Set every pixel of the image to 255\nwhite_image.fill(255)\n\n# Show the image\nplt.imshow(white_image)\n```", "```py\n# Draw a line on black image\nline = cv2.line(black_image,(599,0),(0,599),(0,255,0),4)\n\n# Show image\nplt.imshow(line)\n```", "```py\n# Let's draw a blue line on white image\n\nline = cv2.line(white_image,(599,0),(0,599),(0,0,255),4)\n# Show the image\nplt.imshow(line)\n```", "```py\n# Let's create a white image\nimg_shape=(600,600,3)\nwhite_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Set every pixel of the image to 255\nwhite_image.fill(255)\n\n# Draw a red circle on white image\ncircle=cv2.circle(white_image,(300, 300), 100, (255,0,0),6)\n\n# Show the image\nplt.imshow(circle)\n```", "```py\n# Let's create a black image\nimg_shape=(600,600,3)\nblack_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Draw a green rectangle on black image\nrectangle= cv2.rectangle(black_image,(200,200),(400,500),(0,255,0),5)\n\n# Show the image\nplt.imshow(rectangle)\n\n```", "```py\n# Let's create a black image\nimg_shape=(600,600,3)\nblack_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Draw a green filled rectangle on black image\nrectangle= cv2.rectangle(black_image,(200,200),(400,500),(0,255,0),-1)\n\n# Show the image\nplt.imshow(rectangle)\n\n```", "```py\n# Let's create a black image\nimg_shape=(600,800,3)\nblack_image = np.zeros(shape=image_shape,dtype=np.int16)\n\n# Write on black image\ntext = cv2.putText(black_image,'Thanksgiving',(10,500),\ncv2.FONT_HERSHEY_SIMPLEX, 3,(255,0,0),2,cv2.LINE_AA)\n\n# Display the image\nplt.imshow(text)\n```", "```py\n# Import cv2 module\nimport cv2\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# magic function to render the figure in a notebook\n%matplotlib inline\n\n# read image\nimage = cv2.imread('tajmahal.jpg')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(rgb_image)\n```", "```py\n# Resize the image\nimage_resized = cv2.resize(rgb_image, (200, 200))\ninterpolation = cv2.INTER_NEAREST\n\n# Display the image\nplt.imshow(image_resized)\n```", "```py\n# Import OpenCV module\nimport cv2\n\n# Import NumPy\nimport numpy as np\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# magic function to render the figure in a notebook\n%matplotlib inline\n\n# Read image\nimage = cv2.imread('messi.png')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(rgb_image)\n```", "```py\n# Flipping image (Horizontal flipping)\nimage_flip = cv2.flip(rgb_image, 1)\n\n# Display the image\nplt.imshow(image_flip)\n```", "```py\n# Flipping image (Vertical flipping)\nimage_flip = cv2.flip(rgb_image,0)\n\n# Display the image\nplt.imshow(image_flip)\n```", "```py\n# Flipping image (Horizontal and vertical flipping)\nimage_flip = cv2.flip(rgb_image, -1)\n\n# Display the image\nplt.imshow(image_flip)\n```", "```py\n# Import cv2 latest version of OpenCV library\nimport cv2\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# Magic function to render the figure in a notebook\n%matplotlib inline\n\n# Read image\nimage = cv2.imread('nature.jpeg')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(rgb_image)\n```", "```py\n# set weightage for alpha and betaboth the matrix\nalpha_=1\nbeta_=50\n\n# Add weight to the original image to change the brightness\nimage_change=cv2.addWeighted(rgb_image, alpha_,\nnp.zeros(image.shape,image.dtype),0, beta_)\n\n# Display the image\nplt.imshow(image_change)\n```", "```py\n# Import OpenCV module\nimport cv2\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# Magic function to render the figure in a notebook\n%matplotlib inline\n\n# Read image\nimage = cv2.imread('tajmahal.jpg')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(rgb_image)\n```", "```py\n# Blur the image using blur() function\nimage_blur = cv2.blur(rgb_image,(15,15))\n\n# Display the image\nplt.imshow(image_blur)\n```", "```py\n# Import cv2 module\nimport cv2\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# magic function to render the figure in a notebook\n%matplotlib inline\n\n# read image\nimage = cv2.imread('tajmahal.jpg')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Blurring the image using Gaussian Blur\nimage_blur = cv2.GaussianBlur(rgb_image, (7,7), 0)\n\n# Display the image\nplt.imshow(image_blur)\n```", "```py\n# Import cv2 module\nimport cv2\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# Convert image color space BGR to RGB\n%matplotlib inline\n\n# read image\nimage = cv2.imread('tajmahal.jpg')\n\n# Convert image color space BGR to RGB\nrgb_image=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n\n# Blurring the image using Median blurring\nimage_blur = cv2.medianBlur(rgb_image,11)\n\n# Display the image\nplt.imshow(image_blur)\n```", "```py\n# Import cv2 latest version of OpenCV library\nimport cv2\n\n# Import numeric python (NumPy) library\nimport numpy as np\n\n# Import matplotlib for showing the image\nimport matplotlib.pyplot as plt\n\n# magic function to render the figure in a notebook\n%matplotlib inline\n\n# Read image\nimage= cv2.imread('messi.png')\n\n# Convert image color space BGR to grayscale\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Displaying the grayscale image\nplt.imshow(image_gray, cmap='gray')\n```", "```py\n# Load the haar cascade face classifier file\nhaar_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n```", "```py\n# Get the faces coordinates for all the faces in the image\nfaces_cordinates = haar_cascade.detectMultiScale(image_gray, scaleFactor = 1.3, minNeighbors = 7);\n```", "```py\n# Draw rectangle on detected faces\nfor (p,q,r,s) in faces_cordinates:\n    cv2.rectangle(image, (p, q), (p+r, q+s), (255,255,0), 2)\n```", "```py\n# Convert image color space BGR to RGB\nimage_rgb=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n# Display face detected image\nplt.imshow(image_rgb)\n```", "```py\n# Read the image\nimage= cv2.imread('barcelona.jpeg')\n\n# Convert image BGR to grayscale\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Load the haar cascade face classifier file\nhaar_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\n# Get the faces coordinates for all the faces in the image\nfaces_cordinates = haar_cascade.detectMultiScale(image_gray, scaleFactor = 1.3, minNeighbors = 5);\n\n# Draw rectangle on detected faces\nfor (x1,y1,x2,y2) in faces_cordinates:\ncv2.rectangle(image, (x1, y1), (x1+x2, y1+y2), (255,255,0), 2)\n\n# Convert image color space BGR to RGB\nimage_rgb=cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n# Display face detected the image\nplt.imshow(image_rgb)\n```"]