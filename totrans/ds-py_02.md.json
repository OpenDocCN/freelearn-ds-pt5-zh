["```py\nmy_data = [\n{\"name\": \"Joe\", \"age\": 24},\n{\"name\": \"Harry\", \"age\": 35},\n{\"name\": \"Liz\", \"age\": 18},\n...\n]\n\n```", "```py\njupyter notebook --notebook-dir=<<directory path where notebooks are stored>>\n\n```", "```py\njupyter notebook --generate-config\n\n```", "```py\n## Whether to open in a browser after starting. The specific browser used is\n#  platform dependent and determined by the python standard library 'web browser'\n#  module, unless it is overridden using the --browser (NotebookApp.browser)\n#  configuration option.\nc.NotebookApp.open_browser = False\n\n```", "```py\n    !pip install pixiedust\n\n    ```", "```py\nimport pandas\ndata_url = \"https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD\"\nbuilding_df = pandas.read_csv(data_url)\nbuilding_df\n```", "```py\n#Spark CSV Loading\nfrom pyspark.sql import SparkSession\ntry:\n    from urllib import urlretrieve\nexcept ImportError:\n    #urlretrieve package has been refactored in Python 3\n    from urllib.request import urlretrieve\n\ndata_url = \"https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD\"\nurlretrieve (data_url, \"building.csv\")\n\nspark = SparkSession.builder.getOrCreate()\nbuilding_df = spark.read\\\n  .format('org.apache.spark.sql.execution.datasources.csv.CSVFileFormat')\\\n  .option('header', True)\\\n  .load(\"building.csv\")\nbuilding_df\n```", "```py\nimport pixiedust\npixiedust.sampleData()\n```", "```py\npixiedust.enableSparkJobProgressMonitor()\n```", "```py\nSuccessfully enabled Spark Job Progress Monitor\n```", "```py\ncars = pixiedust.sampleData(1)\n```", "```py\nimport pixiedust\ndata_url = \"https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD\"\nbuilding_dataframe = pixiedust.sampleData(data_url, forcePandas=True)\n```", "```py\nDownloading 'https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD' from https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD\nDownloaded 13672351 bytes\nCreating pandas DataFrame for 'https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD'. Please wait...\nLoading file using 'pandas'\nSuccessfully created pandas DataFrame for 'https://data.cityofnewyork.us/api/views/e98g-f8hy/rows.csv?accessType=DOWNLOAD'\n```", "```py\nimport pixiedust\nlondon_info = pixiedust.sampleData(\"https://files.datapress.com/london/dataset/london-borough-profiles/2015-09-24T15:50:01/London-borough-profiles.zip\")\n```", "```py\nDownloading 'https://files.datapress.com/london/dataset/london-borough-profiles/2015-09-24T15:50:01/London-borough-profiles.zip' from https://files.datapress.com/london/dataset/london-borough-profiles/2015-09-24T15:50:01/London-borough-profiles.zip\nExtracting first item in zip file...\nFile extracted: london-borough-profiles.csv\nDownloaded 948147 bytes\nCreating pySpark DataFrame for 'https://files.datapress.com/london/dataset/london-borough-profiles/2015-09-24T15:50:01/London-borough-profiles.zip'. Please wait...\nLoading file using 'com.databricks.spark.csv'\nSuccessfully created pySpark DataFrame for 'https://files.datapress.com/london/dataset/london-borough-profiles/2015-09-24T15:50:01/London-borough-profiles.zip'\n```", "```py\ndisplay(london_info)\n```", "```py\n!pip install pixiedust_rosie\n\n```", "```py\nimport pixiedust_rosie\npixiedust_rosie.wrangle_data()\n```", "```py\nurl = \"https://github.com/ibm-watson-data-lab/pixiedust_rosie/raw/master/sample-data/Healthcare_Cost_and_Utilization_Project__HCUP__-_National_Inpatient_Sample.csv\"\npixiedust_rosie.wrangle_data(url)\n```", "```py\n#Code generated by pixiedust_rosie\ndisplay(wrangled_df)\n```", "```py\nimport pixiedust\ncars = pixiedust.sampleData(1, forcePandas=True) #car performance data\ndisplay(cars)\n```", "```py\nimport pixiedust\nhomes = pixiedust.sampleData(6, forcePandas=True) #Million dollar home sales in NE Mass\ndisplay(homes)\n```", "```py\n#import the pixieapp decorators\nfrom pixiedust.display.app import *\n\n#Load the cars dataframe into the Notebook\ncars = pixiedust.sampleData(1)\n\n@PixieApp   #decorator for making the class a PixieApp\nclass HelloWorldApp():\n    #decorator for making a method a\n    #route (no arguments means default route)\n    @route()\n    def main_screen(self):\n        return \"\"\"\n        <button type=\"submit\" pd_options=\"show_chart=true\" pd_target=\"chart\">Show Chart</button>\n        <!--Placeholder div to display the chart-->\n        <div id=\"chart\"></div>\n        \"\"\"\n\n    @route(show_chart=\"true\")\n    def chart(self):\n        #Return a div bound to the cars dataframe\n        #using the pd_entity attribute\n        #pd_entity can refer a class variable or\n        #a global variable scoped to the notebook\n        return \"\"\"\n        <div pd_render_onload pd_entity=\"cars\">\n            <pd_options>\n                {\n                  \"title\": \"Average Mileage by Horsepower\",\n                  \"aggregation\": \"AVG\",\n                  \"clusterby\": \"origin\",\n                  \"handlerId\": \"barChart\",\n                  \"valueFields\": \"mpg\",\n                  \"rendererId\": \"bokeh\",\n                  \"keyFields\": \"horsepower\"\n                }\n            </pd_options>\n        </div>\n        \"\"\"\n#Instantiate the application and run it\napp = HelloWorldApp()\napp.run()\n```"]