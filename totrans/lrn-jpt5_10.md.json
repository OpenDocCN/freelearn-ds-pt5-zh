["```py\nC:\\Users\\Dan\\Anaconda3\\Scripts>jupyter notebook --generate-config\n```", "```py\nc.NotebookApp.certfile = u'/path/to/your/cert/cert.pem'\nc.NotebookApp.keyfile = u'/ path/to/your/cert/key.key'\nc.NotebookApp.ip = '*'\nc.NotebookApp.password = u'hashed-password'\nc.NotebookApp.open_browser = False\nc.NotebookApp.port = 8888\n```", "```py\nc.NotebookApp.tornado_settings = {\n'headers': {\n'Content-Security-Policy': \"frame-ancestors 'https://yourwebsite.com' 'self' \"\n}\n}\n```", "```py\nENV TINI_VERSION v0.6.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nEXPOSE 8888\nCMD [\"jupyter\", \"Notebook\", \"--port=8888\", \"--no-browser\", \"--ip=0.0.0.0\"]\n```", "```py\nimport scala.io.Source; \n\n//copied file locally https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data \nval filename = \"iris.data\" \n//println(\"SepalLength, SepalWidth, PetalLength, PetalWidth, Class\"); \n\n//load iris data into an array \nval array = scala.collection.mutable.ArrayBuffer.empty[Float] \nfor (line <- Source.fromFile(filename).getLines) { \n var cols = line.split(\",\").map(_.trim); \n //println(s\"${cols(0)}|${cols(1)}|${cols(2)}|${cols(3)} |${cols(4)}\"); \n val i = cols(0).toFloat \n array += i; \n} \n\n//get some minimal statistics \nval count = array.length; \nvar min:Double = 9999.0; \nvar max:Double = 0.0; \nvar total:Double = 0.0; \nfor ( x <- array ) { \n if (x < min) { min = x; } \n if (x > max) { max = x; } \n total += x; \n} \nval mean:Double = total / count; \n```", "```py\n\n```", "```py \n```", "```py\n\n.. code:: scala \n\n import scala.io.Source; \n\n //copied file locally https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data \n val filename = \"iris.data\" \n //println(\"SepalLength, SepalWidth, PetalLength, PetalWidth, Class\"); \n\n //load iris data into an array \n val array = scala.collection.mutable.ArrayBuffer.empty[Float] \n for (line <- Source.fromFile(filename).getLines) { \n var cols = line.split(\",\").map(_.trim); \n //println(s\"${cols(0)}|${cols(1)}|${cols(2)}|${cols(3)} |${cols(4)}\"); \n val i = cols(0).toFloat \n array += i; \n } \n\n //get some minimal statistics \n val count = array.length; \n var min:Double = 9999.0; \n var max:Double = 0.0; \n var total:Double = 0.0; \n for ( x <- array ) { \n if (x < min) { min = x; } \n if (x > max) { max = x; } \n total += x; \n } \n val mean:Double = total / count; \n\n.. parsed-literal:: \n... \n```"]