- en: Jupyter and Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Jupyter product was derived from the IPython project. The IPython project
    was used to provide interactive online access to Python. Over time it became useful
    to interact with other programming languages, such as R, in the same manner. With
    this split from only Python, the tool grew into its current manifestation of Jupyter.
    IPython is still an active tool available for use.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter is available as a web application for a wide variety of platforms. It
    can also be used on your desktop/laptop over a wide variety of installations.
    In this book, we will be exploring using Jupyter from a Windows PC and over the
    internet for other providers.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jupyter is organized around a few basic concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notebook**: A collection of statements (in a language). For example, this
    could be a complete R script that loads data, analyzes it, produces a graph, and
    records results elsewhere.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cell**: the lowest granular piece of a Jupyter Notebook that can be worked
    with:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current Cell**: The current cell being edited or the one(s) selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kernel**: each notebook is associated with a specific language implementation.
    The part of Jupyter which processes the specific language involved is called a
    kernel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A first look at the Jupyter user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can jump right in and see what Jupyter has to offer. A Jupyter screen looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4f9d0dd-92f0-4375-811b-ad95a6351e82.png)'
  prefs: []
  type: TYPE_IMG
- en: So, Jupyter is deployed as a website that can be accessed on your machine (or
    can be accessed like any other website across the internet).
  prefs: []
  type: TYPE_NORMAL
- en: We see the URL of the page, `http://localhost:8888/tree`. `localhost` is a pseudonym
    for a web server running on your machine. The website we are accessing on the
    web server is in a *tree* display. This is the default display. This conforms
    to the display of the projects within Jupyter. Jupyter displays objects in a tree
    layout much like Windows File Explorer. The main page lists a number of projects;
    each project is its own subdirectory and contains a further delineation of content
    for each. Depending on where you start Jupyter, the existing contents of the current
    directory will be included in the display as well.
  prefs: []
  type: TYPE_NORMAL
- en: Detailing the Jupyter tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the web page, we have the soon to be familiar Jupyter logo and three tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: Files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Files tab lists the objects available to Jupyter. The files used by Jupyter
    are stored as regular files on your disk. Jupyter provides context managers that
    know how to process the different types of files and programs you are using. You
    can see the Jupyter files when you use Windows Explorer to view your file contents
    (they have an `.ipynb` file extension). You can see non-Jupyter files listed in
    the Jupyter window as well.
  prefs: []
  type: TYPE_NORMAL
- en: The Running tab lists the notebooks that have been started. Jupyter keeps track
    of which notebooks are running. This tab allows you to control which notebooks
    are running at any time.
  prefs: []
  type: TYPE_NORMAL
- en: The Clusters tab is for environments where several machines are in use for running
    Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: Cluster implementations of Jupyter are a topic worthy of their own, dedicated
    materials.
  prefs: []
  type: TYPE_NORMAL
- en: What actions can I perform with Jupyter?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we see:'
  prefs: []
  type: TYPE_NORMAL
- en: A prompt Select items to perform action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Upload button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A New pull down menu and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Refresh icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The prompt tells you that you can select multiple items and then perform the
    same action on all of them. Most of the following actions (in the menus) can be
    performed over a single item or a selected set of items.
  prefs: []
  type: TYPE_NORMAL
- en: The Upload button will present a prompt to select a file to upload to Jupyter.
    This would typically be used to move a data file into the project for access in
    the case where Jupyter is running as a website in a remote location where you
    can't just copy the file to the disk where Jupyter is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The New pull down menu presents a list of choices of the different kinds of
    Jupyter projects (kernels) that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42a761de-1676-4334-b619-0622d9634676.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the list of objects that Jupyter knows how to create:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text File: Create a text file for use in this folder. For example, if the notebook
    were to import a file you may create the file using this feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Folder: Yes, just like in Windows File Explorer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Terminals Unavailable: Grayed out, this feature can be used in a Nix environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notebooks: Grayed out,-this is not really a file type, but a heading to the
    different types of notebooks that this installation knows how to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Julia 0.4.5: Creates a Julia notebook where the coding is in the Julia language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python 3: Creates a notebook where the coding is in the Python language. This
    is the default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'R: Creates a notebook where the coding is in the R language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on which kernels you have installed in your installation, you may
    see other notebook types listed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What objects can Jupyter manipulate?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we started one of the notebooks (it would automatically be selected in the
    Jupyter object list) and now looked at the pulldown of actions against the objects
    selected we would see a display like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95ab51ac-f89c-49b5-9399-405d99245e75.png)'
  prefs: []
  type: TYPE_IMG
- en: We see that the menu action has changed to Rename, as that is the most likely
    action to be taken on one file and we have an icon to delete the project as well
    (the trashcan icon).
  prefs: []
  type: TYPE_NORMAL
- en: The item count is now 1 (we have one object selected in the list), the icon
    for the one item is a filled in blue square (denoting that it is a running project),
    and a familiar Home icon to bring us back to the Jupyter home page display in
    the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object''s menu has choices for:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Folders: select the folders available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All Notebooks: select the Jupyter Notebooks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running: select the running Jupyter Notebooks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Files: select the files in the directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we scroll down in the object display, we see a little different information
    in the list of objects available. Each of the objects listed has a type (denoted
    by the icon shape associated) and a name assigned by the user when it was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of the objects is a Jupyter project that can be accessed, shared, and
    moved on its own. Every project has a full name, as entered by the user creating
    the project, and an icon that portrays this entry as a project. We will see other
    Jupyter icons corresponding to other project components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40f94478-0a89-4ce9-b0e8-a5e91c3ce3dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing the Jupyter project display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we pull down the New menu and select Python 3, Jupyter would create a new
    Python notebook and move to display its contents. We would see a display like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0f7d5ca-68b1-4862-bc00-d0b35e6f07c0.png)'
  prefs: []
  type: TYPE_IMG
- en: We have created a new Jupyter Notebook and are in its display. The logo is there.
    The title defaults to `Untitled`, which we can change by clicking on it. There
    is an (autosaved) marker that tells you Jupyter has automatically stored your
    notebook to disk (and will continue to do so regularly as you work on it).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a menu bar and a denotation that this notebook is using Python
    3 as its source language. The menu choices are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File: Standard file operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit: For editing cell contents (more to come)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View: To change the display of the notebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Insert: To insert a cell in the notebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cell: To change the format, usage of a cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kernel: To adjust the kernel used for the notebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Help: To bring up the help system for Jupyter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The File menu has the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2157d8ec-92f5-42fc-a47a-3a6d1ed6f0e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'New Notebook: Similar to the pull down from the home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open...: Open a notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make a Copy...: Copy a notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rename...: Rename a notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Save and Checkpoint: Save the current notebook at a checkpoint. Checkpoints
    are specific points in a notebook''s history that you want to maintain in order
    to return to a checkpoint if you change your mind about a recent set of changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Print Preview: Similar to any print preview that you have used otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download as: Allows you to store the notebook in a variety of formats. The
    most notable formats would be PDF or Excel, which would allow you to share the
    notebook with users that do not have access to Jupyter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Trusted Notebook: (The feature is grayed out). When a notebook is opened by
    a user, the server computes a signature with the user''s key, and compares it
    with the signature stored in the notebook''s metadata. If the signature matches,
    HTML and JavaScript output in the notebook will be trusted at load, otherwise
    it will be untrusted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Close and Halt: Close the current notebook and stop it running in the Jupyter
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Edit menu has the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2471ab30-a62f-42f9-9606-b6e2e7110119.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cut Cells: Typical cut operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy Cells: Assuming you are used to the GUI operations of copying cells to
    memory buffer and later pasting into another location in the notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Paste Cells Above: If you have selected a cell and if you have copied a cell,
    this option will not be grayed out and will paste the buffered cell above the
    current cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Paste Cells Below: Similar to the previous option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete Cells: Will delete the selected cells.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undo Delete Cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Split Cell: There is a style issue here, regarding how many statements you
    put into a cell. Many times, you will start with one cell containing a number
    of statements and split that cell up many times to break off individual or groups
    of statements into their own cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Merge Cell Above: Combine the current cell with the one above it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Merge Cell Below: Similar to the previous option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Move Cell Up: Move the current cell before the one above it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move Cell Down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit Notebook Metadata: For advanced users to modify the internal programming
    language used by Jupyter for your notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Find and Replace: Locate specific text within cells and possibly replace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The View menu has the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c40dc2dd-480e-4861-a0d3-6e5e599e765a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Toggle Header: Toggle the display of the Jupyter header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Toggle Toolbar: Toggle the display of the Jupyter toolbar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cell Toolbar: Change the displayed items for the cell being edited:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None: Don''t display a cell toolbar'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit Metadata: Edit a cells metadata directly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raw Cell Format: Edit the cell raw format as used by Jupyter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Slideshow: Walk through the cells in a slideshow manner'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Insert menu has the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a11924ba-c9be-45ca-975d-5ba3be49d9fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert Cell Above: Insert the copied buffer cell in front of the current cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Insert Cell Below: Same as previous one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cell menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Cell menu has the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68d61926-e733-4ecd-b10d-a1b619259a54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run Cells: Runs all of the cells in the notebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run Cells and Select Below: Runs cells and selects all of the cells below the
    current'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run Cells and Insert Below: Runs cells and adds a blank cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run All: Runs all of the cells'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run All Above: Runs all of the cells above the current'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run All Below: Runs all of the cells below the current'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cell Type: Changes the type of the selected cell(s) to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code: this is the default—the cell would expect to have language statements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Markdown: The cell contains HTML markdown,-typically used to display the notebook
    in the best manner (as it is a website, so has all of HTML available to it)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raw NBConvert: This is an internal Jupyter format, basically plain text'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Current Outputs: Whether to clear or continue the outputs from the cells'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kernel menu is used to control the underlying language engine used by the
    notebook. The menu choices are as follows. I think many of the choices in this
    menu are used very little:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/feec77c4-1592-4dac-bb1c-d1af3247baaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Interrupt: Momentarily stops the underlying language engine and then lets it
    continue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restart: Restarts the underlying language engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart & Clear Output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart & Run All
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reconnect: If you were to interrupt the kernel, you would then need to reconnect
    to start running again'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change kernel: Changes the language used in this notebook to one available
    in your installation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The help menu displays the help options for Jupyter and language context choices.
    For example, in our Python notebook we see choices for common Python libraries
    that may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/687dd0f6-a152-4eed-b19d-4d75cbf8ae2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Icon toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just below the regular menu is an icon toolbar with many of the commonly used
    menu items for faster use, as seen in this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/554fdeb6-efbb-4bb3-b548-1c6bc50dbe3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The icons correspond to the previous menu choices (listed in order of appearance):'
  prefs: []
  type: TYPE_NORMAL
- en: File/Save the current notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert cell below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cut current cells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the current cells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paste cells below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move selected cells up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move selected cells down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run from selected cells down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interrupt the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of formats we can apply to the current cells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An icon to open a command palette with descriptive names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An icon to open the cell toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does it look when we execute scripts?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we were to provide a name for the notebook, enter a simple Python script,
    and execute the notebook cells, we would see a display like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f14f779-bd79-4c1d-af56-e72a4e58af04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The script is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We assign a value to the name and state variables and then print them out.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice, I have placed the statements into two different cells. This is
    just for readability. They could all be in the same cell or three different cells.
  prefs: []
  type: TYPE_NORMAL
- en: There are line numbers assigned to each cell. The numbering always starts at
    1 for the first cell, then as you move cells around the numbering may grow (as
    you can see the first cell is labeled cell 2 in the display).
  prefs: []
  type: TYPE_NORMAL
- en: Below the second cell, we have non-editable display results. Jupyter always
    displays any corresponding output of a cell just below. This could include error
    information as well.
  prefs: []
  type: TYPE_NORMAL
- en: Industry data science usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is about Jupyter and data science. We have the introduction to Jupyter.
    Now, we can look at data science practices and then see how the two concepts work
    together.
  prefs: []
  type: TYPE_NORMAL
- en: Data science is used in many industries. It is interesting to note the predominant
    technologies involved and algorithms used by industry. We can see the same technologies
    available within Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the industries that are larger users of data science include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Industry** | **Larger data science use** | **Technology/algorithms** |'
  prefs: []
  type: TYPE_TB
- en: '| Finance | Hedge funds | Python |'
  prefs: []
  type: TYPE_TB
- en: '| Gambling | Establish odds | R |'
  prefs: []
  type: TYPE_TB
- en: '| Insurance | Measure and price risk | Domino (R) |'
  prefs: []
  type: TYPE_TB
- en: '| Retail banking | Risk, customer analytics, product analytics | R |'
  prefs: []
  type: TYPE_TB
- en: '| Mining | Smart exploration, yield optimization | Python |'
  prefs: []
  type: TYPE_TB
- en: '| Consumer products | Pricing and distribution | R |'
  prefs: []
  type: TYPE_TB
- en: '| Healthcare | Drug discovery and trials | Python |'
  prefs: []
  type: TYPE_TB
- en: All of these data science investigations could be done in Jupyter, as the languages
    used are fully supported.
  prefs: []
  type: TYPE_NORMAL
- en: Real life examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we see several examples taken from current industry focus and
    apply them in Jupyter to ensure its utility.
  prefs: []
  type: TYPE_NORMAL
- en: Finance, Python - European call option valuation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an example of this at [https://www.safaribooksonline.com/library/view/python-for-finance/9781491945360/ch03.html](https://www.safaribooksonline.com/library/view/python-for-finance/9781491945360/ch03.html)
    which is taken from the book *Python for Finance* by Yves Hilpisch. The model
    used is fairly standard for finance work.
  prefs: []
  type: TYPE_NORMAL
- en: We want to arrive at the theoretical value of a call option. A call option is
    the right to buy a security, such as IBM stock, at a specific (strike) price within
    a certain time frame. The option is priced based on the riskiness or volatility
    of the security in relation to the strike price and current price. The example
    uses a European option which can only be exercised at maturity-this simplifies
    the problem set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example is using Black-Scholes model for option valuation where we have:'
  prefs: []
  type: TYPE_NORMAL
- en: Initial stock index level *S[0] = 100*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strike price of the European call option *K = 105*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time-to-maturity *T = 1 year*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant, riskless short rate *r = 5%*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant volatility *σ  = 20%*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These elements make up the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3928ca07-3a1c-41a8-b98f-8b7713e77d55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The algorithm used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Draw *I* (pseudo) random numbers from the standard normal distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate all resulting index levels at maturity *S[T]*(*i*) for given *z*(*i*)
    in the previous equation. Calculate all inner values of the option at maturity
    as *h[T]*(*i*) = max(*S[T]*(*i*) - *K*,0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Estimate the option present value via the Monte Carlo estimator given in the
    following equation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0557b52d-a748-49d8-9f38-17d91b4e641b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The script is as follows. We use `numpy` for the intense mathematics used.
    The rest of the coding is typical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The results under Jupyter are as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edf97973-709f-4468-8050-8fac2d350139.png)'
  prefs: []
  type: TYPE_IMG
- en: The `8.071` value corresponds with the published expected value *8.019* due
    to variance in the random numbers used. (I am seeding the random number generator
    to have reproducible results).
  prefs: []
  type: TYPE_NORMAL
- en: Finance, Python - Monte Carlo pricing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another algorithm in popular use is Monte Carlo simulation. In Monte Carlo,
    as the name of the gambling resort implies, we simulate a number of chances taken
    in a scenario where we know the percentage outcomes of the different results,
    but do not know exactly what will happen in the next *N* chances. We can see this
    model being used at [http://www.codeandfinance.com/pricing-options-monte-carlo.html](http://www.codeandfinance.com/pricing-options-monte-carlo.html).
    In this example, we are using Black-Scholes again, but in a different direct method
    where we see individual steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coding is as follows. The Python coding style for Jupyter is slightly different
    than used directly in Python, as you can see by the changed imports near the top
    of the code. Rather than just pulling in the functions you want from a library,
    you pull in the entire library and the coding uses what is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The results under Jupyter are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4623493b-fb5f-481a-be14-fa99ab5e1348.png)'
  prefs: []
  type: TYPE_IMG
- en: The result price of `14.4452` is close to the published value *14.5069*.
  prefs: []
  type: TYPE_NORMAL
- en: Gambling, R - betting analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the gambling games are really coin flips, with 50/50 chances of success.
    Along those lines we have coding from [http://forumserver.twoplustwo.com/25/probability/flipping-coins-getting-3-row-1233506/](http://forumserver.twoplustwo.com/25/probability/flipping-coins-getting-3-row-1233506/)
    that determines the probability of a series of heads or tails in a coin flip,
    with a trigger that can be used if you know the coin/game is biased towards one
    result or the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the following output in Jupyter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c026f71-212b-460f-aaad-2c121fa567de.png)'
  prefs: []
  type: TYPE_IMG
- en: We end up with the probability of getting three heads in a row with an unbiased
    game. In this case, there is a 92% chance (within the range of tests we have run
    14 flips).
  prefs: []
  type: TYPE_NORMAL
- en: Insurance, R - non-life insurance pricing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have an example of using R to come up with the pricing for non-life products,
    specifically mopeds, at [http://www.cybaea.net/journal/2012/03/13/R-code-for-Chapter-2-of-Non_Life-Insurance-Pricing-with-GLM/](http://www.cybaea.net/journal/2012/03/13/R-code-for-Chapter-2-of-Non_Life-Insurance-Pricing-with-GLM/).
    The code first creates a table of the statistics available for the product line,
    then compares the pricing to actual statistics in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first part of the code that accumulates the data is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant first 10 rows of the table are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go through each product/statistics to determine whether the pricing
    for a product is in line with others. Note, the `repos =` clause on the `install.packages`
    statement is a fairly new addition to R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant display is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that some vehicle classes (`2`,`6`) are priced very low in
    comparison to statistics for that vehicle where as other are overpriced (`12`, `22`).
  prefs: []
  type: TYPE_NORMAL
- en: Consumer products, R - marketing effectiveness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We take the example from a presentation I made at [www.dantoomeysoftware.com/Using_R_for_Marketing_Research.pptx](http://www.dantoomeysoftware.com/Using_R_for_Marketing_Research.pptx)
    looking at the effectiveness of different ad campaigns for grape fruit juice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With output (several sections):'
  prefs: []
  type: TYPE_NORMAL
- en: '(raw data from file, first 10 rows):'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **sales** | **price** | **ad_type** | **price_apple** | **price_cookies**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 222 | 9.83 | 0 | 7.36 | 8.8 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 201 | 9.72 | 1 | 7.43 | 9.62 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 247 | 10.15 | 1 | 7.66 | 8.9 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 169 | 10.04 | 0 | 7.57 | 10.26 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 317 | 8.38 | 1 | 7.33 | 9.54 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 227 | 9.74 | 0 | 7.51 | 9.49 |'
  prefs: []
  type: TYPE_TB
- en: 'Statistics on the data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The data shows the effectiveness of each campaign. Family sales are more effective:'
  prefs: []
  type: TYPE_NORMAL
- en: '*186.666666666667//mean of nature sales*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*246.666666666667//mean of family sales*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The difference is more pronounced on the histogram displays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1e49edd-452e-45d1-a537-8564cf49751a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Docker with Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is a mechanism that allows you to have many complete virtual instances
    of an application in one machine. Docker is used by many software firms to provide
    a fully scalable implementation of their services, and support as many concurrent
    users as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Prior mechanisms for dealing with multiple instances shared common resources
    (such as disk address space). Under Docker, each instance is a complete entity
    separate from all others.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Jupyter on a Docker environment allows multiple users to access
    their own Jupyter instance, without having to worry about interfering with someone
    else's calculations.
  prefs: []
  type: TYPE_NORMAL
- en: The key feature of Docker is allowing for a variable number of instances of
    your notebook to be in use at any time. The Docker control system can be set up
    to create new instances for every user that accesses your notebook. All of this
    is built-in to Docker without programming; just use the user interface to decide
    how to create instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways you can use Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: From a public service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a public Docker service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several services out there. I think they work pretty much the same
    way: sign up for the service, upload your notebook, monitor usage (the Docker
    control program tracks usage automatically). For example, if we use [https://hub.docker.com/](https://hub.docker.com/)
    we are really using a version repository for our notebook. Versioning is used
    in software development for tracking changes that are made over time. This also
    allows for multiple user access privileges as well:'
  prefs: []
  type: TYPE_NORMAL
- en: First, sign up. This provides authentication to the service vendor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a repository—where you will keep your version of the notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need Docker installed on your machine to pull/push notebooks from/to
    your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Docker is operating system dependent. Go to the [https://www.docker.com/](https://www.docker.com/)
    home page for instructions for your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Upload (push) your Jupyter image to your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access your notebook in the repository. You can share the address (URL) of your
    notebook with others under control of Docker, making specific access rights to
    different users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From then on, it will work just as if it were running locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Docker on your machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker on your local machine would only be a precursor to posting on a public
    Docker service, unless the machine you are installing Docker on is accessible
    by others.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to have Docker installed on your machine. It works exactly
    like the previous case, except you are managing the Docker image space.
  prefs: []
  type: TYPE_NORMAL
- en: How to share notebooks with others
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways to share Jupyter Notebooks with others:'
  prefs: []
  type: TYPE_NORMAL
- en: Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place onto Google Drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share on GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store as HTML on a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Jupyter on a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you email a notebook?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to email your notebook, the notebook must be converted to a plain text
    format, sent as an attachment to the recipient, and then the recipient must convert
    it back to the 'binary' notebook format.
  prefs: []
  type: TYPE_NORMAL
- en: Email attachments are normally converted to a well-defined **MIME** (**Multi-purpose
    Internet Mail Extension**) format. There is a program available that converts
    the notebook format, `nb2mail`, which converts the notebook to a notebook MIME
    format. The program is available at [https://github.com/nfultz/nb2mail](https://github.com/nfultz/nb2mail).
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `nb2mail` using `pip` command (see website)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert your selected notebook to MIME format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send to recipient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipient MIME conversion process will store the file in the correct fashion
    (assuming they have also installed `nb2mail`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing a notebook on Google Drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Drive can be used to store your notebook profile information. This might
    be used when combined with the previous emailing of a notebook to another user.
    The recipient could use a Google Drive profile that would preclude anyone without
    the profile information from interacting with the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: You install the python extension (from [https://github.com/jupyter/jupyter-drive](https://github.com/jupyter/jupyter-drive))
    using `pip` and then `python -m`. From then on, you access the notebooks with
    the Google Drive profiles, as `ipython notebook -profile <profilename>`.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub (and others) allow you to place a notebook on their servers that, once
    there, can be accessed directly using the nbviewer. The server has installed Python
    (and other language) coding needed to support your notebook. The nbviewer is a
    read-only use of your notebook, and is not interactive.
  prefs: []
  type: TYPE_NORMAL
- en: The nbviewer is available at [https://github.com/jupyter/nbviewer](https://github.com/jupyter/nbviewer).
    The site includes specific parameters which need to be added to the `ipython notebook`
    command, such as the command to start the viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Store as HTML on a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A built-in feature of notebooks is to export the notebook into different formats.
    One of those is HTML. In this manner, you could export the notebook into HTML
    and copy the file(s) onto your web server as changes are made.
  prefs: []
  type: TYPE_NORMAL
- en: The command is `jupyter nbconvert <notebook name>.ipynb --to html`.
  prefs: []
  type: TYPE_NORMAL
- en: Again, this would be a non-interactive, read-only version of your notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Install Jupyter on a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter is deployed as a web application. If you have direct access to a web
    server, you could install Jupyter on the web server, create notebooks on that
    web server, and then the notebooks would be available to others that are completely
    dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: As a web server you also have control over access to the web server so can control
    who can access your notebook.
  prefs: []
  type: TYPE_NORMAL
- en: This is an advanced interaction that would require working with your webmaster
    to determine the correct approach.
  prefs: []
  type: TYPE_NORMAL
- en: How can you secure a notebook?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two aspects to security in Jupyter Notebooks:'
  prefs: []
  type: TYPE_NORMAL
- en: Making sure only specific users can access your notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making sure your notebook is not used to host malicious coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While many of the uses of Jupyter are solely for educating others, there are
    instances where the information being accessed is and should remain confidential.
    Jupyter allows you to put up barriers to entry to your notebook in several manners.
  prefs: []
  type: TYPE_NORMAL
- en: When we identify the user, we are authenticating that user. This is normally
    done by presenting a login challenge before allowing entry, where the user has
    to enter a username and password.
  prefs: []
  type: TYPE_NORMAL
- en: If the instance of Jupyter hosting, your notebook is installed on a web server
    and you can use the web server's access control to limit access to your notebook.
    Further, most of the vendors that support notebook hosting provide a mechanism
    to limit access to specific users.
  prefs: []
  type: TYPE_NORMAL
- en: Malicious content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The other aspect of security is to make sure the contents of your notebooks
    are not malicious. You should make sure your notebook is safe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that HTML is sanitized (looking for malicious HTML coding and subverting
    it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not allow your notebook to execute external JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check cell contents that may be malicious are challenged in a server environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sanitize output of cells so as not to produce unwanted effects on user machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we looked into the details of the Jupyter user interface:
    what objects does it work with, what actions can be taken by Jupyter, what does
    the display tell us about the data, and what tools are available? Next, we looked
    at some real-life examples from industry showing R and Python coding from several
    industries. Then we saw some of the ways to share our notebook with other users
    and, correspondingly, how to protect our notebook with different security mechanisms.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how far we can go using Python in a Jupyter
    Notebook.
  prefs: []
  type: TYPE_NORMAL
