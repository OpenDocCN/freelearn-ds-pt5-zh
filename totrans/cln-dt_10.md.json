["```py\nunzip ferguson-tweet-ids.zip\n\n```", "```py\nunzip ferguson-tweet-ids.zip\n\n```", "```py\ngunzip ids.txt.gz\n\n```", "```py\nmegan$ wc ids.txt\n 13238863 13238863 251538397 ids.txt\n\n```", "```py\nmegan$ head ids.txt\n501064188211765249\n501064196642340864\n501064197632167936\n501064196931330049\n501064198005481472\n501064198009655296\n501064198059597824\n501064198513000450\n501064180468682752\n501064199142117378\n\n```", "```py\nhead -1000 ids.txt > ids_1000.txt\n\n```", "```py\npip install twarc\n\n```", "```py\ntwarc.py --consumer_key abcd --consumer_secret abcd --access_token abcd --access_token_secret abcd --hydrate ids_1000.txt > tweets_1000.json\n\n```", "```py\nwc tweets_1000.json\n\n```", "```py\nless tweets_1000.json\n\n```", "```py\n{\"contributors\": null, \n\"truncated\": false, \n\"text\": \"Another test. \\u00c9g elska g\\u00f6gn. #datacleaning\", \n\"in_reply_to_status_id\": null, \n\"id\": 542486101047275520, \n\"favorite_count\": 0, \n\"source\": \"<a href=\\\"http://twitter.com\\\" rel=\\\"nofollow\\\">Twitter Web Client</a>\", \n\"retweeted\": false, \n\"coordinates\": null, \n\"entities\": \n{\"symbols\": [], \n\"user_mentions\": [], \n\"hashtags\": \n[{\"indices\": [29, 42], \n\"text\": \"datacleaning\"}], \n\"urls\": []}, \n\"in_reply_to_screen_name\": null, \n\"id_str\": \"542486101047275520\", \n\"retweet_count\": 0, \n\"in_reply_to_user_id\": null, \n\"favorited\": false, \n\"user\": \n{\"follow_request_sent\": false, \n\"profile_use_background_image\": false, \n\"profile_text_color\": \"333333\", \n\"default_profile_image\": false, \n\"id\": 986601, \n\"profile_background_image_url_https\": \"https://pbs.twimg.com/profile_background_images/772436819/b7f7b083e42c9150529fb13971a52528.png\", \n\"verified\": false, \n\"profile_location\": null, \n\"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/3677035734/d8853be8c304729610991194846c49ba_normal.jpeg\", \n\"profile_sidebar_fill_color\": \"F6F6F6\", \n\"entities\": \n{\"url\": \n{\"urls\": \n[{\"url\": \"http://t.co/dBQNKhR6jY\", \n\"indices\": [0, 22], \n\"expanded_url\": \"http://about.me/megansquire\", \n\"display_url\": \"about.me/megansquire\"}]},\n\"description\": {\"urls\": []}}, \n\"followers_count\": 138, \n\"profile_sidebar_border_color\": \"FFFFFF\", \n\"id_str\": \"986601\", \n\"profile_background_color\": \"000000\", \n\"listed_count\": 6, \n\"is_translation_enabled\": false, \n\"utc_offset\": -14400, \n\"statuses_count\": 376, \n\"description\": \"Open source data hound. Leader of the FLOSSmole project. Professor of Computing Sciences at Elon University.\", \n\"friends_count\": 82, \n\"location\": \"Elon, NC\", \n\"profile_link_color\": \"038543\", \n\"profile_image_url\": \"http://pbs.twimg.com/profile_images/3677035734/d8853be8c304729610991194846c49ba_normal.jpeg\", \n\"following\": false, \n\"geo_enabled\": false, \n\"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/986601/1368894408\", \n\"profile_background_image_url\": \"http://pbs.twimg.com/profile_background_images/772436819/b7f7b083e42c9150529fb13971a52528.png\", \n\"name\": \"megan squire\", \n\"lang\": \"en\", \n\"profile_background_tile\": false, \n\"favourites_count\": 64, \n\"screen_name\": \"MeganSquire0\", \n\"notifications\": false, \n\"url\": \"http://t.co/dBQNKhR6jY\", \n\"created_at\": \"Mon Mar 12 05:01:55 +0000 2007\", \n\"contributors_enabled\": false, \n\"time_zone\": \"Eastern Time (US & Canada)\", \n\"protected\": false, \n\"default_profile\": false, \n\"is_translator\": false}, \n\"geo\": null, \n\"in_reply_to_user_id_str\": null, \n\"lang\": \"is\", \n\"created_at\": \"Wed Dec 10 01:09:00 +0000 2014\", \n\"in_reply_to_status_id_str\": null, \n\"place\": null}\n```", "```py\nCREATE TABLE IF NOT EXISTS ferguson_tweets (\n  tid bigint(20) NOT NULL,\n  ttext varchar(200) DEFAULT NULL,\n  tcreated_at varchar(50) DEFAULT NULL,\n  tuser bigint(20) DEFAULT NULL,\n  PRIMARY KEY (tid)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE IF NOT EXISTS ferguson_tweets_hashtags (\n  tid bigint(20) NOT NULL,\n  ttag varchar(200) NOT NULL,\n  PRIMARY KEY (tid, ttag)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\nCREATE TABLE IF NOT EXISTS ferguson_tweets_mentions (\n  tid bigint(20) NOT NULL,\n  tuserid bigint(20) NOT NULL,\n  tscreen varchar(100) DEFAULT NULL,\n  tname varchar(100) DEFAULT NULL,\n  PRIMARY KEY (tid,tuserid)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\nCREATE TABLE IF NOT EXISTS ferguson_tweets_urls (\n  tid bigint(20) NOT NULL,\n  turl varchar(200) NOT NULL,\n  texpanded varchar(255) DEFAULT NULL,\n  tdisplay varchar(200) DEFAULT NULL,\n  PRIMARY KEY (tid,turl)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```", "```py\n#jsonTweetCleaner.py\nimport json\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect(host=\"localhost\",\\\n    user=\"username\", \\\n    passwd=\"password\", \\\n    db=\"ferguson\", \\\n    use_unicode=True, \\\n    charset=\"utf8\")\ncursor = db.cursor()\ncursor.execute('SET NAMES utf8mb4')\ncursor.execute('SET CHARACTER SET utf8mb4')\ncursor.execute('SET character_set_connection=utf8mb4')\n\n# open the file full of json-encoded tweets\nwith open('tweets_1000.json') as f:\n    for line in f:\n        # read each tweet into a dictionary\n        tweetdict = json.loads(line)\n\n        # access each tweet and write it to our db table\n        tid    = int(tweetdict['id'])\n        ttext  = tweetdict['text']\n        uttext = ttext.encode('utf8')\n        tcreated_at = tweetdict['created_at']\n        tuser  = int(tweetdict['user']['id'])\n\n        try:\n            cursor.execute(u\"INSERT INTO ferguson_tweets(tid, \nttext, tcreated_at, tuser) VALUES (%s, %s, %s, %s)\", \\\n(tid,uttext,tcreated_at,tuser))\n            db.commit() # with MySQLdb you must commit each change\n        except MySQLdb.Error as error:\n            print(error)\n            db.rollback()\n\n        # access each hashtag mentioned in tweet\n        hashdict = tweetdict['entities']['hashtags']\n        for hash in hashdict:\n            ttag = hash['text']\n            try:\n                cursor.execute(u\"INSERT IGNORE INTO \nferguson_tweets_hashtags(tid, ttag) VALUES (%s, %s)\",(tid,ttag))\n                db.commit()\n            except MySQLdb.Error as error:\n                print(error)\n                db.rollback()\n\n        # access each URL mentioned in tweet\n        urldict = tweetdict['entities']['urls']\n        for url in urldict:\n            turl      = url['url']\n            texpanded = url['expanded_url']\n            tdisplay  = url['display_url']\n\n            try:\n                cursor.execute(u\"INSERT IGNORE INTO  ferguson_tweets_urls(tid, turl, texpanded, tdisplay) \nVALUES (%s, %s, %s, %s)\", (tid,turl,texpanded,tdisplay))\n                db.commit()\n            except MySQLdb.Error as error:\n                print(error)\n                db.rollback()\n\n        # access each user mentioned in tweet\n        userdict = tweetdict['entities']['user_mentions']\n        for mention in userdict:\n            tuserid = mention['id']\n            tscreen = mention['screen_name']\n            tname   = mention['name']\n\n            try:\n                cursor.execute(u\"INSERT IGNORE INTO \nferguson_tweets_mentions(tid, tuserid, tscreen, tname) \nVALUES (%s, %s, %s, %s)\", (tid,tuserid,tscreen,tname))\n                db.commit()\n            except MySQLdb.Error as error:\n                print(error)\n# disconnect from server\ndb.close()\n```", "```py\nSELECT left(tdisplay,locate('/',tdisplay)-1) as url, \n  count(tid) as num\nFROM ferguson_tweets_urls\nGROUP BY 1 ORDER BY 2 DESC;\n```", "```py\nimport csv\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect(host=\"localhost\",\n    user=\"username\", \n    passwd=\"password\", \n    db=\"ferguson\", \n    use_unicode=True, \n    charset=\"utf8\")\ncursor = db.cursor()\n\ncursor.execute('SELECT left(tdisplay, LOCATE(\\'/\\', \n    tdisplay)-1) as url, COUNT(tid) as num \n    FROM ferguson_tweets_urls \n    GROUP BY 1 ORDER BY 2 DESC LIMIT 15')\n\nwith open('fergusonURLcounts.tsv', 'wb') as fout:\n    writer = csv.writer(fout)\n    writer.writerow([ i[0] for i in cursor.description ])\n    writer.writerows(cursor.fetchall())\n```", "```py\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<!-- \nthis code is modeled on mbostock's \n\"Let's Make a Bar Chart\" D3 tutorial \navailable at http://bl.ocks.org/mbostock/3885304\nMy modifications:\n* formatting for space\n* colors\n* y axis label moved\n* changed variable names to match our data\n* loads data via CSV rather than TSV file\n-->\n\n<style>\n.bar {fill: lightgrey;}\n.bar:hover {fill: lightblue;}\n.axis {font: 10px sans-serif;}\n.axis path, .axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n.x.axis path {display: none;}\n</style>\n<body>\n<script src=\"img/d3.min.js\"></script>\n<script>\n\nvar margin = {top: 20, right: 20, bottom: 30, left: 40},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar x = d3.scale.ordinal()\n    .rangeRoundBands([0, width], .1);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\nvar yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\");\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nd3.csv(\"fergusonURLcounts.csv\", type, function(error, data) {\n  x.domain(data.map(function(d) { return d.url; }));\n  y.domain([0, d3.max(data, function(d) { return d.num; })]);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n    .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \"-3em\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Frequency\");\n\n  svg.selectAll(\".bar\")\n      .data(data)\n    .enter().append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", function(d) { return x(d.url) ; })\n      .attr(\"width\", x.rangeBand())\n      .attr(\"y\", function(d) { return y(d.num); })\n      .attr(\"height\", function(d) { return height - y(d.num); });\n});\n\nfunction type(d) {\n  d.num = +d.num;\n  return d;\n}\n\n</script>\n</body>\n</html>\n```", "```py\n    TRUNCATE TABLE ferguson_tweets;\n    TRUNCATE TABLE ferguson_tweets_hashtags;\n    TRUNCATE TABLE ferguson_tweets_mentions;\n    TRUNCATE TABLE ferguson_tweets_urls;\n    ```", "```py\n    twarc.py --consumer_key abcd --consumer_secret abcd --access_token abcd --access_token_secret abcd --hydrate ids.txt > tweets.json\n\n    ```"]