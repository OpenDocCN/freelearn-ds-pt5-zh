["```py\n# Import pandas\nimport pandas as pd\n\n# Read the blood pressure dataset\ndata = pd.read_csv(\"bloodpress.txt\",sep='\\t')\n\n# See the top records in the data\ndata.head()\n```", "```py\n# Import seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Correlation matrix\ncorr=data.corr()\n\n# Plot Heatmap on correlation matrix \nsns.heatmap(corr, annot=True, cmap='YlGnBu')\n\n# display the plot\nplt.show()\n```", "```py\n# Import pandas module\nimport pandas as pd\n\n# Create pandas DataFrame\ndata=pd.DataFrame({'Gender':['F','M','M','F','M']})\n\n# Check the top-5 records\ndata.head()\n```", "```py\n# Dummy encoding\nencoded_data = pd.get_dummies(data['Gender'])\n\n# Check the top-5 records of the dataframe\nencoded_data.head()\n```", "```py\n F M\n0 1 0\n1 0 1\n2 0 1\n3 1 0\n4 0 1\n```", "```py\n# Dummy encoding\nencoded_data = pd.get_dummies(data['Gender'], drop_first=True)\n\n# Check the top-5 records of the dataframe\nencoded_data.head()\n```", "```py\n  M\n0 0\n1 1\n2 1\n3 0\n4 1\n```", "```py\n# Import pandas\nimport pandas as pd\n\n# Read the dataset using read_csv method\ndf = pd.read_csv(\"Advertising.csv\")\n\n# See the top-5 records in the data\ndf.head()\n\n```", "```py\n# Independent variables or Features\nX = df[['TV', 'Radio', 'Newspaper']]\n\n# Dependent or Target variable\ny = df.Sales\n```", "```py\n# Lets import the train_test_split method\nfrom sklearn.model_selection import train_test_split\n\n# Distribute the features(X) and labels(y) into two parts training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n```", "```py\n# Import linear regression model\nfrom sklearn.linear_model import LinearRegression\n# Create linear regression model\nlin_reg = LinearRegression()\n\n# Fit the linear regression model\nlin_reg.fit(X_train, y_train)\n\n# Predict the values given test set\npredictions = lin_reg.predict(X_test)\n\n# Print the intercept and coefficients\nprint(\"Intercept:\",lin_reg.intercept_)\nprint(\"Coefficients:\",lin_reg.coef_)\n```", "```py\nIntercept: 2.8925700511511483\nCoefficients: [0.04416235 0.19900368 0.00116268]\n```", "```py\n# Import the required libraries\nimport numpy as np\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\n# Evaluate mean absolute error\nprint('Mean Absolute Error(MAE):', mean_absolute_error(y_test,predictions))\n\n# Evaluate mean squared error\nprint(\"Mean Squared Error(MSE):\", mean_squared_error(y_test, predictions))\n\n# Evaluate root mean squared error\nprint(\"Root Mean Squared Error(RMSE):\", np.sqrt(mean_squared_error(y_test, predictions)))\n\n# Evaluate R-square\nprint(\"R-Square:\",r2_score(y_test, predictions))\n```", "```py\nMean Absolute Error(MAE): 1.300032091923545\nMean Squared Error(MSE): 4.0124975229171\nRoot Mean Squared Error(RMSE): 2.003121944095541\nR-Square: 0.8576396745320893\n```", "```py\n# import libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create X and Y lists\nX=[1,2,3,4,5,6,7,8,9,10]\ny=[9,10,12,16,22,28,40,58,102,200]\n\n# Plot scatter diagram\nplt.scatter(X,y, color = 'red')\nplt.title('Polynomial Regression')\nplt.xlabel('X-Axis')\nplt.ylabel('y-Axis')\n```", "```py\n# import libraries\nimport pandas as pd\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n# Prepare dataset \ndata = pd.DataFrame({\"X\":[1,2,3,4,5,6,7,8,9,10], \n\"y\":[9,10,12,16,22,28,40,58,102,200]}) \n\nX = data[['X']] y = data[['y']]\n\n# Apply Polynomial Features \npolynomial_reg = PolynomialFeatures(degree = 6) \nX_polynomial = polynomial_reg.fit_transform(X) \n\n# Apply Linear Regression Model \nlinear_reg = LinearRegression() \nlinear_reg.fit(X_polynomial, y) predictions=linear_reg.predict(X_polynomial) \n\n# Plot the results \nplt.scatter(X,y, color = 'red') \nplt.plot(X, predictions, color = 'red') \nplt.title('Polynomial Regression') \nplt.xlabel('X-Axis') \nplt.ylabel('y-Axis')\n```", "```py\n# Import libraries\nimport pandas as pd\n# read the dataset\ndiabetes = pd.read_csv(\"diabetes.csv\")\n\n# Show top 5-records\ndiabetes.head()\n```", "```py\n# Split dataset in two parts: feature set and target label\nfeature_set = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']\n\nfeatures = diabetes[feature_set]\n\ntarget = diabetes.label\n\n# Partition data into training and testing set\nfrom sklearn.model_selection import train_test_split\nfeature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.3, random_state=1)\n```", "```py\n# import logistic regression scikit-learn model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score \n\n# instantiate the model\nlogreg = LogisticRegression(solver='lbfgs')\n\n# fit the model with data\nlogreg.fit(feature_train,target_train)\n\n# Forecast the target variable for given test dataset\npredictions = logreg.predict(feature_test)\n\n# Assess model performance using accuracy measure\nprint(\"Logistic Regression Model Accuracy:\",accuracy_score(target_test, predictions))\n```", "```py\nLogistic Regression Model Accuracy: 0.7835497835497836\n```"]