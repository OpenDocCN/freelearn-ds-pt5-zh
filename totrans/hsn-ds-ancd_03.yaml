- en: Data Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll first discuss sources of open data, which includes the
    **University of California at Irvine** (**UCI**) Machine Learning Depository,
    the Bureau of Labor Statistics, the Census Bureau, Professor French's Data Library,
    and the Federal Reserve's Data Library. Then, we will show you several ways of
    inputting data, how to deal with missing values, sorting, choosing a subset, merging
    different datasets, and data output. For different languages, such as Python,
    R, and Julia, several relevant packages for data manipulation will be introduced
    as well. In particular, the Python `pandas` package will be discussed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Sources of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Python pandas package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several ways to inputting packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Quandl data delivery platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting data, as well as how to slice, dice, and merge various datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introduction to Python packages: `cbsodata` and `datadotword`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introduction to R packages: `dslabs`, `haven`, and `foreign`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating Python datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating R datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sources of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For users in the area of data science and business analytics, one important
    issue is the source of data, or simply where to get data. When working at a company,
    the obvious source of data is one's own company, such as sales, cost of raw materials,
    the salary of managers and other employees, the related information of suppliers
    and clients, estimations of future sales, the cost of raw materials, and so on.
    It is a good idea to find some data for learning purposes, and this is especially
    true for full-time students.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, there are two types of data: **public** and **private**.
    Private or proprietary databases are quite expensive. A typical example is the
    **Center for Research in Security Prices** (**CRSP**) database, a financial database
    generated and maintained by the University of Chicago. This database has daily,
    weekly, monthly, and annual trading data for all stocks listed on stock exchanges
    in the US from 1926 onward.'
  prefs: []
  type: TYPE_NORMAL
- en: The second type of data is public or free data. For users in various data science
    or business analytics programs, this type of data is more than enough. For example,
    the UCI offers many useful datasets for machine learning that can be used for
    testing and learning purposes. This offers great benefits to new learners in the
    area of data science. Later in the chapter, several lists of free data will be
    offered for learners in data science, economics, and finance and accounting.
  prefs: []
  type: TYPE_NORMAL
- en: UCI machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The UCI maintains 413 datasets, as of 1/10/2018, for machine learning: [http://archive.ics.uci.edu/ml/index.php](http://archive.ics.uci.edu/ml/index.php).
    The following screenshot shows the top three downloaded datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c71cd339-196b-4f81-af74-26a055043229.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the number one downloaded dataset called **Iris**, we have the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4ea2960-8525-4cf7-b584-5055d9a608bf.png)'
  prefs: []
  type: TYPE_IMG
- en: The beauty of these datasets is that they give quite detailed information such
    as the source, the creator or donator, a description, and even citations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows several potential public data sources for users in
    the area of data science and business analytics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Web page** | **Data types** |'
  prefs: []
  type: TYPE_TB
- en: '| UCI |  [http://archive.ics.uci.edu/ml/index.php](http://archive.ics.uci.edu/ml/index.php)  |
    Data for machine learning |'
  prefs: []
  type: TYPE_TB
- en: '| World Health Organization |  [http://www.who.int/en/](http://www.who.int/en/)  |
    Healthcare data |'
  prefs: []
  type: TYPE_TB
- en: '| Amazon Web Services | [https://aws.amazon.com/cn/datasets/?nc1=h_ls](https://aws.amazon.com/cn/datasets/?nc1=h_ls)
    | Web usage |'
  prefs: []
  type: TYPE_TB
- en: '| Data.gov (US Government Open Data) | [https://www.data.gov/](https://www.data.gov/)
    | Agriculture, climate, consumer, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| GitHub | [https://github.com/caesar0301/awesome-public-datasets](https://github.com/caesar0301/awesome-public-datasets)
    | Many datasets offered by individuals |'
  prefs: []
  type: TYPE_TB
- en: '| Open data network | [https://www.opendatanetwork.com/](https://www.opendatanetwork.com/)
    | Many useful datasets |'
  prefs: []
  type: TYPE_TB
- en: '| Government health data | [https://www.healthdata.gov/](https://www.healthdata.gov/)
    | Healthcare-related datasets |'
  prefs: []
  type: TYPE_TB
- en: '| Google public data | [https://www.google.com/publicdata/directory](https://www.google.com/publicdata/directory)
    | World development indicators |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.1: Potential sources of open data for data science and business analytics'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we go to [https://www.data.gov/](https://www.data.gov/), we can see the
    following choices related to **Agriculture**, **Climate**, **Consumer**, **Ecosystems**,
    **Education**, and the like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/003fd049-ae65-419e-a2ba-78a9777ecc80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next table shows the potential sources of open data for users in the area
    of economics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Web page** | **Data types** |'
  prefs: []
  type: TYPE_TB
- en: '| Federal reserve economic data |  [https://www.federalreserve.gov/datadownload/Choose.aspx?rel=H15](https://www.federalreserve.gov/datadownload/Choose.aspx?rel=H15)  |
    Interest rates and rates for AAA/AA rated bonds |'
  prefs: []
  type: TYPE_TB
- en: '| Census bureau |  [http://www.census.gov/](http://www.census.gov/) [https://www.census.gov/about/index.html](https://www.census.gov/about/index.html)
    | Census data |'
  prefs: []
  type: TYPE_TB
- en: '| US. dept. treasure |  [http://www.treas.gov](http://www.treas.gov)  | US
    treasure yield |'
  prefs: []
  type: TYPE_TB
- en: '| Bureau of labor statistics |  [http://www.bls.gov/](http://www.bls.gov/)  [http://download.bls.gov/](http://download.bls.gov/)  |
    Inflation, employment, unemployment, pay and benefits, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| Bureau of economic analysis |  [http://www.bea.gov/](http://www.bea.gov)  |
    GDP, personal income outlays, corporate profit, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| National bureau of economic research |  [http://www.nber.org/](http://www.nber.org/)  |
    Business cycles, vital statistics, reports of presidents, and so on |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.2: Potential sources of open data for economics'
  prefs: []
  type: TYPE_NORMAL
- en: 'After going to the Federal Reserve economic data and clicking Data on the menu,
    we can see the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/267c0005-8bda-4f67-b203-b14ede16c632.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table offers free data for users in the areas of finance and
    accounting:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Web page** | **Data types** |'
  prefs: []
  type: TYPE_TB
- en: '| Yahoo!Finance | [http://finance.yahoo.com](http://finance.yahoo.com) | Historical
    pricing data, options, balance sheets, and income statements |'
  prefs: []
  type: TYPE_TB
- en: '| Google Finance |  [http://www.google.com/finance](http://www.google.com/finance)  |
    Current and historical trading prices |'
  prefs: []
  type: TYPE_TB
- en: '| Marketwatch | [http://www.marketwatch.com](http://www.marketwatch.com) |
    Financial statements |'
  prefs: []
  type: TYPE_TB
- en: '| SEC filing | [http://www.sec.gov/edgar.shtml](http://www.sec.gov/edgar.shtml)
    | Balance sheets, income statements, holdings, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| Professor French''s data library |  [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html)  |
    Fama/French factors, market index, risk-free rate, industry classification, and
    so on |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.3: Potential sources of open data for finance and accounting'
  prefs: []
  type: TYPE_NORMAL
- en: 'From Professor French''s data library, we could download the famous Fama/French''s
    three-factor time series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, the input file called `ff3monthly.csv` is a modified copy
    of `*F-F_Research_Data_Factor.csv*` made by removing the second part of the annual
    data and adding a `Date` as the header. Note that `*F-F_Research_Data_Factor.csv*`
    is from the ZIP file called `*F-F_Research_Data_Factor_CSV.zip*`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Python pandas package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python pandas package is very useful when dealing with data. The pandas
    package is a wonderful tool for data preprocessing, which is essential for data
    analysis. There is a humorous way of describing the importance of data cleaning:
    "*A data scientist spends 80% of their time cleaning the data and the other 20%
    complaining about cleaning the data"*. To test if the package is preinstalled,
    we can type `import pandas as pd` after we launch Python. If we don''t see any
    error messages, it means that the package was preinstalled. If we do, then we
    can use `conda install pandas` to install the package. To find all available functions,
    we could use the following three lines of Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71f2655d-31c4-409f-bbf5-cb04951fbc49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find out about the usage or examples of individual functions, the `help()`
    function can be used. For example, for the `to_pickle` functionality shown at
    the bottom of the previous screenshot, we type `help(pd.to_pickle)`, shown in
    the first line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc7aa636-acb0-452e-9a91-fd761b4159ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Several ways to input data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s look at how to input a **Comma Separated Value** (**CSV**) file.
    The input dataset is the most popular one from UCI Machine Learning Data Depository.
    The location is [http://archive.ics.uci.edu/ml/machine-learning-databases/iris/bezdekIris.data](http://archive.ics.uci.edu/ml/machine-learning-databases/iris/bezdekIris.data);
    you can refer to the following screenshot as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a83bee-7fbe-4883-a790-13a5700d952c.png)'
  prefs: []
  type: TYPE_IMG
- en: Inputting data using R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The R code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dim()`, `head()`, and `tail()` functions can be used to look at the size
    and the first and last several observations of the dataset, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use other R functions to input data from an external
    data file. Those functions include the `read.table()`, `read.delim()`, and `read.fwf()`
    functions. To find out all functions starting with `read.`, we could apply the
    `apropos()` function, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out the exact usage of individual functions, we use the `help()` function.
    For example, after issuing `help (read.fwf)`, we can find information about this
    specific function, shown in the screenshot in the first several lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b914ce15-02c4-44c4-9341-6029dd71ed00.png)'
  prefs: []
  type: TYPE_IMG
- en: Inputting data using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, we can use Python to retrieve the data, as shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After retrieving data, the `print(data.head(2))` function can be used to see
    the first two instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When typing `pd.read.csv()`, we can find the definitions of all input variables,
    shown in the following screenshot. Again, to save space, only the first several
    input variables are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05dd6a84-7d4b-4a74-952c-7dbc6f1e75c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To prevent a future potential change in terms of a dataset link, we have a
    backup dataset located at the author''s website, shown in the following Python
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows several functions included in the pandas package
    that we could use to retrieve data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `read_clipboard` | Read text from clipboard and pass to `read_table` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_csv` | Read a CSV file into `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_excel` | Read an Excel table into a pandas `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_feather` | Load a feather-format object from the file path |'
  prefs: []
  type: TYPE_TB
- en: '| `read_fwf` | Read a table of formatted lines with fixed-width into `DataFrame`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `read_gbq` | Load data from Google BigQuery |'
  prefs: []
  type: TYPE_TB
- en: '| `read_hdf` | Retrieve a pandas object stored in a file |'
  prefs: []
  type: TYPE_TB
- en: '| `read_html` | Read HTML tables into a list of `DataFrame` objects |'
  prefs: []
  type: TYPE_TB
- en: '| `read_json` | Convert a JSON string into a pandas object |'
  prefs: []
  type: TYPE_TB
- en: '| `read_msgpack` | Load a `msgpack` pandas object from the specified file path
    |'
  prefs: []
  type: TYPE_TB
- en: '| `read_pickle` | Load a `pickled` pandas object (or any other `pickled` object)
    from the specified file path |'
  prefs: []
  type: TYPE_TB
- en: '| `read_sas` | Read SAS files stored as either XPORT or SAS7BDAT format files
    |'
  prefs: []
  type: TYPE_TB
- en: '| `read_sql` | Read an SQL query or database table into a `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_sql_query` | Read an SQL query into a `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_sql_table` | Read an SQL database table into a `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_stata` | Read a Stata file into a `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `read_table` | Read a general delimited file into a `DataFrame` |'
  prefs: []
  type: TYPE_TB
- en: Table 3.4 Functions included in the Python pandas module for inputting data
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out detailed information on each of the preceding functions, we use
    the `help()` function. For example, if we want to get more information about the
    `read_sas()` function, we issue the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output, the top part only, is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa299345-1e1a-4976-95d6-ef8c4107a87b.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to the Quandl data delivery platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quandl is a data delivery platform that includes many free datasets. Its website
    is [https://www.quandl.com](https://www.quandl.com). The following are a few programs
    written in R or Python to download data from the platform. The following program
    retrieves the latest `50` trading days'' data for **International Business Machine**
    (**IBM**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we just need to issue the first two lines in the code once. The following
    code would get the data for a Chinese company with a ticker symbol of `601628`.
    Obviously, `DY4` is for Chinese data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23e43492-56dc-4814-bd72-17cc94bed33e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the following R program, we assume that the Quandl application key is contained
    in the `myQuandlKey` variable. Later in the chapter, we explain how to get a Quandl
    application key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For Python, we have the following code to download the **Gross Domestic Product**
    (**GDP**) from `Quandl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The format of the output dataset is a pandas data frame. `Quandl` can also
    return data as a `numpy` array, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows patterns for different sources of data from the Quandl
    data platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pattern** | **Example** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| WIKI | `WIKI/IBM` | End-of-day US stock prices |'
  prefs: []
  type: TYPE_TB
- en: '| DY4 | `DYE/60618` | Chinese data |'
  prefs: []
  type: TYPE_TB
- en: '| FRED | `FRED/GDP` | Federal Reserve economic data |'
  prefs: []
  type: TYPE_TB
- en: '| EIA | `EIA/PET_RWTC_D` | US Department of Energy |'
  prefs: []
  type: TYPE_TB
- en: '| NSE | `NSE/OIL` | Oil prices |'
  prefs: []
  type: TYPE_TB
- en: '| ZEP | `ZEP/ibm` | Zacks equity prices, dividend history (US) |'
  prefs: []
  type: TYPE_TB
- en: '| CBOE | `CBOE/VXU2018` | Chicago Board Options Exchange |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.5: Patterns for different types/courses of data on the Quandl platform'
  prefs: []
  type: TYPE_NORMAL
- en: 'As of 1/10/2017, in terms of the limitation set by Quandl, see the following
    table. For free subscribers, users need to register with Quandl to get a Quandl
    application key:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type of user** | **Max calls (every 10 min.)** | **Max calls every day**
    | **Concurrent Limit** |'
  prefs: []
  type: TYPE_TB
- en: '| Anonymous | 20 | 50 | 1 call |'
  prefs: []
  type: TYPE_TB
- en: '| Free subscribers | 2,000 | 50,000 | 1 + 1 in the queue |'
  prefs: []
  type: TYPE_TB
- en: '| Premium | 5,000 | 720,000 | No limit |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.6: Max number of calls every 10 min and every day for Quandl users'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next program shows how to retrieve Walmart data for free subscribers, as
    in, those with a Quandl application key. Being a free subscriber means that you
    register with Quandl without paying any fees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84731c2b-144a-469c-aa5c-9a63abfd11d5.png)'
  prefs: []
  type: TYPE_IMG
- en: The second line of `quandl.ApiConfig.api_key = 'YOUR_API_KEY'` indicates that
    a user has to enter his/her Quandl application key.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with missing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s look at the missing codes for different languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Languages** | **Missing code** | **Explanation or examples** |'
  prefs: []
  type: TYPE_TB
- en: '| R | `NA` | `NA` stands for Not Available |'
  prefs: []
  type: TYPE_TB
- en: '| Python | `nan` | `import scipy as sp``misingCode=sp.nan` |'
  prefs: []
  type: TYPE_TB
- en: '| Jullia | `missing` | `julia> missing + 5``missing` |'
  prefs: []
  type: TYPE_TB
- en: '| Octave | `NaN` | Same for MATLAB as well |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.7: Missing codes for R, Python, Julia, and Octave'
  prefs: []
  type: TYPE_NORMAL
- en: 'For R, the missing code is `NA`. Here are several functions we could use to
    remove those missing observations, shown in an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we removed 145 missing values by using the R function
    called `na.exclude()`. We could also use the `apropos()` function to find more
    functions dealing with missing code in R, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For Python, we have the following example, First, let’s generate a dataset
    called `z.csv`, see the R code given next. For the program, we generate `100`
    zeros as our missing values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Python program checks missing values for `5` columns, replace
    them with `NaN` or with the averages of each columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/140582de-3c76-48c3-947a-bfcb02099356.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, we just know that for the first five columns, zero represents
    a missing value. The code of `print((x[[1,2,3,4,5]] == 0).sum())` shows the number
    of zeros for five columns. For instance, there are five zeros for the first column.
    We could use `scipy.NaN` to replace those zeros, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output with zeros is replaced with `sp.NaN`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd1d4f34-5969-4b55-8971-989f0c910a44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we plan to use the mean to replace those `NaN`s, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88843bec-924a-4ce9-9ba0-4d39fcc46330.png)'
  prefs: []
  type: TYPE_IMG
- en: Data sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In R, we have several ways to sort data. The easiest way is to use the `sort()`
    function (see the code for the simplest one-dimensional data):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at another way to sort data. The dataset used is called `nyseListing`,
    which is included in the R package called `fImport`, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95064081-0de2-49c6-a728-2b001d668452.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In total, we have `3,387` observations, each with `4` variables. The dataset
    is sorted by `Symbol`, as in the tickers of individual stocks. Assume that we
    want to sort them by `Name`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows that the dataset is indeed sorted by company `Name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef74209-741e-4e13-9c80-81a3cdf650c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following example, we sort by `ID` first, then by `RET`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Our simple output dataset is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a51c911-769d-4cfd-a6a4-185109c797fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To sort the data according to `ID` and `RET`, we could use `order(ID,RET)`,
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that the output dataset was sorted correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/637557cb-2dda-4b71-835c-cf4eea18af5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to sort according to decreasing order, we could add `decreasing=TRUE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To sort data in Python, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0a2ab0c-f7b4-4243-b924-bdade33694bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Slicing and dicing datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first example is to pick all stocks listed on the NYSE by using an R dataset
    called `marketCap.Rdata`, shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We have various ways to choose a subset of the R dataset called `.marketCap`.
    Note that there is a dot in front of `.marketCap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: A Python dataset is downloadable at [http://canisius.edu/~yany/python/marketCap.pkl](http://canisius.edu/~yany/python/marketCap.pkl).
  prefs: []
  type: TYPE_NORMAL
- en: Merging different datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s generate some hypothetical datasets. Then we will try to merge
    them according to certain rules. The easiest way is to use Monte Carlo simulation
    to generate those datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code, the first line sets up a random seed which will guarantee that
    any user will get the same random numbers if he/she uses the same random seed.
    The `runif()` function is used to get random numbers from a uniform distribution.
    In a sense, the preceding code would generate 2-year returns for five stocks.
    The `dim()` and `head()` function can be used to see the dimensions of the dataset
    and its first couple of lines, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we could get the market returns, shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the merge more interesting, we deliberately make the market returns
    longer, shown here along with its dimensions and the first several lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To merge them, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To find out more about the R `merge()` function, just type `help(merge)` and
    we can then specify inner merge, left-merge, right-merge, and out merge. The default
    setting in the previous case is called inner merge, as in picking up observations
    that only exist in both datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Python program shows this concept clearly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bb67bd0-c2df-42c7-83d0-4fc7ff12963d.png)'
  prefs: []
  type: TYPE_IMG
- en: Data output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, by using the R language, we generated a data asset
    called `final`. To save it to a CSV file, we could use the `write.csv()` or `write.table()`
    functions, shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The separator for the `write.csv()` function is a comma, while we can specify
    our own separator for the `write.table()` function. To find out the other R functions
    starting with `write`, we could use the `apropos()` function, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For the following Python program, we export Fama-French monthly factors to
    three different output formats, pickle, CSV, and text files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to the cbsodata Python package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the `cbsodata` Python package, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use one of the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For more detailed instructions about how to install the Python package, please
    see [Chapter 6](c812a40e-eb24-4bb8-8af5-1cfe1834ec77.xhtml), *Managing Packages*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next program shows one example of using the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fde9f01d-fefc-452a-b70f-ad7d69f6fd64.png)'
  prefs: []
  type: TYPE_IMG
- en: The last line in the screenshot gives the name of the dataset. In the previous
    example, we used the dataset with the name `82070ENG`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out all the names of lists, we use the `get_table_list()` function;
    see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to the datadotworld Python package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the `datadotworld` Python package, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the package. To do so, we could try one of the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After the package is successfully installed, we can use the `dir()` function
    to list all its functions, as shown in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25a19cd1-b50f-4874-82d9-3f4988eab715.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A user has to get an APK token at [https://data.world/settings/advaned](https://data.world/settings/advaned)
    in order to run a Python program. Without such a token, we might get the following
    error message if we run a `datadotworld` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ea234b5-69f9-4596-91fc-231c81930ef4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'According to the error message, we must run the following configure command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fca01243-dd8c-4d98-b2d2-5aa81962e6d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can use the Python package as shown in the following Python program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/637c8877-b3e3-4edb-abac-8ff37216cacd.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to the haven and foreign R packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The R package called `haven` is for import and export from SPSS, Stata and SAS
    files. The package is for** Labelled Data Utility Functions**, which is a collection
    of many small functions dealing with labelled data, such as reading and writing
    data between R and other statistical software packages such as `SAS`, `SPSS`,
    or `Stata`, and working with labelled data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This includes easy ways to get, set, and change value and variable label attributes,
    convert labelled vectors into factors or numeric values (and vice versa), and
    deal with multiple declared missing values. The following example is about writing
    several specific outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Another R package called `foreign` can be used to read SPSS, and SAS data.
    Here is one example. First, let''s download a SPSS dataset called `airline_passanges.sav`
    at [http://calcnet.mth.cmich.edu/org/spss/Prj_airlinePassengers.htm](http://calcnet.mth.cmich.edu/org/spss/Prj_airlinePassengers.htm).
    Assume that the related SPCC data is saved under `c:/temp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to the dslabs R package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `dslabs` R package is short for **Data Science Labs**. The package includes
    several datasets, such as the dataset called `murders` for US gun murders by state
    for 2010:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows the datasets included in the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name of dataset** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| [admissions](http://127.0.0.1:23636/library/dslabs/html/admissions.html)
    | Gender bias among graduate school admissions to UC Berkeley |'
  prefs: []
  type: TYPE_TB
- en: '| [divorce_margarine](http://127.0.0.1:23636/library/dslabs/html/divorce_margarine.html)
    | Divorce rate and margarine consumption data |'
  prefs: []
  type: TYPE_TB
- en: '| [ds_theme_set](http://127.0.0.1:23636/library/dslabs/html/ds_theme_set.html)
    | dslabs theme set |'
  prefs: []
  type: TYPE_TB
- en: '| [gapminder](http://127.0.0.1:23636/library/dslabs/html/gapminder.html) |
    Gapminder data |'
  prefs: []
  type: TYPE_TB
- en: '| [heights](http://127.0.0.1:23636/library/dslabs/html/heights.html) | Self-Reported
    heights |'
  prefs: []
  type: TYPE_TB
- en: '| [murders](http://127.0.0.1:23636/library/dslabs/html/murders.html) | US gun
    murders by state for 2010 |'
  prefs: []
  type: TYPE_TB
- en: '| [na_example](http://127.0.0.1:23636/library/dslabs/html/na_example.html)
    | Count data with some missing values |'
  prefs: []
  type: TYPE_TB
- en: '| [oecd](http://127.0.0.1:23636/library/dslabs/html/gapminder.html) | Gapminder
    data |'
  prefs: []
  type: TYPE_TB
- en: '| [opec](http://127.0.0.1:23636/library/dslabs/html/gapminder.html) | Gapminder
    data |'
  prefs: []
  type: TYPE_TB
- en: '| [outlier_example](http://127.0.0.1:23636/library/dslabs/html/outlier_example.html)
    | Adult male heights in feet with outliers |'
  prefs: []
  type: TYPE_TB
- en: '| [polls_us_election_2016](http://127.0.0.1:23636/library/dslabs/html/polls_us_election_2016.html)
    | Fivethirtyeight 2016 poll data |'
  prefs: []
  type: TYPE_TB
- en: '| [raw_data_research_funding_rates](http://127.0.0.1:23636/library/dslabs/html/research_funding_rates.html)
    | Gender bias in research funding in the Netherlands |'
  prefs: []
  type: TYPE_TB
- en: '| [reported_heights](http://127.0.0.1:23636/library/dslabs/html/reported_heights.html)
    | Self-reported Heights |'
  prefs: []
  type: TYPE_TB
- en: '| [research_funding_rates](http://127.0.0.1:23636/library/dslabs/html/research_funding_rates.html)
    | Gender bias in research funding in the Netherlands |'
  prefs: []
  type: TYPE_TB
- en: '| [results_us_election_2016](http://127.0.0.1:23636/library/dslabs/html/polls_us_election_2016.html)
    | Fivethirtyeight 2016 poll fata |'
  prefs: []
  type: TYPE_TB
- en: '| [rfalling_object](http://127.0.0.1:23636/library/dslabs/html/rfalling_object.html)
    | Simulated falling object data |'
  prefs: []
  type: TYPE_TB
- en: '| [take_poll](http://127.0.0.1:23636/library/dslabs/html/take_poll.html) |
    Models results from taking a poll |'
  prefs: []
  type: TYPE_TB
- en: '| [us_contagious_diseases](http://127.0.0.1:23636/library/dslabs/html/us_contagious_diseases.html)
    | Contagious disease data for US states |'
  prefs: []
  type: TYPE_TB
- en: Table 3.8 Datasets included in the R package called dslabs
  prefs: []
  type: TYPE_NORMAL
- en: Generating Python datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate a Python dataset, we use the `Pandas to_pickle` functionality.
    The dataset we plan to use is called `adult.pkl`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4103314a-8b1a-4e19-8957-b36c8bb097da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The related Python code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To show the first several lines of observations, we use the `x.head()` functionality,
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d80694f-a4d1-4b52-bedc-00ec3403ce5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the backup dataset is available at the author's website, downloadable
    at [http://canisius.edu/~yany/data/adult.data.txt](http://canisius.edu/~yany/data/adult.data.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Generating R datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we show you how to generate an R dataset called `iris.RData` by using
    the R `save()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To upload the function, we use the `load()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the extension of `.RData` is not critical. The second way to save
    R data is to apply an R function called `saveRDS()`, shown in the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding function to load the dataset is called `readRDS()`. Another
    important property when using the rds dataset is that we can assign another more
    convenient name, shown in the code that follows. In this case, we call it `abc`
    instead of `ff3monthly`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first discussed sources of open data, which included The
    Bureau of Labor Statistics, the Census Bureau, Professor French's data library,
    the Federal Reserve's data library, and the UCI Machine Learning Depository. After
    that, we showed you how to input data; how to deal with missing data; how to sort,
    slice, and dice the datasets; and how to merge different datasets. Data output
    was discussed in detail. For different languages, such as Python, R, and Julia,
    several relevant packages for data manipulation were introduced and discussed.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](fa744362-086d-4d82-9e32-5733918d1d38.xhtml), *Data Visualization*,
    we will discuss data visualization in R, Python, and Julia separately. To make
    our visual presentation more eye catching, we will show how you to generate simple
    graphs and bar charts, as well as how to add trend lines and legends. Other explanations
    will include how to save graphs to an external file, and we will discuss several
    packages related to data visualization in R, Python, and Julia.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between open data and proprietary databases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it enough for learners in the area of data science to use open data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can we access open public data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From The UCI Data Depository, [http://archive.ics.uci.edu/ml/index.php](http://archive.ics.uci.edu/ml/index.php),
    download a dataset called `Wine`. Write a program in R to import it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the UCI Data Depository, download a dataset called `Forest Fire`. Write
    a program in Python to import it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the UCI Data Depository, download a dataset called `Bank Marketing`. Write
    a program in Octave to import it. Answer the following questions: 1) How many
    banks? and 2) What is the cost?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we find all R functions with `read.` as their leading letters? (Note
    that there is a dot after `read.`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we find more information on an R function called `read.xls()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain the differences between two R functions: `save()` and `saveRDS()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find more information about the `read_clipboard()` function included in the
    Python pandas package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the Quandl platform? What kinds of data could we download from Quandl?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write both R and Python programs to download GDP (Gross Domestic Product) data
    from the Quandl platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When loading an R dataset, what is the difference between using the `load()`
    function and the `readRDS()` function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After uploading the Python pandas package, explain why we have the following
    error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5fb4549-6c1d-4469-92fb-c2a78eb33378.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, download a ZIP file called `bank-fall.zip` at [http://archive.ics.uci.edu/ml/datasets/Bank+Marketing](http://archive.ics.uci.edu/ml/datasets/Bank+Marketing).
    Unzip the file to get a CSV file; see the related code that follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e347f686-a7b8-4809-874f-1babfb9ae8ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Generate an R dataset called `bank.Rata` and `bank.rds` and answer the following
    questions: a) What is the average age? b) What percentage of people are married?
    c) Is the default probability of those who are married higher than those who are
    single?'
  prefs: []
  type: TYPE_NORMAL
- en: How do we merge two datasets in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to download IBM's daily data from Quandl and merge it
    with Fama-French three-factor. To get a Fama-French daily factor time series we
    could go to [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html)
    or download a dataset at [http://canisius.edu/~yany/python/data/ffDaily.pkl](http://canisius.edu/~yany/python/data/ffDaily.pkl).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate both R and Python datasets for monthly Fama-French-Charhart four factors.
    Both time series, can be downloaded from Professor French's data library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to merge FRED/GDP data with market index data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
