["```py\ndef foreach[U](f: Elem => U): Unit\n\n```", "```py\nval numbers: Array[Int] = Array[Int](1, 2, 3, 4, 5, 1, 2, 3, 3, 4, 5) // A simple array\n\n```", "```py\nprintln(\"The full array is: \")\n  for (i <- numbers) {\n    print(\" \" + i)\n  }\n\n```", "```py\nprintln(numbers(2))\n\n```", "```py\nvar total = 0;\nfor (i <- 0 to (numbers.length - 1)) {\n  total = total + numbers(i)\n}\nprintln(\"Sum: = \" + total)\n\n```", "```py\nvar min = numbers(0)\nfor (i <- 1 to (numbers.length - 1)) {\n  if (numbers(i) < min) min = numbers(i)\n}\nprintln(\"Min is: \" + min)\n\n```", "```py\nvar max = numbers(0);\nfor (i <- 1 to (numbers.length - 1)) {\n  if (numbers(i) > max) max = numbers(i)\n}\nprintln(\"Max is: \" + max)\n\n```", "```py\n//Creating array using range() method\nvar myArray1 = range(5, 20, 2)\nvar myArray2 = range(5, 20)\n\n```", "```py\n//Creating array using range() method without range difference\nvar myArray1 = range(5, 20, 2)\n\n```", "```py\n// Print all the array elements\nfor (x <- myArray1) {\n  print(\" \" + x)\n}\nprintln()\nfor (x <- myArray2) {\n  print(\" \" + x)\n}\n\n```", "```py\n//Array concatenation\nvar myArray3 =  concat( myArray1, myArray2)      \n// Print all the array elements\nfor ( x <- myArray3 ) {\n  print(\" \"+ x)\n}\n\n```", "```py\nImport Array._\n\n```", "```py\nvar myMatrix = ofDim[Int](4,4)\n\n```", "```py\nvar myMatrix = ofDim[Int](4, 4)\n// build a matrix\nfor (i <- 0 to 3) {\n  for (j <- 0 to 3) {\n    myMatrix(i)(j) = j\n  }\n}\nprintln()\n\n```", "```py\n// Print two dimensional array\nfor (i <- 0 to 3) {\n  for (j <- 0 to 3) {\n    print(\" \" + myMatrix(i)(j))\n  }\n  println()\n}\n\n```", "```py\npackage com.chapter4.CollectionAPI\nimport Array._                                                                                         object ArrayExample {\n  def main(args: Array[String]) {\n    val numbers: Array[Int] = Array[Int](1, 2, 3, 4, 5, 1, 2, 3, 3, 4, 5)\n    // A simple array\n    // Print all the element of the array\n    println(\"The full array is: \")\n    for (i <- numbers) {\n      print(\" \" + i)\n    }\n    //Print a particular element for example element 3\n    println(numbers(2))\n    //Summing all the elements\n    var total = 0\n    for (i <- 0 to (numbers.length - 1)) {\n      total = total + numbers(i)\n    }\n    println(\"Sum: = \" + total)\n    // Finding the smallest element\n    var min = numbers(0)\n    for (i <- 1 to (numbers.length - 1)) {\n      if (numbers(i) < min) min = numbers(i)\n    }\n    println(\"Min is: \" + min)\n    // Finding the largest element\n    var max = numbers(0)\n    for (i <- 1 to (numbers.length - 1)) {\n      if (numbers(i) > max) max = numbers(i)\n    }\n    println(\"Max is: \" + max)\n    //Creating array using range() method\n    var myArray1 = range(5, 20, 2)\n    var myArray2 = range(5, 20)\n    // Print all the array elements\n    for (x <- myArray1) {\n      print(\" \" + x)\n    }\n    println()\n    for (x <- myArray2) {\n      print(\" \" + x)\n    }\n    //Array concatenation\n    var myArray3 = concat(myArray1, myArray2)\n    // Print all the array elements\n    for (x <- myArray3) {\n      print(\" \" + x)\n    }\n    //Multi-dimensional array\n    var myMatrix = ofDim[Int](4, 4)\n    // build a matrix\n    for (i <- 0 to 3) {\n      for (j <- 0 to 3) {\n        myMatrix(i)(j) = j\n      }\n    }\n    println();\n    // Print two dimensional array\n    for (i <- 0 to 3) {\n      for (j <- 0 to 3) {\n        print(\" \" + myMatrix(i)(j))\n      }\n      println();\n    }\n  }\n}\n\n```", "```py\nThe full array is: 1 2 3 4 5 1 2 3 3 4 53 \nSum: = 33 \nMin is: 1 \nMax is: 5 \n5 7 9 11 13 15 17 19 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 5 7 9 11 13 15 17 19 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \n0 1 2 3 \n0 1 2 3 \n0 1 2 3 \n0 1 2 3\n\n```", "```py\nscala> val numbers = List(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\nnumbers: List[Int] = List(1, 2, 3, 4, 5, 1, 2, 3, 4, 5) \nscala> numbers(3) = 10 \n<console>:12: error: value update is not a member of List[Int] \nnumbers(3) = 10 ^\n\n```", "```py\nscala> val numbers = 1 :: 2 :: 3 :: 4 :: 5 :: 1 :: 2 :: 3:: 4:: 5 :: Nil\nnumbers: List[Int] = List(1, 2, 3, 4, 5, 1, 2, 3,4, 5\n\n```", "```py\npackage com.chapter4.CollectionAPI\n\nobject ListExample {\n  def main(args: Array[String]) {\n    // List of cities\n    val cities = \"Dublin\" :: \"London\" :: \"NY\" :: Nil\n\n    // List of Even Numbers\n    val nums = 2 :: 4 :: 6 :: 8 :: Nil\n\n    // Empty List.\n    val empty = Nil\n\n    // Two dimensional list\n    val dim = 1 :: 2 :: 3 :: Nil ::\n                   4 :: 5 :: 6 :: Nil ::\n                   7 :: 8 :: 9 :: Nil :: Nil\n    val temp = Nil\n\n    // Getting the first element in the list\n    println( \"Head of cities : \" + cities.head )\n\n    // Getting all the elements but the last one\n    println( \"Tail of cities : \" + cities.tail )\n\n    //Checking if cities/temp list is empty\n    println( \"Check if cities is empty : \" + cities.isEmpty )\n    println( \"Check if temp is empty : \" + temp.isEmpty )\n\n    val citiesEurope = \"Dublin\" :: \"London\" :: \"Berlin\" :: Nil\n    val citiesTurkey = \"Istanbul\" :: \"Ankara\" :: Nil\n\n    //Concatenate two or more lists with :::\n    var citiesConcatenated = citiesEurope ::: citiesTurkey\n    println( \"citiesEurope ::: citiesTurkey : \"+citiesConcatenated )\n\n    // using the concat method\n    citiesConcatenated = List.concat(citiesEurope, citiesTurkey)\n    println( \"List.concat(citiesEurope, citiesTurkey) : \" +\n             citiesConcatenated  )\n\n  }\n}\n\n```", "```py\nHead of cities : Dublin\nTail of cities : List(London, NY)\nCheck if cities is empty : false\nCheck if temp is empty : true\ncitiesEurope ::: citiesTurkey : List(Dublin, London, Berlin, Istanbul, Ankara)\nList.concat(citiesEurope, citiesTurkey) : List(Dublin, London, Berlin, Istanbul, Ankara)\n\n```", "```py\nscala> val numbers = Set( 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\nnumbers: scala.collection.immutable.Set[Int] = Set(5, 1, 2, 3, 4)\n\n```", "```py\npackage com.chapter4.CollectionAPI\nobject SetExample {\n  def main(args: Array[String]) {\n    // Empty set of integer type\n    var sInteger : Set[Int] = Set()\n    // Set of even numbers\n    var sEven : Set[Int] = Set(2,4,8,10)\n    //Or you can use this syntax\n    var sEven2 = Set(2,4,8,10)\n    val cities = Set(\"Dublin\", \"London\", \"NY\")\n    val tempNums: Set[Int] = Set()\n    //Finding Head, Tail, and checking if the sets are empty\n    println( \"Head of cities : \" + cities.head )\n    println( \"Tail of cities : \" + cities.tail )\n    println( \"Check if cities is empty : \" + cities.isEmpty )\n    println( \"Check if tempNums is empty : \" + tempNums.isEmpty )\n    val citiesEurope = Set(\"Dublin\", \"London\", \"NY\")\n    val citiesTurkey = Set(\"Istanbul\", \"Ankara\")\n    // Sets Concatenation using ++ operator\n    var citiesConcatenated = citiesEurope ++ citiesTurkey\n    println( \"citiesEurope ++ citiesTurkey : \" + citiesConcatenated )\n    //Also you can use ++ as a method\n    citiesConcatenated = citiesEurope.++(citiesTurkey)\n    println( \"citiesEurope.++(citiesTurkey) : \" + citiesConcatenated )\n    //Finding minimum and maximum elements in the set\n    val evenNumbers = Set(2,4,6,8)\n    // Using the min and max methods\n    println( \"Minimum element in Set(2,4,6,8) : \" + evenNumbers.min )\n    println( \"Maximum element in Set(2,4,6,8) : \" + evenNumbers.max )\n  }\n}\n\n```", "```py\nHead of cities : Dublin\nTail of cities : Set(London, NY)\nCheck if cities is empty : false\nCheck if tempNums is empty : true\ncitiesEurope ++ citiesTurkey : Set(London, Dublin, Ankara, Istanbul, NY)\ncitiesEurope.++(citiesTurkey) : Set(London, Dublin, Ankara, Istanbul, NY)\nMinimum element in Set(2,4,6,8) : 2\nMaximum element in Set(2,4,6,8) : 8\n\n```", "```py\nval tuple_1 = (20, \"Hello\", Console)\n\n```", "```py\nval t = new Tuple3(20, \"Hello\", Console)\n\n```", "```py\nscala> val cityPop = (\"Dublin\", 2)\ncityPop: (String, Int) = (Dublin,2)\n\n```", "```py\nscala> val cityPop = (\"Dublin\", 2)\ncityPop: (String, Int) = (Dublin,2) \nscala> cityPop._1\nres3: String = Dublin \nscala> cityPop._2\nres4: Int = 2\n\n```", "```py\ncityPop match {\n  case (\"Dublin\", population) => ...\n  case (\"NY\", population) => ...\n}\n\n```", "```py\nscala> \"Dublin\" -> 2\nres0: (String, Int) = (Dublin,2)\n\n```", "```py\npackage com.chapter4.CollectionAPI\nobject TupleExample {\n  def main(args: Array[String]) {\n    val evenTuple = (2,4,6,8)\n    val sumTupleElements =evenTuple._1 + evenTuple._2 + evenTuple._3 + evenTuple._4\n    println( \"Sum of Tuple Elements: \"  + sumTupleElements )      \n    // You can also iterate over the tuple and print it's element using the foreach method\n    evenTuple.productIterator.foreach{ evenTuple =>println(\"Value = \" + evenTuple )}\n  }\n}\n\n```", "```py\nSum of Tuple Elements: 20 Value = 2 Value = 4 Value = 6 Value = 8\n\n```", "```py\nscala> Map(1 -> 2)\nres7: scala.collection.immutable.Map[Int,Int] = Map(1 -> 2)                                                scala> Map(\"X\" -> \"Y\")\nres8: scala.collection.immutable.Map[String,String] = Map(X -> Y)\n\n```", "```py\nMap(2 -> \"two\", 4 -> \"four\")\n\n```", "```py\nMap((2, \"two\"), (4, \"four\"))\n\n```", "```py\nvar myArray = range(5, 20, 2)\n  def getMax(): Int = {\n    // Finding the largest element\n    var max = myArray(0)\n    for (i <- 1 to (myArray.length - 1)) {\n      if (myArray(i) > max)\n        max = myArray(i)\n    }\n    max\n  }\n\n```", "```py\nscala> val myMax = Map(\"getMax\" -> getMax()) \nscala> println(\"My max is: \" + myMax )\n\n```", "```py\nscala> Map( 2 -> \"two\", 4 -> \"four\")\nres9: scala.collection.immutable.Map[Int,String] = Map(2 -> two, 4 -> four)\nscala> Map( 1 -> Map(\"X\"-> \"Y\"))\nres10: scala.collection.immutable.Map[Int,scala.collection.immutable.Map[String,String]] = Map(1 -> Map(X -> Y))\n\n```", "```py\npackage com.chapter4.CollectionAPI\nimport Array._\n\nobject MapExample {\n  var myArray = range(5, 20, 2)\n\n  def getMax(): Int = {\n    // Finding the largest element\n    var max = myArray(0)\n    for (i <- 1 to (myArray.length - 1)) {\n      if (myArray(i) > max)\n        max = myArray(i)\n    }\n    max\n  }\n\n  def main(args: Array[String]) {\n    val capitals = Map(\"Ireland\" -> \"Dublin\", \"Britain\" -> \"London\", \n    \"Germany\" -> \"Berlin\")\n\n    val temp: Map[Int, Int] = Map()\n    val myMax = Map(\"getMax\" -> getMax())\n    println(\"My max is: \" + myMax )\n\n    println(\"Keys in capitals : \" + capitals.keys)\n    println(\"Values in capitals : \" + capitals.values)\n    println(\"Check if capitals is empty : \" + capitals.isEmpty)\n    println(\"Check if temp is empty : \" + temp.isEmpty)\n\n    val capitals1 = Map(\"Ireland\" -> \"Dublin\", \"Turkey\" -> \"Ankara\",\n    \"Egypt\" -> \"Cairo\")\n    val capitals2 = Map(\"Germany\" -> \"Berlin\", \"Saudi Arabia\" ->\n    \"Riyadh\")\n\n    // Map concatenation using ++ operator\n    var capitalsConcatenated = capitals1 ++ capitals2\n    println(\"capitals1 ++ capitals2 : \" + capitalsConcatenated)\n\n    // use two maps with ++ as method\n    capitalsConcatenated = capitals1.++(capitals2)\n    println(\"capitals1.++(capitals2)) : \" + capitalsConcatenated)\n\n  }\n}\n\n```", "```py\nMy max is: Map(getMax -> 19)\nKeys in capitals : Set(Ireland, Britain, Germany)\nValues in capitals : MapLike(Dublin, London, Berlin)\nCheck if capitals is empty : false\nCheck if temp is empty : true\ncapitals1 ++ capitals2 : Map(Saudi Arabia -> Riyadh, Egypt -> Cairo, Ireland -> Dublin, Turkey -> Ankara, Germany -> Berlin)\ncapitals1.++(capitals2)) : Map(Saudi Arabia -> Riyadh, Egypt -> Cairo, Ireland -> Dublin, Turkey -> Ankara, Germany -> Berlin)\n\n```", "```py\ntrait Option[T] {\n  def get: A // Returns the option's value.\n  def isEmpty: Boolean // Returns true if the option is None, false\n  otherwise.\n  def productArity: Int // The size of this product. For a product\n  A(x_1, ..., x_k), returns k\n  def productElement(n: Int): Any // The nth element of this product,\n  0-based\n  def exists(p: (A) => Boolean): Boolean // Returns true if this option\n  is nonempty \n  def filter(p: (A) => Boolean): Option[A] // Returns this Option if it\n  is nonempty \n  def filterNot(p: (A) => Boolean): Option[A] // Returns this Option if\n  it is nonempty or return None.\n  def flatMap[B](f: (A) => Option[B]): Option[B] // Returns result of\n  applying f to this Option's \n  def foreach[U](f: (A) => U): Unit // Apply given procedure f to the\n  option's value, if it is nonempty.  \n  def getOrElse[B >: A](default: => B): B // Returns the option's value\n  if the option is nonempty, \n  def isDefined: Boolean // Returns true if the option is an instance\n  of Some, false otherwise.\n  def iterator: Iterator[A] // Returns a singleton iterator returning\n  Option's value if it is nonempty\n  def map[B](f: (A) => B): Option[B] // Returns a Some containing\n  result of applying f to this Option's \n  def orElse[B >: A](alternative: => Option[B]): Option[B] // Returns\n  this Option if it is nonempty\n  def orNull // Returns the option's value if it is nonempty,\n                or null if it is empty.  \n}\n\n```", "```py\nobject ScalaOptions {\n  def main(args: Array[String]) {\n    val megacity = Map(\"Bangladesh\" -> \"Dhaka\", \"Japan\" -> \"Tokyo\",\n    \"India\" -> \"Kolkata\", \"USA\" -> \"New York\")\n    println(\"megacity.get( \\\"Bangladesh\\\" ) : \" + \n    show(megacity.get(\"Bangladesh\")))\n    println(\"megacity.get( \\\"India\\\" ) : \" + \n    show(megacity.get(\"India\")))\n  }\n}\n\n```", "```py\ndef show(x: Option[String]) = x match {\n  case Some(s) => s\n  case None => \"?\"\n}\n\n```", "```py\npackage com.chapter4.CollectionAPI\nobject ScalaOptions {\n  def show(x: Option[String]) = x match {\n    case Some(s) => s\n    case None => \"?\"\n  } \n  def main(args: Array[String]) {\n    val megacity = Map(\"Bangladesh\" -> \"Dhaka\", \"Japan\" -> \"Tokyo\",\n    \"India\" -> \"Kolkata\", \"USA\" -> \"New York\")\n    println(\"megacity.get( \\\"Bangladesh\\\" ) : \" +\n    show(megacity.get(\"Bangladesh\")))\n    println(\"megacity.get( \\\"India\\\" ) : \" +\n    show(megacity.get(\"India\")))\n  }\n}\n\n```", "```py\nmegacity.get( \"Bangladesh\" ) : Dhaka\nmegacity.get( \"India\" ) : Kolkata\n\n```", "```py\n// Using getOrElse() method: \nval message: Option[String] = Some(\"Hello, world!\")\nval x: Option[Int] = Some(20)\nval y: Option[Int] = None\nprintln(\"message.getOrElse(0): \" + message.getOrElse(0))\nprintln(\"x.getOrElse(0): \" + x.getOrElse(0))\nprintln(\"y.getOrElse(10): \" + y.getOrElse(10))\n\n```", "```py\nmessage.getOrElse(0): Hello, world!\nx.getOrElse(0): 20\ny.getOrElse(10): 10\n\n```", "```py\nprintln(\"message.isEmpty: \" + message.isEmpty)\nprintln(\"x.isEmpty: \" + x.isEmpty)\nprintln(\"y.isEmpty: \" + y.isEmpty)\n\n```", "```py\npackage com.chapter4.CollectionAPI\nobject ScalaOptions {\n  def show(x: Option[String]) = x match {\n    case Some(s) => s\n    case None => \"?\"\n  }\n  def main(args: Array[String]) {\n    val megacity = Map(\"Bangladesh\" -> \"Dhaka\", \"Japan\" -> \"Tokyo\",\n    \"India\" -> \"Kolkata\", \"USA\" -> \"New York\")\n    println(\"megacity.get( \\\"Bangladesh\\\" ) : \" +\n    show(megacity.get(\"Bangladesh\")))\n    println(\"megacity.get( \\\"India\\\" ) : \" +\n    show(megacity.get(\"India\")))\n\n    // Using getOrElse() method: \n    val message: Option[String] = Some(\"Hello, world\")\n    val x: Option[Int] = Some(20)\n    val y: Option[Int] = None\n\n    println(\"message.getOrElse(0): \" + message.getOrElse(0))\n    println(\"x.getOrElse(0): \" + x.getOrElse(0))\n    println(\"y.getOrElse(10): \" + y.getOrElse(10))\n\n    // Using isEmpty()\n    println(\"message.isEmpty: \" + message.isEmpty)\n    println(\"x.isEmpty: \" + x.isEmpty)\n    println(\"y.isEmpty: \" + y.isEmpty)\n  }\n}\n\n```", "```py\nmegacity.get( \"Bangladesh\" ) : Dhaka\nmegacity.get( \"India\" ) : Kolkata\nmessage.getOrElse(0): Hello, world\nx.getOrElse(0): 20\ny.getOrElse(10): 10\nmessage.isEmpty: false\nx.isEmpty: false\ny.isEmpty: true\n\n```", "```py\nscala> val numbers = Map(\"two\" -> 2, \"four\" -> 4)\nnumbers: scala.collection.immutable.Map[String,Int] = Map(two -> 2, four -> 4)\nscala> numbers.get(\"four\")\nres12: Option[Int] = Some(4)\nscala> numbers.get(\"five\")\nres13: Option[Int] = None\n\n```", "```py\ndef exists(p: ((A, B)) ⇒ Boolean): Boolean  \n\n```", "```py\npackage com.chapter4.CollectionAPI\n\nobject ExistsExample {\n  def main(args: Array[String]) {\n    // Given a list of cities and now check if \"Dublin\" is included in\n    the list     \n    val cityList = List(\"Dublin\", \"NY\", \"Cairo\")\n    val ifExisitsinList = cityList exists (x => x == \"Dublin\")\n    println(ifExisitsinList)\n\n    // Given a map of countries and their capitals check if Dublin is\n    included in the Map \n    val cityMap = Map(\"Ireland\" -> \"Dublin\", \"UK\" -> \"London\")\n    val ifExistsinMap =  cityMap exists (x => x._2 == \"Dublin\")\n    println(ifExistsinMap)\n  }\n}\n\n```", "```py\ntrue\ntrue\n\n```", "```py\ncase class Complex(i: Double, j: Double) {\n   def plus(other: Complex): Complex = Complex(i + other.i, j + other.j)\n }\n\n```", "```py\nval obj = Complex(10, 20)\n\n```", "```py\nval a = Complex(6, 9)\n val b = Complex(3, -6)\n\n```", "```py\nval z = obj.plus(a)\n\n```", "```py\nval c = a plus b\n\n```", "```py\npackage com.chapter4.CollectionAPI\n object UsingInfix {\n   case class Complex(i: Double, j: Double) {\n     def plus(other: Complex): Complex = Complex(i + other.i, j + other.j)\n   }  \n   def main(args: Array[String]): Unit = {    \n     val obj = Complex(10, 20)\n     val a = Complex(6, 9)\n     val b = Complex(3, -6)\n     val c = a plus b\n     val z = obj.plus(a)\n     println(c)\n     println(z)\n   }\n }\n\n```", "```py\n(all letters)\n |\n ^\n &\n = !\n < >\n :\n + -\n * / %\n (all other special characters)\n\n```", "```py\ndef forall (p: (A) ⇒ Boolean): Boolean  \n\n```", "```py\nscala> Vector(1, 2, 8, 10) forall (x => x % 2 == 0)\nres2: Boolean = false\n\n```", "```py\ndef filter(p: (A) ⇒ Boolean): Traversable[A]  \n\n```", "```py\nscala> //Given a list of tuples (cities, Populations)\nscala> // Get all cities that has population more than 5 million\nscala> List((\"Dublin\", 2), (\"NY\", 8), (\"London\", 8)) filter (x =>x._2 >= 5)\nres3: List[(String, Int)] = List((NY,8), (London,8))\n\n```", "```py\ndef map[B](f: (A) ⇒ B): Map[B]  \n\n```", "```py\nscala> // Given a list of integers\nscala> // Get a list with all the elements square.\nscala> List(2, 4, 5, -6) map ( x=> x * x)\nres4: List[Int] = List(4, 16, 25, 36)\n\n```", "```py\ndef take(n: Int): Traversable[A]\n\n```", "```py\n// Given an infinite recursive method creating a stream of odd numbers.\ndef odd: Stream[Int] = {\n  def odd0(x: Int): Stream[Int] =\n    if (x%2 != 0) x #:: odd0(x+1)\n    else odd0(x+1)\n      odd0(1)\n}// Get a list of the 5 first odd numbers.\nodd take (5) toList\n\n```", "```py\nres5: List[Int] = List(1, 3, 5, 7, 9)\n\n```", "```py\ndef groupBy[K](f: ((A, B)) ⇒ K): Map[K, Map[A, B]]  \n\n```", "```py\nscala> // Given a list of numbers\nscala> // Group them as positive and negative numbers.\nscala> List(1,-2,3,-4) groupBy (x => if (x >= 0) \"positive\" else \"negative\")\nres6: scala.collection.immutable.Map[String,List[Int]] = Map(negative -> List(-2, -4), positive -> List(1, 3))\n\n```", "```py\ndef init: Traversable[A]  \n\n```", "```py\nscala> List(1,2,3,4) init\nres7: List[Int] = List(1, 2, 3)\n\n```", "```py\ndef drop(n: Int): Traversable[A]  \n\n```", "```py\n// Drop the first three elements\nscala> List(1,2,3,4) drop 3\nres8: List[Int] = List(4)\n\n```", "```py\ndef takeWhile(p: (A) ⇒ Boolean): Traversable[A]  \n\n```", "```py\n// Given an infinite recursive method creating a stream of odd numbers.\ndef odd: Stream[Int] = {\n  def odd0(x: Int): Stream[Int] =\n    if (x%2 != 0) x #:: odd0(x+1)\n    else odd0(x+1)\n      odd0(1)\n}\n// Return a list of all the odd elements until an element isn't less then 9\\. \nodd takeWhile (x => x < 9) toList\n\n```", "```py\nres11: List[Int] = List(1, 3, 5, 7)\n\n```", "```py\ndef dropWhile(p: (A) ⇒ Boolean): Traversable[A]  \n\n```", "```py\n//Drop values till reaching the border between numbers that are greater than 5 and less than 5\nscala> List(2,3,4,9,10,11) dropWhile(x => x <5)\nres1: List[Int] = List(9, 10, 11)\n\n```", "```py\ndef flatMap[B](f: (A) ⇒ GenTraversableOnce[B]): Traversable[B]  \n\n```", "```py\n//Applying function on nested lists and then combining output back together\nscala> List(List(2,4), List(6,8)) flatMap(x => x.map(x => x * x))\nres4: List[Int] = List(4, 16, 36, 64)\n\n```", "```py\nIterator               <=>     java.util.Iterator\nIterator               <=>     java.util.Enumeration\nIterable               <=>     java.lang.Iterable\nIterable               <=>     java.util.Collection\nmutable.Buffer         <=>     java.util.List\nmutable.Set            <=>     java.util.Set\nmutable.Map            <=>     java.util.Map\nmutable.ConcurrentMap  <=>     java.util.concurrent.ConcurrentMap\n\n```", "```py\nscala> import collection.JavaConversions._\nimport collection.JavaConversions._\n\n```", "```py\nscala> import collection.mutable._\nimport collection.mutable._\nscala> val jAB: java.util.List[Int] = ArrayBuffer(3,5,7)\njAB: java.util.List[Int] = [3, 5, 7]\nscala> val sAB: Seq[Int] = jAB\nsAB: scala.collection.mutable.Seq[Int] = ArrayBuffer(3, 5, 7)\nscala> val jM: java.util.Map[String, Int] = HashMap(\"Dublin\" -> 2, \"London\" -> 8)\njM: java.util.Map[String,Int] = {Dublin=2, London=8}\n\n```", "```py\nSeq           =>    java.util.List\nmutable.Seq   =>    java.utl.List\nSet           =>    java.util.Set\nMap           =>    java.util.Map \n\n```", "```py\nscala> val jList: java.util.List[Int] = List(3,5,7)\njList: java.util.List[Int] = [3, 5, 7]\nscala> jList.add(9)\njava.lang.UnsupportedOperationException\n at java.util.AbstractList.add(AbstractList.java:148)\n at java.util.AbstractList.add(AbstractList.java:108)\n ... 33 elided\n\n```", "```py\nscala> def func(implicit x:Int) = print(x) \nfunc: (implicit x: Int)Unit\nscala> func\n<console>:9: error: could not find implicit value for parameter x: Int\n func\n ^\nscala> implicit val defVal = 2\ndefVal: Int = 2\nscala> func(3)\n3\n\n```", "```py\nscala> def func(implicit x:Int, y:Int)(z:Int) = println(y,x)\n<console>:1: error: '=' expected but '(' found.\n def func(implicit x:Int, y:Int)(z:Int) = println(y,x)\n ^\n\n```", "```py\nscala> def func(implicit x:Int, y:Int)(implicit z:Int, f:Int) = println(x,y)\n<console>:1: error: '=' expected but '(' found.\n def func(implicit x:Int, y:Int)(implicit z:Int, f:Int) = println(x,y)\n ^\n\n```", "```py\n// probably in a library\nclass Prefixer(val prefix: String)\ndef addPrefix(s: String)(implicit p: Prefixer) = p.prefix + s\n// then probably in your application\nimplicit val myImplicitPrefixer = new Prefixer(\"***\")\naddPrefix(\"abc\")  // returns \"***abc\"\n\n```", "```py\nscala> implicit def doubleToInt(d: Double) = d.toInt\nval x: Int = 42.0\n\n```", "```py\nscala> def doubleToInt(d: Double) = d.toInt\nval x: Int = doubleToInt(42.0)\n\n```", "```py\nclass Complex(val real: Double, val imaginary: Double) {\n  def plus(that: Complex) = new Complex(this.real + that.real, this.imaginary + that.imaginary)\n  def minus(that: Complex) = new Complex(this.real - that.real, this.imaginary - that.imaginary)\n  def unary(): Double = {\n    val value = Math.sqrt(real * real + imaginary * imaginary)\n    value\n  }\n  override def toString = real + \" + \" + imaginary + \"i\"\n}\nobject UsingImplicitConversion {\n  def main(args: Array[String]): Unit = {\n    val obj = new Complex(5.0, 6.0)\n    val x = new Complex(4.0, 3.0)\n    val y = new Complex(8.0, -7.0)\n\n    println(x) // prints 4.0 + 3.0i\n    println(x plus y) // prints 12.0 + -4.0i\n    println(x minus y) // -4.0 + 10.0i\n    println(obj.unary) // prints 7.810249675906654\n  }\n}\n\n```", "```py\n4.0 + 3.0i\n12.0 + -4.0i\n-4.0 + 10.0i\n7.810249675906654\n\n```", "```py\nval sum = myComplexNumber plus 6.5\n\n```", "```py\nimplicit def Tuple2Complex(value: Tuple2[Double, Double]) = new Complex(value._1, value._2)\n\n```", "```py\nimplicit def Double2Complex(value : Double) = new Complex(value,0.0) \n\n```", "```py\nimport ComplexImplicits._ // for complex numbers\nimport scala.language.implicitConversions // in general\n\n```", "```py\nval z = 4 plus y\nprintln(z) // prints 12.0 + -7.0i\nval p = (1.0, 1.0) plus z\nprintln(p) // prints 13.0 + -6.0i \n\n```", "```py\n12.0 + -7.0i\n13.0 + -6.0i\n\n```", "```py\npackage com.chapter4.CollectionAPI\nimport ComplexImplicits._\nimport scala.language.implicitConversions\nclass Complex(val real: Double, val imaginary: Double) {\n  def plus(that: Complex) = new Complex(this.real + that.real, this.imaginary + that.imaginary)\n  def plus(n: Double) = new Complex(this.real + n, this.imaginary)\n  def minus(that: Complex) = new Complex(this.real - that.real, this.imaginary - that.imaginary)\n  def unary(): Double = {\n    val value = Math.sqrt(real * real + imaginary * imaginary)\n    value\n  }\n  override def toString = real + \" + \" + imaginary + \"i\"\n}\nobject ComplexImplicits {\n  implicit def Double2Complex(value: Double) = new Complex(value, 0.0)\n  implicit def Tuple2Complex(value: Tuple2[Double, Double]) = new Complex(value._1, value._2)\n}\nobject UsingImplicitConversion {\n  def main(args: Array[String]): Unit = {\n    val obj = new Complex(5.0, 6.0)\n    val x = new Complex(4.0, 3.0)\n    val y = new Complex(8.0, -7.0)\n    println(x) // prints 4.0 + 3.0i\n    println(x plus y) // prints 12.0 + -4.0i\n    println(x minus y) // -4.0 + 10.0i\n    println(obj.unary) // prints 7.810249675906654\n    val z = 4 plus y\n    println(z) // prints 12.0 + -7.0i\n    val p = (1.0, 1.0) plus z\n    println(p) // prints 13.0 + -6.0i\n  }\n} \n\n```"]