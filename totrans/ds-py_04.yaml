- en: Chapter 4. Publish your Data Analysis to the Web - the PixieApp Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Data, I think, is one of the most powerful mechanisms for telling stories.
    I take a huge pile of data and I try to get it to tell stories."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – *Steven Levitt*, co-author of *Freakonomics*
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed how Jupyter Notebooks, coupled with PixieDust,
    accelerate your data science projects with simple APIs that let you load, clean,
    and visualize data without the need to write extensive code, as well as enable
    collaboration between data scientists and developers with PixieApps. In this chapter,
    we'll show how to *liberate* your PixieApps and associated data analytics from
    the Jupyter Notebook by publishing them as web applications using the PixieGateway
    server. This operationalization of the Notebook is particularly attractive to
    the line of business user persona (business analysts, C-Suite executives, and
    many more) who would like to use the PixieApps but who, unlike data scientists
    or developers, may not be comfortable using Jupyter Notebooks to do so. Instead,
    they would prefer to access it as a classic web application or perhaps, similar
    to a YouTube video, embed it into a blog post or a GitHub page. Using a website
    or a blog post, it will be easier to communicate the valuable insights and other
    results extracted from the data analytics from your data.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to install and configure a PixieGateway
    server instance both locally for testing or in a Kubernetes container on the cloud
    for production. For those readers who are not familiar with Kubernetes, we'll
    cover the basics in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The other main capability of the PixieGateway server that we'll cover in this
    chapter, is the ability to easily share a chart created with the PixieDust `display()`
    API. We'll show how to publish it as a web page accessible by your team with a
    single click of a button. Finally, we'll cover the PixieGateway admin console
    that lets you manage your applications, charts, kernels, server logs, and a Python
    console executing ad-hoc code requests against a kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: The PixieGateway server is a subcomponent of PixieDust, its source
    code can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/pixiedust/pixiegateway](https://github.com/pixiedust/pixiegateway)'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes ([https://kubernetes.io](https://kubernetes.io)) is a scalable open
    source system for automating and orchestrating the deployment and management of
    containerized applications, which are very popular among cloud service providers.
    It is most often used with Docker containers ([https://www.docker.com](https://www.docker.com))
    although other types of containers are supported. Before you start, you will need
    access to a set of computers that have been configured as a Kubernetes cluster;
    you can find a tutorial on how to create such a cluster here: [https://kubernetes.io/docs/tutorials/kubernetes-basics](https://kubernetes.io/docs/tutorials/kubernetes-basics).'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have the computer resources, a good solution would be to use a public cloud
    vendor that provides a Kubernetes service, such as Amazon AWS EKS ([https://aws.amazon.com/eks](https://aws.amazon.com/eks)),
    Microsoft Azure ([https://azure.microsoft.com/en-us/services/container-service/kubernetes](https://azure.microsoft.com/en-us/services/container-service/kubernetes)),
    or IBM Cloud Kubernetes Service ([https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand how a Kubernetes cluster works, let''s look at the high-level
    architecture shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of Kubernetes](img/B09699_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes high-level architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the stack, we have the `kubectl` command-line tool that enables
    users to manage the Kubernetes cluster by sending commands to the **Kubernetes
    Master Node**. The `kubectl` commands use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`command`: This specifies the operation, for example, `create`, `get`, `describe`,
    and `delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE`: This specifies the resource type, for example, `pods`, `nodes`, and
    `services`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NAME`: This specifies the name of the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags`: This specifies optional flags specific to the operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on how to use `kubectl,` visit the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/reference/kubectl/overview](https://kubernetes.io/docs/reference/kubectl/overview)'
  prefs: []
  type: TYPE_NORMAL
- en: Another important component present in the worker node is the **kubelet,** which
    controls the pod's life cyle by reading the pod configuration from the **kube
    API Server**. It also is responsible for communication with the master node. The
    kube-proxy provides load balancing capabilities between all the pods according
    to the policy specified in the master node, hence ensuring high-availability of
    the overall application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss the different ways to install and configure
    the PixieGateway server, including one method that uses a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the PixieGateway server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the technical details, it would be a good idea to deploy
    a PixieGateway server instance to try things out.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are mainly two types of installation you can try: local install and server
    install.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local install**: Use this method for testing and development.'
  prefs: []
  type: TYPE_NORMAL
- en: For this part, I strongly recommend using Anaconda virtual environments ([https://conda.io/docs/user-guide/tasks/manage-environments.html](https://conda.io/docs/user-guide/tasks/manage-environments.html))
    because they provide good isolation between the environments, enabling you to experiment
    with different versions and configurations of the Python package.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are managing multiple environments, you can get a list of all the available
    environments by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, select the environment of your choice by using the following command
    from a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should see the name of your environment in the Terminal, which is an indication
    that you've correctly activated it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, install the `pixiegateway` package from PyPi by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: You can find more information about the `pixiegateway` package on
    PyPi here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pypi.python.org/pypi/pixiegateway](https://pypi.python.org/pypi/pixiegateway)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all the dependencies have been installed, you''re ready to start the server.
    Assuming that you want to use the `8899 port`, you can start the PixieGateway
    server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Example output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: To stop the PixieGateway server, simply use *Ctrl* + *C* from the Terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now open the PixieGateway admin console at the following URL: `http://localhost:8899/admin`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: When challenged, use `admin` as the user and blank (no password)
    as the password. We''ll review how to configure security and other properties
    in the *PixieGateway server configuration* section later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server install using Kubernetes and Docker**: Use this install method if
    you need to run PixieGateway in a production environment where you want to give
    access to the deployed PixieApps to multiple users over the web.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following instructions will use IBM Cloud Kubernetes Service, but they
    can easily be adapted to other providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an IBM Cloud account if you don't already have one and create a container
    service instance from the catalog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: A lite version plan is available for testing at no cost.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download and install the Kubernetes CLI ([https://kubernetes.io/docs/tasks/tools/install-kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl))
    and the IBM Cloud CLI ([https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started](https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: An additional get started article on Kubernetes containers can be found here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://console.bluemix.net/docs/containers/container_index.html#container_index](https://console.bluemix.net/docs/containers/container_index.html#container_index)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Log in to the IBM Cloud and then target the org and space where your Kubernetes
    instance resides. Install and initialize the `container-service` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that your cluster is created and, if not, create one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the cluster configuration that will be used by the `kubectl` command,
    which is executed on your local machine, later on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will generate a temporary YML file that contains the
    cluster information and an environment variable export statement that you must
    run before starting to use the `kubectl` command, as in the example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: YAML is a very popular data serialization format commonly used for
    system configuration. You can find more information here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.yaml.org/start.html](http://www.yaml.org/start.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can now use `kubectl` to create the deployment and services for your PixieGateway
    server. For convenience, the PixieGateway GitHub repository already has a generic
    version of `deployment.yml` and `service.yml` that you can directly reference.
    We''ll review how to configure these files for Kubernetes in the *PixieGateway
    server configuration* section later in this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It would be a good idea to verify the state of your clusters using the `kubectl
    get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you''ll need the public IP address of the server, which you can find
    by looking at the `Public IP` column of the output returned using the following
    command, in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all goes well, you can now test your deployment by opening the admin console
    at `http://<server_ip>>:32222/admin`. This time, the default credentials for the
    admin console are `admin`/`changeme` and we'll show how to change them in the
    next section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `deployment.yml` file used in the Kubernetes install instructions is referencing
    a Docker image that has the PixieGateway binaries and all its dependencies preinstalled
    and configured. The PixieGateway Docker image is available at [https://hub.docker.com/r/dtaieb/pixiegateway-python35](https://hub.docker.com/r/dtaieb/pixiegateway-python35).
  prefs: []
  type: TYPE_NORMAL
- en: 'When working locally, the recommended method is to follow the steps of the
    local install described earlier. However, for readers who prefer to work with
    Docker images, it is possible to try out the PixieGateway Docker image locally
    without Kubernetes, by directly installing it on your local laptop with a simple
    Docker command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command assumes that you have already installed Docker and that
    it is currently running on your local machine. If not, you can download an installer
    from the following link: [https://docs.docker.com/engine/installation](https://docs.docker.com/engine/installation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker image will automatically be pulled if not already present and the
    container will start, starting the PixieGateway server at local port `8888`. The
    `-p` switch in the command maps the `8888 port` local to the container, to the
    `9999 port` local to the host machine. With the given configuration, you would
    access the Docker instance of the PixieGateway server at the following URL: `http://localhost:9999/admin`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about the Docker command line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/engine/reference/commandline/cli](https://docs.docker.com/engine/reference/commandline/cli)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Another reason why you would use this method is to provide your own
    custom Docker image for the PixieGateway server. This can be useful if you have
    built an extension to PixieGateway and want to provide it to your users as an
    already configured Docker image. Discussion around how to build a Docker image
    from a base image is beyond the scope of this book, but you can find detailed
    information here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/engine/reference/commandline/image_build](https://docs.docker.com/engine/reference/commandline/image_build)'
  prefs: []
  type: TYPE_NORMAL
- en: PixieGateway server configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring the PixieGateway server is very similar to configuring the Jupyter
    Kernel Gateway. Most options are configured using a Python configuration file;
    to start things off, you can generate a template configuration file using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `jupyter_kernel_gateway_config.py` template file will be generated under
    the `~/.jupyter` directory (`~` indicates the user home directory). You can find
    more information about the standard Jupyter Kernel Gateway options here: [http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `jupyter_kernel_gateway_config.py` file is fine when you are working
    locally and have easy access to the filesystem. When using the Kubernetes install,
    it is recommended to configure the options as environment variables, which you
    can set directly in the `deployment.yml` file by using the predefined `env` category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at each configuration options for the PixieGateway server.
    A list is provided here using both the Python and Environment method:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: As a reminder, Python method means setting the parameter in the `jupyter_kernel_gateway_config.py`
    Python config file, while the Environment method means setting the parameters
    in the Kubernetes `deployment.yml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Admin console credentials**: Configure the user ID/password for the admin
    console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**: `PixieGatewayApp.admin_user_id`, `PixieGatewayApp.admin_password`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment**: `ADMIN_USERID` and `ADMIN_PASSWORD`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage connector**: Configure a persistent storage for various resources,
    such as charts, and Notebooks. By default, PixieGateway uses the local filesystem;
    for example, it will store the published Notebooks under the `~/pixiedust/gateway`
    directory. Using the local filesystem is probably fine for a local test environment,
    but when using a Kubernetes install, you will need to explicitly use persistent
    volumes ([https://kubernetes.io/docs/concepts/storage/persistent-volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes)),
    which can be difficult to use. If no persistence strategy is put in place, the
    persisted files will be deleted when the container is restarted and all your published
    chart and PixieApps will disappear. PixieGateway provides another option, which
    is to configure a storage connector that lets you persist the data using the mechanism
    and backend of your choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To configure a storage connector for charts, you must specify a fully qualified class
    name in either one of the following configuration variables:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Python**: `SingletonChartStorage.chart_storage_class`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment**: `PG_CHART_STORAGE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The referenced connector class must inherit from the `ChartStorage` abstract
    class defined in the `pixiegateway.chartsManager` package (implementation can
    be found here: [https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/pixiegateway/chartsManager.py)).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'PixieGateway provides an out of the box connector to the Cloudant/CouchDB NoSQL
    database ([http://couchdb.apache.org](http://couchdb.apache.org)). To use this
    connector, you''ll need to set the connector class to `pixiegateway.chartsManager.CloudantChartStorage`.
    You''ll also need to specify secondary configuration variables to specify the
    server and credential information (we show the Python/Environment form):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`CloudantConfig.host / PG_CLOUDANT_HOST`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CloudantConfig.port / PG_CLOUDANT_PORT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CloudantConfig.protocol / PG_CLOUDANT_PROTOCOL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CloudantConfig.username / PG_CLOUDANT_USERNAME`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CloudantConfig.password / PG_CLOUDANT_PASSWORD`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote Kernels**: Specify the configuration for a remote Jupyter Kernel Gateway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the moment, this configuration option is only supported in Python mode.
    The variable name you need to use is `ManagedClientPool.remote_gateway_config`.
    The expected value is a JSON object that contains the server information, which
    can be specified in two ways:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`protocol`, `host`, and `port`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notebook_gateway` specifies fully qualified URL to the server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the kernel configuration, security can also be provided using
    two ways:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`auth_token`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` and `password`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be seen in the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that, in the preceding example, you need to prefix the variable with
    `c.`. This is a requirement coming from the underlying Jupyter/IPython configuration
    mechanism.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For reference, here are the complete configuration example files using both
    Python and Kubernetes Environment variables formats:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following are the contents of `jupyter_kernel_gateway_config.py`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following are the contents of deployment.yml:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: PixieGateway architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now would be a good time to look again at the PixieGateway architecture diagram
    presented in [Chapter 2](ch02.xhtml "Chapter 2. Python and Jupyter Notebooks to
    Power your Data Analysis"), *Python and Jupyter Notebooks to Power your Data Analysis*.
    The server is implemented as a custom extension (called Personality) to the Jupyter Kernel
    Gateway ([https://github.com/jupyter/kernel_gateway](https://github.com/jupyter/kernel_gateway)).
  prefs: []
  type: TYPE_NORMAL
- en: In turn, the PixieGateway server provides extension points to customize some
    behavior that we'll discuss later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level architecture diagram for the PixieGateway server is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PixieGateway architecture](img/B09699_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PixieGateway architecture diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'As the diagram indicates, PixieGateway provides a REST interface for three
    types of clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jupyter Notebook Server**: This calls a dedicated set of REST APIs for sharing
    charts and publishing PixieApps as web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser client running a PixieApp**: A special REST API manages the execution
    of Python code in the associated kernel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser client running the admin console**: A dedicated set of REST APIs for managing
    various server resources and stats, for example, PixieApps and kernel instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the backend, the PixieGateway server manages the life cycle of one or more
    Jupyter Kernel instances responsible for running the PixieApps. At runtime, each
    PixieApp is deployed on a kernel instance using a specific set of steps. The following
    diagram shows a typical topology of all the PixieApp user instances running on
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PixieGateway architecture](img/B09699_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The topology of running PixieApp instances
  prefs: []
  type: TYPE_NORMAL
- en: 'When a PixieApp is deployed on the server, the code contained in every cell of the Jupyter
    Notebook is analyzed and broken into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warmup code**: This is all the code defined in all the cells above the main
    PixieApp definition. This code is run only once, when the PixieApp application
    is first started on the kernel, and will not run again until the kernel is restarted,
    or until it is called explicitly from the run code. This is important because
    it will help you better optimize performances; for example, you should always
    put in the warmup section, code that loads a large amount of data that doesn''t
    change much or that may require a long time to initialize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run code**: This is code that will be run in its own instance for every user
    session. The run code is typically extracted from the cell that contains the PixieApp
    class declaration. The publisher automatically discovers this cell by doing a static
    analysis of the Python code and specifically looking for the following two criteria,
    which must both be met:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cell contains a class that has the `@PixieApp` annotation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The cell instantiates the class and call its `run()` method
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, the following code must be in its own cell to qualify as the run code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we've seen in [Chapter 3](ch03.xhtml "Chapter 3. Accelerate your Data Analysis
    with Python Libraries"), *Accelerate your Data Analysis with Python Libraries*,
    it is possible to declare multiple PixieApps in the same notebook that will be
    used as child PixieApp or as base classes to the main PixieApp. In this case,
    we need to make sure that they are defined in their own cell and that you don't
    try to instantiate them and call their `run()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The rule is that there can be only one main PixieApp class for which the `run()`
    method will be called and the cell that contains this code is considered the run
    code by the PixieGateway.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Cells that are not marked as Code, such as Markdown, Raw NBConvert, or
    Heading are ignored during the static analysis done by the PixieGateway server.
    Therefore, it is safe to keep them in your Notebook.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each client session, PixieGateway will instantiate an instance of the main
    PixieApp class using the run code (represented as colored hexagons in the preceding
    diagram). Depending on current load, PixieGateway will decide how many PixieApps
    should run in a particular kernel instance and, if needed, automatically spawn
    a new kernel to serve the extra users. For example, if five users are using the
    same PixieApp, three instances may be running in a particular kernel instance
    and the two others will be run in another kernel instance. PixieGateway is constantly
    monitoring the usage patterns to optimize workload distribution by load balancing
    the instances of PixieApps between multiple kernels.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help understand how the Notebook code is broken down, the following diagram reflects
    how the warmup and run code are extracted from the Notebook and transformed to
    make sure that multiple instances coexist peacefully within the same kernel:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a reminder, the cell that contains the main PixieApp must also have code
    that instantiates it and calls the `run()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![PixieGateway architecture](img/B09699_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'PixieApp life cycle: Warmup and Run Code'
  prefs: []
  type: TYPE_NORMAL
- en: Because a given kernel instance can host more than one Notebook with its main
    PixieApp, we need to make sure that there is no accidental name collision when
    the warmup code for two main PixieApps is executed. For example, the `title` variable
    may be used in both PixieApps and, if left alone, the value for the second one
    would override the value for the first one. To avoid this conflict, all the variable
    names in the warmup code are made unique by injecting a namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The `title = 'some string'` statement becomes `ns1_title = 'some string'` after
    publication. The PixieGateway publisher will also update all references to `title`
    throughout the code to reflect the new name. All of this renaming is automatically
    done at runtime and there are no specific things that need to be done by the developer.
  prefs: []
  type: TYPE_NORMAL
- en: We will show real code examples later on when we cover the *PixieApp details*
    page of the admin console.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have packaged the code for your main PixieApp as a Python module that
    is imported in the Notebook, you still need to declare the code for a wrapper
    PixieApp that inherits from it. This is because the PixieGateway does a static
    code analysis, looking for the `@PixieApp` notation, and if not found, the main
    PixieApp will not be properly recognized.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s assume that you have a PixieApp named `AwesomePixieApp`
    imported from the `awesome package`. In this case, you would put the following
    code in its own cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Publishing an application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll publish the *GitHub Tracking* application that we created in [Chapter
    3](ch03.xhtml "Chapter 3. Accelerate your Data Analysis with Python Libraries"),
    *Accelerate your Data Analysis with Python Libraries,* into a PixieGateway instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the completed notebook from this GitHub location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%203/GitHub%20Tracking%20Application/GitHub%20Sample%20Application%20-%20Part%204.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Notebook, run the application as usual and use the publish button
    located on the top-left of the cell output, to start the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing an application](img/B09699_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Invoke the publish dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'The publish dialog has multiple tab menus:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Options**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PixieGateway Server**: For example, `http://localhost:8899`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Title**: A short description that will be used as the page title when
    displayed in the browser'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Configure the PixieApp security when accessed through the web:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No security**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token**: A security token must be added as a query parameter to the URL,
    for example, `http://localhost:8899/GitHubTracking?token=941b3990d5c0464586d67e48705b9deb`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: At this time, PixieGateway doesn''t provide any authentication/authorization
    mechanism. Third party authorization, such as OAuth 2.0 ([https://oauth.net/2](https://oauth.net/2)),
    JWT ([https://jwt.io](https://jwt.io)), and others will be added in the future.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Imports**: Display the list of Python package dependencies automatically
    detected by the PixieDust publisher. These imported packages will be automatically
    installed, if not already present, on the kernel where the application is running.
    When detecting a particular dependency, PixieDust looks at the current system
    to get the version and install location, for example, PyPi or a custom install
    URL such as a GitHub repo, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kernel Spec**: This is where you can choose a kernel spec for your PixieApp.
    By default, PixieDust selects the default kernel available on the PixieGateway
    server but if, for example, your Notebook relies on Apache Spark, you should be
    able to pick a kernel that supports it. This option can also be changed after
    the PixieApp has been deployed using the admin console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a sample screenshot of the PixieApp publish dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing an application](img/B09699_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PixieApp publish dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the **Publish** button will start the publishing process. Upon completion
    (which depending on the size of the Notebook is pretty fast), you''ll see the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing an application](img/B09699_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Successful publish screen
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then test the application by clicking on the provided link, which you
    can copy and share with users on your team. The following screenshot shows the
    three main screens of the *GitHub Tracking* application running as a web application
    on the PixieGateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing an application](img/B09699_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PixieApp running as a web application
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know how to publish a PixieApp, let''s review a few developer
    best practices and rules that will help you optimize PixieApps that are intended
    to be published as web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: A PixieApp instance is created for each user session, therefore to improve performances,
    make sure that it doesn't include code that is long-running or that loads a large
    amount of static data (data that doesn't change often). Instead, place it in the
    warmup code section and reference it from the PixieApp as needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t forget to add the code that runs the PixieApp in the same cell. If not,
    you''ll end up with a blank page when running it on the web. As a good practice,
    it is recommended to assign the PixieApp instance into its own variable. For example,
    do this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's instead of the following
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can have multiple PixieApp classes declared in the same Notebook, which
    is needed if you are using child PixieApp or PixieApp inheritance. However, only
    one of them can be the main PixieApp, which the PixieGateway will run. It is the
    one that has the extra code that instantiates and runs the PixieApp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s a good idea to add a Docstring ([https://www.python.org/dev/peps/pep-0257](https://www.python.org/dev/peps/pep-0257))
    to your PixieApp class that gives a short description of the application. As we''ll
    see in the *PixieGateway admin Console* section, later in this chapter, this docstring
    will be displayed in the PixieGateway admin console, as in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Encoding state in the PixieApp URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, you may want to capture the state of a PixieApp in the URL as
    query parameters so that it can be bookmarked and/or shared with other people.
    The idea is that, when using query parameters, the PixieApp doesn't start from
    the main screen but rather automatically activates the route corresponding to
    the parameters. For example, in the *GitHub Tracking* application, you could use
    `http://localhost:8899/pixieapp/GitHubTracking?query=pixiedust` to bypass the
    initial screen and jump directly to the table showing the list of repositories
    that match the given query.
  prefs: []
  type: TYPE_NORMAL
- en: You can have the query parameters automatically added to the URL when the route
    is activated by adding the `persist_args` special argument to the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would look like this for the `do_search()` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the code file here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode1.py)'
  prefs: []
  type: TYPE_NORMAL
- en: The `persist_args` keyword argument does not affect how the route is activated.
    It is only there to automatically add the proper query arguments to the URL when
    activated. You can try to make this simple change in the Notebook, republish the
    PixieApp to the PixieGateway server, and try it out. As soon as you hit the submit
    button on the first screen, you'll notice that the URL is automatically updated
    to include the query argument.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: The `persist_args` argument also works when running in the Notebook
    although the implementation is different since we don''t have a URL. Instead,
    the parameters are added to the cell metadata using the `pixieapp` key, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Encoding state in the PixieApp URL](img/B09699_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cell metadata showing the PixieApp parameters
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the `persist_args` feature, you may find that, while doing
    iterative development, it becomes cumbersome to always go to the cell metadata
    to remove the parameters. As a shortcut, the PixieApp framework adds a home button
    in the top-right toolbar to reset the arguments with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an alternative, you could also avoid saving the route arguments in the cell
    metadata altogether when running in the Notebook (but still save them while running
    on the web). To do that, you would need to use `web` as the value for the `persist_args`
    argument instead of `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Sharing charts by publishing them as web pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we show how to easily share a chart created by the `display()`
    API and publish it as a web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the example from [Chapter 2](ch02.xhtml "Chapter 2. Python and Jupyter
    Notebooks to Power your Data Analysis"), *Python and Jupyter Notebooks to Power
    your Data Analysis,* let''s load the cars performance dataset and create a chart
    using `display()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the code file here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode2.py)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the PixieDust output interface, select the **Bar Chart** menu, then in the
    options dialog, select `horsepower` for the **Keys** and `mpg` for the **Values,**
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PixieDust Chart options
  prefs: []
  type: TYPE_NORMAL
- en: 'We then use the **Share** button to invoke the chart sharing dialog as shown
    in the following screenshot, which uses Bokeh as the renderer:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Chart sharing works with any renderer, and I encourage you to try
    it with other renderers such as Matplotlib and Mapbox.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Invoke the Share Chart dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Share Chart** dialog, you can specify the PixieGateway server and
    an optional description for the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that as a convenience, PixieDust will automatically remember the last one
    used.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Share Chart dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **Share** button will start the publishing process that takes
    the chart content to the PixieGateway and then returns a unique URL to the web
    page. Similar to the PixieApp, you can then share this URL with the team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chart sharing confirmation dialog
  prefs: []
  type: TYPE_NORMAL
- en: The confirmation dialog contains the unique URL for the chart and an HTML fragment
    that lets you embed the chart in your own web page, such as a blog post, and a
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the link will show the following PixieGateway page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing charts by publishing them as web pages](img/B09699_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chart page
  prefs: []
  type: TYPE_NORMAL
- en: The preceding page shows metadata about the chart, for example, **Author**,
    **Description**, and **Date,** as well as the embedded HTML fragment. Notice that
    if the chart has interactivity (as is the case for Bokeh, Brunel, or Mapbox),
    then it is preserved in the PixieGateway page.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the preceding screenshot, the user can still wheel zoom, box
    zoom, and pan to explore the chart or download the chart as a PNG file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Embedding the chart in your own page is also very easy. Simply copy the embedded
    HTML fragment anywhere in your HTML, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the code file here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html](https://github.com/DTAIEB/Thoughtful-Data-Science/blob/master/chapter%204/sampleCode3.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Embedded chart objects must use the same level of security or higher as the
    browser. If not, the browser will throw a Mixed Content error. For example, if
    the host page is loaded over HTTPS, then the embedded chart must also be loaded
    over HTTPS, which means that you'll need to enable HTTPS in the PixieGateway server.
    You can also visit [http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html](http://jupyter-kernel-gateway.readthedocs.io/en/latest/config-options.html)
    to configure an SSL/TLS certificate for the PixieGateway server. Another solution
    that is easier to maintain would be to configure an Ingress service for the Kubernetes
    cluster that provides TLS termination.
  prefs: []
  type: TYPE_NORMAL
- en: 'For convenience, we provide a template ingress YAML file for the PixieGateway
    service here: [https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml](https://github.com/ibm-watson-data-lab/pixiegateway/blob/master/etc/ingress.yml).
    You will need to update this file with the TLS host and the secret provided by
    your provider. For example, if you are using the IBM Cloud Kubernetes Service,
    you just have to enter the cluster name in the `<your cluster name>` placeholder.
    You can find more information on how to redirect HTTP to HTTPS here: [https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https](https://console.bluemix.net/docs/containers/cs_annotations.html#redirect-to-https).
    Ingress services are a great way to improve security, reliability, and protect
    against DDOS attacks. For example, you can set various limits, such as the number
    of requests/connections per seconds allowed for each unique IP address or maximum
    bandwidth allowed. For more information please see [https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress).'
  prefs: []
  type: TYPE_NORMAL
- en: PixieGateway admin console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The admin console is a great tool to manage your resources and troubleshoot
    them. You can access it using the `/admin` URL. Notice that you will need to authenticate
    with the user/password that you configured (see the *PixieGateway server configuration*
    section for instructions on how to configure the user/password in this chapter;
    by default the user is `admin` and the password is <blank>).
  prefs: []
  type: TYPE_NORMAL
- en: 'The user interface for the admin console is composed of multiple menus focused
    on a specific task. Let''s look at them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PixieApps**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information about all the deployed PixieApps: URL, description, and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security management
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions, for example, delete, and download
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![PixieGateway admin console](img/B09699_04_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Admin console PixieApp management page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Charts**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information about all the published charts: link, preview, and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions, for example, delete, download, and embed fragment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![PixieGateway admin console](img/B09699_04_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Admin console chart management page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Kernel Stats**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Kernel Stats** screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![PixieGateway admin console](img/B09699_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Admin console Kernel Stats page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This screen shows a live table of all the kernels currently running in the
    PixieGateway. Each row contains the following information:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Kernel Name**: This is the name of the kernel with a drill-down link, which
    shows the **Kernel Spec**, **Log**, and **Python Console**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: This shows the status as `idle` or `busy`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Busy Ratio**: This is a value between 0 and 100% that denotes the kernel
    utilization since it was started.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running Apps**: This is a list of running PixieApps. Each PixieApp is a drill-down
    link that displays the warmup code and runs code for the PixieApp. This is very
    useful for troubleshooting errors since you can see what code is being run by
    the PixieGateway.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users Count**: This is the number of users with open sessions in this kernel.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Logs**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full access the tornado server log for troubleshooting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![PixieGateway admin console](img/B09699_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Admin console server logs page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Python Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python Console is invoked by clicking on the kernel link in the **Kernel
    Stats** screen. The admin can use it to execute any code against the kernel, which
    can be useful to troubleshoot issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following screenshot shows how to invoke the PixieDust log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Console](img/B09699_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Display PixieDust log from the PixieGateway admin Python Console
  prefs: []
  type: TYPE_NORMAL
- en: Displaying warmup and run code for a PixieApp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an execution error happens while loading a page, the PixieGateway will
    show the full Python traceback in the browser. However, the error may be hard
    to find because its root cause may be in the warmup code that is executed once
    when the PixieApp starts. One important debugging technique is to look at the
    warmup and run code executed by the PixieGateway to spot any anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: If the error is still not obvious, you could, for example, copy the warmup and
    run code in a temporary Notebook and try to run it from there, with the hope that
    you can reproduce the error and spot the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the warmup and run code by clicking on the PixieApp link on
    the **Kernel Stats** screen, which will take you to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying warmup and run code for a PixieApp](img/B09699_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Display the warmup and run code
  prefs: []
  type: TYPE_NORMAL
- en: Note that the warmup and run code do not contain the original code formatting
    and therefore can be harder to read. You can mitigate this issue by copying it
    and pasting the code into a temporary Notebook and reformatting it again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you should be able to install, configure, and manage
    a PixieGateway microservice server, publish charts as a web page, and deploy a PixieApp
    from a Notebook to a web application. Whether you are a data scientist working
    on analytics in a Jupyter Notebook or a developer writing and deploying applications
    targeted at the line of a business user, we've shown, in this chapter, how PixieDust
    can help accomplish your tasks more efficiently and reduce the time it takes to
    operationalize your analytics.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at advanced topics and best practices related
    to PixieDust and the PixieApp programming model, which will be useful when we
    go over the industry use cases and sample data pipelines in the remaining chapters.
  prefs: []
  type: TYPE_NORMAL
