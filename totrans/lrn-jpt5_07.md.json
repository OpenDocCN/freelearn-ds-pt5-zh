["```py\nyum install git \n```", "```py\ngit clone https://github.com/alexarchambault/jupyter-scala.git \n```", "```py\nsudo yum install sbt \n```", "```py\ncd jupyter-scala \n```", "```py\nsbt cli/packArchive \n```", "```py\n./jupyter-scala \n```", "```py\n jupyter kernelspec list  \n```", "```py\njupyter notebook \n```", "```py\n{ \n \"cells\": [ \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": null, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [] \n  } \n ], \n \"metadata\": { \n  \"kernelspec\": { \n   \"display_name\": \"Scala\", \n   \"language\": \"scala\", \n   \"name\": \"scala\" \n  }, \n  \"language_info\": { \n   \"codemirror_mode\": \"text/x-scala\", \n   \"file_extension\": \".scala\", \n   \"mimetype\": \"text/x-scala\", \n   \"name\": \"scala211\", \n   \"nbconvert_exporter\": \"script\", \n   \"pygments_lexer\": \"scala\", \n   \"version\": \"2.11.11\" \n  } \n }, \n \"nbformat\": 4, \n \"nbformat_minor\": 2 \n} \n```", "```py\nval name = \"Dan\" \nval age = 37 \nshow(name + \" is \" + age) \n```", "```py\nimport scala.io.Source;\n//copied file locally https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\nval filename = \"iris.data\"\n//println(\"SepalLength, SepalWidth, PetalLength, PetalWidth, Class\");\nval array = scala.collection.mutable.ArrayBuffer.empty[Float]\nfor (line <- Source.fromFile(filename).getLines) {\n    var cols = line.split(\",\").map(_.trim);\n//println(s\"${cols(0)}|${cols(1)}|${cols(2)}|${cols(3)} |${cols(4)}\");\n   val i = cols(0).toFloat\n   array += i;\n}\nval count = array.length;\nvar min:Double = 9999.0;\nvar max:Double = 0.0;\nvar total:Double = 0.0;\nfor ( x <- array ) {\n    if (x < min) { min = x; }\n    if (x > max) { max = x; }\n    total += x;\n}\nval mean:Double = total / count;\n```", "```py\nimport scala.io.Source; \n\nval filename = \"train.csv\" \n//PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked \n//1,0,3,\"Braund, Mr. Owen Harris\",male,22,1,0,A/5 21171,7.25,,S \n\nvar males = 0 \nvar females = 0 \nvar males_survived = 0 \nvar females_survived = 0 \nfor (line <- Source.fromFile(filename).getLines) { \n    var cols = line.split(\",\").map(_.trim); \n    var sex = cols(5); \n    if (sex == \"male\") {  \n        males = males + 1; \n        if (cols(1).toInt == 1) { \n            males_survived = males_survived + 1; \n        } \n    } \n    if (sex == \"female\") {  \n        females = females + 1;  \n        if (cols(1).toInt == 1) { \n            females_survived = females_survived + 1; \n        } \n    }     \n} \nval mens_survival_rate = males_survived.toFloat/males.toFloat \nval womens_survival_rate = females_survived.toFloat/females.toFloat \n```", "```py\nval r = new scala.util.Random \nr.setSeed(113L) \nval samples = 1000 \nvar dice = new Array[Int](12) \nfor( i <- 1 to samples){ \n    var total = r.nextInt(6) + r.nextInt(6) \n    dice(total) = dice(total) + 1 \n} \nval max = dice.reduceLeft(_ max _) \nfor( i <- 0 to 11) { \n    var str = \"\" \n    for( j <- 1 to dice(i)/3) { \n        str = str + \"X\" \n    } \n    print(i+1, str, \"\\n\") \n} \n```", "```py\nvar factor = 7\nval multiplier = (i:Int) => i * factor\nval a = multiplier(11)\nval b = multiplier(12)\n```", "```py\ndef squared(x: Int): Int = x * x\ndef cubed(x: Int): Int = x * x * x\n\ndef process(a: Int, processor: Int => Int): Int = {processor(a) }\n\nval fiveSquared = process(5, squared)\nval sevenCubed = process(7, cubed)\n```", "```py\ndef matchTest(x: Any): Any = x match { \n  case 7 => \"seven\" \n  case \"two\" => 2 \n  case _ => \"something\" \n} \nval isItTwo = matchTest(\"two\") \nval isItTest = matchTest(\"test\") \nval isItSeven = matchTest(7) \n```", "```py\ncase class Car(brand: String, model: String) \nval buickLeSabre = Car(\"Buick\", \"LeSabre\") \n```", "```py\ndef carType(car: Car) = car match { \n  case Car(\"Honda\", \"Accord\") => \"sedan\" \n  case Car(\"GM\", \"Denali\") => \"suv\" \n  case Car(\"Mercedes\", \"300\") => \"luxury\" \n  case Car(\"Buick\", \"LeSabre\") => \"sedan\" \n  case _ => \"Car: is of unknown type\" \n} \nval typeOfBuick = carType(buickLeSabre) \n```", "```py\npublic void calculate(integer amount) { \n} \n```", "```py\npublic void calculate(final integer amount) { \n} \n```", "```py\ndef calculate (amount: Int): Int = {  \n        amount = amount + 1; \n        return amount; \n} \nvar balance = 100\nval result = calculate(balance)\n```", "```py\nvar List mylist; \n```", "```py\nvar mylist immutable.List; \n```", "```py\nvar mutableList = List(1, 2, 3); \nvar immutableList = scala.collection.immutable.List(4, 5, 6); \nmutableList.updated(1,400); \nimmutableList.updated(1,700); \n```", "```py\ndef divide(dividend:Int, divisor:Int): Float =  \n{ dividend.toFloat / divisor.toFloat } \ndivide(40, 5) \ndivide(divisor = 40, dividend = 5) \n```", "```py\ntrait Color {\n def isRed(): Boolean\n}\nclass Red extends Color {\n def isRed() = true\n}\nclass Blue extends Color {\n def isRed() = false\n}\nvar red = new Red();\nvar blue = new Blue();\nred.isRed()\nblue.isRed() \n```"]