["```py\njulia> Pkg.update() \njulia> Pkg.add(\"StatsBase\") \n\n```", "```py\njulia> using RDatasets \n\njulia> iris_dataframe = dataset(\"datasets\", \"iris\") \n\n```", "```py\njulia> sample(iris_dataframe[:SepalLength]) \n6.6 \n\njulia> sample(iris_dataframe[:SepalLength], 5) \n5-element Array{Float64,1}: \n 4.8 \n 5.4 \n 5.0 \n 5.2 \n 4.3 \n\n```", "```py\nJulia> sample(x, num_of_elements[; replace=true, ordered=false]) \n\n```", "```py\njulia> wv = WeightVec([1., 2., 3.], 6.) \nStatsBase.WeightVec{Float64,Array{Float64,1}}([1.0,2.0,3.0],6.0) \n\n```", "```py\njulia> eltype(wv) \nFloat64 \n\n```", "```py\njulia> length(wv) \n3 \n\njulia> isempty(wv) \nfalse \n\njulia> values(wv) \n3-element Array{Float64,1}: \n 1.0 \n 2.0 \n 3.0 \n\njulia> sum(wv) \n6.0 \n\n# Applying eltypes to iris_dataframe \n# this method is of DataFrames.jl \njulia> eltypes(iris_dataframe)   \n5-element Array{Type{T},1}: \n Float64                       \n Float64                       \n Float64                       \n Float64                       \n Union{ASCIIString,UTF8String} \n\n```", "```py\njulia> typeof(iris_dataframe[1,:SepalLength]) \nFloat64 \n\njulia> typeof(iris_dataframe[1,:Species]) \nASCIIString \n\n```", "```py\n(a - mean(a)).^k \n\n```", "```py\njulia> a = [12,23,45,68,99,72,61,39,21,71] \n\n```", "```py\nJulia> crossentropy(ProbabilityVector1, ProbabilityVector2) \n\n```", "```py\njulia> fit(Histogram, data[, weight][, edges]) \n\n```", "```py\njulia> x=:SepalLength, y=:SepalWidth, color=:Species) \n\n```"]