["```py\nimport pandas as pd\n\ndf = pd.read_csv(\n    'C:\\\\Users\\\\Vikas\\\\Desktop\\\\Bk\\\\Data\\\\DFCompare_Revised_FlatFiles\\\\' + \n    'ESRD QIP - Complete QIP Data - Payment Year 2018.csv', header=0\n)\n```", "```py\nprint('Number of rows: ' + str(df.shape[0]))\nprint('Number of columns: ' + str(df.shape[1]))\n```", "```py\nNumber of rows: 6825\nNumber of columns: 153\n```", "```py\nprint(df.head(n=5))\n```", "```py\n                    Facility Name  CMS Certification Number (CCN)  \\\n0     CHILDRENS HOSPITAL DIALYSIS                           12306   \n1                FMC CAPITOL CITY                           12500   \n2                GADSDEN DIALYSIS                           12501   \n3  TUSCALOOSA UNIVERSITY DIALYSIS                           12502   \n4                  PCD MONTGOMERY                           12505   \n\n...\n```", "```py\nprint(df.columns)\n```", "```py\nIndex(['Facility Name', 'CMS Certification Number (CCN)', 'Alternate CCN 1',\n       'Address 1', 'Address 2', 'City', 'State', 'Zip Code', 'Network',\n       'VAT Catheter Measure Score',\n       ...\n       'STrR Improvement Measure Rate/Ratio',\n       'STrR Improvement Period Numerator',\n       'STrR Improvement Period Denominator', 'STrR Measure Score Applied',\n       'National Avg STrR Measure Score', 'Total Performance Score',\n       'PY2018 Payment Reduction Percentage', 'CMS Certification Date',\n       'Ownership as of December 31, 2016', 'Date of Ownership Record Update'],\n      dtype='object', length=153)\n```", "```py\nfor column in df.columns:\n    print(column)\n```", "```py\nFacility Name\nCMS Certification Number (CCN)\nAlternate CCN 1\nAddress 1\nAddress 2\nCity\nState\nZip Code\nNetwork\nVAT Catheter Measure Score\n...\n```", "```py\n\"\"\"Equivalent SQL: SELECT COUNT(*) \n                   FROM df \n                   GROUP BY State;\n\"\"\"\ndf_states = df.groupby('State').size()\nprint(df_states)\n```", "```py\nState\nAK      9\nAL    170\nAR     69\nAS      1\nAZ    120\nCA    625\nCO     75\nCT     49\nDC     23\nDE     27\n...\n```", "```py\n\"\"\"Equivalent SQL: SELECT COUNT(*) AS Count \n                   FROM df \n                   GROUP BY State \n                   ORDER BY Count ASC;\n\"\"\"\ndf_states = df.groupby('State').size().sort_values(ascending=False)\nprint(df_states)\n```", "```py\nState\nCA    625\nTX    605\nFL    433\nGA    345\nOH    314\nIL    299\nPA    294\nNY    274\nNC    211\nMI    211\n...\n```", "```py\n\"\"\"Equivalent SQL: SELECT COUNT(*) AS Count \n                   FROM df \n                   GROUP BY State \n                   ORDER BY Count DESC\n                   LIMIT 10;\n\"\"\"\ndf_states = df.groupby('State').size().sort_values(ascending=False).head(n=10)\nprint(df_states)\n```", "```py\n\"\"\"Equivalent SQL: SELECT *\n                   FROM df\n                   WHERE State='CA';\n\"\"\"\ndf_ca = df.loc[df['State'] == 'CA']\nprint(df_ca)\n```", "```py\nprint(df.groupby('Total Performance Score').size())\n```", "```py\nTotal Performance Score\n10           10\n100          30\n11            2\n12            2\n13            1\n14            3\n15            1\n...\n95           15\n96            2\n97           11\n98            8\n99           12\nNo Score    276\nLength: 95, dtype: int64\n```", "```py\ndf_filt= df.loc[df['Total Performance Score'] != 'No Score']\ndf_filt['Total Performance Score'] = pd.to_numeric(\n    df_filt['Total Performance Score']\n)\n```", "```py\ndf_tps = df_filt[[\n    'Facility Name',\n    'State', \n    'Total Performance Score'\n]].sort_values('Total Performance Score')\nprint(df_tps.head(n=5))\n```", "```py\n                                   Facility Name State  \\\n5622   462320 PRIMARY CHILDREN'S DIALYSIS CENTER    UT   \n698              PEDIATRIC DIALYSIS UNIT AT UCSF    CA   \n6766                  VITAL LIFE DIALYSIS CENTER    FL   \n4635  BELMONT COURT DIALYSIS - DOYLESTOWN CAMPUS    PA   \n3763                       WOODMERE DIALYSIS LLC    NY   \n\n      Total Performance Score  \n5622                        5  \n698                         7  \n6766                        8  \n4635                        8  \n3763                        9\n```", "```py\nimport numpy as np\n\ndf_state_means = df_filt.groupby('State').agg({\n    'Total Performance Score': np.mean\n})\nprint(df_state_means.sort_values('Total Performance Score', ascending=False))\n```", "```py\n       Total Performance Score\nState                         \nID                   73.178571\nWY                   71.777778\nHI                   70.500000\nUT                   70.421053\nCO                   70.173333\nWA                   70.146067\nME                   70.058824\nOR                   70.046154\nKS                   69.480769\nAZ                   68.905983\n...\n```", "```py\nimport numpy as np\n\ndf_state_means = df_filt.groupby('State').agg({\n    'Total Performance Score': np.mean,\n    'State': np.size\n})\nprint(df_state_means.sort_values('Total Performance Score', ascending=False))\n```", "```py\n       Total Performance Score  State\nState                                \nID                   73.178571     28\nWY                   71.777778      9\nHI                   70.500000     26\nUT                   70.421053     38\nCO                   70.173333     75\nWA                   70.146067     89\nME                   70.058824     17\nOR                   70.046154     65\nKS                   69.480769     52\nAZ                   68.905983    117\n...\n```", "```py\nimport pandas as pd\n\npathname = 'C:\\\\Users\\\\Vikas\\\\Desktop\\\\Bk\\\\Data\\\\Hospital_Revised_Flatfiles\\\\'\n\nfiles_of_interest = [\n    'hvbp_tps_11_07_2017.csv', \n    'hvbp_clinical_care_11_07_2017.csv',\n    'hvbp_safety_11_07_2017.csv',\n    'hvbp_efficiency_11_07_2017.csv',\n    'hvbp_hcahps_11_07_2017.csv'\n]\n\ndfs = {\n    foi: pd.read_csv(pathname + foi, header=0) for foi in files_of_interest\n}\n```", "```py\nfor k, v in dfs.items():\n    print(\n        k + ' - Number of rows: ' + str(v.shape[0]) + \n        ', Number of columns: ' + str(v.shape[1]) \n    )   \n```", "```py\nhvbp_tps_11_07_2017.csv -  Number of rows: 2808, Number of columns: 16\nhvbp_clinical_care_11_07_2017.csv -  Number of rows: 2808, Number of columns: 28\nhvbp_safety_11_07_2017.csv -  Number of rows: 2808, Number of columns: 64\nhvbp_efficiency_11_07_2017.csv -  Number of rows: 2808, Number of columns: 14\nhvbp_hcahps_11_07_2017.csv -  Number of rows: 2808, Number of columns: 73\n```", "```py\nfor v in dfs.values():\n    for column in v.columns:\n        print(column)\n    print('\\n')\n```", "```py\ndf_master = dfs[files_of_interest[0]].merge(\n    dfs[files_of_interest[1]], \n    on='Provider Number', \n    how='left',\n```", "```py\n    copy=False\n)\n\nprint(df_master.shape)\n```", "```py\n(2808, 43)\n```", "```py\nprint(df_master.columns)\n```", "```py\nIndex(['Provider Number', 'Hospital Name_x', 'Address_x', 'City_x', 'State_x',\n       'Zip Code', 'County Name_x',\n       'Unweighted Normalized Clinical Care Domain Score',\n       'Weighted Normalized Clinical Care Domain Score',\n       'Unweighted Patient and Caregiver Centered Experience of Care/Care Coordination Domain Score',\n       'Weighted Patient and Caregiver Centered Experience of Care/Care Coordination Domain Score',\n       'Unweighted Normalized Safety Domain Score',\n       'Weighted Safety Domain Score',\n       'Unweighted Normalized Efficiency and Cost Reduction Domain Score',\n       'Weighted Efficiency and Cost Reduction Domain Score',\n       'Total Performance Score', 'Hospital Name_y', 'Address_y', 'City_y',\n       'State_y', 'ZIP Code', 'County Name_y',\n       'MORT-30-AMI Achievement Threshold', 'MORT-30-AMI Benchmark',\n       'MORT-30-AMI Baseline Rate', 'MORT-30-AMI Performance Rate',\n       'MORT-30-AMI Achievement Points', 'MORT-30-AMI Improvement Points',\n       'MORT-30-AMI Measure Score', 'MORT-30-HF Achievement Threshold',\n       'MORT-30-HF Benchmark', 'MORT-30-HF Baseline Rate',\n       'MORT-30-HF Performance Rate', 'MORT-30-HF Achievement Points',\n       'MORT-30-HF Improvement Points', 'MORT-30-HF Measure Score',\n       'MORT-30-PN Achievement Threshold', 'MORT-30-PN Benchmark',\n       'MORT-30-PN Baseline Rate', 'MORT-30-PN Performance Rate',\n       'MORT-30-PN Achievement Points', 'MORT-30-PN Improvement Points',\n       'MORT-30-PN Measure Score'],\n      dtype='object')\n```", "```py\nfor df in dfs.values():\n    df.columns = [col if col not in ['Provider_Number'] else 'Provider Number' \n        for col in df.columns]\n\nfor num in [2,3,4]:\n    df_master = df_master.merge(\n        dfs[files_of_interest[num]],\n        on='Provider Number',\n        how='left',\n        copy=False\n    )\n\nprint(df_master.shape)\n```", "```py\n(2808, 191)\n```", "```py\nfor column in df_master.columns:\n    print(column)\n```"]