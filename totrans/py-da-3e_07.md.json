["```py\npip install matplotlib\n```", "```py\npip3 install matplotlib\n```", "```py\nconda install matplotlib\n```", "```py\n# Add the essential library matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create the data\na = np.linspace(0, 20)\n\n# Draw the plot\nplt.plot(a, a + 0.5, label='linear')\n\n# Display the chart\nplt.show()\n```", "```py\n# Add the required libraries\nimport matplotlib.pyplot as plt\n\n# Create the data\nx = [1,3,5,7,9,11]\ny = [10,25,35,33,41,59]\n\n# Let's plot the data\nplt.plot(x, y,label='Series-1', color='blue')\n\n# Create the data\nx = [2,4,6,8,10,12]\ny = [15,29,32,33,38,55]\n\n# Plot the data\nplt.plot(x, y, label='Series-2', color='red')\n\n# Add X Label on X-axis\nplt.xlabel(\"X-label\")\n\n# Add X Label on X-axis\nplt.ylabel(\"Y-label\")\n\n# Append the title to graph\nplt.title(\"Multiple Python Line Graph\")\n\n# Add legend to graph\nplt.legend()\n\n# Display the plot\nplt.show()\n```", "```py\n# Add the essential library matplotlib\nimport matplotlib.pyplot as plt\n\n# create the data\nx = [1,3,5,7,9,11]\ny = [10,25,35,33,41,59]\n\n# Draw the scatter chart\nplt.scatter(x, y, c='blue', marker='*',alpha=0.5)\n\n# Append the label on X-axis\nplt.xlabel(\"X-label\")\n\n# Append the label on X-axis\nplt.ylabel(\"Y-label\")\n\n# Add the title to graph\nplt.title(\"Scatter Chart Sample\")\n\n# Display the chart\nplt.show()\n```", "```py\n# Add the essential library matplotlib\nimport matplotlib.pyplot as plt\n\n# create the data\nx = [1,3,5,7,9,11]\ny = [10,25,35,33,41,59]\n\n# Draw the line chart\nplt.plot(x, y)\n\n# Append the label on X-axis\nplt.xlabel(\"X-label\")\n\n# Append the label on X-axis\nplt.ylabel(\"Y-label\")\n\n# Append the title to chart\nplt.title(\"Line Chart Sample\")\n\n# Display the chart\nplt.show()\n```", "```py\n# Add the essential library matplotlib\nimport matplotlib.pyplot as plt\n\n# create the data\nsubjects = [\"Mathematics\",\"Science\",\"Communication Skills\",\"Computer Application\"]\nscores = [85,62,57,92]\n\n# Plot the pie plot\nplt.pie(scores,\n        labels=subjects,\n        colors=['r','g','b','y'],\n        startangle=90,\n        shadow= True,\n        explode=(0,0.1,0,0),\n        autopct='%1.1f%%')\n\n# Add title to graph\nplt.title(\"Student Performance\")\n\n# Draw the chart\nplt.show()\n```", "```py\n# Add the essential library matplotlib\nimport matplotlib.pyplot as plt\n\n# create the data\nmovie_ratings = [1,2,3,4,5]\nrating_counts = [21,45,72,89,42]\n\n# Plot the data\nplt.bar(movie_ratings, rating_counts, color='blue')\n\n# Add X Label on X-axis\nplt.xlabel(\"Movie Ratings\")\n\n# Add X Label on X-axis\nplt.ylabel(\"Rating Frequency\")\n\n# Add a title to graph\nplt.title(\"Movie Rating Distribution\")\n\n# Show the plot\nplt.show()\n```", "```py\n# Add the essential library\nimport matplotlib.pyplot as plt\n\n# Create the data\nemployee_age = [21,28,32,34,35,35,37,42,47,55]\n\n# Create bins for histogram\nbins = [20,30,40,50,60]\n\n# Plot the histogram\nplt.hist(employee_age, bins, rwidth=0.6)\n\n# Add X Label on X-axis\nplt.xlabel(\"Employee Age\")\n\n# Add X Label on X-axis\nplt.ylabel(\"Frequency\")\n\n# Add title to graph\nplt.title(\"Employee Age Distribution\")\n\n# Show the plot\nplt.show()\n```", "```py\n# Import the required modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Set figure size\nplt.figure(figsize=(8,5))\n\n# Create the data\ncountries = ['Qatar','Luxembourg','Singapore','Brunei','Ireland','Norway','UAE','Kuwait']\npopulations = [2781682, 604245,5757499,428963,4818690,5337962,9630959,4137312]\ngdp_per_capita = [130475, 106705, 100345, 79530, 78785, 74356,69382, 67000]\n\n# scale GDP per capita income to shoot the bubbles in the graph\nscaled_gdp_per_capita = np.divide(gdp_per_capita, 80)\n\ncolors = np.random.rand(8)\n\n# Draw the scatter diagram\nplt.scatter(countries, populations, s=scaled_gdp_per_capita, c=colors, cmap=\"Blues\",edgecolors=\"grey\", alpha=0.5)\n\n# Add X Label on X-axis\nplt.xlabel(\"Countries\")\n\n# Add Y Label on X-axis\nplt.ylabel(\"Population\")\n\n# Add title to graph\nplt.title(\"Bubble Chart\")\n\n# rotate x label for clear visualization\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```", "```py\n# Import the required modules\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Let's create a Dataframe\ndf = pd.DataFrame({\n            'name':['Ajay','Malala','Abhijeet','Yming','Desilva','Lisa'],\n            'age':[22,72,25,19,42,38],\n            'gender':['M','F','M','M','M','F'],\n            'country':['India','Pakistan','Bangladesh','China','Srilanka','UK'],\n            'income':[2500,3800,3300,2100,4500,5500]\n        })\n\n# Create a scatter plot\ndf.plot(kind='scatter', x='age', y='income', color='red', title='Age Vs Income')\n\n# Show figure\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create bar plot\ndf.plot(kind='bar',x='name', y='age', color='blue')\n\n# Show figure\nplt.show()\n```", "```py\npip install seaborn\n```", "```py\npip3 install seaborn\n```", "```py\nconda install seaborn\n```", "```py\n!pip install seaborn\n```", "```py\n# Import the required libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create DataFrame\ndf=pd.DataFrame({'x':[1,3,5,7,9,11],'y':[10,25,35,33,41,59]})\n\n# Create lmplot\nsns.lmplot(x='x', y='y', data=df)\n\n# Show figure\nplt.show()\n```", "```py\n# Create lmplot\nsns.lmplot(x='x', y='y', data=df, fit_reg=False)\n\n# Show figure\nplt.show()\n```", "```py\n# Load the dataset\ndf=pd.read_csv(\"HR_comma_sep.csv\")\n\n# Create lmplot\nsns.lmplot(x='satisfaction_level', y='last_evaluation', data=df, fit_reg=False, hue='left')\n\n# Show figure\nplt.show()\n\n```", "```py\n# Import the required libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create DataFrame\ndf=pd.DataFrame({'x':['P','Q','R','S','T','U'],'y':[10,25,35,33,41,59]})\n\n# Create lmplot\nsns.barplot(x='x', y='y', data=df)\n\n# Show figure\nplt.show()\n```", "```py\n# Create a distribution plot (also known as Histogram)\nsns.distplot(df.satisfaction_level)\n\n# Show figure\nplt.show()\n```", "```py\n# Create boxplot\nsns.boxplot(data=df[['satisfaction_level','last_evaluation']])\n\n# Show figure\nplt.show()\n```", "```py\n# Create density plot\nsns.kdeplot(df.satisfaction_level)\n\n# Show figure\nplt.show()\n```", "```py\n# Create violin plot\nsns.violinplot(data=df[['satisfaction_level','last_evaluation']])\n\n# Show figure\nplt.show()\n```", "```py\n# Create count plot (also known as Histogram)\nsns.countplot(x='salary', data=df)\n\n# Show figure\nplt.show()\n```", "```py\n# Create count plot (also known as Histogram)\nsns.countplot(x='salary', data=df, hue='left')\n\n# Show figure\nplt.show()\n```", "```py\n# Create joint plot using kernel density estimation(kde)\nsns.jointplot(x='satisfaction_level', y='last_evaluation', data=df, kind=\"kde\")\n\n# Show figure\nplt.show()\n```", "```py\n# Import required library\nimport seaborn as sns\n\n# Read iris data using load_dataset() function\ndata = sns.load_dataset(\"iris\")\n\n# Find correlation\ncor_matrix=data.corr()\n\n# Create heatmap\nsns.heatmap(cor_matrix, annot=True)\n\n# Show figure\nplt.show()\n```", "```py\n# Create heatmap\nsns.heatmap(cor_matrix, annot=True, cmap=\"YlGnBu\")\n\n# Show figure\nplt.show()\n```", "```py\n# Load iris data using load_dataset() function\ndata = sns.load_dataset(\"iris\")\n\n# Create a pair plot\nsns.pairplot(data)\n\n# Show figure\nplt.show()\n```", "```py\nconda install bokeh\n```", "```py\npip install bokeh\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show\n\n# Create the data\nx = [1,3,5,7,9,11]\ny = [10,25,35,33,41,59]\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\nfig= figure(plot_width = 500, plot_height = 350)\n\n# Create scatter circle marker plot by rendering the circles\nfig.circle(x, y, size = 10, color = \"red\", alpha = 0.7)\n\n# Show the plot\nshow(fig)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure, output_notebook, show\n\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show\n\n# Create the data\nx_values = [1,3,5,7,9,11]\ny_values = [10,25,35,33,41,59]\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\np = figure(plot_width = 500, plot_height = 350)\n\n# create a line plot\np.line(x_values, y_values, line_width = 1, color = \"blue\")\n\n# Show the plot\nshow(p)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook, show\nfrom bokeh.layouts import row, column\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\nfig1 = figure(plot_width = 300, plot_height = 300)\nfig2 = figure(plot_width = 300, plot_height = 300)\nfig3 = figure(plot_width = 300, plot_height = 300)\n\n# Create scatter marker plot by render the circles\nfig1.circle(df['petal_length'], df['sepal_length'], size=8, color = \"green\", alpha = 0.5)\nfig2.circle(df['petal_length'], df['sepal_width'], size=8, color = \"blue\", alpha = 0.5)\nfig3.circle(df['petal_length'], df['petal_width'], size=8, color = \"red\", alpha = 0.5)\n\n# Create row layout\nrow_layout = row(fig1, fig2, fig3)\n\n# Show the plot\nshow(row_layout)\n```", "```py\n# Create column layout\ncol_layout = column(fig1, fig2, fig3)\n\n# Show the plot\nshow(col_layout)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure, output_notebook, show\n\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show\nfrom bokeh.layouts import row, column\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\nfig1 = figure(plot_width = 300, plot_height = 300)\nfig2 = figure(plot_width = 300, plot_height = 300)\nfig3 = figure(plot_width = 300, plot_height = 300)\n\n# Create scatter marker plot by render the circles\nfig1.circle(df['petal_length'], df['sepal_length'], size=8, color = \"green\", alpha = 0.5)\nfig2.circle(df['petal_length'], df['sepal_width'], size=8, color = \"blue\", alpha = 0.5)\nfig3.circle(df['petal_length'], df['petal_width'], size=8, color = \"red\", alpha = 0.5)\n\n# Create nested layout\nnasted_layout = row(fig1, column(fig2, fig3))\n\n# Show the plot\nshow(nasted_layout)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show\nfrom bokeh.layouts import gridplot\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\nfig1 = figure(plot_width = 300, plot_height = 300)\nfig2 = figure(plot_width = 300, plot_height = 300)\nfig3 = figure(plot_width = 300, plot_height = 300)\n\n# Create scatter marker plot by render the circles\nfig1.circle(df['petal_length'], df['sepal_length'], size=8, color = \"green\", alpha = 0.5)\nfig2.circle(df['petal_length'], df['sepal_width'], size=8, color = \"blue\", alpha = 0.5)\nfig3.circle(df['petal_length'], df['petal_width'], size=8, color = \"red\", alpha = 0.5)\n\n# Create a grid layout\ngrid_layout = gridplot([[fig1, fig2], [None,fig3]])\n\n# Show the plot\nshow(grid_layout)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show \nfrom bokeh.models import CategoricalColorMapper\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook \noutput_notebook() \n\n# Instantiate a figure object \nfig = figure(plot_width = 500, plot_height = 350, title=\"Petal length Vs. Petal Width\", \n           x_axis_label='petal_length', y_axis_label='petal_width')\n\n# Create scatter marker plot by render the circles \nfor specie, color in zip(['setosa', 'virginica','versicolor'], ['blue', 'green', 'red']):\n    data = df[df.species==specie]\n    fig.circle('petal_length', 'petal_width', size=8, color=color, alpha = 0.7, legend_label=specie, source=data)\n\n# Set the legend location and click policy\nfig.legend.location = 'top_left'\nfig.legend.click_policy=\"hide\"\n\n# Show the plot\nshow(fig)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure \nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show \nfrom bokeh.models import CategoricalColorMapper\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook \noutput_notebook() \n\n# Instantiate a figure object \nfig = figure(plot_width = 500, plot_height = 350, title=\"Petal length Vs. Petal Width\", \n           x_axis_label='petal_length', y_axis_label='petal_width')\n\n# Create scatter marker plot by render the circles \nfor specie, color in zip(['setosa', 'virginica','versicolor'], ['blue', 'green', 'red']):\n    data = df[df.species==specie]\n    fig.circle('petal_length', 'petal_width', size=8, color=color, alpha = 0.7,legend_label=specie,source=data,\n            muted_color=color, muted_alpha=0.2)\n\n# Set the legend location and click policy\nfig.legend.location = 'top_left'\nfig.legend.click_policy=\"mute\"\n\n# Show the plot\nshow(fig)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show \nfrom bokeh.models import CategoricalColorMapper\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook \noutput_notebook() \n\n# Create color mapper for categorical column \ncolor_mapper = CategoricalColorMapper(factors=['setosa', 'virginica', 'versicolor'], palette=['blue', 'green', 'red'])\n\ncolor_dict={'field': 'species','transform': color_mapper }\n\n# Instantiate a figure object \np = figure(plot_width = 500, plot_height = 350, title=\"Petal length Vs. Petal Width\", \n           x_axis_label='petal_length', y_axis_label='petal_width')\n\n# Create scatter marker plot by render the circles \np.circle('petal_length', 'petal_width', size=8, color=color_dict, alpha = 0.5, legend_group='species', source=df)\n\n# Set the legend location\np.legend.location = 'top_left'\n\n# Show the plot\nshow(p)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure \nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show \nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.models import HoverTool\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook \noutput_notebook() \n\n# Create color mapper for categorical column \nmapper = CategoricalColorMapper(factors=['setosa', 'virginica', 'versicolor'], \n                                palette=['blue', 'green', 'red'])\n\ncolor_dict={'field': 'species','transform': mapper}\n\n# Create hovertool and specify the hovering information\nhover = HoverTool(tooltips=[('Species type','@species'),\n                            ('IRIS Petal Length','@petal_length'),\n                            ('IRIS Petal Width', '@petal_width')])\n\n# Instantiate a figure object\np = figure(plot_width = 500, plot_height = 350, title=\"Petal length Vs. Petal Width\", \n           x_axis_label='petal_length', y_axis_label='petal_width',\n           tools=[hover, 'pan', 'wheel_zoom'])\n\n# Create scatter marker plot by render the circles \np.circle('petal_length', 'petal_width', size=8, color=color_dict, alpha = 0.5,legend_group='species',source=df)\n\n# Set the legend location\np.legend.location = 'top_left'\n\n# Show the plot\nshow(p)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import figure\nfrom bokeh.plotting import output_notebook\nfrom bokeh.plotting import show\nfrom bokeh.models.widgets import Tabs\nfrom bokeh.models.widgets import Panel\n\n# Import iris flower dataset as pandas DataFrame\nfrom bokeh.sampledata.iris import flowers as df\n\n# Output to notebook\noutput_notebook()\n\n# Instantiate a figure\nfig1 = figure(plot_width = 300, plot_height = 300)\nfig2 = figure(plot_width = 300, plot_height = 300)\n\n# Create scatter marker plot by render the circles\nfig1.circle(df['petal_length'], df['sepal_length'], size=8, color = \"green\", alpha = 0.5)\nfig2.circle(df['petal_length'], df['sepal_width'], size=8, color = \"blue\", alpha = 0.5)\n\n# Create panels\ntab1 = Panel(child=fig1, title='tab1')\ntab2 = Panel(child=fig2, title='tab2')\n\n# Create tab by putting panels into it\ntab_layout = Tabs(tabs=[tab1,tab2])\n\n# Show the plot\nshow(tab_layout)\n```", "```py\n# Import the required modules\nfrom bokeh.plotting import Figure \nfrom bokeh.plotting import output_notebook \nfrom bokeh.plotting import show\nfrom bokeh.models import CustomJS \nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models import Slider\nfrom bokeh.layouts import column\n\n# Show output in notebook \noutput_notebook() \n\n# Create list of data\nx = [x for x in range(0, 100)]\ny = x\n\n# Create a DataFrame\ndf = ColumnDataSource(data={\"x_values\":x, \"y_values\":y})\n\n# Instantiate the Figure object \nfig = Figure(plot_width=350, plot_height=350)\n\n# Create a line plot \nfig.line('x_values', 'y_values', source=df, line_width=2.5, line_alpha=0.8)\n\n# Create a callback using CustomJS\ncallback = CustomJS(args=dict(source=df), code=\"\"\"\n    var data = source.data;\n    var f = cb_obj.value\n    var x_values = data['x_values']\n    var y_values = data['y_values']\n    for (var i = 0; i < x_values.length; i++) {\n        y_values[i] = Math.pow(x_values[i], f)\n    }\n    source.change.emit();\n\"\"\")\n\nslider_widget = Slider(start=0.0, end=10, value=1, step=.1, title=\"Display power of x\")\n\nslider_widget.js_on_change('value', callback)\n\n# Create layout\nslider_widget_layout = column(fig,slider_widget)\n\n# Display the layout\nshow(slider_widget_layout)\n```"]