- en: Anaconda Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nowadays, one of the big buzzwords in computing is *cloud*. The simplest example
    is that for many users, Google Drive is a kind of cloud where users can save their
    files, photos, and programs and share them with their colleagues, family members,
    or others. Another example is so-called cloud computing. According to the National
    Institute of Standards and Technology, cloud computing is a model for enabling
    convenient, on-demand network access to a shared pool of configurable computing
    resources (for example, networks, servers, storage, applications, and services)
    that can be rapidly provisioned and released with minimal management effort or
    service provider interaction. In Old English, *mass of rock, hill*, was related
    to cloud. The *metaphoric extension to raincloud, mass of evaporated water in
    the sky,* was attested by c. 1200, based on the similarity of cumulus clouds and
    rock masses. The usual *Old English* word for cloud was *weolcan.* In Middle English,
    *skie* also originally meant cloud. In this chapter, the following topics will
    be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Anaconda Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter Notebook in depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replicating others' environments locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading a package from Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Anaconda Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, we have used or at least heard of the word cloud. Usually, it means
    that we can save our data on other people's servers. For Anaconda Cloud, users
    can use the platform to save and share packages, notebooks, projects, and environments.
    The process, platform, and the methodology make it much easier for package management
    and collaboration, including sharing of their packages and projects. The public
    projects and notebooks are free. At the moment, private plans start at $7 per
    month. Anaconda Cloud allows users to create or distribute software packages.
  prefs: []
  type: TYPE_NORMAL
- en: For a Windows version of Anaconda, click All Programs | Anaconda, and then choose
    Anaconda Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: After double-clicking on Cloud, the welcome screen will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the information presented by the welcome screen, we know that we need
    an account with Anaconda before we can use it. After login, we will see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2dc6afe-4a30-4e5f-8d9e-e319862238bf.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, if you double-click on Installing your first package, you will
    get more information on **Anaconda Cloud**. We do not need to be logged in, or
    even need a cloud account, to search for public packages, download, and install
    them. We need an account only to access private packages without a token or to
    share your packages with others.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebook in depth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, many examples are borrowed from the following web page: [https://github.com/ipython/ipython-in-depth](https://github.com/ipython/ipython-in-depth).
    If you are interested, you can explore more by going to the web page in order
    to download a ZIP file. The following screenshot shows the content of examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d56f9156-4b65-4449-b6f2-0c45eacbe337.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After launching Jupyter Notebook, we can search the `example` subdirectory.
    For example, we can upload a notebook called `factoring.ipynb` under the `Interactive
    Widgets` subdirectory(see the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/461e8e0d-e1d9-4757-b02e-950e2e931341.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Run, we can change the value of `n` (see the following result
    when we choose `8` for the variable):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adf6f6c8-2960-4309-9593-d507f645ccaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After increasing `n` to `20,` we have the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ac714b8-fc67-4c93-938a-01050c91643e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, after running a Jupyter Notebook and logging out, we need a token
    or password to login again. We can run the following code to locate our token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can run the following code to save our token to a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next example shows how to activate Jupyter QtConsole, that is, how to connect
    to an existing IPython kernel using the QtConsole. Again, the Jupyter Notebook
    is also included in the preceding download. First, we upload the notebook called
    `Connecting with the Qt Console.ipynb`. To save space, only the first several
    lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29e5a190-d273-4206-8f1d-9b607bd39e57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the program runs without any issues, we will see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d64e7096-d537-48c8-a571-cfca8564df7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we type our commands here. The **QtConsole** is a lightweight application
    that feels like a Terminal. However, it provides a number of enhancements only
    possible in a GUI, such as inline figures, proper multi-line editing with syntax
    highlighting, and graphical calltips. The QtConsole can use any Jupyter kernel.
    Here is one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated diagram is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54657814-e72e-4df0-b536-2b12258008ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Formats of Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we discuss the backbone of issues related to Jupyter Notebook's
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information associated with the formats for Jupyter Notebook, you
    will find a useful link here: [https://nbformat.readthedocs.io/en/latest/](https://nbformat.readthedocs.io/en/latest/).
    First, let''s look at one of the simplest notebooks, `Custom Widget –Spreadsheet.ipynb`.
    It has just five lines, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole notebook code is included in a pair of curly brackets. At the highest
    level, a Jupyter notebook is a dictionary with the following few keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`dict`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nbformat` (`int`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nbformat_minor` (`int`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cells` (`list`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous example code block, both the cells and metadata are empty.
    The notebook format has a value of `4`. It is always a good idea that we ourselves
    generate a simple program. Save it as a Jupyter notebook. Then we can look at
    its structure. Next, let''s generate a simple Python program via Jupyter Notebook
    (see the following three lines):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/670961c4-e66a-42f6-b982-3c0507a7acd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To download this program, just click File | Download As and choose Notebook
    (.ipynb) as the format. Here is the related code for the preceding three lines.
    Its name is `c11_01simplePython.ipynb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sharing of notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To share a notebook or project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save your notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in by running the Anaconda login command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To upload your notebook to the cloud, open the Anaconda prompt or Terminal
    and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To check, we can try the link at [http://notebooks.anaconda.org/<USERNAME>/my-notebook](http://notebooks.anaconda.org/%3cUSERNAME%3e/my-notebook),
    where USERNAME would be your username. The following shows an example where we
    generate a simple Jupyter notebook, using the earlier code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b14ee075-544a-485e-be28-4c7946bee3a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Assume that we download it as `c11_01.ipynb`*.* First, we launch the Anaconda
    prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move to the correct subdirectory containing our Jupyter notebook. Then issue
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35e4eaa0-d400-4dbb-b8b7-3c6128dbe840.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last instruction shown in the preceding screenshot tells us that we can
    locate it at [https://anaconda.org/paulyan/c11_01](https://anaconda.org/paulyan/c11_01)
    (see the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac7ab64b-6405-4ba8-b29a-63906f962102.png)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, after that, we can share the link with our partners or coauthors.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing of projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s look at the definition of a project. A project is a folder that
    contains an `anaconda-project.yml` configuration file together with scripts (code),
    notebooks, datasets, and other files. We can add a folder into a project by adding
    a configuration file named `anaconda-project.yml` to the folder. The configuration
    file can include the following sections: commands, variables, services, downloads,
    packages, channels, and environment specifications. Data scientists can use projects
    to encapsulate data science projects and make them easily portable. A project
    is usually compressed into a `.tar.bz2` file for sharing and storing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anaconda Project** automates setup steps, so that people with whom you share
    projects can run your projects with the following single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Anaconda Project, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Anaconda Project encapsulates data science projects and makes them easily portable.
    It automates setup steps such as installing the right packages, downloading files,
    setting environment variables, and running commands. Project makes it easy to
    reproduce your work, share projects with others, and run them on different platforms.
    It also simplifies deployment to servers. Anaconda projects run the same way on
    your machine, on another user's machine, or when deployed to a server.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional build scripts such as `setup.py` automate building of the project
    – going from source code to something runnable – while Project automates running
    the project, taking build artifacts, and doing any necessary setup before executing
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use Project on Windows, macOS, and Linux. Project is supported and offered
    by Anaconda Inc® and contributors under a three-clause BSD license. Project sharing
    will save us a great deal of time, since other developers will not spend too much
    time on the work done already. Here is the procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Build up your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Anaconda
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the project''s directory on your computer, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, from Anaconda Navigator, in the Projects tab, upload via the
    bottom-right Upload to Anaconda Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Projects can be any directory of code and assets. Often, projects will contain
    notebooks or Bokeh applications, for example. Here, we show how to generate a
    project called `project01`. First, we want to move to the correct location. Assume
    that we choose `c:/temp/`. The key command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, both commands are shown side by side as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d31d7d9-9772-47e8-a686-1c5f16268d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also turn any existing directory into a project by switching to the
    directory and then running `anaconda-project init` without options or arguments.
    We can use MS Word to open `anaconda-project.yml` (see the first couple of lines
    shown here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to share our projects with others. First, we archive the
    project by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, we email the ZIP file to our colleague or others. The second way of sharing
    a project is to use Anaconda Cloud. Log in to Anaconda Cloud first. From the project's
    directory on our computer, type `anaconda-project upload`, or, from Anaconda Navigator,
    in the Projects tab, upload via the bottom-right Upload to Anaconda Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing of environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In terms of computer software, an operating environment or integrated applications
    environment is the environment in which users can execute software. Usually, such
    an environment consists of a user interface and an API. To a certain degree, the
    term *platform* could be viewed as its synonym. There are many reasons why we
    want to share our environment with someone else. For example, they can re-create
    a test that we have done. To allow them to quickly reproduce our environment with
    all of its packages and versions, give them a copy of your `environment.yml` file.
    Depending on the operating system, we have the following methods to export our
    environment file. Note that if we already have an `environment.yml` file in our
    current directory, it will be overwritten during this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different ways to activate the `myenv` environment file depending
    on the systems used. For Windows users, in our Anaconda prompt, type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS and Linux, in our Terminal window, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we replace `myenv` with the name of the environment. To export our
    active environment to a new file, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To share, we can simply email or copy the exported `environment.yml` file to
    the other person. On the other hand, in order to remove an environment, run the
    following code in our Terminal window or at an Anaconda prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can specify the name, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the environment was removed, run the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Replicating others' environments locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we can export our Anaconda environment by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After generating this file, the notepad can be used to open it (see the following
    few lines of our output file). To save space, only the first and last few lines
    are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the receivers of the preceding file can recreate it by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Downloading a package from Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, users might generate their own packages and upload them to Anaconda
    Cloud. For a group project, group members can do so as well. Thus, we need to
    know how to download a package from Anaconda Cloud. Here is the general procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://anaconda.org](http://anaconda.org)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search packages by using a keyword or keywords, as in the example here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6277e754-71e4-4ab1-872d-18073549880b.png)'
  prefs: []
  type: TYPE_IMG
- en: Assume that we are interested in the r-data.table package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, we can generate a set of functions and share with others. Here is
    one simple example. Assume that we generate the following program with several
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To save space, there is help for only the first function. Assume the preceding
    function is called `myfincal.py` and is located under `c:/temp`. We can use the
    following command to generate a `myfincal.pyc` and import `py_compile`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We have generated a set of functions contained in `fincal.pyc`. If you are
    interested, you can use the following procedure to download and import it:'
  prefs: []
  type: TYPE_NORMAL
- en: Download it at [http://canisius.edu/~yany/python/fincal.pyc](http://canisius.edu/~yany/python/fincal.pyc).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch Python and try to import it. There are several ways to make `fincal.pyc`
    accessible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Method 1**: Assume that the file is saved under `c:/temp/`. Change the path,
    as in the right-hand side of this screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b04f7f8e-7a72-48fd-bb8c-8c77cafd70aa.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Method 2**: Copy `fincal.pyc` to one of the accessible subdirectories. To
    see all paths, issue the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here. Different users will have different output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4784b9b5-b81c-46de-9b73-c4432b468f10.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you simply copy `fincal.pyc` to one of the preceding subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 3**: Add the path instead, see the code here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We can issue `sys.path` to check, see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f795574f-cf70-4ab5-8d4e-217d1b345dc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that if we want to remove a path, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we could import that module, see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34aee0f7-7a45-4b41-8165-71925761c396.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that since Yahoo!Finance and Google Finance have changed their data structures,
    many functions related to downloading data from their websites will not work.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed Anaconda Cloud. Some topics included the
    Jupyter Notebook in depth, different formats of the Jupyter Notebook, how to share
    notebooks with your partner, how to share different projects over different platforms,
    how to share your working environments, and how to replicate others' environments
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: For the next chapter, we will discuss distributed computing and Anaconda Accelerate.
    When our data or tasks become more complex, we'll need a good system or a set
    of tools to process data and run a complex algorithm. For this purpose, distributed
    computing is one solution. In particular, we will explain many concepts, such
    as compute nodes, project add-ons, parallel processing advanced Python for data
    parallelism. In addition, we will give several examples showing how to use distributed
    computing.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does *cloud* mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does *cloud computing* mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we care about sharing our working environments with others?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we register on Anaconda Cloud?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do users need an account to use the Anaconda Cloud platform?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we upload our notebook to Anaconda Cloud?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it important to share our projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you share your project? Build a project and share it with someone else.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you recreate your partner's Anaconda environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the meaning of the following two command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How can we launch a Jupyter QtConsole?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a Jupyter notebook called `Octave Maric.ipynb` under the subdirectory of
    `examples/Builtin Extension`. Note that you have to find a way to install a package
    called `octavemagic` first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Share your environment with another person to see the effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a set of functions around a topic and produce a corresponding `.pyc`
    file and share it with your colleagues or co-workers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
