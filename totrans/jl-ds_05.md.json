["```py\njulia> using Foo\njulia> function Foo.bar(...)\n\n```", "```py\njulia> importall Foo\njulia> function bar(...)\n\n```", "```py\n$ pip install matplotlib\n\n```", "```py\njulia> Pkg.update()\njulia> Pkg.add(\"PyPlot\")\n\n```", "```py\nusing PyPlot \nPyPlot.svg(true) \n\n```", "```py\nx = [1:100]\ny = [i^2 for i in x]\np = plot(x,y)\nxlabel(\"X\")\nylabel(\"Y\")\ntitle(\"Basic plot\")\ngrid(\"on\")\n\n```", "```py\nx = linspace(0, 3pi, 1000) \ny = cos(2*x + 3*sin(3*x)); \nplot(x, y, color=\"orange\", linewidth=2.0, linestyle=\"--\"); \ntitle(\"Another plot using sine and cosine\"); \n\n```", "```py\nPkg.add(\"UnicodePlots\") \nusing UnicodePlots \n\n```", "```py\nPkg.add(\"Vega\")\nusing Vega\n\n```", "```py\nscatterplot(x=rand(100), y=rand(100))\n\n```", "```py\nx = Array(Int, 900) \ny = Array(Int, 900) \ncolor = Array(Float64, 900) \ntmp = 0 \nfor counter in 1:30 \n    for counter2 in 1:30 \n        tmp += 1 \n        x[tmp] = counter \n        y[tmp] = counter2 \n        color[tmp] = rand() \n    end \nend \nhm = heatmap(x = x, y = y, color = color) \n\n```", "```py\nJulia> Pkg.update()\nJulia> Pkg.add(\"Gadfly\")\n\n```", "```py\nJulia> using Gadfly\n\n```", "```py\nJulia> Pkg.add(\"Cairo\")\n\n```", "```py\njulia> exampleplot = plot(....)\n\n```", "```py\njulia> draw(SVG(\"plotinFile.svg', 4inch, 4inch), exampleplot)\n\n```", "```py\njulia> draw(SVGJS(\"plotinFile.svg', 4inch, 4inch), exampleplot)\n\n```", "```py\njulia> draw(PNG(\"plotinFile.png', 4inch, 4inch), exampleplot)\n\n```", "```py\njulia> draw(PS(\"plotinFile.ps', 4inch, 4inch), exampleplot)\n\n```", "```py\njulia> draw(PDF(\"plotinFile.pdf', 4inch, 4inch), exampleplot)\n\n```", "```py\nUsing Rdatasets, Gadfly \nplot(iris, x=:SepalLength, y=:SepalWidth, \n  color=:Species, shape=:Species, Geom.point, \n  Theme(default_point_size=3pt)) \n\n```", "```py\nplot(f::Function, a, b, elements::Element...)\nplot(fs::Array, a, b, elements::Element...)\n\n```", "```py\nJulia> Geom.subplot_grid(elements::Gadfly.ElementOrFunction...)\n\n```", "```py\nxs = 0:0.1:20 \ndf_cos = DataFrame( \n    x=xs, \n    y=cos(xs), \n    ymin=cos(xs) .- 0.5, \n    ymax=cos(xs) .+ 0.5, \n    f=\"cos\" \n    ) \ndf_sin = DataFrame( \n    x=xs, \n    y=sin(xs), \n    ymin=sin(xs) .- 0.5, \n    ymax=sin(xs) .+ 0.5, \n    f=\"sin\" \n    ) \ndf = vcat(df_cos, df_sin) \np = plot(df, x=:x, y=:y, ymin=:ymin, ymax=:ymax, color=:f, Geom.line, Geom.ribbon) \n\n```"]