- en: '*Chapter 2*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Statistical Visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start our journey by understanding the power of Python to manipulate
    and visualize data, creating useful analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use graphs for data analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create graphs of various types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change graph parameters such as color, title, and axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export graphs for presentation, printing, and other uses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will illustrate how the students can generate visualizations
    with Matplotlib and Seaborn.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last chapter, we learned that the libraries that are most commonly used
    for data science work with Python. Although they are not big data libraries per
    se, the libraries of the Python Data Science Stack (**NumPy**, **Jupyter**, **IPython**,
    **Pandas**, and **Matplotlib**) are important in big data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: As we will demonstrate in this chapter, no analysis is complete without visualizations,
    even with big datasets, so knowing how to generate images and graphs from data
    in Python is relevant for our goal of big data analysis. In the subsequent chapters,
    we will demonstrate how to process large volumes of data and aggregate it to visualize
    it using Python tools.
  prefs: []
  type: TYPE_NORMAL
- en: There are several visualization libraries for Python, such as Plotly, Bokeh,
    and others. But one of the oldest, most flexible, and most used is Matplotlib.
    But before going through the details of creating a graph with Matplotlib, let's
    first understand what kinds of graphs are relevant for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Graphs and When to Use Them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every analysis, whether on small or large datasets, involves a descriptive statistics
    step, where the data is summarized and described by statistics such as mean, median,
    percentages, and correlation. This step is commonly the first step in the analysis
    workflow, allowing a preliminary understanding of the data and its general patterns
    and behaviors, providing grounds for the analyst to formulate hypotheses, and
    directing the next steps in the analysis. Graphs are powerful tools to aid in
    this step, enabling the analyst to visualize the data, create new views and concepts,
    and communicate them to a larger audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a vast amount of literature on statistics about visualizing information.
    The classic book, *Envisioning Information*, by Edward Tufte, demonstrates beautiful
    and useful examples of how to present information in graphical form. In another
    book, The *Visual Display of Quantitative Information*, Tufte enumerates a few
    qualities that a graph that will be used for analysis and transmitting information,
    including statistics, should have:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid distorting what the data has to say
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make large datasets coherent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serve a reasonably clear purposeâ€”description, exploration, tabulation, or decoration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphs must reveal information. We should think about creating graphs with these
    principles in mind when creating an analysis.
  prefs: []
  type: TYPE_NORMAL
- en: A graph should also be able to stand out on its own, outside the analysis. Let's
    say that you are writing an analysis report that becomes extensive. Now, we need
    to create a summary of that extensive analysis. To make the analysis' points clear,
    a graph can be used to represent the data. This graph should be able to support
    the summary without the entire extensive analysis. To enable the graph to give
    more information and be able to stand out on its own in the summary, we have to
    add more information to it, such as a title and labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8: Plotting an Analytical Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a basic plot using the Matplotlib libraries,
    where we will visualize a function of two variables, for example, `y = f(x)`,
    where `f(x)` is `x^2`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new Jupyter notebook and import all the required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s generate a dataset and plot it using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to create a basic graph with Matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.1: Basic plot of X and Y axis](img/C12913_02_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.1: Basic plot of X and Y axis'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, modify the data generation function from `x^2` to `x^3`, keeping the same
    interval of `[-50,50]` and recreate the line plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2: Basic plot of X and Y axis](img/C12913_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Basic plot of X and Y axis'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As you can see, the shape of the function changed, as expected. The basic type
    of graph that we used was sufficient to see the change between the `y` and `y_hat`
    values. But some questions remain: we plotted only a mathematical function, but
    generally the data that we are collecting has dimensions, such as length, time,
    and mass. How can we add this information to the plot? How do we add a title?
    Let''s explore this in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Components of a Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each graph has a set of common components that can be adjusted. The names that
    Matplotlib uses for these components are demonstrated in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: Components of a graph](img/C12913_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Components of a graph'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The components of a graph are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure**: The base of the graph, where all the other components are drawn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Axis**: Contains the figure elements and sets the coordinate system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Title**: The title gives the graph its name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X-axis label**: The name of the *x*-axis, usually named with the units.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Y-axis label**: The name of the *y*-axis, usually named with the units.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Legend**: A description of the data plotted in the graph, allowing you to
    identify the curves and points in the graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ticks and tick labels**: They indicate the points of reference on a scale
    for the graph, where the values of the data are. The labels indicate the values
    themselves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line plots**: These are the lines that are plotted with the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Markers**: Markers are the pictograms that mark the point data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spines**: The lines that delimit the area of the graph where data is plotted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these components can be configured to adapt to the needs of the visualization
    task at hand. We will go through each type of graph and how to adapt the components
    as previously described.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 9: Creating a Graph'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several ways to create a graph with Matplotlib. The first one is closely
    related to the MATLAB way of doing it, called **Pyplot**. Pyplot is an API that
    is a *state-based interface for Matplotlib*, meaning that it keeps the configurations
    and other parameters in the object itself. Pyplot is intended as a simple case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create the graph of a sine function using the
    Matplotlib library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import all the required libraries, as we did in the previous exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A second API, called `plt.subplots` module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, to get a figure and an axis, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The figure is the top container for all other graph components. The axes set
    things such as the axis, the coordinate system, and contain the plot elements,
    such as lines, text, and many more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To add a plot to a graph created using the object-oriented API, use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.4: Plot output using the object-oriented API](img/C12913_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Plot output using the object-oriented API'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We are adding a line plot to the `ax` axis that belongs to the `fig` figure.
    Changes to the graph, such as label names, title, and so on, will be demonstrated
    later in this chapter. For now, let's look at how to create each kind of graph
    that we may use in an analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10: Creating a Graph for a Mathematical Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In *Exercise 1: Plotting an Analytical Function*, we created a graph for a
    mathematical function using the MATLAB-like interface, Pyplot. Now that we know
    how to use the Matplotlib object-oriented API, let''s create a new graph using
    it. Analysts have a lot of flexibility in creating graphs, whatever the data source,
    when using the object-oriented API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a plot using the object-oriented API with the NumPy `sine` function
    on the interval `[0,100]`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the data points for the `x`-axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the API interface for Matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the graph using the axis object, `ax`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5: Graph for a mathematical function](img/C12913_02_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.5: Graph for a mathematical function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice that we again created a linear interval of values between `[0, 100]`
    using the `linspace` function, with `200` points. We then applied the `sine` function
    over these values to create the `y` axis. This is a common approach when creating
    data intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Seaborn** ([https://seaborn.pydata.org/](https://seaborn.pydata.org/)) is
    part of the PyData family of tools and is a visualization library based on Matplotlib
    with the goal of creating statistical graphs more easily. It can operate directly
    on DataFrames and series, doing aggregations and mapping internally. Seaborn uses
    color palettes and styles to make visualizations consistent and more informative.
    It also has functions that can calculate some statistics, such as regression,
    estimation, and errors. Some specialized plots, such as violin plots and multi-facet
    plots, are also easy to create with Seaborn.'
  prefs: []
  type: TYPE_NORMAL
- en: Which Tool Should Be Used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Seaborn tries to make the creation of some common analysis graphs easier than
    using Matplotlib directly. Matplotlib can be considered more low-level than Seaborn,
    and although this makes it a bit more cumbersome and verbose, it gives analysts
    much more flexibility. Some graphs, which with Seaborn are created with one function
    call, would take several lines of code to achieve using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: There is no rule to determine whether an analyst should use only the pandas
    plotting interface, Matplotlib directly, or Seaborn. Analysts should keep in mind
    the visualization requirements and the level of configuration required to create
    the desired graph.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas' plotting interface is easier to use but is more constrained and limited.
    Seaborn has several graph patterns ready to use, including common statistical
    graphs such as pair plots and boxplots, but requires that the data is formatted
    into a tidy format and is more opinionated on how the graphs should look. Matplotlib
    is the base for both cases and is more flexible than both, but it demands a lot
    more code to create the same visualizations as the two other options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rule of thumb that we use in this book is: how can I create the graph that
    I need with the least amount of code and without changing the data? With that
    in mind, we will use the three options, sometimes at the same time, to attain
    our visualization goals. Analysts should not be restricted to just one of the
    options. We encourage the use of any tool that creates a meaningful visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the most common kinds of graphs used in statistical analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first type of graph that we will present is the **line graph** or **line
    chart**. A line graph displays data as a series of interconnected points on two
    axes (*x* and *y*), usually **Cartesian**, ordered commonly by the *x*-axis. Line
    charts are useful for demonstrating trends in data, such as in **time series**,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: A graph related to the line graph is the **scatter plot**. A scatter plot represents
    the data as points in Cartesian coordinates. Usually, two variables are demonstrated
    in this graph, although more information can be conveyed if the data is color-coded
    or size-coded by category, for example. Scatter plots are useful for showing the
    relationship and possible correlation between variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms** are useful for representing the distribution of data. Unlike
    the two previous examples, histograms show only one variable, usually on the *x*-axis,
    while the *y*-axis shows the frequency of occurrence of the data. The process
    of creating a histogram is a bit more involved than the line graph and the scatter
    plot, so we will explain them in a bit more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boxplots** can also be used for representing frequency distributions, but
    it can help to compare groups of data using some statistical measurements, such
    as mean, median, and standard deviation. Boxplots are used to visualize the data
    distribution and outliers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each graph type has its applications and choosing the right type is paramount
    in the success of an analysis. For example, line graphs could be used to show
    trends in economic growth in the last century, while a boxplot for that would
    be hard to create. Another common data analysis task identifies correlations between
    variables: understanding whether two variables show related behaviors. A scatter
    plot is the tool commonly used to visualize this. Histograms are useful for visualizing
    data point numbers in a bin or a range, such as the number of cars whose efficiency
    is between 10 and 20 miles per gallon.'
  prefs: []
  type: TYPE_NORMAL
- en: Line Graphs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Line graphs, as described in the previous section, connect the data points with
    a line. Line graphs are useful for demonstrating tendencies and trends. More than
    one line can be used on the same graph, for a comparison between the behavior
    of each line, although care must be taken so that the units on the graph are the
    same. They can also demonstrate the relationship between an independent and a
    dependent variable. A common case for this is time series.
  prefs: []
  type: TYPE_NORMAL
- en: Time Series Plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Time series plots**, as the name suggests, graphs the behavior of the data
    with respect to time. Time series graphs are used frequently in financial areas
    and environmental sciences. For instance, a historical series of temperature anomalies
    are shown in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6: Time series plot](img/C12913_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Time series plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Source
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://upload.wikimedia.org/wikipedia/commons/c/c1/2000_Year_Temperature_Comparison.png](https://upload.wikimedia.org/wikipedia/commons/c/c1/2000_Year_Temperature_Comparison.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, a time series graph has the `time` variable on the *x*-axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Creating Line Graphs Using Different Libraries'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s compare the creation process between Matplotlib, Pandas, and Seaborn.
    We will create a Pandas DataFrame with random values and plot it using various
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a dataset with random values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the data using the Matplotlib Pyplot interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create a Pandas DataFrame with the created values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot it using the Pyplot interface, but with the `data` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.7: Line graphs using different libraries](img/C12913_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.7: Line graphs using different libraries'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'With the same DataFrame, we can also plot directly from the Pandas DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.8: Line graphs from the pandas DataFrame](img/C12913_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.8: Line graphs from the pandas DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'What about Seaborn? Let''s create the same line plot with Seaborn:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.9: Line graphs from the Seaborn DataFrame](img/C12913_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Line graphs from the Seaborn DataFrame'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that, in this case, the interface used by Matplotlib and Seaborn
    is quite similar.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas DataFrames and Grouped Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we learned in the previous chapter, when analyzing data and using Pandas
    to do so, we can use the plot functions from Pandas or use Matplotlib directly.
    Pandas uses Matplotlib under the hood, so the integration is great. Depending
    on the situation, we can either plot directly from pandas or create a **figure**
    and an **axes** with Matplotlib and pass it to pandas to plot. For example, when
    doing a GroupBy, we can separate the data into a GroupBy key. But how can we plot
    the results of GroupBy? We have a few approaches at our disposal. We can, for
    example, use pandas directly, if the DataFrame is already in the right format:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following code is a sample and will not get executed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can just plot each GroupBy key on the same plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For the following activity, we will use what we've learned in the previous chapter
    and read a CSV file from a URL and parse it. The dataset is the Auto-MPG dataset
    ([https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson02/Dataset/auto-mpg.data](https://raw.githubusercontent.com/TrainingByPackt/Big-Data-Analysis-with-Python/master/Lesson02/Dataset/auto-mpg.data)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This dataset is a modified version of the dataset provided in the `StatLib`
    library. The original dataset is available in the `auto-mpg.data-original` file.
  prefs: []
  type: TYPE_NORMAL
- en: The data concerns city-cycle fuel consumption in miles per gallon, in terms
    of three multivalued discrete and five continuous attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4: Line Graphs with the Object-Oriented API and Pandas DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, we will create a time series line graph from the Auto-MPG
    dataset as a first example of plotting using pandas and the object-oriented API.
    This kind of graph is common in analysis and helps to answer questions such as
    "is the average horsepower increasing or decreasing with time?"
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these procedures to plot a graph of average horsepower per year
    using pandas and while using the object-oriented API:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the required libraries and packages into the Jupyter notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the Auto-MPG dataset into the Spark object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the column names to simplify the dataset, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now read the new dataset with column names and display it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the `horsepower` and `year` data types to float and integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now plot the graph of average horsepower per year using pandas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10: Line Graphs with the Object-Oriented API and Pandas DataFrame](img/Image39479.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Line Graphs with the Object-Oriented API and Pandas DataFrame'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 205.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are using the plot functions from pandas but passing the axis that
    we created directly with Matplotlib as an argument. As we saw in the previous
    chapter, this is not required, but it will allow you to configure the plot outside
    pandas and change its configurations later. This same behavior can be applied
    to the other kinds of graphs. Let's now work with scatter plots.
  prefs: []
  type: TYPE_NORMAL
- en: Scatter Plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To understand the correlation between two variables, scatter plots are generally
    used because they allow the distribution of points to be seen. Creating a scatter
    plot with Matplotlib is similar to creating a line plot, but instead of using
    the `plot` method, we use the `scatter` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example using the Auto-MPG dataset ([https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/](https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/C12913_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Scatter plot using Matplotlib library'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note that we called the scatter method directly from the axis. In Matplotlib
    parlance, we added a scatter plot to the axis, `ax`, that belongs to the `fig`
    figure. We can also add more dimensions to the plot, such as the `color` and point
    `size`, easily with Seaborn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.12: Scatter plot using Seaborn library](img/C12913_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Scatter plot using Seaborn library'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, scatter plots are quite helpful for understanding the relationship
    between two variables, or even more. We can infer, for example, that there is
    a positive correlation between `horsepower` and `weight`. We can also easily see
    an outlier with the scatter plot, which could be more complicated when working
    with other kinds of graphs. The same principles for grouped data and pandas DataFrames
    that we saw on the line graphs apply here for the scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate a scatter plot directly from pandas using the `kind` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a figure and pass it to Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 5: Understanding Relationships of Variables Using Scatter Plots'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To continue our data analysis and learn how to plot data, let''s look at a
    situation where a scatter plot can help. For example, let''s use a scatter plot
    to answer the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: Is there a relationship between horsepower and weight?
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer this question, we need to create a scatter plot with the data from
    Auto-MPG:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Auto-MPG dataset, already ingested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Please refer to the previous exercise for how to ingest the dataset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the object-oriented API for Matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a scatter plot using the `scatter` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 208.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can identify a roughly linear relationship between horsepower and weight,
    with some outliers with higher horsepower and lower weight. This is the kind of
    graph that would help an analyst interpret the data's behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Histograms are a bit different from the graphs that we've seen so far, as they
    only try to visualize the distribution of one variable, instead of two or more.
    Histograms have the goal of visualizing the probability distribution of one variable,
    or in other words, counting the number of occurrences of certain values divided
    into fixed intervals, or bins.
  prefs: []
  type: TYPE_NORMAL
- en: The bins are consecutive and adjacent but don't need to have the same size,
    although this is the most common arrangement.
  prefs: []
  type: TYPE_NORMAL
- en: The choice of the number of bins and bin size is more dependent on the data
    and the analysis goal than any fixed, general rule. The larger the number of bins,
    the smaller (narrower) the size of each bin, and vice versa. When data has a lot
    of noise or variation, for example, a small number of bins (with a large bin)
    will show the general outline of the data, reducing the impact of the noise in
    a first analysis. A larger number of bins is more useful when the data has a higher
    density.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Creating a Histogram of Horsepower Distribution'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we strive to understand the data, we now want to see the horsepower distribution
    over all cars. Analysis questions with an adequate histogram are, for example:
    what is the most frequent value of a variable? Is the distribution centered or
    does it have a tail? Let''s plot a histogram of the horsepower distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries into the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.13: The auto-mpg dataset](img/C12913_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.13: The auto-mpg dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Convert the `horsepower` and `year` data types to float and integer using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a graph directly from the Pandas DataFrame using the `plot` function
    and `kind=''hist''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.14: Histogram plot](img/C12913_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.14: Histogram plot'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Identify the `horsepower` concentration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.15: Histogram concentration plot](img/Image39528.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Histogram concentration plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see in this graph that the value distribution is skewed to the left,
    with more cars with horsepower of between `50` and `100` than greater than `200`,
    for example. This could be quite useful in understanding how some data varies
    in an analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Boxplots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Boxplots are also used to see variations in values, but now within each column.
    We want to see how values compare when grouped by another variable, for example.
    Because of their format, boxplots are sometimes called **whisker plots** or **box**
    and **whisker plots** because of the lines that extend vertically from the main
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C12913_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Boxplot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Source
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/File:Michelsonmorley-boxplot.svg](https://en.wikipedia.org/wiki/File:Michelsonmorley-boxplot.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: A boxplot uses quartiles (first and third) to create the boxes and whiskers.
    The line in the middle of the box is the second quartile â€“ the median. The whiskers
    definition can vary, such as using one standard deviation above and below the
    mean of the data, but it's common to use 1.5 times the interquartile range (Q3
    â€“ Q1) from the edges of the box. Anything that passes these values, either above
    or below, is plotted as a `dot` and is usually considered an outlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Analyzing the Behavior of the Number of Cylinders and Horsepower
    Using a Boxplot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we want not only to see the distribution of each variable, but also
    to see the variation of the variable of interest with respect to another attribute.
    We would like to know, for instance, how the horsepower varies given the number
    of cylinders. Let''s create a boxplot with Seaborn, comparing the horsepower distribution
    to the number of cylinders:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries into the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.17: The auto-mpg dataset](img/C12913_02_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.17: The auto-mpg dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Convert the data type of horsepower and year to float and integer using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a boxplot using the Seaborn `boxplot` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.18: Boxplot using the Seaborn boxplot function](img/C12913_02_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.18: Boxplot using the Seaborn boxplot function'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, just for comparison purposes, create the same `boxplot` using pandas directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.19: Boxplot using pandas](img/C12913_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Boxplot using pandas'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On the analysis side, we can see that the variation range from **3** cylinders
    is smaller than for **8** cylinders for horsepower. We can also see that **6**
    and **8** cylinders have outliers in the data. As for the plotting, the Seaborn
    function is more complete, showing different colors automatically for different
    numbers of cylinders, and including the name of the DataFrame columns as labels
    in the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing Plot Design: Modifying Graph Components'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've looked at the main graphs used in analyzing data, either directly
    or grouped, for comparison and trend visualization. But one thing that we can
    see is that the design of each graph is different from the others, and we don't
    have basic things such as a title and legends.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned that a graph is composed of several components, such as a graph
    **title**, **x** and **y** labels, and so on. When using Seaborn, the graphs already
    have **x** and **y** labels, with the names of the columns. With Matplotlib, we
    don't have this. These changes are not only cosmetic.
  prefs: []
  type: TYPE_NORMAL
- en: The understanding of a graph can be greatly improved when we adjust things such
    as line width, color, and point size too, besides labels and titles. A graph must
    be able to stand on its own, so title, legends, and units are paramount. How can
    we apply the concepts that we described previously to make good, informative graphs
    on Matplotlib and Seaborn?
  prefs: []
  type: TYPE_NORMAL
- en: The possible number of ways that plots can be configured is enormous. Matplotlib
    is powerful when it comes to configuration, but at the expense of simplicity.
    It can be cumbersome to change some basic parameters in a graph using Matplotlib
    and this is where Seaborn and other libraries can be of help. But in some cases,
    this is desirable, for instance in a custom graph, so having this capacity somewhere
    in the stack is necessary. We will focus on how to change a few basic plot parameters
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Title and Label Configuration for Axis Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we said before, the object-oriented API for Matplotlib is the one that provides
    greater flexibility. Let's explore how to configure the title and labels on axis
    objects in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Configuring a Title and Labels for Axis Objects'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure a title and labels for the axis objects.
    We will continue from the previous exercise and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the `title`, the x-axis label, and the y-axis label by calling the `set`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.20: Configuring a title and labels](img/C12913_02_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.20: Configuring a title and labels'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The legends for the plot can be either passed externally, when using only Matplotlib,
    or can be set on the Pandas plot and plotted with the axes. Use the following
    command to plot the legends:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.21: Line graph with legends](img/C12913_02_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.21: Line graph with legends'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The alternative method for plotting the legends is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.22: Line graph with legends (alternate method)](img/C12913_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: Line graph with legends (alternate method)'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Line Styles and Color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For line graphs, the color, the weight, markers, and the style of the lines
    can be configured with the `ls`, `lw`, `marker`, and `color` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.23: Line graph with color and style](img/C12913_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.23: Line graph with color and style'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Figure Size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also configure the size of the figure. The `figsize` parameter can be
    passed to all plot functions as a tuple (`x`-axis, `y`-axis) with the size in
    inches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.24: Plot with bigger figure size](img/C12913_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.24: Plot with bigger figure size'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exercise 15: Working with Matplotlib Style Sheets'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Matplotlib has some style sheets that define general rules for graphs, such
    as **background** **color**, **ticks**, **graph colors**, and **palettes**. Let''s
    say that we want to change the style so our graph has better colors for printing.
    To accomplish that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first print the list of available styles using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s create a scatter plot with the style as `classic`. Make sure you
    import the Matplotlib library first before proceeding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/Image39625.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: Scatter plot with the style as classic'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To use a style sheet, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.style.use(''presentation'')`'
  prefs: []
  type: TYPE_NORMAL
- en: One of the changes that Seaborn makes when it is imported is to add some styles
    to the list of available ones. Styles are also useful when creating images for
    different audiences, such as one for visualization in a notebook and another for
    printing or displaying in a presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After generating our visualizations and configuring the details, we can export
    our graphs to a hard copy format, such as PNG, JPEG, or SVG. If we are using the
    interactive API in the notebook, we can just call the `savefig` function over
    the `pyplot` interface, and the last generated graph will be exported to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.26: Exporting the graphs](img/C12913_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.26: Exporting the graphs'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'All plot configurations will be carried to the `plot`. To export a graph when
    using the object-oriented API, we can call `savefig` from the figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.27: Saving the graph](img/C12913_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: Saving the graph'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can change some parameters for the saved image:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dpi**: Adjust the saved image resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**facecolor**: The face color of the figure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**edgecolor**: The edge color of the figure, around the graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**format**: Usually PNG, PDF, PS, EPS, JPG, or SVG. Inferred from the filename
    extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Seaborn also uses the same underlying Matplotlib mechanism to save figures.
    Call the `savefig` method directly from a Seaborn graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 2.28: Plot using the savefig method](img/C12913_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28: Plot using the savefig method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With these complementary options, the analyst has the capability of generating
    visualizations for different audiences, either in notebooks, on websites, or in
    print.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6: Exporting a Graph to a File on Disk'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Saving our work to a file is a good way to enable sharing the results in different
    media. It also helps if we want to keep it for future reference. Let''s create
    a graph and save it to disk:'
  prefs: []
  type: TYPE_NORMAL
- en: Ingest the Auto-MPG dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create any kind of graph using the Matplotlib object-oriented API. For example,
    here''s a histogram on weight:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export this to a PNG file using the `savefig` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 209.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 7: Complete Plot Design'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make our graphs stand alone, separated from analysis, we need to add more
    information to it, for other analysis or for other users be able to grasp the
    graph content and understand what's being represented. We will now combine all
    of what we've learned in this chapter to create a complete graph, including a
    title, labels, and legends, and adjust the plot size.
  prefs: []
  type: TYPE_NORMAL
- en: As an analyst, we want to understand whether the average miles per year increased
    or not, and we want to group by number of cylinders. For example, what is the
    behavior, in fuel consumption, of a car with three cylinders, over time? Is it
    higher or lower than a car with four cylinders?
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create our final graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Ingest the Auto-MPG dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `groupby` operations on `year` and `cylinders`, and unset the option
    to use them as indexes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the average miles per gallon over the grouping and set year as index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set year as the DataFrame index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the figure and axes using the object-oriented API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the `groupby` operations on the `df_g` dataset by cylinders and plot
    the miles per gallon variable using the axes created with size `(10,8)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **title**, **x** label, and **y** label on the axes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the legends in the plot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the figure to disk as a PNG file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 211.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can infer from this graph that cars with four cylinders are more economical
    than cars with eight cylinders. We can also infer that all cars increased fuel
    efficiency during the studied period, with a decrease of four cylinders between
    1980 and 1982.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Notice that with the label axes and legend, the complicated transformation that
    was done using Pandas (group by and averaging, then setting the index) is easy
    to explain in the final result.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have seen the importance of creating meaningful and interesting
    visualizations when analyzing data. A good data visualization can immensely help
    the analyst's job, representing data in a way that can reach larger audiences
    and explain concepts that could be hard to translate into words or to represent
    with tables.
  prefs: []
  type: TYPE_NORMAL
- en: A graph, to be effective as a data visualization tool, must show the data, avoid
    distortions, make understanding large datasets easy, and have a clear purpose,
    such as description or exploration. The main goal of a graph is to communicate
    data, so the analyst must keep that in mind when creating a graph. A useful graph
    is more desirable than a beautiful one.
  prefs: []
  type: TYPE_NORMAL
- en: 'We demonstrated some kinds of graphs commonly used in analysis: the line graph,
    the scatter plot, the histogram, and the boxplot. Each graph has its purpose and
    application, depending on the data and the goal. We have also shown how to create
    graphs directly from Matplotlib, from pandas, or a combination of both, with Matplotlib''s
    APIs: Pyplot, the interactive API, and the object-oriented API. We finished this
    chapter with an explanation of the options for changing the appearance of a graph,
    from line styles to markers and colors, and how to save a graph to a hard copy
    format for printing or sharing.'
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of ways to configure graphs that we didn't cover here. Visualization
    is a large field and the tools also have a large set of options.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will focus on data processing, including the manipulation
    of large-scale data with Hadoop and Spark. After going through the basics of both
    of those tools, we will return to the analysis process, which will include graphs
    in diverse forms.
  prefs: []
  type: TYPE_NORMAL
