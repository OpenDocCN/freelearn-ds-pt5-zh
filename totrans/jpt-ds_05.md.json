["```py\nconda install -c r r-essentials  \n```", "```py\nprintf <- function(...)print(sprintf(...))  \n```", "```py\nage <- read.csv(\"Documents/B05238_05_age.tsv\", sep=\"\\t\")\nhead(age)\n\neducation <- read.csv(\"Documents/B05238_05_education.tsv\", sep=\"\\t\")\nhead(education)\n\ngender <- read.csv(\"Documents/B05238_05_gender.tsv\", sep=\"\\t\")\nhead(gender)\n\nideology <- read.csv(\"Documents/B05238_05_ideology.tsv\", sep=\"\\t\")\nhead(ideology)\n\nincome <- read.csv(\"Documents/B05238_05_income.tsv\", sep=\"\\t\")\nhead(income)\n\norientation <- read.csv(\"Documents/B05238_05_orientation.tsv\", sep=\"\\t\")\nhead(orientation)\n\nparty <- read.csv(\"Documents/B05238_05_party.tsv\", sep=\"\\t\")\nhead(party)\n\nrace <- read.csv(\"Documents/B05238_05_race.tsv\", sep=\"\\t\")\nhead(race)\n\nregion <- read.csv(\"Documents/B05238_05_region.tsv\", sep=\"\\t\")\nhead(region)\n\nreligion <- read.csv(\"Documents/B05238_05_religion.tsv\", sep=\"\\t\")\nhead(religion)  \n```", "```py\nprintf(\"Most Clinton voters from %s\",age[which.max(age$Clinton),'age'])\nprintf(\"Most Clinton voters from %s\",education[which.max(education$Clinton),'education'])\nprintf(\"Most Clinton voters from %s\",gender[which.max(gender$Clinton),'gender'])\nprintf(\"Most Clinton voters from %s\",ideology[which.max(ideology$Clinton),'ideology'])\nprintf(\"Most Clinton voters from %s\",income[which.max(income$Clinton),'income'])\nprintf(\"Most Clinton voters from %s\",orientation[which.max(orientation$Clinton),'orientation'])\nprintf(\"Most Clinton voters from %s\",party[which.max(party$Clinton),'party'])\nprintf(\"Most Clinton voters from %s\",race[which.max(race$Clinton),'race'])\nprintf(\"Most Clinton voters from %s\",region[which.max(region$Clinton),'region'])\nprintf(\"Most Clinton voters from %s\",religion[which.max(religion$Clinton),'religion'])\n\nprintf(\"Most Trump voters from %s\",age[which.max(age$Trump),'age'])\nprintf(\"Most Trump voters from %s\",education[which.max(education$Trump),'education'])\nprintf(\"Most Trump voters from %s\",gender[which.max(gender$Trump),'gender'])\nprintf(\"Most Trump voters from %s\",ideology[which.max(ideology$Trump),'ideology'])\nprintf(\"Most Trump voters from %s\",income[which.max(income$Trump),'income'])\nprintf(\"Most Trump voters from %s\",orientation[which.max(orientation$Trump),'orientation'])\nprintf(\"Most Trump voters from %s\",party[which.max(party$Trump),'party'])\nprintf(\"Most Trump voters from %s\",race[which.max(race$Trump),'race'])\nprintf(\"Most Trump voters from %s\",region[which.max(region$Trump),'region'])\nprintf(\"Most Trump voters from %s\",religion[which.max(religion$Trump),'religion'])  \n```", "```py\ndf <- read.csv(\"Documents/B05238_05_registration.csv\")\nsummary(df)  \n```", "```py\nplot(df)  \n```", "```py\nfrom numpy import corrcoef, sum, log, arange from numpy.random import rand from pylab import pcolor, show, colorbar, xticks, yticks import pandas as pd import matplotlib from matplotlib import pyplot as plt \n```", "```py\ndf \n```", "```py\ndel df['state'] #pandas do not deal well with strings \n```", "```py\n#print cross-correlation matrix print(df.corr()) \n```", "```py\n#graph same fig = plt.gcf() fig.set_size_inches(10, 10)\n# plotting the correlation matrix R = corrcoef(df) pcolor(R) colorbar() yticks(arange(0.5,10.5),range(0,10)) xticks(arange(0.5,10.5),range(0,10)) show()\n```", "```py\ncor(df$voted,df$registered)\n0.998946393424037\n```", "```py\nfit <- lm(df$voted ~ df$registered)\nfit\nCall:\nlm(formula = df$voted ~ df$registered)\n\nCoefficients:\n (Intercept)  df$registered \n -4.1690         0.8741  \n```", "```py\npar(mfrow=c(2,2))\nplot(fit)  \n```", "```py\n... (for all 50 states)  \n```", "```py\nsummary(fit)\nCall:\nlm(formula = df$voted ~ df$registered)\n\nResiduals:\n Min      1Q  Median      3Q     Max \n-617.33  -29.69    0.83   30.70  351.27 \n\nCoefficients:\n Estimate Std. Error t value Pr(>|t|) \n(Intercept)   -4.169018  25.201730  -0.165    0.869 \ndf$registered  0.874062   0.005736 152.370   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 127.9 on 49 degrees of freedom\nMultiple R-squared:  0.9979,  Adjusted R-squared:  0.9979 \nF-statistic: 2.322e+04 on 1 and 49 DF,  p-value: < 2.2e-16  \n```", "```py\nimport numpy as np\nimport statsmodels.formula.api as sm\n\nmodel = sm.ols(formula='voted ~ registered', data=df)\nfitted = model.fit()\nprint (fitted.summary())  \n```", "```py\nplt.plot(df['voted'], df['registered'], 'ro')\nplt.plot(df['voted'], fitted.fittedvalues, 'b')\nplt.legend(['Data', 'Fitted model'])\nplt.xlabel('Voted')\nplt.ylabel('Registered')\nplt.title('Voted vs Registered')\nplt.show()  \n```", "```py\ndf <- read.csv(\"Documents/acceptance-rates.csv\")\nsummary(df)\nhead(df)  \n```", "```py\nplot(df)  \n```", "```py\nmyvector <- c(mean(df[[\"X2015\"]],na.rm=TRUE),\n mean(df[[\"X2016\"]],na.rm=TRUE),\n mean(df[[\"X2017\"]],na.rm=TRUE))  \n```", "```py\nts <- ts(myvector, start=c(2015), end=c(2017), frequency=1)  \n```", "```py\nplot(ts)  \n```", "```py\n# double exponential - models level and trend\nfit <- HoltWinters(ts, gamma=FALSE)\nfit\nHolt-Winters exponential smoothing with trend and without seasonal component.\n\nCall:\nHoltWinters(x = ts, gamma = FALSE)\n\nSmoothing parameters:\n alpha: 0.3\n beta : 0.1\n gamma: FALSE\n\nCoefficients:\n [,1]\na  0.14495402\nb -0.00415977  \n```", "```py\ninstall.packages(\"forecast\", repos=\"http://cran.us.r-project.org\")\nlibrary(forecast)\nforecast(fit, 3)\nplot(forecast(fit, 3))  \n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6  \n```", "```py\ndata = pd.read_csv('Documents/acceptance-rates.csv')\nprint (data.head())\n School  2017  2016  2015  2007\n0      Amherst College   NaN  0.14  0.14  0.18\n1       Boston College  0.32  0.32  0.28  0.27\n2     Brown University  0.08  0.09  0.09  0.15\n3  Columbia University  0.06  0.06  0.06  0.12\n4   Cornell University  0.13  0.14  0.15  0.21  \n```", "```py\ndel data['School']\nprint (data.head())\n 2017  2016  2015  2007\n0   NaN  0.14  0.14  0.18\n1  0.32  0.32  0.28  0.27\n2  0.08  0.09  0.09  0.15\n3  0.06  0.06  0.06  0.12\n4  0.13  0.14  0.15  0.21  \n```", "```py\ndata = data.transpose()\nprint (data.head())\n```", "```py\nplt.plot(data);  \n```", "```py\ndf <- read.csv(\"Documents/2008-airplane.csv\")\nsummary(df)\n...\nCRSElapsedTime      AirTime          ArrDelay          DepDelay \n Min.   :-141.0   Min.   :   0     Min.   :-519.00   Min.   :-534.00 \n 1st Qu.:  80.0   1st Qu.:  55     1st Qu.: -10.00   1st Qu.:  -4.00 \n Median : 110.0   Median :  86     Median :  -2.00   Median :  -1.00 \n Mean   : 128.9   Mean   : 104     Mean   :   8.17   Mean   :   9.97 \n 3rd Qu.: 159.0   3rd Qu.: 132     3rd Qu.:  12.00   3rd Qu.:   8.00 \n Max.   :1435.0   Max.   :1350     Max.   :2461.00   Max.   :2467.00 \n NA's   :844      NA's   :154699   NA's   :154699    NA's   :136246 \n Origin             Dest            Distance          TaxiIn \n ATL    : 414513   ATL    : 414521   Min.   :  11.0   Min.   :  0.00 \n ORD    : 350380   ORD    : 350452   1st Qu.: 325.0   1st Qu.:  4.00 \n DFW    : 281281   DFW    : 281401   Median : 581.0   Median :  6.00 \n DEN    : 241443   DEN    : 241470   Mean   : 726.4   Mean   :  6.86 \n LAX    : 215608   LAX    : 215685   3rd Qu.: 954.0   3rd Qu.:  8.00 \n PHX    : 199408   PHX    : 199416   Max.   :4962.0   Max.   :308.00 \n (Other):5307095   (Other):5306783                    NA's   :151649 \n TaxiOut         Cancelled       CancellationCode    Diverted \n Min.   :  0.00   Min.   :0.00000    :6872294        Min.   :0.000000 \n 1st Qu.: 10.00   1st Qu.:0.00000   A:  54330        1st Qu.:0.000000 \n Median : 14.00   Median :0.00000   B:  54904        Median :0.000000 \n Mean   : 16.45   Mean   :0.01961   C:  28188        Mean   :0.002463 \n 3rd Qu.: 19.00   3rd Qu.:0.00000   D:     12        3rd Qu.:0.000000 \n Max.   :429.00   Max.   :1.00000                    Max.   :1.000000 \n NA's   :137058 \n CarrierDelay      WeatherDelay        NASDelay       SecurityDelay \n Min.   :   0      Min.   :   0      Min.   :   0      Min.   :  0 \n 1st Qu.:   0      1st Qu.:   0      1st Qu.:   0      1st Qu.:  0 \n Median :   0      Median :   0      Median :   6      Median :  0 \n Mean   :  16      Mean   :   3      Mean   :  17      Mean   :  0 \n 3rd Qu.:  16      3rd Qu.:   0      3rd Qu.:  21      3rd Qu.:  0 \n Max.   :2436      Max.   :1352      Max.   :1357      Max.   :392 \n NA's   :5484993   NA's   :5484993   NA's   :5484993   NA's   :5484993 \n LateAircraftDelay\n Min.   :   0 \n 1st Qu.:   0 \n Median :   0 \n Mean   :  21 \n 3rd Qu.:  26 \n Max.   :1316 \n NA's   :5484993 \n```", "```py\n# eliminate rows with NA values\ndf <- na.omit(df)\n```", "```py\n# for partitioning to work data has to be ordered\ntimes <- df[order(df$ArrTime),]\nnrow(times)\n1524735\n\n# partition data - 75% training\nlibrary(caret)\nset.seed(1337)\ntrainingIndices <- createDataPartition(df$ArrTime,p=0.75,list=FALSE)\ntrainingSet <- df[trainingIndices,]\ntestingSet <- df[-trainingIndices,]\nnrow(trainingSet)\nnrow(testingSet)\n1143553\n381182  \n```", "```py\npredicted <- predict(model, newdata=testingSet)\nsummary(predicted)\nsummary(testingSet$ArrTime)\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n -941    1360    1629    1590    1843    2217 \n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 1    1249    1711    1590    2034    2400  \n```", "```py\nplot(predicted,testingSet$ArrTime)  \n```"]