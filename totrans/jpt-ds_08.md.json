["```py\nimport time import datetime import json, csv print( datetime.datetime.now().time()) headers = True #with open('c:/Users/Dan/reviews.json') as jsonf, open('c:/Users/Dan/reviews.csv', \"wb\") as csvf: filein = 'c:/Users/Dan/yelp_academic_dataset_review.json' fileout = 'c:/Users/Dan/yelp_academic_dataset_review.csv' with open(filein) as jsonf, open(fileout, \"wb\") as csvf:\n for line in jsonf: data = json.loads(line)        #remove the review text\n data.pop('text') if headers: w = csv.DictWriter(csvf, data.keys()) w.writeheader() headers = False w.writerow(data)print( datetime.datetime.now().time())\n```", "```py\nreviews <- read.csv(\"c:/Users/Dan/yelp_academic_dataset_review.csv\") \n```", "```py\nhead(reviews)\n```", "```py\nsummary(reviews)  \n```", "```py\nhist(reviews$stars)  \n```", "```py\n#businesses with most 5 star ratings\n#install.packages(\"sqldf\", repos='http://cran.us.r-project.org')\nlibrary(sqldf)\nfive_stars = sqldf(\"select business_id, count(*) from reviews where stars = 5 group by business_id order by 2 desc\")\nhead(five_stars)  \n```", "```py\n#which places have most ratings\nlibrary(sqldf)\nmost_ratings = sqldf(\"select business_id, count(*) from reviews group by business_id order by 2 desc\")\nhead(most_ratings)  \n```", "```py\n# range of ratings for business with most ratings\nlibrary(sqldf)\nmost_rated = sqldf(\"select * from reviews where business_id = '4JNXUYY8wbaaDmk3BPzlWw' \")\nhist(most_rated$stars)  \n```", "```py\n# correlation number of reviews and number of stars\nlibrary(sqldf)\nreviews_stars = sqldf(\"select stars,count(*) as reviews from reviews group by stars\")\nreviews_stars\ncor(reviews_stars)  \n```", "```py\n#correlation business and rating\nlibrary(sqldf)\nbusiness_rating = sqldf(\"select business_id, avg(stars) as rating from reviews group by business_id order by 2 desc\")\nhead(business_rating)\nhist(business_rating$rating)  \n```", "```py\nmodel <- lm(stars ~ funny + useful + cool, data=reviews)\nsummary(model)  \n```", "```py\nimport json\n#filein = 'c:/Users/Dan/business.json'\nfilein = 'c:/Users/Dan/yelp_academic_dataset_business.json'\nlines = list(open(filein))  \n```", "```py\nratings = {}\nfor line in lines:\n line = unicode(line, errors='ignore')\n obj = json.loads(line)\n if obj['categories'] == None:\n continue\n if 'Restaurants' in obj['categories']:\n rating = obj['stars']\n for category in obj['categories']:\n if category not in ratings:\n ratings[category] = []\n clist = ratings.get(category)\n clist.append(rating)\n```", "```py\ncuisines = {}\ntotal = 0\ncmax = ''\nmaxc = 0\nfor cuisine in ratings:\n clist = ratings[cuisine]\n if len(clist) < 10:\n continue\n avg = float(sum(clist))/len(clist)\n cuisines[cuisine] = avg\n total = total + avg\n if avg > maxc:\n maxc = avg\n cmax = cuisine\n\nprint (\"Highest rated cuisine is \",cmax,\" at \",maxc)\nprint (\"Average cuisine rating is \",total/len(ratings))\n\nprint (cuisines)  \n```", "```py\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame(columns=['Cuisine', 'Rating'])\nfor cuisine in cuisines:\n df.loc[len(df)]=[cuisine, cuisines[cuisine]]\nhist, bin_edges = np.histogram(df['Rating'], bins=range(5))\n\nimport matplotlib.pyplot as plt\nplt.bar(bin_edges[:-1], hist, width = 1)\nplt.xlim(min(bin_edges), max(bin_edges))\nplt.show()     \n```", "```py\n line = unicode(line, errors='ignore')\n obj = json.loads(line)\n if obj['categories'] == None:\n continue\n if 'Personal Chefs' in obj['categories']:\n if obj['attributes'] == None:\n continue\n for attr in obj['attributes']:\n print (attr)\n```", "```py\n#determine relationship between number of reviews and star rating\nimport pandas as pd\nfrom pandas import DataFrame as df \nimport numpy as np \n\ndfr2 = pd.DataFrame(columns=['reviews', 'rating'])\nmynparray = dfr2.values\n\nfor line in lines:\n line = unicode(line, errors='ignore')\n obj = json.loads(line)\n reviews = int(obj['review_count'])\n rating = float(obj['stars'])\n arow = [reviews,rating]\n mynparray = np.vstack((mynparray,arow)) \n\ndfr2 = df(mynparray)\nprint (len(dfr2))  \n```", "```py\ndfr2.columns = ['reviews', 'rating']\ndfr2.describe()\n```", "```py\n#import matplotlib.pyplot as plt\ndfr2.plot(kind='scatter', x='rating', y='reviews')\nplt.show()  \n```", "```py\n#compute regression\nimport statsmodels.formula.api as smf\n\n# create a fitted model in one line\nlm = smf.ols(formula='rating ~ reviews', data=dfr2).fit()\n\n# print the coefficients\nlm.params  \n```", "```py\n#min, max observed values\nX_new = pd.DataFrame({'reviews': [dfr2.reviews.min(), dfr2.reviews.max()]})\nX_new.head()  \n```", "```py\nNow, we can make predictions based on the extent data points:\n#make corresponding predictions\npreds = lm.predict(X_new)\npreds  \n```", "```py\n# first, plot the observed data\ndfr2.plot(kind='scatter', x='reviews', y='rating')\n\n# then, plot the least squares line\nplt.plot(X_new, preds, c='red', linewidth=2)\nplt.show()  \n```"]