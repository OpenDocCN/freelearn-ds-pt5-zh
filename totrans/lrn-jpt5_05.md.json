["```py\njava --version \n```", "```py\n> git clone https://github.com/SpencerPark/IJava.git --depth 1\n```", "```py\n> cd IJava/\n```", "```py\n>jupyter kernelspec list \n```", "```py\njupyter console --kernel=java \n```", "```py\nString hello = \"Hello, Dan\" \nhello \n```", "```py\nSystem.out.println(\"stdout\");\nSystem.err.println(\"stderr\");\n```", "```py\nimport java.util.Optional; \npublic class MyOptional { \n    public static void main() { \n        MyOptional program = new MyOptional(); \n        Integer value1 = null; \n        Integer value2 = 123; \n\n        //.ofNullable allows null \n        Optional<Integer> a = Optional.ofNullable(value1); \n\n        //.of does not allow null \n        Optional<Integer> b = Optional.of(value2); \n        System.out.println(program.sum(a,b)); \n    } \n\n    public Integer sum(Optional<Integer> first, Optional<Integer>\n      second) { \n        System.out.println(\"First parameter present \" +\n          first.isPresent()); \n        System.out.println(\"Second parameter present \" + \n          second.isPresent()); \n        Integer value1 = first.orElse(1); \n        Integer value2 = second.orElse(1); \n        return value1 + value2; \n    } \n} \nnew MyOptional().main(); \n```", "```py\npublic class MyStreams { \n\n    public static void main(String[] args) { \n          List<Integer> numbers = new ArrayList<Integer>(); \n          numbers.add(3); \n          numbers.add(-1); \n          numbers.add(3); \n          numbers.add(17); \n          numbers.add(7); \n\n          System.out.println(\"Numbers greater than 2\"); \n          numbers.stream() \n                .filter(number -> number > 2) \n                .forEach(number -> System.out.println(number)); \n\n          System.out.println(\"number size = \" +\n            numbers.stream().count()); \n\n          Integer big = numbers.stream().max((n1,n2) -> \n            Integer.compare(n1, n2)).get(); \n          System.out.println(\"biggest number = \" + big); \n\n          Integer small = numbers.stream().min((n1,n2) -> \n            Integer.compare(n1, n2)).get(); \n          System.out.println(\"smallest number = \" + small); \n\n          System.out.println(\"Sorted\"); \n          numbers.stream() \n                .sorted((n1,n2) -> Integer.compare(n1, n2)) \n                .forEach(number -> System.out.println(number)); \n\n          Integer total = numbers.stream() \n                      .collect(Collectors.summingInt(i -> i)) \n                      .intValue(); \n          System.out.println(\"Total \" + total); \n\n          String summary = numbers.stream() \n                .collect(Collectors.summarizingInt(i -> i)) \n                .toString(); \n          System.out.println(\"Summary \" + summary); \n\n          System.out.println(\"Squares\"); \n          numbers.stream() \n                .map(i -> i * i) \n                .forEach(i -> System.out.println(i)); \n\n          System.out.println(\"Growth\"); \n          numbers.stream() \n                .flatMap(i -> build(i)) \n                .sorted() \n                .forEach(i -> System.out.println(i)); \n\n          System.out.println(\"Distinct growth\"); \n          numbers.stream() \n                .flatMap(i -> build(i)) \n                .sorted() \n                .distinct() \n                .forEach(i -> System.out.println(i)); \n    } \n\n    static Stream<Integer> build(Integer i) { \n          List<Integer> t = new ArrayList<Integer>(); \n          t.add(i); \n          t.add(i*i); \n          t.add(i*i*i); \n          return t.stream(); \n    } \n} \n```", "```py\nimport java.io.IOException; \nimport java.nio.file.FileSystems; \nimport java.nio.file.Files; \nimport java.nio.file.Path; \nimport java.text.DateFormat; \nimport java.util.ArrayList; \nimport java.util.List; \nimport java.util.Map; \nimport java.util.Optional; \nimport java.util.regex.Pattern; \nimport java.util.stream.Collectors; \nimport java.util.stream.Stream; \n\npublic class Iris { \n\n    public Iris(Double sepalLength, Double sepalWidth, Double \n     petalLength, Double petalWidth, String irisClass) { \n        this.sepalLength = sepalLength; \n        this.sepalWidth = sepalWidth; \n        this.petalLength = petalLength; \n        this.petalWidth = petalWidth; \n        this.irisClass = irisClass; \n    } \n\n    private Double sepalLength; \n    private Double sepalWidth; \n    private Double petalLength; \n    private Double petalWidth; \n    private String irisClass; \n\n    public Double getSepalLength() { \n        return this.sepalLength; \n    } \n\n    //other getters and setters TBD \n} \n\npublic class JavaIris { \n\n    public void test() { \n\n        //file originally at http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data \n        Path path = FileSystems \n            .getDefault() \n            .getPath(\"/Users/ToomeyD/iris.csv\"); \n        List<Iris> irises = load(path); \n\n        //produce summary statistics for sepal length values \n        String sepalLengthSummary = irises.stream() \n            .collect(Collectors.summarizingDouble(Iris::getSepalLength)) \n            .toString(); \n        System.out.println(\"\\nSepal Length Summary \" + sepalLengthSummary); \n    } \n\n    public List<Iris> load(Path path) { \n        List<Iris> irises = new ArrayList<Iris>(); \n\n        try (Stream<String> stream = Files.lines(path)) { \n            stream.forEach((line) -> { \n                System.out.println(line); \n\n                //put each field into array \n                List<String> fields = new ArrayList<String>(); \n                Pattern.compile(\",\") \n                    .splitAsStream(line) \n                    .forEach((field) -> fields.add(field)); \n\n                //build up the iris values \n                Double sepalLength = new Double(fields.get(0)); \n                Double sepalWidth = new Double(fields.get(1)); \n                Double petalLength = new Double(fields.get(2)); \n                Double petalWidth = new Double(fields.get(3)); \n                String irisClass = fields.get(4); \n                Iris iris = new Iris(sepalLength, sepalWidth,\n                 petalLength, petalWidth, irisClass); \n\n                //add to array \n                irises.add(iris); \n            }); \n        } catch (IOException e) { \n            e.printStackTrace(); \n        } \n\n        return irises; \n    } \n} \n\nnew JavaIris().test(); \n```"]