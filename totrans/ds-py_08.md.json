["```py\nimport numpy as np\nnp.lookfor(\"average\")\n```", "```py\nSearch results for 'average'\n----------------------------\nnumpy.average\n    Compute the weighted average along the specified axis.\nnumpy.irr\n    Return the Internal Rate of Return (IRR).\nnumpy.mean\n    Compute the arithmetic mean along the specified axis.\nnumpy.nanmean\n    Compute the arithmetic mean along the specified axis, ignoring NaNs.\nnumpy.ma.average\n    Return the weighted average of array over the given axis.\nnumpy.ma.mean\n    Returns the average of the array elements along given axis.\nnumpy.matrix.mean\n    Returns the average of the matrix elements along the given axis.\nnumpy.chararray.mean\n    Returns the average of the array elements along given axis.\nnumpy.ma.MaskedArray.mean\n    Returns the average of the array elements along given axis.\nnumpy.cov\n    Estimate a covariance matrix, given data and weights.\nnumpy.std\n    Compute the standard deviation along the specified axis.\nnumpy.sum\n    Sum of array elements over a given axis.\nnumpy.var\n    Compute the variance along the specified axis.\nnumpy.sort\n    Return a sorted copy of an array.\nnumpy.median\n    Compute the median along the specified axis.\nnumpy.nanstd\n    Compute the standard deviation along the specified axis, while\nnumpy.nanvar\n    Compute the variance along the specified axis, while ignoring NaNs.\nnumpy.nanmedian\n    Compute the median along the specified axis, while ignoring NaNs.\nnumpy.partition\n    Return a partitioned copy of an array.\nnumpy.ma.var\n    Compute the variance along the specified axis.\nnumpy.apply_along_axis\n    Apply a function to 1-D slices along the given axis.\nnumpy.ma.apply_along_axis\n    Apply a function to 1-D slices along the given axis.\nnumpy.ma.MaskedArray.var\n    Compute the variance along the specified axis.\n```", "```py\nimport statsmodels\nnp.lookfor(\"acf\", module = statsmodels)\n```", "```py\nSearch results for 'acf'\n------------------------\nstatsmodels.tsa.vector_ar.var_model.var_acf\n    Compute autocovariance function ACF_y(h) up to nlags of stableÂ VAR(p)\nstatsmodels.tsa.vector_ar.var_model._var_acf\n    Compute autocovariance function ACF_y(h) for h=1,...,p\nstatsmodels.tsa.tests.test_stattools.TestPACF\n    Set up for ACF, PACF tests.\nstatsmodels.sandbox.tsa.fftarma.ArmaFft.acf2spdfreq\n    not really a method\nstatsmodels.tsa.stattools.acf\n    Autocorrelation function for 1d arrays.\nstatsmodels.tsa.tests.test_stattools.TestACF_FFT\n    Set up for ACF, PACF tests.\n...\n```", "```py\n    np.arange(1, 100, 10, dtype=np.integer)\n    ```", "```py\n    ar = np.arange(20)\n    print(ar)\n    print(ar.reshape(4,5))\n    ```", "```py\n    before:\n       [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n    after: \n       [[ 0  1  2  3  4]\n       [ 5  6  7  8  9]\n       [10 11 12 13 14]\n       [15 16 17 18 19]]\n    ```", "```py\nsample = np.arange(10)\nprint(\"Sample:\", sample)\nprint(\"Access by index: \", sample[2])\nprint(\"First 5 elements: \", sample[:5])\nprint(\"From 8 to the end: \", sample[8:])\nprint(\"Last 3 elements: \", sample[-3:])\nprint(\"Every 2 elements: \", sample[::2])\n```", "```py\nSample: [0 1 2 3 4 5 6 7 8 9]\nAccess by index:  2\nFirst 5 elements:  [0 1 2 3 4]\nFrom index 8 to the end:  [8 9]\nLast 3 elements:  [7 8 9]\nEvery 2 elements:  [0 2 4 6 8]\n```", "```py\nstart:end:step\n```", "```py\nmy_nparray = np.arange(12).reshape(3,4)\nprint(my_nparray)\n```", "```py\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n```", "```py\nprint(my_nparray[1:2, 1:3])\n```", "```py\narray([[5, 6]])\n```", "```py\nprint(sample > 5 )\n```", "```py\n[False False False False False False  True  True  True  True]\n```", "```py\nprint( sample[sample > 5] )\n```", "```py\n[6 7 8 9]\n```", "```py\nmy_nparray * 2\n```", "```py\narray([[ 0,  2,  4,  6],\n       [ 8, 10, 12, 14],\n       [16, 18, 20, 22]])\n```", "```py\nmy_nparray + np.array([1,2,3,4])\n```", "```py\narray([[ 1,  3,  5,  7],\n       [ 5,  7,  9, 11],\n       [ 9, 11, 13, 15]])\n```", "```py\n!pip install quandl\n\n```", "```py\n    import quandl\n    quandl.ApiConfig.api_key = \"YOUR_KEY_HERE\"\n    ```", "```py\n{\n  \"databases\": [{\n         \"id\": 231,\n         \"name\": \"Deutsche Bundesbank Data Repository\",\n         \"database_code\": \"BUNDESBANK\",\n         \"description\": \"Data on the German economy, ...\",\n         \"datasets_count\": 49358,\n         \"downloads\": 43209922,\n         \"premium\": false,\n         \"image\": \"https://quandl--upload.s3.amazonaws/...thumb_bundesbank.png\",\n         \"favorite\": false,\n         \"url_name\": \"Deutsche-Bundesbank-Data-Repository\"\n       },...\n],\n  \"meta\": {\n    \"query\": \"\",\n    \"per_page\": 100,\n    \"current_page\": 1,\n    \"prev_page\": null,\n    \"total_pages\": 3,\n    \"total_count\": 274,\n    \"next_page\": 2,\n    \"current_first_item\": 1,\n    \"current_last_item\": 100\n  }\n}\n```", "```py\nimport requests\ndatabases = []\npage = 1\nwhile(page is not None):\n    payload = requests.get(\"https://www.quandl.com/api/v3/databases?api_key={}&page={}\"\\\n                    .format(quandl.ApiConfig.api_key, page)).json()\n databases += payload['databases']\n page = payload['meta']['next_page']\n\n```", "```py\nimport pixiedust\ndisplay(databases)\n```", "```py\ncodes = pixiedust.sampleData( \"https://www.quandl.com/api/v3/databases/WIKI/codes?api_key=\" + quandl.ApiConfig.api_key)\ndisplay(codes)\n```", "```py\nmsft = quandl.get('WIKI/MSFT')\nmsft['daily_spread'] = msft['Adj. Close'].diff()\nmsft = msft.reset_index()\n```", "```py\nimport pandas as pd\ntail = msft[msft['Date'] > '2016-05-16']\ninvestment = np.cumsum((10000 / tail['Adj. Close'].values[0]) * tail['daily_spread']) + 10000\ninvestment = investment.astype(int)\ninvestment.index = tail['Date']\ninvestment = investment.resample('M').mean()\ninvestment = pd.DataFrame(investment).reset_index()\ndisplay(investment)\n```", "```py\n!pip install statsmodels\n```", "```py\nimport statsmodels.tsa.api as smt\nimport matplotlib.pyplot as plt\nsmt.graphics.plot_acf(msft['Adj. Close'], lags=100)\nplt.show()\n```", "```py\nsmt.graphics.plot_acf(np.cos(np.linspace(0, 1000, 100)), lags=50)\nplt.show()\n```", "```py\nimport statsmodels.tsa.api as smt\nsmt.graphics.plot_pacf(msft['Adj. Close'], lags=50)\nplt.show()\n```", "```py\n@PixieApp\nclass StockExplorer():\n    @route()\n    def main_screen(self):\n        return \"\"\"\n<style>\n    div.outer-wrapper {\n        display: table;width:100%;height:300px;\n    }\n    div.inner-wrapper {\n        display: table-cell;vertical-align: middle;height: 100%;width: 100%;\n    }\n</style>\n<div class=\"outer-wrapper\">\n    <div class=\"inner-wrapper\">\n        <div class=\"col-sm-3\"></div>\n        <div class=\"input-group col-sm-6\">\n          <input id=\"stocks{{prefix}}\" type=\"text\"\n              class=\"form-control\"\n              value=\"MSFT,AMZN,IBM\"\n              placeholder=\"Enter a list of stocks separated by comma e.g MSFT,AMZN,IBM\">\n          <span class=\"input-group-btn\">\n <button class=\"btn btn-default\" type=\"button\" pd_options=\"explore=true\">\n                <pd_script>\nself.select_tickers('$val(stocks{{prefix}})'.split(','))\n                </pd_script>\n                Explore\n            </button>\n          </span>\n        </div>\n    </div>\n</div>\n\"\"\"\n```", "```py\n    <pd_script>\n       self.select_tickers('$val(stocks{{prefix}})'.split(','))\n    </pd_script>\n    ```", "```py\n    pd_options=\"explore=true\"\n    ```", "```py\n[[StockExplorer]]\ndef select_tickers(self, tickers):\n        self.tickers = {ticker.strip():{} for ticker in tickers}\n        self.set_active_ticker(tickers[0].strip())\n\ndef set_active_ticker(self, ticker):\n    self.active_ticker = ticker\n if 'df' not in self.tickers[ticker]:\n        self.tickers[ticker]['df'] = quandl.get('WIKI/{}'.format(ticker))\n        self.tickers[ticker]['df']['daily_spread'] = self.tickers[ticker]['df']['Adj. Close'] - self.tickers[ticker]['df']['Adj. Open']\n        self.tickers[ticker]['df'] = self.tickers[ticker]['df'].reset_index()\n```", "```py\n[[StockExplorer]] \n@route(explore=\"*\")\n @templateArgs\n    def stock_explore_screen(self):\n tabs = [(\"Explore\",\"StockExploreSubApp\"),\n (\"Moving Average\", \"MovingAverageSubApp\"),\n (\"ACF and PACF\", \"AutoCorrelationSubApp\")]\n        return \"\"\"\n<style>\n    .btn:active, .btn.active {\n        background-color:aliceblue;\n    }\n</style>\n<div class=\"page-header\">\n    <h1>Stock Explorer PixieApp</h1>\n</div>\n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"btn-group-vertical btn-group-toggle col-sm-2\"\n             data-toggle=\"buttons\">\n {%for title, subapp in tabs%}\n            <label class=\"btn btn-secondary {%if loop.first%}active{%endif%}\"\n                pd_options=\"show_analytic={{subapp}}\"\n                pd_target=\"analytic_screen{{prefix}}\">\n                <input type=\"radio\" {%if loop.first%}checked{%endif%}>\n                    {{title}}\n            </label>\n {%endfor%}\n        </div>\n        <div id=\"analytic_screen{{prefix}}\" class=\"col-sm-10\">\n    </div>\n</div>\n\"\"\"\n```", "```py\n    @route(show_analytic=\"*\")\n    def show_analytic_screen(self, show_analytic):\n        return \"\"\"\n<div pd_app=\"{{show_analytic}}\" pd_render_onload></div>\n\"\"\"\n```", "```py\n[[BaseSubApp]]\ndef add_ticker_selection_markup(refresh_ids):\n    def deco(fn):\n        def wrap(self, *args, **kwargs):\n            return \"\"\"\n<div class=\"row\" style=\"text-align:center\">\n <div class=\"btn-group btn-group-toggle\"\n style=\"border-bottom:2px solid #eeeeee\"\n data-toggle=\"buttons\">\n {%for ticker, state in this.parent_pixieapp.tickers.items()%}\n <label class=\"btn btn-secondary {%if this.parent_pixieapp.active_ticker == ticker%}active{%endif%}\"\n pd_refresh=\\\"\"\"\" + \",\".join(refresh_ids) + \"\"\"\\\" pd_script=\"self.parent_pixieapp.set_active_ticker('{{ticker}}')\">\n <input type=\"radio\" {%if this.parent_pixieapp.active_ticker == ticker%}checked{%endif%}> \n {{ticker}}\n </label>\n {%endfor%}\n </div>\n</div>\n            \"\"\" + fn(self, *args, **kwargs)\n        return wrap\n    return deco\n```", "```py\n@PixieApp\nclass StockExploreSubApp(BaseSubApp):\n    @route()\n @BaseSubApp.add_ticker_selection_markup(['chart{{prefix}}', 'daily_spread{{prefix}}'])\n    def main_screen(self):\n        return \"\"\"\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"col-xs-6\" id=\"chart{{prefix}}\" pd_render_onload pd_options=\"show_chart=Adj. Close\">\n    </div>\n    <div class=\"col-xs-6\" id=\"daily_spread{{prefix}}\" pd_render_onload pd_options=\"show_chart=daily_spread\">\n    </div>\n</div>\n\"\"\"\n\n    @route(show_chart=\"*\")\n    def show_chart_screen(self, show_chart):\n        return \"\"\"\n<div pd_entity=\"parent_pixieapp.get_active_df()\" pd_render_onload>\n    <pd_options>\n    {\n      \"handlerId\": \"lineChart\",\n      \"valueFields\": \"{{show_chart}}\",\n      \"rendererId\": \"bokeh\",\n      \"keyFields\": \"Date\",\n      \"noChartCache\": \"true\",\n      \"rowCount\": \"10000\"\n    }\n    </pd_options>\n</div>\n        \"\"\"\n```", "```py\n[[StockExplorer]]\ndef get_active_df(self):\n    return self.tickers[self.active_ticker]['df']\n```", "```py\ntabs = [(\"Explore\",\"StockExploreSubApp\"), (\"Moving Average\", \"MovingAverageSubApp\"),(\"ACF and PACF\", \"AutoCorrelationSubApp\")]\n```", "```py\n[[BaseSubApp]]\n@route(widget=\"lag_slider\")\ndef slider_screen(self):\n    return \"\"\"\n<div>\n    <label class=\"field\">Lag:<span id=\"slideval{{prefix}}\">50</span></label>\n    <i class=\"fa fa-info-circle\" style=\"color:orange\"\n       data-toggle=\"pd-tooltip\"\n       title=\"Selected lag used to compute moving average, ACF or PACF\"></i>\n    <div id=\"slider{{prefix}}\" name=\"slider\" data-min=30 \n         data-max=300\n         data-default=50 style=\"margin: 0 0.6em;\">\n    </div>\n</div>\n<script>\n$(\"[id^=slider][id$={{prefix}}]\").each(function() {\n    var sliderElt = $(this)\n    var min = sliderElt.data(\"min\")\n    var max = sliderElt.data(\"max\")\n    var val = sliderElt.data(\"default\")\n sliderElt.slider({\n        min: isNaN(min) ? 0 : min,\n        max: isNaN(max) ? 100 : max,\n        value: isNaN(val) ? 50 : val,\n        change: function(evt, ui) {\n            $(\"[id=slideval{{prefix}}]\").text(ui.value);\n            pixiedust.sendEvent({type:'lagSlider',value:ui.value})\n        },\n        slide: function(evt, ui) {\n            $(\"[id=slideval{{prefix}}]\").text(ui.value);\n        }\n    });\n})\n</script>\n        \"\"\"\n```", "```py\n@PixieApp\nclass MovingAverageSubApp(BaseSubApp):\n    @route()\n @BaseSubApp.add_ticker_selection_markup(['chart{{prefix}}'])\n    def main_screen(self):\n        return \"\"\"\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"page-header text-center\">\n        <h1>Moving Average for {{this.parent_pixieapp.active_ticker}}</h1>\n    </div>\n    <div class=\"col-sm-12\" id=\"chart{{prefix}}\" pd_render_onload pd_entity=\"get_moving_average_df()\">\n        <pd_options>\n        {\n          \"valueFields\": \"Adj. Close\",\n          \"keyFields\": \"x\",\n          \"rendererId\": \"bokeh\",\n          \"handlerId\": \"lineChart\",\n          \"rowCount\": \"10000\"\n        }\n        </pd_options>\n    </div>\n</div>\n<div class=\"row\">\n    <div pd_widget=\"lag_slider\">\n        <pd_event_handler \n            pd_source=\"lagSlider\"\n pd_script=\"self.lag = eventInfo['value']\"\n pd_refresh=\"chart{{prefix}}\">\n        </pd_event_handler>\n    </div>\n</div>\n\"\"\"\n    def get_moving_average_df(self):\n        ma = self.parent_pixieapp.get_active_df()['Adj. Close'].rolling(window=self.lag).mean()\n        ma_df = pd.DataFrame(ma)\n        ma_df[\"x\"] = ma_df.index\n        return ma_df\n```", "```py\nimport statsmodels.tsa.api as smt\n@PixieApp\nclass AutoCorrelationSubApp(BaseSubApp):\n    @route()\n    @BaseSubApp.add_ticker_selection_markup(['chart_acf{{prefix}}', 'chart_pacf{{prefix}}'])\n    def main_screen(self):\n        return \"\"\"\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"col-sm-6\">\n        <div class=\"page-header text-center\">\n            <h1>Auto-correlation Function</h1>\n        </div>\n        <div id=\"chart_acf{{prefix}}\" pd_render_onload pd_options=\"show_acf=true\">\n        </div>\n    </div>\n    <div class=\"col-sm-6\">\n        <div class=\"page-header text-center\">\n            <h1>Partial Auto-correlation Function</h1>\n        </div>\n        <div id=\"chart_pacf{{prefix}}\" pd_render_onload pd_options=\"show_pacf=true\">\n        </div>\n    </div>\n</div> \n\n<div class=\"row\">\n    <div pd_widget=\"lag_slider\">\n        <pd_event_handler \n            pd_source=\"lagSlider\"\n            pd_script=\"self.lag = eventInfo['value']\"\n            pd_refresh=\"chart_acf{{prefix}},chart_pacf{{prefix}}\">\n        </pd_event_handler>\n    </div>\n</div>\n\"\"\"\n @route(show_acf='*')\n @captureOutput\n    def show_acf_screen(self):\n        smt.graphics.plot_acf(self.parent_pixieapp.get_active_df()['Adj. Close'], lags=self.lag)\n\n @route(show_pacf='*')\n @captureOutput\n    def show_pacf_screen(self):\n        smt.graphics.plot_pacf(self.parent_pixieapp.get_active_df()['Adj. Close'], lags=self.lag)\n```", "```py\ntrain_set, test_set = msft[:-14], msft[-14:]\n```", "```py\nlogmsft = np.log(train_set['Adj. Close'])\nlogmsft.index = train_set['Date']\nlogmsft_diff = pd.DataFrame(logmsft - logmsft.shift()).reset_index()\nlogmsft_diff.dropna(inplace=True)\ndisplay(logmsft_diff)\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\nimport pprint\n\nad_fuller_results = adfuller(\nlogmsft_diff['Adj. Close'], autolag = 'AIC', regression = 'c'\n)\nlabels = ['Test Statistic','p-value','#Lags Used','Number of Observations Used']\npp = pprint.PrettyPrinter(indent=4)\npp.pprint({labels[i]: ad_fuller_results[i] for i in range(4)})\n```", "```py\n{\n    'Number of lags used': 3,\n    'Number of Observations Used': 8057,\n    'Test statistic': -48.071592138591136,\n    'MacKinnon's approximate p-value': 0.0\n}\n```", "```py\nimport statsmodels.tsa.api as smt\nsmt.graphics.plot_acf(logmsft_diff['Adj. Close'], lags=100)\nplt.show()\n```", "```py\nsmt.graphics.plot_pacf(logmsft_diff['Adj. Close'], lags=100)\nplt.show()\n```", "```py\nfrom statsmodels.tsa.arima_model import ARIMA\n\nimport warnings\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    arima_model_class = ARIMA(train_set['Adj. Close'], dates=train_set['Date'], order=(1,1,1))\n    arima_model = arima_model_class.fit(disp=0)\n\n    print(arima_model.resid.describe())\n```", "```py\ncount    8.061000e+03\nmean    -5.785533e-07\nstd      4.198119e-01\nmin     -5.118915e+00\n25%     -1.061133e-01\n50%     -1.184452e-02\n75%      9.848486e-02\nmax      5.023380e+00\ndtype: float64\n```", "```py\ndef plot_predict(model, dates_series, num_observations):\n    fig = plt.figure(figsize = (12,5))\n    model.plot_predict(\n        start = str(dates_series[len(dates_series)-num_observations]),\n        end = str(dates_series[len(dates_series)-1])\n    )\n    plt.show()\n\nplot_predict(arima_model, train_set['Date'], 100)\nplot_predict(arima_model, train_set['Date'], 10)\n```", "```py\ndef compute_test_set_predictions(train_set, test_set):\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        history = train_set['Adj. Close'].values\n        forecast = np.array([])\n        for t in range(len(test_set)):\n            prediction = ARIMA(history, order=(1,1,0)).fit(disp=0).forecast()\n            history = np.append(history, test_set['Adj. Close'].iloc[t])\n            forecast = np.append(forecast, prediction[0])\n        return pd.DataFrame(\n {\"forecast\": forecast,\n \"test\": test_set['Adj. Close'],\n \"Date\": pd.date_range(start=test_set['Date'].iloc[len(test_set)-1], periods = len(test_set))\n }\n )\n\nresults = compute_test_set_predictions(train_set, test_set)\ndisplay(results)\n```", "```py\nfrom sklearn.metrics import mean_squared_error\ndef compute_mean_squared_error(test_series, forecast_series):\n    return mean_squared_error(test_series, forecast_series)\n\nprint('Mean Squared Error: {}'.format(\ncompute_mean_squared_error( test_set['Adj. Close'], results.forecast))\n)\n```", "```py\nMean Squared Error: 6.336538843075749\n```", "```py\n[[StockExplorer]]\n@route(explore=\"*\")\n@templateArgs\ndef stock_explore_screen(self):\n   tabs = [(\"Explore\",\"StockExploreSubApp\"),\n           (\"Moving Average\", \"MovingAverageSubApp\"),\n           (\"ACF and PACF\", \"AutoCorrelationSubApp\"),\n (\"Forecast with ARIMA\", \"ForecastArimaSubApp\")]\n   ...\n```", "```py\nfrom statsmodels.tsa.arima_model import ARIMA\n\n@PixieApp\nclass ForecastArimaSubApp(BaseSubApp):\n    def setup(self):\n        self.entity_dataframe = self.parent_pixieapp.get_active_df().copy()\n        self.differencing = False\n\n    def set_active_ticker(self, ticker):\n BaseSubApp.set_active_ticker(self, ticker)\n        self.setup()\n\n    @route()\n @BaseSubApp.add_ticker_selection_markup([])\n    def main_screen(self):\n        return \"\"\"\n<div class=\"page-header text-center\">\n    <h2>1\\. Data Exploration to test for Stationarity\n        <button class=\"btn btn-default\"\n                pd_script=\"self.toggle_differencing()\" pd_refresh>\n            {%if this.differencing%}Remove differencing{%else%}Add differencing{%endif%}\n        </button>\n        <button class=\"btn btn-default\"\n                pd_options=\"do_forecast=true\">\n            Continue to Forecast\n        </button>\n    </h2>\n</div>\n\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"col-sm-10\" id=\"chart{{prefix}}\" pd_render_onload pd_options=\"show_chart=Adj. Close\">\n    </div>\n</div>\n\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"col-sm-6\">\n        <div class=\"page-header text-center\">\n            <h3>Auto-correlation Function</h3>\n        </div>\n        <div id=\"chart_acf{{prefix}}\" pd_render_onload pd_options=\"show_acf=true\">\n        </div>\n    </div>\n    <div class=\"col-sm-6\">\n        <div class=\"page-header text-center\">\n            <h3>Partial Auto-correlation Function</h3>\n        </div>\n        <div id=\"chart_pacf{{prefix}}\" pd_render_onload pd_options=\"show_pacf=true\">\n        </div>\n    </div>\n</div>\n        \"\"\"\n```", "```py\n    [[BaseSubApp]]\n    def add_ticker_selection_markup(refresh_ids):\n            def deco(fn):\n                def wrap(self, *args, **kwargs):\n                    return \"\"\"\n    <div class=\"row\" style=\"text-align:center\">\n        <div class=\"btn-group btn-group-toggle\"\n             style=\"border-bottom:2px solid #eeeeee\"\n             data-toggle=\"buttons\">\n            {%for ticker, state in this.parent_pixieapp.tickers.items()%}\n            <label class=\"btn btn-secondary {%if this.parent_pixieapp.active_ticker == ticker%}active{%endif%}\"\n                pd_refresh=\\\"\"\"\" + \",\".join(refresh_ids) + \"\"\"\\\" pd_script=\"self.set_active_ticker('{{ticker}}')\">\n                <input type=\"radio\" {%if this.parent_pixieapp.active_ticker == ticker%}checked{%endif%}> \n                    {{ticker}}\n            </label>\n            {%endfor%}\n        </div>\n    </div>\n                    \"\"\" + fn(self, *args, **kwargs)\n                return wrap\n            return deco\n\n     def set_active_ticker(self, ticker):\n     self.parent_pixieapp.set_active_ticker(ticker)\n\n    ```", "```py\n[[ForecastArimaSubApp]]\ndef set_active_ticker(self, ticker):\n        BaseSubApp.set_active_ticker(self, ticker)\n        self.setup()\n```", "```py\n[[ForecastArimaSubApp]]\n@route()\n    @BaseSubApp.add_ticker_selection_markup([])\n    def main_screen(self):\n        return \"\"\"\n<div class=\"page-header text-center\">\n  <h2>1\\. Data Exploration to test for Stationarity\n    <button class=\"btn btn-default\"\n            pd_script=\"self.toggle_differencing()\" pd_refresh>\n    {%if this.differencing%}Remove differencing{%else%}Add differencing{%endif%}\n    </button>\n    <button class=\"btn btn-default\" pd_options=\"do_forecast=true\">\n        Continue to Forecast\n    </button>\n  </h2>\n</div>\n\n<div class=\"row\" style=\"min-height:300px\">\n  <div class=\"col-sm-10\" id=\"chart{{prefix}}\" pd_render_onload pd_options=\"show_chart=Adj. Close\">\n  </div>\n</div>\n\n<div class=\"row\" style=\"min-height:300px\">\n    <div class=\"col-sm-6\">\n        <div class=\"page-header text-center\">\n            <h3>Auto-correlation Function</h3>\n        </div>\n        <div id=\"chart_acf{{prefix}}\" pd_render_onload pd_options=\"show_acf=true\">\n        </div>\n    </div>\n    <div class=\"col-sm-6\">\n      <div class=\"page-header text-center\">\n         <h3>Partial Auto-correlation Function</h3>\n      </div>\n      <div id=\"chart_pacf{{prefix}}\" pd_render_onload pd_options=\"show_pacf=true\">\n      </div>\n    </div>\n</div>\n        \"\"\"\n```", "```py\ndef toggle_differencing(self):\n   if self.differencing:\n       self.entity_dataframe = self.parent_pixieapp.get_active_df().copy()\n       self.differencing = False\n   else:\n       log_df = np.log(self.entity_dataframe['Adj. Close'])\n       log_df.index = self.entity_dataframe['Date']\n       self.entity_dataframe = pd.DataFrame(log_df - log_df.shift()).reset_index()\n       self.entity_dataframe.dropna(inplace=True)\n       self.differencing = True\n```", "```py\n@route(show_acf='*')\n@captureOutput\ndef show_acf_screen(self):\n    smt.graphics.plot_acf(self.entity_dataframe['Adj. Close'], lags=50)\n\n@route(show_pacf='*')\n@captureOutput\ndef show_pacf_screen(self):\n    smt.graphics.plot_pacf(self.entity_dataframe['Adj. Close'], lags=50)\n```", "```py\n[[ForecastArimaSubApp]] \n@route(do_forecast=\"true\")\n @BaseSubApp.add_ticker_selection_markup([])\n    def do_forecast_screen(self):\n        return \"\"\"\n<div class=\"page-header text-center\">\n    <h2>2\\. Build Arima model\n        <button class=\"btn btn-default\"\n                pd_options=\"do_diagnose=true\">\n            Diagnose Model\n        </button>\n    </h2>\n</div>\n<div class=\"row\" id=\"forecast{{prefix}}\">\n    <div style=\"font-weight:bold\">Enter the p,d,q order for the ARIMA model you want to build</div>\n\n    <div class=\"form-group\" style=\"margin-left: 20px\">\n        <label class=\"control-label\">Enter the p order for the ARÂ model:</label>\n        <input type=\"text\" class=\"form-control\"\n               id=\"p_order{{prefix}}\"\n               value=\"1\" style=\"width: 100px;margin-left:10px\">\n\n        <label class=\"control-label\">Enter the d order for the Integrated step:</label>\n        <input type=\"text\" class=\"form-control\"\n               id=\"d_order{{prefix}}\" value=\"1\"\n               style=\"width: 100px;margin-left:10px\">\n\n        <label class=\"control-label\">Enter the q order for the MAÂ model:</label>\n        <input type=\"text\" class=\"form-control\" \n               id=\"q_order{{prefix}}\" value=\"1\"\n               style=\"width: 100px;margin-left:10px\">\n    </div>\n\n    <center>\n        <button class=\"btn btn-default\"\n               pd_target=\"forecast{{prefix}}\"\n            pd_options=\"p_order=$val(p_order{{prefix}});d_order=$val(p_order{{prefix}});q_order=$val(p_order{{prefix}})\">\n        Go\n        </button>\n    </center>\n</div>\n\"\"\"\n```", "```py\n    @route(plot_predict=\"true\")\n    @captureOutput\n    def plot_predict(self):\n        plot_predict(self.arima_model, self.train_set['Date'], 100)\n\n```", "```py\n@route(p_order=\"*\",d_order=\"*\",q_order=\"*\")\ndef build_arima_model_screen(self, p_order, d_order, q_order):\n    #Build the arima model\n    self.train_set = self.parent_pixieapp.get_active_df()[:-14]\n    self.test_set = self.parent_pixieapp.get_active_df()[-14:]\n    self.arima_model = ARIMA(\n        self.train_set['Adj. Close'], dates=self.train_set['Date'],\n        order=(int(p_order),int(d_order),int(q_order))\n    ).fit(disp=0)\n    self.residuals = self.arima_model.resid.describe().to_frame().reset_index()\n    return \"\"\"\n<div class=\"page-header text-center\">\n    <h3>ARIMA Model succesfully created</h3>\n<div>\n<div class=\"row\">\n    <div class=\"col-sm-10 col-sm-offset-3\">\n        <div pd_render_onload pd_options=\"plot_predict=true\">\n        </div>\n        <h3>Predicted values against the train set</h3>\n    </div>\n</div>\n<div class=\"row\">\n    <div pd_render_onload pd_entity=\"residuals\">\n        <pd_options>\n {\n \"handlerId\": \"tableView\",\n \"table_noschema\": \"true\",\n \"table_nosearch\": \"true\",\n \"table_nocount\": \"true\"\n }\n </pd_options>\n    </div>\n    <h3><center>Residual errors statistics</center></h3>\n<div>\n        \"\"\"\n```", "```py\n    def compute_test_set_predictions(self):\n        return compute_test_set_predictions(self.train_set, self.test_set)\n\n    @route(do_diagnose=\"true\")\n    @BaseSubApp.add_ticker_selection_markup([])\n    def do_diagnose_screen(self):\n        return \"\"\"\n<div class=\"page-header text-center\"><h2>3\\. Diagnose the model against the test set</h2></div>\n<div class=\"row\">\n    <div class=\"col-sm-10 center\" pd_render_onload pd_entity=\"compute_test_set_predictions()\">\n        <pd_options>\n {\n \"keyFields\": \"Date\",\n \"valueFields\": \"forecast,test\",\n \"handlerId\": \"lineChart\",\n \"rendererId\": \"bokeh\",\n \"noChartCache\": \"true\" \n }\n        </pd_options>\n    </div>\n</div>\n\"\"\"\n```"]