["```py\n((lambda (val1) \n  ((lambda (val2) \n    ((lambda (val3) (/ (* val1 val2) val3)) \n      expression3)) ; evaluated third\n      expression2))   ; evaluated second\n    expression1)      ; evaluated first\n\n```", "```py\nval data: RDD[People] = ...\ndata.map(person => (person.name, (person.age, 1)))\n.reduceByKey(_ |+| _)\n.mapValues { case (total, count) =>\n  total.toDouble / count\n}.collect()\n\n```", "```py\ndef pureFunc(cityName: String) = s\"I live in $cityName\"\ndef notpureFunc(cityName: String) = println(s\"I live in $cityName\")\n\n```", "```py\nassert(pureFunc(\"Dublin\") == \"I live in Dublin\")\n\n```", "```py\nscala> def pureMul(x: Int, y: Int) = x * y\npureMul: (x: Int, y: Int)Int \nscala> def notpureMul(x: Int, y: Int) = println(x * y)\nnotpureMul: (x: Int, y: Int)Unit\n\n```", "```py\ndef pureIncrease(x: Int) = x + 1\n\n```", "```py\nvarinc = 0\ndef impureIncrease() = {\n  inc += 1\n  inc\n}\n\n```", "```py\nscala> Seq.range(1,10).reduce(pureMul)\nres0: Int = 362880\n\n```", "```py\npackage com.chapter3.ScalaFP\n\nobject PureAndNonPureFunction {\n  def pureFunc(cityName: String) = s\"I live in $cityName\"\n  def notpureFunc(cityName: String) = println(s\"I live in $cityName\")\n  def pureMul(x: Int, y: Int) = x * y\n  def notpureMul(x: Int, y: Int) = println(x * y)  \n\n  def main(args: Array[String]) {\n    //Now call all the methods with some real values\n    pureFunc(\"Galway\") //Does not print anything\n    notpureFunc(\"Dublin\") //Prints I live in Dublin\n    pureMul(10, 25) //Again does not print anything\n    notpureMul(10, 25) // Prints the multiplicaiton -i.e. 250   \n\n    //Now call pureMul method in a different way\n    val data = Seq.range(1,10).reduce(pureMul)\n    println(s\"My sequence is: \" + data)\n  }\n}\n\n```", "```py\nI live in Dublin 250 \nMy sequence is: 362880\n\n```", "```py\ndef TransferMoney(money: Double, bankFee: Double => Double): Double = {\n  money + bankFee(money)\n}\n\n```", "```py\n TransferMoney(100, (amount: Double) => amount * 0.05)\n\n```", "```py\n105.0\n\n```", "```py\nTransferMoney(100, amount => amount * 0.05)\n\n```", "```py\n105.0\n\n```", "```py\nobject Test {\n  def main(args: Array[String]) {\n    println( testHOF( paramFunc, 10) )\n  }\n  def testHOF(func: Int => String, value: Int) = func(value)\n  def paramFunc[A](x: A) = \"[\" + x.toString() + \"]\"\n}\n\n```", "```py\ndef quarterMaker(value: Int): Double = value.toDouble/4\n\n```", "```py\ndef addTwo(value: Int): Int = value + 2\n\n```", "```py\ndef applyFuncOnRange(begin: Int, end: Int, func: Int => AnyVal): Unit = {\n  for (i <- begin to end)\n    println(func(i))\n}\n\n```", "```py\ndef TransferMoney(money: Double, bankFee: Double => Double): Double = {\n  money + bankFee(money)\n}\ndef bankFee(amount: Double) = amount * 0.05\n\n```", "```py\nTransferMoney(100, bankFee)\n\n```", "```py\n105.0\n\n```", "```py\npackage com.chapter3.ScalaFP\nobject HigherOrderFunction {\n  def quarterMaker(value: Int): Double = value.toDouble / 4\n  def testHOF(func: Int => String, value: Int) = func(value)\n  def paramFunc[A](x: A) = \"[\" + x.toString() + \"]\"\n  def addTwo(value: Int): Int = value + 2\n  def applyFuncOnRange(begin: Int, end: Int, func: Int => AnyVal): Unit = {\n    for (i <- begin to end)\n      println(func(i))\n  }\n  def transferMoney(money: Double, bankFee: Double => Double): Double = {\n    money + bankFee(money)\n  }\n  def bankFee(amount: Double) = amount * 0.05\n  def main(args: Array[String]) {\n    //Now call all the methods with some real values\n    println(testHOF(paramFunc, 10)) // Prints [10]\n    println(quarterMaker(20)) // Prints 5.0\n    println(paramFunc(100)) //Prints [100]\n    println(addTwo(90)) // Prints 92\n    println(applyFuncOnRange(1, 20, addTwo)) // Prints 3 to 22 and ()\n    println(TransferMoney(105.0, bankFee)) //prints 110.25\n  }\n}\n\n```", "```py\n[10] \n5.0 \n[100] \n92 \n3 4 5 6 7 8 9 10 11 12 13 14 15 16 1718 19 20 21 22 () \n110.25\n\n```", "```py\ndef transferMoney(money: Double) = {\n  if (money > 1000)\n    (money: Double) => \"Dear customer we are going to add the following\n                        amount as Fee: \"+money * 0.05\n  else\n    (money: Double) => \"Dear customer we are going to add the following\n                        amount as Fee: \"+money * 0.1\n} \nval returnedFunction = TransferMoney(1500)\nreturnedFunction(1500)\n\n```", "```py\nDear customer, we are going to add the following amount as Fee: 75.0\n\n```", "```py\npackage com.chapter3.ScalaFP\nobject FunctionAsReturnValue {\n  def transferMoney(money: Double) = {\n    if (money > 1000)\n      (money: Double) => \"Dear customer, we are going to add following\n                          amount as Fee: \" + money * 0.05\n    else\n      (money: Double) => \"Dear customer, we are going to add following\n                          amount as Fee: \" + money * 0.1\n  }  \n  def main(args: Array[String]) {\n    val returnedFunction = transferMoney(1500.0)\n    println(returnedFunction(1500)) //Prints Dear customer, we are \n                         going to add following amount as Fee: 75.0\n  }\n}\n\n```", "```py\nDear customer, we are going to add following amount as Fee: 75.0\n\n```", "```py\ndef curry[X,Y,Z](f:(X,Y) => Z) : X => Y => Z\n\n```", "```py\ndef uncurry[X,Y,Z](f:X => Y => Z): (X,Y) => Z\n\n```", "```py\ntrait Curry {\n  def curry[A, B, C](f: (A, B) => C): A => B => C\n  def uncurry[A, B, C](f: A => B => C): (A, B) => C\n}\n\n```", "```py\n\nobject CurryImplement extends Curry {\n  def uncurry[X, Y, Z](f: X => Y => Z): (X, Y) => Z = { (a: X, b: Y) => f(a)(b) }\n  def curry[X, Y, Z](f: (X, Y) => Z): X => Y => Z = { (a: X) => { (b: Y) => f(a, b) } }\n}\n\n```", "```py\nobject CurryingHigherOrderFunction {\n  def main(args: Array[String]): Unit = {\n    def add(x: Int, y: Long): Double = x.toDouble + y\n    val addSpicy = CurryImplement.curry(add) \n    println(addSpicy(3)(1L)) // prints \"4.0\"    \n    val increment = addSpicy(2) \n    println(increment(1L)) // prints \"3.0\"    \n    val unspicedAdd = CurryImplement.uncurry(addSpicy) \n    println(unspicedAdd(1, 6L)) // prints \"7.0\"\n  }\n}\n\n```", "```py\n4.0\n3.0\n7.0\n\n```", "```py\n//code something\nthrow new IllegalArgumentException(\"arg 2 was wrong...\");\n//nothing will be executed from here.\n\n```", "```py\ntry\n{\n  // your scala code should go here\n} \ncatch\n{\n  case foo: FooException => handleFooException(foo)\n  case bar: BarException => handleBarException(bar)\n  case _: Throwable => println(\"Got some other kind of exception\")\n}\nfinally\n{\n  // your scala code should go here, such as to close a database connection \n}\n\n```", "```py\npackage com.chapter3.ScalaFP\nimport java.io.IOException\nimport java.io.FileReader\nimport java.io.FileNotFoundException\n\nobject TryCatch {\n  def main(args: Array[String]) {\n    try {\n      val f = new FileReader(\"data/data.txt\")\n    } catch {\n      case ex: FileNotFoundException => println(\"File not found exception\")\n      case ex: IOException => println(\"IO Exception\") \n    } \n  }\n}\n\n```", "```py\nFile not found exception\n\n```", "```py\ntry {\n    val f = new FileReader(\"data/data.txt\")\n  } catch {\n    case ex: FileNotFoundException => println(\"File not found exception\")\n  } finally { println(\"Dude! this code always executes\") }\n}\n\n```", "```py\npackage com.chapter3.ScalaFP\nimport java.io.IOException\nimport java.io.FileReader\nimport java.io.FileNotFoundException\n\nobject TryCatch {\n  def main(args: Array[String]) {\n    try {\n      val f = new FileReader(\"data/data.txt\")\n    } catch {\n      case ex: FileNotFoundException => println(\"File not found \n                                                 exception\")\n      case ex: IOException => println(\"IO Exception\") \n    } finally {\n      println(\"Finally block always executes!\")\n    }\n  }\n}\n\n```", "```py\nFile not found exception \nFinally block always executes!\n\n```", "```py\npackage com.chapter3.ScalaFP\nimport java.net.URL\nimport scala.io.Source\nobject Either {\n  def getData(dataURL: URL): Either[String, Source] =\n    if (dataURL.getHost.contains(\"xxx\"))\n      Left(\"Requested URL is blocked or prohibited!\")\n    else\n      Right(Source.fromURL(dataURL))      \n  def main(args: Array[String]) {\n      val either1 = getData(new URL(\"http://www.xxx.com\"))    \n      println(either1)      \n      val either2 = getData(new URL(\"http://www.google.com\"))    \n      println(either2)\n  }\n}\n\n```", "```py\nLeft(Requested URL is blocked or prohibited!) Right(non-empty iterator)\n\n```", "```py\npackage com.chapter3.ScalaFP\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\nimport scala.concurrent.{Await, Future}\n\nobject RunOneTaskbutBlock {\n  def main(args: Array[String]) {\n    // Getting the current time in Milliseconds\n    implicit val baseTime = System.currentTimeMillis    \n    // Future creation\n    val testFuture = Future {\n      Thread.sleep(300)\n      2 + 2\n    }    \n    // this is the blocking part\n    val finalOutput = Await.result(testFuture, 2 second)\n    println(finalOutput)\n  }\n}\n\n```", "```py\njava.util.concurrent.TimeoutException\n\n```"]