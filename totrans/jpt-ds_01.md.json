["```py\nname = \"Dan Toomey\"\nstate = \"MA\"\nprint(name + \" lives in \" + state)\n```", "```py\nfrom numpy import * # set parameters S0 = 100. K = 105. T = 1.0 r = 0.05 sigma = 0.2 # how many samples we are using I = 100000 random.seed(103) z = random.standard_normal(I) ST = S0 * exp((r - 0.5 * sigma ** 2) * T + sigma * sqrt(T) * z) hT = maximum(ST - K, 0) C0 = exp(-r * T) * sum(hT) / I # tell user results print (\"Value of the European Call Option %5.3f\" % C0)\n```", "```py\nimport datetime import random # import gauss import math #import exp, sqrt random.seed(103) def generate_asset_price(S,v,r,T):\n return S * exp((r - 0.5 * v**2) * T + v * sqrt(T) * gauss(0,1.0)) def call_payoff(S_T,K):\n return max(0.0,S_T-K) S = 857.29 # underlying price v = 0.2076 # vol of 20.76% r = 0.0014 # rate of 0.14% T = (datetime.date(2013,9,21) - datetime.date(2013,9,3)).days / 365.0 K = 860. simulations = 90000 payoffs = [] discount_factor = math.exp(-r * T) for i in xrange(simulations):\n S_T = generate_asset_price(S,v,r,T) payoffs.append( call_payoff(S_T, K) ) price = discount_factor * (sum(payoffs) / float(simulations)) print ('Price: %.4f' % price)\n```", "```py\n##############################################\n# Biased/unbiased  recursion of heads OR tails\n##############################################\nimport numpy as np\nimport math\n\nN = 14     # number of flips\nm = 3      # length of run (must be  > 1 and <= N/2)\np = 0.5   # P(heads)\n\nprob = np.repeat(0.0,N)\nh = np.repeat(0.0,N)\nt = np.repeat(0.0,N)\n\nh[m] = math.pow(p,m)\nt[m] = math.pow(1-p,m)\nprob[m] = h[m] + t[m]\n\nfor n in range(m+1,2*m):\n h[n] = (1-p)*math.pow(p,m)\n t[n] = p*math.pow(1-p,m)\n prob[n] = prob[n-1] + h[n] + t[n]\n\nfor n in range(2*m,N):\n h[n] = ((1-p) - t[n-m] - prob[n-m-1]*(1-p))*math.pow(p,m)\n t[n] = (p - h[n-m] - prob[n-m-1]*p)*math.pow(1-p,m)\n prob[n] = prob[n-1] + h[n] + t[n]\n\nprob[N-1]  \n```", "```py\ncon <- url(\"http://www2.math.su.se/~esbj/GLMbook/moppe.sas\") data <- readLines(con, n = 200L, warn = FALSE, encoding = \"unknown\") close(con) ## Find the data range data.start <- grep(\"^cards;\", data) + 1L data.end   <- grep(\"^;\", data[data.start:999L]) + data.start - 2L table.1.2  <- read.table(text = data[data.start:data.end],\n header = FALSE, sep = \"\", quote = \"\", col.names = c(\"premiekl\", \"moptva\", \"zon\", \"dur\",\n \"medskad\", \"antskad\", \"riskpre\", \"helpre\", \"cell\"), na.strings = NULL, colClasses = c(rep(\"factor\", 3), \"numeric\", rep(\"integer\", 4), \"NULL\"), comment.char = \"\") rm(con, data, data.start, data.end) # Remainder of Script adds comments/descriptions comment(table.1.2) <-\n c(\"Title: Partial casco moped insurance from Wasa insurance, 1994--1999\", \"Source: http://www2.math.su.se/~esbj/GLMbook/moppe.sas\", \"Copyright: http://www2.math.su.se/~esbj/GLMbook/\") ## See the SAS code for this derived field table.1.2$skadfre = with(table.1.2, antskad / dur) ## English language column names as comments: comment(table.1.2$premiekl) <-\n c(\"Name: Class\", \"Code: 1=Weight over 60kg and more than 2 gears\", \"Code: 2=Other\") comment(table.1.2$moptva)   <-\n c(\"Name: Age\", \"Code: 1=At most 1 year\", \"Code: 2=2 years or more\") comment(table.1.2$zon)      <-\n c(\"Name: Zone\", \"Code: 1=Central and semi-central parts of Sweden's three largest cities\", \"Code: 2=suburbs and middle-sized towns\", \"Code: 3=Lesser towns, except those in 5 or 7\", \"Code: 4=Small towns and countryside, except 5--7\", \"Code: 5=Northern towns\", \"Code: 6=Northern countryside\", \"Code: 7=Gotland (Sweden's largest island)\") comment(table.1.2$dur)      <-\n c(\"Name: Duration\", \"Unit: year\") comment(table.1.2$medskad)  <-\n c(\"Name: Claim severity\", \"Unit: SEK\") comment(table.1.2$antskad)  <- \"Name: No. claims\" comment(table.1.2$riskpre)  <-\n c(\"Name: Pure premium\", \"Unit: SEK\") comment(table.1.2$helpre)   <-\n c(\"Name: Actual premium\", \"Note: The premium for one year according to the tariff in force 1999\", \"Unit: SEK\") comment(table.1.2$skadfre)  <-\n c(\"Name: Claim frequency\", \"Unit: /year\") ## Save results for later save(table.1.2, file = \"table.1.2.RData\") ## Print the table (not as pretty as the book) print(table.1.2)\n```", "```py\n       premiekl moptva zon    dur medskad antskad riskpre helpre    skadfre\n    1         1      1   1   62.9   18256      17    4936   2049 0.27027027\n    2         1      1   2  112.9   13632       7     845   1230 0.06200177\n    3         1      1   3  133.1   20877       9    1411    762 0.06761833\n    4         1      1   4  376.6   13045       7     242    396 0.01858736\n    5         1      1   5    9.4       0       0       0    990 0.00000000\n    6         1      1   6   70.8   15000       1     212    594 0.01412429\n    7         1      1   7    4.4    8018       1    1829    396 0.22727273\n    8         1      2   1  352.1    8232      52    1216   1229 0.14768532\n    9         1      2   2  840.1    7418      69     609    738 0.08213308\n    10        1      2   3 1378.3    7318      75     398    457 0.05441486\n```", "```py\n# make sure the packages we want to use are installed install.packages(c(\"data.table\", \"foreach\", \"ggplot2\"), dependencies = TRUE, repos = \"http://cran.us.r-project.org\") # load the data table we need if (!exists(\"table.1.2\"))\n load(\"table.1.2.RData\") library(\"foreach\") ## We are looking to reproduce table 2.7 which we start building here, ## add columns for our results. table27 <-\n data.frame(rating.factor = c(rep(\"Vehicle class\", nlevels(table.1.2$premiekl)), rep(\"Vehicle age\",   nlevels(table.1.2$moptva)), rep(\"Zone\",          nlevels(table.1.2$zon))), class = c(levels(table.1.2$premiekl), levels(table.1.2$moptva), levels(table.1.2$zon)), stringsAsFactors = FALSE) ## Calculate duration per rating factor level and also set the ## contrasts (using the same idiom as in the code for the previous ## chapter). We use foreach here to execute the loop both for its ## side-effect (setting the contrasts) and to accumulate the sums. # new.cols are set to claims, sums, levels new.cols <-\n foreach (rating.factor = c(\"premiekl\", \"moptva\", \"zon\"), .combine = rbind) %do% {\n nclaims <- tapply(table.1.2$antskad, table.1.2[[rating.factor]], sum) sums <- tapply(table.1.2$dur, table.1.2[[rating.factor]], sum) n.levels <- nlevels(table.1.2[[rating.factor]]) contrasts(table.1.2[[rating.factor]]) <- contr.treatment(n.levels)[rank(-sums, ties.method = \"first\"), ] data.frame(duration = sums, n.claims = nclaims) } table27 <- cbind(table27, new.cols) rm(new.cols) #build frequency distribution model.frequency <-\n glm(antskad ~ premiekl + moptva + zon + offset(log(dur)), data = table.1.2, family = poisson) rels <- coef( model.frequency ) rels <- exp( rels[1] + rels[-1] ) / exp( rels[1] ) table27$rels.frequency <-\n c(c(1, rels[1])[rank(-table27$duration[1:2], ties.method = \"first\")], c(1, rels[2])[rank(-table27$duration[3:4], ties.method = \"first\")], c(1, rels[3:8])[rank(-table27$duration[5:11], ties.method = \"first\")]) # note the severities involved model.severity <-\n glm(medskad ~ premiekl + moptva + zon, data = table.1.2[table.1.2$medskad > 0, ], family = Gamma(\"log\"), weights = antskad) rels <- coef( model.severity ) rels <- exp( rels[1] + rels[-1] ) / exp( rels[1] ) ## Aside: For the canonical link function use ## rels <- rels[1] / (rels[1] + rels[-1]) table27$rels.severity <-\n c(c(1, rels[1])[rank(-table27$duration[1:2], ties.method = \"first\")], c(1, rels[2])[rank(-table27$duration[3:4], ties.method = \"first\")], c(1, rels[3:8])[rank(-table27$duration[5:11], ties.method = \"first\")]) table27$rels.pure.premium <- with(table27, rels.frequency * rels.severity) print(table27, digits = 2)\n```", "```py\n       rating.factor class duration n.claims rels.frequency rels.severity\n    1  Vehicle class     1     9833      391           1.00          1.00\n    2  Vehicle class     2     8825      395           0.78          0.55\n    11   Vehicle age     1     1918      141           1.55          1.79\n    21   Vehicle age     2    16740      645           1.00          1.00\n    12          Zone     1     1451      206           7.10          1.21\n    22          Zone     2     2486      209           4.17          1.07\n    3           Zone     3     2889      132           2.23          1.07\n    4           Zone     4    10069      207           1.00          1.00\n    5           Zone     5      246        6           1.20          1.21\n    6           Zone     6     1369       23           0.79          0.98\n    7           Zone     7      148        3           1.00          1.20\n       rels.pure.premium\n    1               1.00\n    2               0.42\n    11              2.78\n    21              1.00\n    12              8.62\n    22              4.48\n    3               2.38\n    4               1.00\n    5               1.46\n    6               0.78\n    7               1.20\n```", "```py\n#library(s20x)\nlibrary(car)\n\n#read the dataset from an existing .csv file\ndf <- read.csv(\"C:/Users/Dan/grapeJuice.csv\",header=T)\n\n#list the name of each variable (data column) and the first six rows of the dataset\nhead(df)\n\n# basic statistics of the variables\nsummary(df)\n\n#set the 1 by 2 layout plot window\npar(mfrow = c(1,2))\n\n# boxplot to check if there are outliers\nboxplot(df$sales,horizontal = TRUE, xlab=\"sales\")\n\n# histogram to explore the data distribution shape\nhist(df$sales,main=\"\",xlab=\"sales\",prob=T)\nlines(density(df$sales),lty=\"dashed\",lwd=2.5,col=\"red\")\n\n#divide the dataset into two sub dataset by ad_type\nsales_ad_nature = subset(df,ad_type==0)\nsales_ad_family = subset(df,ad_type==1)\n\n#calculate the mean of sales with different ad_type\nmean(sales_ad_nature$sales)\nmean(sales_ad_family$sales)\n\n#set the 1 by 2 layout plot window\npar(mfrow = c(1,2))\n\n# histogram to explore the data distribution shapes\nhist(sales_ad_nature$sales,main=\"\",xlab=\"sales with nature production theme ad\",prob=T)\nlines(density(sales_ad_nature$sales),lty=\"dashed\",lwd=2.5,col=\"red\")\n\nhist(sales_ad_family$sales,main=\"\",xlab=\"sales with family health caring theme ad\",prob=T)\nlines(density(sales_ad_family$sales),lty=\"dashed\",lwd=2.5,col=\"red\")  \n```", "```py\n    sales           price           ad_type     price_apple \n    Min.   :131.0   Min.   : 8.200   Min.   :0.0   Min.   :7.300 \n    1st Qu.:182.5   1st Qu.: 9.585   1st Qu.:0.0   1st Qu.:7.438 \n    Median :204.5   Median : 9.855   Median :0.5   Median :7.580 \n    Mean   :216.7   Mean   : 9.738   Mean   :0.5   Mean   :7.659 \n    3rd Qu.:244.2   3rd Qu.:10.268   3rd Qu.:1.0   3rd Qu.:7.805 \n    Max.   :335.0   Max.   :10.490   Max.   :1.0   Max.   :8.290 \n    price_cookies \n    Min.   : 8.790 \n    1st Qu.: 9.190 \n    Median : 9.515 \n    Mean   : 9.622 \n    3rd Qu.:10.140 \n    Max.   :10.580 \n```"]