["```py\n{ \n \"cells\": [ \n { \n   \"cell_type\": \"code\", \n   \"execution_count\": null, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [] \n  } \n ], \n \"metadata\": { \n  \"kernelspec\": { \n   \"display_name\": \"Python 3\", \n   \"language\": \"python\", \n   \"name\": \"python3\" \n  }, \n  \"language_info\": { \n   \"codemirror_mode\": { \n    \"name\": \"ipython\", \n    \"version\": 3 \n   }, \n   \"file_extension\": \".py\", \n   \"mimetype\": \"text/x-python\", \n   \"name\": \"python\", \n   \"nbconvert_exporter\": \"python\", \n   \"pygments_lexer\": \"ipython3\", \n   \"version\": \"3.6.4\" \n  } \n }, \n \"nbformat\": 4, \n \"nbformat_minor\": 2 \n} \n```", "```py\n   name = \"Dan\" \n   age = 37 \n```", "```py\nprint(name + ' is ' + str(age) + ' years old.') \n```", "```py\n{ \n \"cells\": [ \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": null, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [ \n    \"name = \\\"Dan\\\"\\n\", \n    \"age = 37\" \n   ] \n  }, \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": null, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [ \n    \"print(name + ' is ' + str(age) + ' years old.')\" \n   ] \n  } \n ], \n \"metadata... as above \n```", "```py\n# import the datasets package \nfrom sklearn import datasets \n\n# pull in the iris data \niris_dataset = datasets.load_iris() \n# grab the first two columns of data \nX = iris_dataset.data[:, :2] \n\n# calculate some basic statistics \nx_count = len(X.flat) \nx_min = X[:, 0].min() - .5 \nx_max = X[:, 0].max() + .5 \nx_mean = X[:, 0].mean() \n\n# display our results \nx_count, x_min, x_max, x_mean \n```", "```py\n{ \n \"cells\": [ \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": 2, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [ \n    \"# import the datasets package\\n\", \n    \"from sklearn import datasets\" \n   ] \n  }, \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": 3, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [ \n    \"# pull in the iris data\\n\", \n    \"iris_dataset = datasets.load_iris()\\n\", \n    \"# grab the first two columns of data\\n\", \n    \"X = iris_dataset.data[:, :2]\" \n   ] \n  }, \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": 4, \n   \"metadata\": {}, \n   \"outputs\": [], \n   \"source\": [ \n    \"# calculate some basic statistics\\n\", \n    \"x_count = len(X.flat)\\n\", \n    \"x_min = X[:, 0].min() - .5\\n\", \n    \"x_max = X[:, 0].max() + .5\\n\", \n    \"x_mean = X[:, 0].mean()\" \n   ] \n  }, \n  { \n   \"cell_type\": \"code\", \n   \"execution_count\": 5, \n   \"metadata\": {}, \n   \"outputs\": [ \n    { \n     \"data\": { \n      \"text/plain\": [ \n       \"(300, 3.8, 8.4, 5.843333333333334)\" \n      ] \n     }, \n     \"execution_count\": 5, \n     \"metadata\": {}, \n     \"output_type\": \"execute_result\" \n    } \n   ], \n   \"source\": [ \n    \"# display our results\\n\", \n    \"x_count, x_min, x_max, x_mean\" \n   ] \n  } \n ]... \n```", "```py\nfrom pandas import * \ntraining_set = read_csv('train.csv') \ntraining_set.head() \nmale = training_set[training_set.Sex == 'male'] \nfemale = training_set[training_set.Sex =='female'] \nwomens_survival_rate = float(sum(female.Survived))/len(female) \nmens_survival_rate = float(sum(male.Survived))/len(male) \nwomens_survival_rate, mens_survival_rate\n```", "```py\nimport pandas \nimport matplotlib \n\n%matplotlib inline \n\n# define our two columns of data \nbaby_name = ['Alice','Charles','Diane','Edward'] \nnumber_births = [96, 155, 66, 272] \n\n# create a dataset from the to sets \ndataset = list(zip(baby_name,number_births)) \ndataset \n\n# create a Python dataframe from the dataset \ndf = pandas.DataFrame(data = dataset, columns=['Name', 'Number']) \ndf \n\n# plot the data \ndf['Number'].plot() \n```", "```py\n...{ \n   \"cell_type\": \"code\", \n   \"execution_count\": 4, \n   \"metadata\": {}, \n   \"outputs\": [ \n    { \n     \"data\": { \n      \"text/html\": [ \n       \"<div>\\n\", \n       \"<style scoped>\\n\", \n       \"    .dataframe tbody tr th:only-of-type {\\n\", \n       \"        vertical-align: middle;\\n\", \n       \"    }\\n\", \n       \"\\n\", \n       \"    .dataframe tbody tr th {\\n\", \n       \"        vertical-align: top;\\n\", \n       \"    }\\n\", \n       \"\\n\", \n       \"    .dataframe thead th {\\n\", \n       \"        text-align: right;\\n\", \n       \"    }\\n\", \n       \"</style>\\n\", \n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\", \n       \"  <thead>\\n\", \n       \"    <tr style=\\\"text-align: right;\\\">\\n\", \n       \"      <th></th>\\n\", \n       \"      <th>Name</th>\\n\", \n       \"      <th>Number</th>\\n\", \n       \"    </tr>\\n\",... \n```", "```py\n  { \n     { \n   \"cell_type\": \"code\", \n   \"execution_count\": 5, \n   \"metadata\": {}, \n   \"outputs\": [ \n    { \n     \"data\": { \n      \"text/plain\": [ \n       \"<matplotlib.axes._subplots.AxesSubplot at 0x1822deb44a8>\" \n      ] \n     }, \n     \"execution_count\": 5, \n     \"metadata\": {}, \n     \"output_type\": \"execute_result\" \n    }, \n    { \n     \"data\": { \n      \"image/png\": \"iVBORw0... \n\"<a hundred lines of hexcodes> \n...VTRitYII=\\n\", \n      \"text/plain\": [ \n       \"<matplotlib.figure.Figure at 0x1822e26a828>\" \n      ] \n     },... \n```", "```py\n# using pylab statistics and histogram\nimport pylab\nimport random\n\n# set random seed so we can reproduce results\nrandom.seed(113)\nsamples = 1000\n\n# declare our dataset store\ndice = []\n\n# generate and save the samples\nfor i in range(samples):\n    total = random.randint(1,6) + random.randint(1,6)\n    dice.append(total)\n\n# compute some statistics on the dice throws\nprint(\"Throw two dice\", samples, \"times.\")\nprint(\"Mean of\", pylab.mean(dice))\nprint(\"Median of\", pylab.median(dice))\nprint(\"Std Dev of\", pylab.std(dice))\n\n# display a histogram of the results\npylab.hist(dice, bins= pylab.arange(1.5,12.6,1.0))\npylab.xlabel(\"Pips\")\npylab.ylabel(\"Count\")\npylab.show()\n```"]