- en: Python Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a general-purpose programming and scripting language. Its simplicity
    and extensive libraries make it possible to develop an application that is compatible
    with the modern requirements of technology quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Python code is written in files with the suffix `.py`, and can be executed with
    the `python` command.
  prefs: []
  type: TYPE_NORMAL
- en: Python Hello World example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest program in Python prints a single line of text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comments are not executed in Python. They start with the `#` character, and
    end with the end of the line.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the data types available in Python are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numeric data types**: `int` and `float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text data types**: `str`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composite data types**: `tuple`, `list`, `set`, and `dictionary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: int
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `int` data type can hold only integer values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: float
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `float` data type can also hold non-integer rational values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A string variable can be used to store text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `tuple` data type is analogous to a vector in mathematics; for example, `tuple
    = (integer_number, float_number)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A list in Python is an ordered set of values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `Set` in Python is a non-ordered mathematical set of values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `dictionary` is a data structure that can store values by their keys.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Flow control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python programming language controls the flow of program execution through
    the use of conditionals, `for` loops (including the statements `break` and `continue` within
    them), and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Conditionals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a particular condition is met, a certain amount of code can be executed using
    the `if` statement. If the condition is not met, then we can execute the code
    following the `else` statement. If the first condition is not met, we can set
    the next condition for the code to be executed using the `elif` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**I****nput**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: For loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `for` loop facilitates iteration through every element in a set of elements,
    for example, `range`, `python set`, and `list`.
  prefs: []
  type: TYPE_NORMAL
- en: For loop on range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For loop on list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Break and continue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `for` loops can be exited earlier using the `break` statement. The remainder
    of the cycle in the `for` loop can be skipped using the `continue` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python supports the definition of functions, which is a good way to define a
    piece of code that can be executed at multiple places in the program. A function
    is defined using the `def` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Input and output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at how to pass arguments to a Python program and how to read and
    write to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Program arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can pass arguments to a program from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Reading and writing a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following program will write two lines to the `test.txt` `file`, then read
    them, and finally, print them to the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
