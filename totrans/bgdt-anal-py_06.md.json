["```py\n    import numpy as np\n    import pandas as pd\n    import seaborn as sns\n    import time\n    import re\n    import os\n    import matplotlib.pyplot as plt\n    sns.set(style=\"ticks\")\n    os.chdir(\"/Users/svk/Desktop/packt_exercises\")\n    ```", "```py\n    df = pd.read_csv('bank.csv', sep=';')\n    df.head(5)\n    print(df.shape)\n    df.head(5)\n    df.info()\n    df.describe()\n    ```", "```py\n    count_number_susbc = df[\"y\"].value_counts()\n    sns.barplot(count_number_susbc.index, count_number_susbc.values)\n    df['y'].value_counts()\n    ```", "```py\n    # histogram for age (using matplotlib)\n    plt.hist(df['age'], color = 'grey', edgecolor = 'black',\n             bins = int(180/5))\n    # histogram for age (using seaborn)\n    sns.distplot(df['age'], hist=True, kde=False, \n                 bins=int(180/5), color = 'blue',\n                 hist_kws={'edgecolor':'black'})\n    ```", "```py\n    # histogram for balance (using matplotlib)\n    plt.hist(df['balance'], color = 'grey', edgecolor = 'black',\n             bins = int(180/5))\n    # histogram for balance (using seaborn)\n    sns.distplot(df['balance'], hist=True, kde=False, \n                 bins=int(180/5), color = 'blue',\n                 hist_kws={'edgecolor':'black'})\n    ```", "```py\n    # barplot for the variable 'education'\n    count_number_susbc = df[\"education\"].value_counts()\n    sns.barplot(count_number_susbc.index, count_number_susbc.values)\n    df['education'].value_counts()\n    ```", "```py\n    # barplot for the variable 'month'\n    count_number_susbc = df[\"month\"].value_counts()\n    sns.barplot(count_number_susbc.index, count_number_susbc.values)\n    df['education'].value_counts()\n    ```", "```py\n    # generate separate list for each subscription type for age\n    x1 = list(df[df['y'] == 'yes']['age'])\n    x2 = list(df[df['y'] == 'no']['age'])\n    # assign colors for each subscription type \n    colors = ['#E69F00', '#56B4E9']\n    names = ['yes', 'no']\n    # plot the histogram\n    plt.hist([x1, x2], bins = int(180/15), density=True,\n             color = colors, label=names)\n    # plot formatting\n    plt.legend()\n    plt.xlabel('IV')\n    plt.ylabel('prob distr (IV) for yes and no')\n    plt.title('Histogram for Yes and No Events w.r.t. IV')\n    ```", "```py\n    df.groupby([\"month\", \"y\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(20,10))\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import seaborn as sns\n    import time\n    import re\n    import os\n    import matplotlib.pyplot as plt\n    sns.set(style=\"ticks\")\n    # set the working directory # in the example, the folder \n    # 'packt_exercises' is in the desktop\n    os.chdir(\"/Users/svk/Desktop/packt_exercises\")\n    # read the downloaded input data (marketing data)\n    df = pd.read_csv('bank.csv', sep=';')\n    ```", "```py\n    df['y'].replace(['yes','no'],[1,0],inplace=True)\n    df['default'].replace(['yes','no'],[1,0],inplace=True)\n    df['housing'].replace(['yes','no'],[1,0],inplace=True)\n    df['loan'].replace(['yes','no'],[1,0],inplace=True)\n    corr_df = df.corr()\n    sns.heatmap(corr_df, xticklabels=corr_df.columns.values, yticklabels=corr_df.columns.values, annot = True, annot_kws={'size':12})\n    heat_map=plt.gcf(); heat_map.set_size_inches(10,5)\n    plt.xticks(fontsize=10); plt.yticks(fontsize=10); plt.show()\n    ```", "```py\n    # import DecisionTreeClassifier from sklearn and \n    # BorutaPy from boruta\n    import numpy as np\n    from sklearn.ensemble import RandomForestClassifier\n    from boruta import BorutaPy\n    # transform all categorical data types to integers (hot-encoding)\n    for col_name in df.columns:\n        if(df[col_name].dtype == 'object'):\n            df[col_name]= df[col_name].astype('category')\n            df[col_name] = df[col_name].cat.codes\n    # generate separate dataframes for IVs and DV (target variable)\n    X = df.drop(['y'], axis=1).values\n    Y = df['y'].values\n    # build RandomForestClassifier, Boruta models and\n    # related parameter\n    rfc = RandomForestClassifier(n_estimators=200, n_jobs=4, class_weight='balanced', max_depth=6)\n    boruta_selector = BorutaPy(rfc, n_estimators='auto', verbose=2)\n    n_train = len(X)\n    # fit Boruta algorithm\n    boruta_selector.fit(X, Y)\n    ```", "```py\n    feature_df = pd.DataFrame(df.drop(['y'], axis=1).columns.tolist(), columns=['features'])\n    feature_df['rank']=boruta_selector.ranking_\n    feature_df = feature_df.sort_values('rank', ascending=True).reset_index(drop=True)\n    sns.barplot(x='rank',y='features',data=feature_df)\n    feature_df\n    ```"]