["```py\n    url = 'https://jupyter.org/'\n    req = requests.Request('GET', url) req.headers['User-Agent'] = 'Mozilla/5.0'\n    req = req.prepare()\n    ```", "```py\n    with requests.Session() as sess: page = sess.send(req)\n    ```", "```py\n    from bs4 import BeautifulSoup\n    print(BeautifulSoup(page_html, 'html.parser').prettify() [:1000])\n    ```", "```py\n    from IPython.display import HTML HTML(page_html)Here, we see the HTML rendered as well as possible, given that no JavaScript code has been run and no external resources have loaded. For example, the images that are hosted on the jupyter.org server are not rendered and we instead see the alt text: circle of programming icons, Jupyter logo, and so on. \n    ```", "```py\n    from IPython.display import IFrame IFrame(src=url, height=800, width=800)\n    ```", "```py\n    url = 'http://www.python.org/' page = requests.get(url)\n    page\n    <Response [200]>\n    ```", "```py\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(page.content, 'html.parser')\n    ```", "```py\n    try:\n    import pdir dir = pdir\n    except:\n    print('You can install pdir with:\\npip install pdir2') dir(soup)\n    ```", "```py\n    h1 = soup.find_all('h1') h1\n    >> [<h1 class=\"firstHeading\" id=\"firstHeading\" lang=\"en\">List of countries by central bank interest rates</h1>]\n    ```", "```py\n    imgs = soup.find_all('img') len(imgs)\n    >> 91\n    ```", "```py\n    [element.attrs['src'] for element in imgs if 'src' in element.attrs.keys()]\n    ```", "```py\n    body_content = soup.find('div', {'id': 'bodyContent'})\n    ```", "```py\n    table_headers = body_content.find_all('th')[:3] table_headers\n    >>> [<th>Country or<br/>\n    currency union</th>, <th>Central bank<br/> interest rate (%)</th>, <th>Date of last<br/> change</th>]\n    ```", "```py\n    table_headers = [element.get_text().replace('\\n', ' ')\n    for element in table_headers]\n    table_headers\n    >> ['Country or currency union', 'Central bank interest rate (%)', 'Date of last change']\n    ```", "```py\n    row_number = 2\n    d1, d2, d3 = body_content.find_all('tr')[row_number]\\\n    .find_all('td')\n    ```", "```py\n    d3.find_all('span')[1].text\n    >> '30 June 2016'\n    ```", "```py\n    data = []\n    for i, row in enumerate(body_content.find_all('tr')):\n    ...\n    ...\n    >> Ignoring row 101 because len(data) != 3\n    >> Ignoring row 102 because len(data) != 3\n    ```", "```py\n    >> [['Albania', 1.25, '4 May 2016'],\n    ['Angola', 16.0, '30 June 2016'],\n    ['Argentina', 26.25, '11 April 2017'],\n    ['Armenia', 6.0, '14 February 2017'],\n    ['Australia', 1.5, '2 August 2016'],\n    ['Azerbaijan', 15.0, '9 September 2016'],\n    ['Bahamas', 4.0, '22 December 2016'],\n    ['Bahrain', 1.5, '14 June 2017'],\n    ['Bangladesh', 6.75, '14 January 2016'],\n    ['Belarus', 12.0, '28 June 2017']]\n    ```", "```py\n    f_path = '../data/countries/interest-rates.csv' with open(f_path, 'w') as f:\n    f.write('{};{};{}\\n'.format(*table_headers)) for d in data:\n    f.write('{};{};{}\\n'.format(*d))\n    ```", "```py\n    with open('../data/countries/interest-rates.csv', 'r') as f:\n    int_rates_col_names = next(f).split(',')\n    int_rates = [line.split(',') for line in f.read(). splitlines()]\n    with open('../data/countries/populations.csv', 'r') as f: populations_col_names = next(f).split(',')\n    populations = [line.split(',') for line in f.read(). splitlines()]\n    ```", "```py\n    print(int_rates_col_names) int_rates[:5]\n    >> ['Country or currency union', 'Central bank interest ...\n    ...\n    ['Indonesia', '263', '991', '379', '1.10 %'],\n    ['Brazil', '209', '288', '278', '0.79 %']]\n    ```", "```py\n    df_int_rates = pd.DataFrame(int_rates, columns=int_rates_ col_names)\n    df_populations = pd.DataFrame(populations, columns=populations_col_names)\n    ```", "```py\n    pd.options.display.max_rows = 10\n    ```", "```py\n    df_int_rates\n    ```", "```py\n    df_int_rates.dtypes \t\t\t\t\n    >> Country or currency union\t\tobject\n    >> Central bank interest rate (%)\t\tobject\t\n    >> Date of last change\t\t\tobject\n    >> dtype: object\n    ```", "```py\n    df_int_rates['Central bank interest rate (%)'] = \\ df_int_rates['Central bank interest rate (%)']\\\n    .astype(float, copy=False)\n    df_int_rates['Date of last change'] = \\ pd.to_datetime(df_int_rates['Date of last change'])\n    ```", "```py\n    df_int_rates.dtypes\n    >> Country or currency union\t\t\t\t\tobject\n    >> Central bank interest rate (%)\t\t\t\tfloat64\n    >> Date of last change\t\t\t\t\tdatetime64[ns]\t\n    >> dtype: object\n    ```", "```py\n    df_population\n    ```", "```py\n    df_populations['Population (2017)'] = df_populations['Population (2017)']\\\n    .str.replace(',', '')\\\n    .astype(float, copy=False)\n    df_populations['Yearly Change'] = df_populations['Yearly Change']\\\n    .str.rstrip('%')\\\n    .astype(float, copy=False)\n    ```", "```py\n    df_merge = pd.merge(df_populations,\n    df_int_rates,\n    left_on='Country (or dependency)', right_on='Country or currency union', how='outer'\n    df_merge\n    ```", "```py\n    df_merge.sort_values('Population (2017)', ascending=False)\\\n    .head(10)\n    ```", "```py\n    col = 'Country (or dependency)'\n    df_populations.loc[df_populations[col] == 'U.S.'] = 'United States'\n    ```", "```py\n    df_merge = pd.merge(df_populations,\n    df_int_rates,\n    left_on='Country (or dependency)', right_on='Country or currency union',\n    how='inner')\n    ```", "```py\n    del df_merge['Country or currency union']\n    ```", "```py\n    name_map = {'Country (or dependency)': 'Country', 'Population (2017)': 'Population',\n    'Central bank interest rate (%)': 'Interest\n    rate'}\n    df_merge = df_merge.rename(columns=name_map)\n    ```", "```py\n    df_merge.to_csv('../data/countries/merged.csv', index=False)\n    ```", "```py\n    from bokeh.plotting import figure, show, output_notebook output_notebook()\n    ```", "```py\n    np.random.seed(30)\n    data = pd.Series(np.random.randn(200),\n    index=list(range(200)))\\\n    .cumsum() x = data.index\n    y = data.values\n    ```", "```py\n    p = figure(title='Example plot', x_axis_label='x', y_axis_ label='y')p.line(x, y, legend='Random trend') show(p)\n    ```", "```py\n    size = np.random.rand(200) * 5\n    p = figure(title='Example plot', x_axis_label='x', y_axis_ label='y')\n    p.circle(x, y, radius=size, alpha=0.5, legend='Random dots')\n    show(p)\n    ```", "```py\n    from bokeh.plotting import ColumnDataSource from bokeh.models import HoverTool\n    ```", "```py\n    source = ColumnDataSource(data=dict( x=x,\n    y=y,\n    ...\n    ...\n    source=source,\n    legend='Random dots')\n    show(p)\n    ```", "```py\n    from bokeh.models import PanTool, BoxZoomTool, WheelZoomTool, ResetTool\n    ...\n    ...\n    legend='Random dots')\n    show(p)\n    ```"]