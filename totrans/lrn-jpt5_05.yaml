- en: Jupyter Java Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java is a high-level programming language that was originally developed by Sun
    Microsystems, and is currently owned by Oracle. Java is a cross-platform, compiled
    language that can be executed on a variety of platforms. Java is cross-platform
    since it generates **p-code**, which is interpreted by a resident-specific version
    of Java, the **Java Virtual Machine** (**JVM**).
  prefs: []
  type: TYPE_NORMAL
- en: Java is distributed by using a **Java Runtime Executable** (**JRE**) for those
    that only need to execute programs that are written. Otherwise, there's a **Java
    Development Kit** (**JDK**) for those developing Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Java kernel to Jupyter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Hello World Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Java in Jupyter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Major caveat is this does not work on a Windows environment. A Java Notebook
    will not start on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Java kernel to your installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add the Java kernel to your installation. The steps
    are very similar, regardless of whether you're installing in a Windows or a macOS
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: The Java kernel, IJava, was developed and maintained by Spence Park at [https://github.com/SpencerPark/IJava](https://github.com/SpencerPark/IJava).
    There are a couple of requirements for using the Java kernel, which will be covered
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java 9 or later
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the version of Java you have installed by using the following
    command at a command-line prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We need version 9 or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the installed version must be a JDK. The JRE will not suffice. You can
    download the latest Java version at [www.oracle.com/technetwork/java](http://www.oracle.com/technetwork/java).
    At the time of writing this book, version 10 was generally available so I installed
    that version, as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27ffc1d4-cef0-44eb-a8df-85c44bd01371.png)'
  prefs: []
  type: TYPE_IMG
- en: A Jupyter environment is required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This may sound redundant, but this is broad, allowing IJava to run in Jupyter,
    **JupyterLab**, or **nteract** all Jupyter environments, depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IJava
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have installed Java, you need to configure IJava.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the IJava project from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can download the `IJava` extension from GitHub by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d2707ae9-75c5-469e-9f5d-e2a2e46b0e66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `git clone` command downloads the project files into the `IJava` directory
    where you are located (in my case, this is my default user directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command just relocates into the `IJava` directory that was downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing the kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the commands for the particular operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '***nix**: `chmod u+x gradlew && ./gradlew installKernel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: `gradlew installKernel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradlew` is a Windows version of Gradle, a popular scripting system. Gradle
    is adept at installing software. `gradlew` was installed as part of the `git clone`
    command that you ran earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9997ff61-10d7-4eee-901d-86f57efe3c7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, as you can see from the install output, IJava really expects Java 9 to
    be installed. Java 9 is no longer a supported version from Oracle. We need to
    configure the tool to use Java 10\. In my case, I had previously installed Java
    and had set the environment variable, `JAVA_HOME`, to the older version. Changing
    the environment variable to point to the Java 10 install worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d48eff6c-de19-4fd6-b49b-9e6282576503.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when we look at the list of kernels, we can see that Java is available
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After the execution of the preceding command we will see the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1727c709-48b4-479c-8273-20da96bf0679.png)'
  prefs: []
  type: TYPE_IMG
- en: Available options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with other Java installations, we can set a number of Java-specific environment
    variables as desired:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Setting** | **Default value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_VM_OPTS` | `""` | A space delimited list of command-line options that
    would be passed to the `java` command if running code. For example, we would use `-Xmx128m`
    to set a limit on the heap size or `-ea` to enable `assert` statements. |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_COMPILER_OPTS` | `""` | A space delimited list of command-line options
    that would be passed to the `javac` command when compiling a project. For example,
    `-parameters` to enable retaining parameter names for reflection. |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_TIMEOUT` | `1` | A duration in milliseconds, specifying a timeout
    on long-running code. If less than zero, the timeout is disabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_CLASSPATH` | `""` | `-`, a file path separator delimited list of `classpath`
    entries that should be available to the user code. |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_STARTUP_SCRIPTS_PATH` | `""` | A file path seperator delimited list
    of `.jshell` scripts to run on startup. This includes `ijava-jshell-init.jshell`
    and `ijava-magics-init.jshell`. |'
  prefs: []
  type: TYPE_TB
- en: '| `IJAVA_STARTUP_SCRIPT` | `""` | A block of Java code to run when the kernel
    starts up. This may be something like `import my.utils;` to set up some default
    imports or even `void sleep(long time) { try {Thread.sleep(time)} catch (InterruptedException
    e) {}}` to declare a default `utility` method to use in the Notebook. |'
  prefs: []
  type: TYPE_TB
- en: As you can tell from the preceding descriptions, none of these are required
    to get a working Java application running. They are normally for special-case
    handling.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Java console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can run Jupyter in `console` mode, meaning that command lines can be entered
    directly rather than in a new Notebook in a browser. The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that you can start Jupyter in a console window using the Java kernel.
    We will see a window like the following one, where we can enter some Java code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d30f72a-f7c9-457e-be03-9b0214e87a3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Odd interface lines of the command-line interface screen react as if they are
    part of a Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: But this is not normal Java. There are no semicolons at the end of lines. Semicolons
    are optional for single-line Java statements.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the single line `hello` is just the reference to the `hello` variable.
    I am not sure what is causing this to echo into the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can extract this snippet into a Java Notebook with similar results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f4f25cf-e749-4888-a248-b253a5c09ad9.png)'
  prefs: []
  type: TYPE_IMG
- en: Jupyter Java output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Java implementation is able to differentiate between `stdout` and `stderr`,
    as can be seen with the following small code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When run in a Notebook, the `stderr` output is colored red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bbc5544-2a45-4982-8502-92e14cfaa512.png)'
  prefs: []
  type: TYPE_IMG
- en: Java Optional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many a programmer has been bitten by `NullPointerException`. While occurring
    less in Java than C or C++, it may still occur. Now, Java has the idea of an `Optional`
    field. An `Optional` field may or may not contain a value. You can test whether
    there is a value present or not rather than the awkward `null` tests that exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run through several aspects of `Optional` by using the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have a standard preamble to the class to `import` libraries as needed. In
    this case, we will just use the `Optional` package.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a Java class with a static `main` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `main()` function that we defined previously is also nonstandard Java. The
    signature should be `public static void main(String[] args)`.
  prefs: []
  type: TYPE_NORMAL
- en: First, the `main` function creates an instance of the class (as we will want
    to reference other parts of the class later on).
  prefs: []
  type: TYPE_NORMAL
- en: We then create two variables, one that is the evil `null` value.
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional` has two methods which do the same thing, but behave differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ofNullable`: Takes an argument, that may be `null`, and creates an `Optional`
    field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`of`: Takes an argument, which can not be `null`, and creates an `Optional`
    field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now have two `Optional` fields that we pass to the `sum()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `sum` function uses the `orElse()` function on each `Optional` field, expecting
    one or both to be `null` and providing a safe passage in those cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it is a simple case of mathematics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34a875f0-38ed-43b7-9752-4e01ed3f0794.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding output, the first parameter is `null`, but due
    to the `orElse` function, the function continues to process the results.
  prefs: []
  type: TYPE_NORMAL
- en: Java compiler errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any regular Java program, there may be compile-time errors in your coding.
    Jupyter Java provides similar feedback, with line numbers corresponding to the
    lines in your Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when I first entered the snippet for an example that we will look
    at a little later on in this chapter, there were a couple of errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/297808c2-705e-4846-ae7d-9e340e67ed8d.png)'
  prefs: []
  type: TYPE_IMG
- en: The first error was attempting to call the `sort` function from a `static` method.
    The second error was attempting to use the wrong function name. Both of these
    errors are typical types of compile errors you may see when developing Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: Java lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lambdas provide a clear and concise way to represent one method interface using
    an expression. Lambdas are usually developed singularly. Lambdas can look very
    close to earlier Java implementations or completely foreign, as can be seen in
    the following example. We develop lambdas using more and more terse syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cf9d275-c185-4740-a627-41cb90250ecd.png)'
  prefs: []
  type: TYPE_IMG
- en: All three lambdas perform the same step (as can be seen in the preceding output).
    However, the implementation is progressively more non-Java looking.
  prefs: []
  type: TYPE_NORMAL
- en: Java Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Collections went through a major rework in the last few releases of Java.
    You can now use a lambda function to describe your comparison point. If that addressed
    object has the built-in `compareTo` function (all of the standard Java objects
    do), then you are done.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we build a list of strings (country names) and pass that list
    to the `Collections.sort` routine. The `sort` routine becomes very minor, invoking
    the built-in `compareTo` functions for `String` in Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/594c971d-c63f-47b4-8b18-77dcb6021a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: When we run, we can see the results in a sorted order.
  prefs: []
  type: TYPE_NORMAL
- en: There is likely a way to do this without modifying the passed-in array.
  prefs: []
  type: TYPE_NORMAL
- en: Java streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java streams was a significant improvement with Java 8\. Now, Java is able to
    deal with streams of information flow in a functional manner. In this example,
    we will use stream in several small examples to show the power of the feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet we are using is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The code uses a collection (`stream`) of numbers for several stream operations.
    Streams have many more functions built-in to them:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we use `filter` to pick out the elements of interest
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use count to find out how many elements are in the stream
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use a lambda function to find the smallest element in the stream
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we use another lambda to sort the stream elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we use collect and use `summingInt` to add up all of the elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A summary is produced of the stream—this is a built-in function of streams
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we use `map` and `flatMap` to perform projections (growth) on the stream
    elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The coding and output look like the following (I added horizontal lines to
    break up the output so that it''s more readable):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/232c84b1-c470-4381-bec7-7d4b2785f225.png)'
  prefs: []
  type: TYPE_IMG
- en: I have cut off the display as the rest is consistent with expectations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, in the following output, I have not displayed all of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25ddec77-f997-4e13-bec4-7df0242c8842.png)'
  prefs: []
  type: TYPE_IMG
- en: Java summary statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java can produce summary statistics for a collection. We can retrieve the `Iris`
    dataset and put it into a collection before producing the statistics directly.
  prefs: []
  type: TYPE_NORMAL
- en: I have copied the file from [http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data](http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data)
    to make the processing a little smoother.
  prefs: []
  type: TYPE_NORMAL
- en: We read in the `Iris` data and then call upon collections to produce a summary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code is parsing out each row of the `iris` data into an `Iris` object, and
    is adding that `Iris` object to an array.
  prefs: []
  type: TYPE_NORMAL
- en: The main routine then calls upon the collections to produce a summary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coding looks like the following, where we have `Iris` as a separate object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95dd4d7c-8f6b-49c7-962a-55f7a75b8ea2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the main coding of the routine to read in the flower information and
    produce statistics is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a6bf48d-1c39-4fe8-a66c-29b2b9c508ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tail of the output looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9417a600-7b4d-4457-b7dd-af2e35c483ee.png)'
  prefs: []
  type: TYPE_IMG
- en: This kind of processing is much easier to accomplish in the other engines that
    are available in Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw the steps to install the Java engine into Jupyter. We
    saw examples of the different output presentations available from Java in Jupyter.
    Then, we investigated using `Optional` fields. We saw what a compile error looks
    like in Java in Jupyter. Next, we saw several examples of lambdas. We used collections
    for several purposes. Lastly, we generated summary statistics for one of the `Iris`
    dataset points.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to create interactive widgets that
    can be used in your Notebook.
  prefs: []
  type: TYPE_NORMAL
