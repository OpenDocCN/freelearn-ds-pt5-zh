["```py\n> a<-c(2,5) \n> b<-c(3,7) \n> z<-rbind(a,b) \n> dist(z, method = \"euclidean\") \n a \nb 2.236068 \n> plot(z,lwd=20) \n```", "```py\n> angles<-seq(0,380,30) \n> y<-cos(angles) \n> y2<-round(y,2) \n> z<-cbind(angles,y2) \n> colnames(z)<-c(\"ANGLE\",\"cos(angle)\") \n> print(z) \n ANGLE cos(angle) \n [1,]     0       1.00 \n [2,]    30       0.15 \n [3,]    60      -0.95 \n [4,]    90      -0.45 \n [5,]   120       0.81 \n [6,]   150       0.70 \n [7,]   180      -0.60 \n [8,]   210      -0.88 \n [9,]   240       0.33 \n[10,]   270       0.98 \n[11,]   300      -0.02 \n[12,]   330      -0.99 \n[13,]   360      -0.28 \n```", "```py\n> data <- rbind(c(180,20), c(160,5), c(60, 150), c(160,60), c(80,120)) \n> plot(data, col = \"red\", lwd = 20) \n```", "```py\n> library(cluster) \n> data <- rbind(c(180,20), c(160,5), c(60, 150), c(160,60), c(80,120)) \n> output<-clara(data,2) \n> output$clustering \n[1] 1 1 2 1 2 \n> output$medoids \n [,1] [,2] \n[1,]  180   20 \n[2,]   80  120 \n```", "```py\n> library(cluster) \n> data(animals) \n> dim(animals) \n[1] 20  6 \n> head(animals) \n war fly ver end gro hai \nant   1   1   1   1   2   1 \nbee   1   2   1   1   2   2 \ncat   2   1   2   1   1   2 \ncpl   1   1   1   1   1   2 \nchi   2   1   2   2   2   2 \ncow   2   1   2   1   2   2 \n> colnames(animals) \n[1] \"war\" \"fly\" \"ver\" \"end\" \"gro\" \"hai\" \n> apply(animals,2, table) # simple overview \n war fly ver end gro hai \n1  10  16   6  12   6  11 \n2  10   4  14   6  11   9 \n```", "```py\nma <- mona(animals)\nma\n```", "```py\nplot(ma) \n```", "```py\n> require(cluster) \n> data(animals) \n> x<-agnes(animals) \n> pltree(x) \n```", "```py\nlibrary(cluster) \nset.seed(123) \nn1<-200; mean1<-0; std1<-8 \nn2<-300; mean2<-80; std2<-8 \nset1<-cbind(rnorm(n1,mean1,std1), rnorm(n1,mean1,std1)) \nset2<-cbind(rnorm(n2,mean2,std2), rnorm(n2,mean2,std2)) \nx <- rbind(set1,set2) \ndata <- clara(x, 2, samples=50) \nplot(data) \n```", "```py\nclara(data, nCluster, metric = \"euclidean\", stand = FALSE, samples = 5, sampsize = min(n, 40 + 2 * k), trace = 0, medoids.x = TRUE,keep.data = medoids.x, rngR = FALSE, pamLike = FALSE, correct.d = TRUE) \n```", "```py\nlibrary(readr)  \nlibrary(corrplot) \nlibrary(ggplot2) \n# \npath<-\"http://canisius.edu/~yany/RData/wine.RData\" \nload(url(path)) \nred2<-red \nred2$quality<-NULL \nwhite2<-white \nwhite2$quality<-NULL \nred_cor<-cor(red2) \nwhite_cor<-cor(white2) \nclass(red_cor) \nclass(white_cor) \n# \ncorrplot(red_cor,method=\"number\") \n```", "```py\nimport scipy.cluster as cluster \nx=dir(cluster) \nprint(x) \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport scipy.cluster.hierarchy as hac \na = np.array([[0.11, 2.5],[1.45, 0.40], \n              [0.3,  1.1],[0.9 , 0.8], \n              [0.5,  0.01],[0.1 , 0.5], \n              [0.6,  0.5],[2.6,  2.1], \n              [2.3,  3.2],[3.1,  2.2], \n              [3.2,  1.3]]) \nname='possiblen<- knee point' \nyName='{}ncluster distance' \ntitle='Screeplot{}' \nt1=['#2200CC','#D9007E','#FF6600','#FFCC00'] \nt2=['#ACE600','#0099CC','#8900CC','#FF0000'] \nt3=['#FF9900' ,'#FFFF00','#00CC01' ,'#0055CC'] \nfig, axes23 = plt.subplots(2, 3) \nfor method, axes in zip(['single','complete'], axes23): \n    z = hac.linkage(a, method=method) \n    axes[0].plot(range(1, len(z)+1), z[::-1, 2]) \n    knee = np.diff(z[::-1, 2], 2) \n    axes[0].plot(range(2, len(z)), knee) \nfor method, axes in zip(['single','complete'], axes23): \n    z = hac.linkage(a, method=method) \n    axes[0].plot(range(1, len(z)+1), z[::-1, 2]) \n    knee = np.diff(z[::-1, 2], 2) \n    axes[0].plot(range(2, len(z)), knee) \n    num_clust1 = knee.argmax() + 2 \n    knee[knee.argmax()] = 0 \n    num_clust2 = knee.argmax() + 2 \n    axes[0].text(num_clust1, z[::-1, 2][num_clust1-1], name) \n    part1 = hac.fcluster(z, num_clust1, 'maxclust') \n    part2 = hac.fcluster(z, num_clust2, 'maxclust') \n    clr = t1+t2+t3 \n    for part,ax in zip([part1, part2], axes[1:]): \n        for cluster in set(part): \n            ax.scatter(a[part==cluster,0],a[part==cluster,1],  \n                       color=clr[cluster]) \n    m = 'n(method: {})'.format(method) \n    plt.setp(axes[0 ],title=title.format(m),xlabel='partition', \n             ylabel=yName.format(m)) \n    plt.setp(axes[1], title='{} Clusters'.format(num_clust1)) \n    plt.setp(axes[2], title='{} Clusters'.format(num_clust2)) \nplt.tight_layout() \nplt.show() \n```", "```py\npip install contrastive \n```", "```py\nfrom contrastive import cluster  \nx=dir(cluster) \nprint(x) \n```", "```py\nimport sklearn as sk \nx=dir(sk) \nprint(x) \n```", "```py\nfrom sklearn import cluster \nx=dir(cluster) \nprint(x) \n```", "```py\nimport sklearn.datasets as datasets \nx=dir(datasets) \nprint(x) \n```", "```py\nfrom sklearn import datasets \ndata= datasets.load_iris() \nprint(data) \n```", "```py\nfrom sklearn import cluster \nfrom sklearn import datasets \nx=datasets.load_iris() \niris = datasets.load_iris() \nx = iris.data \nk_means = cluster.KMeans(n_clusters=3) \nk_means.fit(x)  \nprint(k_means.labels_[::10]) \n[1 1 1 1 1 0 0 0 0 0 2 2 2 2 2] \n```", "```py\nlibrary(rattle.data) \ndata(wine)  \nx<-head(wine,20) \n```", "```py\nlibrary(rattle) \nrattle() \n```", "```py\n> install.packages(\"randomUniformForest\") \n> library(randomUniformForest) \n> help(package=randomUniformForest) \n```", "```py\nlibrary(randomUniformForest) \ndata(iris) \nshortName<-unsupervised.randomUniformForest \nx =shortName(iris[,-5],mtry=1,nodesize = 2) \nplot(x) \n```", "```py\nlibrary(randomUniformForest) \ndata(wineQualityRed) \nx = wineQualityRed[, -ncol(wineQualityRed)] \n# run unsupervised analysis on the first half of dataset  \ndata1 = 1:floor(nrow(x)/2) \nsf<-unsupervised.randomUniformForest \nmodel1 =sf(x,subset =data1,depth = 5)  \nplot(model1) \n```", "```py\n> library(Rmixmod) \n> data(birds)\n> head(birds) \n gender         eyebrow collar sub-caudal border \n1   male poor pronounced dotted      white    few \n2 female            none dotted      black   none \n3 female      pronounced   none      white   none \n4   male      pronounced dotted      white   none \n5   male      pronounced dotted      white   none \n6   male      pronounced dotted      white   none \n> dim(birds) \n[1] 69  5 \n```", "```py\nx <- mixmodCluster(birds,2) \nbb<-barplotCluster \nbb(x[\"bestResult\"], birds) \nbb(x[\"bestResult\"], birds, variables=c(2,3,4)) \nbb(x[\"bestResult\"], birds, variables=c(\"eyebrow\",\"collar\")) \n```", "```py\nusing Base.Test \nusing Distances \nusing Clustering \n# \nsrand(12345) \nd = 10 \nn = 500 \nx = rand(d, n) \nS = -pairwise(Euclidean(), x, x) \n# set diagonal value to median value \nS = S - diagm(diag(S)) + median(S)*eye(size(S,1))  \nR = affinityprop(S) \n```", "```py\n>install.packages(\"ctv\") \n>library(\"ctv\") \n>install.views(\"Cluster\") \n```", "```py\n>set.seed(12345) \n>n=30 \n>nGroup=4 \n>x <- matrix(rnorm(n*nGroup),nrow =nGroup) \n```", "```py\n> data <- rbind(c(180,20), c(160,5), c(60, 150), c(160,60), c(80,120)) \n```"]