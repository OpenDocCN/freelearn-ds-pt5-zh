["```py\n> bin/pyspark  // Start pyspark shell  \n>>> _         // For simplicity sake, no Log messages are shown here \n\n>>> type(sc)    //Check the type of Predefined SparkContext object \n<class 'pyspark.context.SparkContext'> \n\n//Pass the file path to create an RDD from the local file system \n>>> fileRDD = sc.textFile('RELEASE') \n\n>>> type(fileRDD)  //Check the type of fileRDD object  \n<class 'pyspark.rdd.RDD'> \n\n>>>fileRDD.first()   //action method. Evaluates RDD DAG and also returns the first item in the RDD along with the time taken \ntook 0.279229 s \nu'Spark Change Log' \n\n```", "```py\n> bin/Spark-Shell  // Start Spark-shell  \nScala> _      // For simplicity sake, no Log messages are shown here \n\nScala> sc   //Check the type of Predefined SparkContext object \nres1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@70884875 \n\n//Pass the file path to create an RDD from the local file system \n\nScala> val fileRDD = sc.textFile(\"RELEASE\") \n\nScala> fileRDD  //Check the type of fileRDD object  \nres2: org.apache.spark.rdd.RDD[String] = ../ RELEASE\nMapPartitionsRDD[1] at textFile at <console>:21 \n\nScala>fileRDD.first()   //action method. Evaluates RDD DAG and also returns the first item in the RDD along with the time taken \n0.040965 s \nres6: String = Spark Change Log \n\n```", "```py\n// Pass a Python collection to create an RDD \n>>> numRDD = sc.parallelize([1,2,3,4],2) \n>>> type(numRDD) \n<class 'pyspark.rdd.RDD'> \n>>> numRDD \nParallelCollectionRDD[1] at parallelize at PythonRDD.scala:396 \n>>> numRDD.first() \n1 \n>>> numRDD.map(lambda(x) : x*x).collect() \n[1,4,9,16] \n>>> numRDD.map(lambda(x) : x * x).reduce(lambda a,b: a+b) \n30 \n\n```", "```py\n// Pass a Scala collection to create an RDD \nScala> val numRDD = sc.parallelize(List(1,2,3,4),2) \nnumRDD: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[8] at parallelize at <console>:21 \n\nScala> numRDD \nres15: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[8] at parallelize at <console>:21 \n\nScala> numRDD.first() \nres16: Int = 1 \n\nScala> numRDD.map(x => x*x).collect() \nres2: Array[Int] = Array(1, 4, 9, 16) \n\nScala> numRDD.map(x => x * x).reduce(_+_) \nres20: Int = 30 \n\n```", "```py\na = sc.parallelize([1,2,3,4,5,6], 3) \nb = a.filter(lambda x: x % 3 == 0) \nb.collect() \n[3,6] \n\n```", "```py\nval a = sc.parallelize(1 to 10, 3) \nval b = a.filter(_ % 3 == 0) \nb.collect \n\nres0: Array[Int] = Array(3, 6, 9) \n\n```", "```py\nc = sc.parallelize([\"John\", \"Jack\", \"Mike\", \"Jack\"], 2) \nc.distinct().collect() \n\n['Mike', 'John', 'Jack'] \n\n```", "```py\nval c = sc.parallelize(List(\"John\", \"Jack\", \"Mike\", \"Jack\"), 2) \nc.distinct.collect \nres6: Array[String] = Array(Mike, John, Jack) \n\nval a = sc.parallelize(List(11,12,13,14,15,16,17,18,19,20)) \na.distinct(2).partitions.length      //create 2 tasks on two partitions of the same RDD for parallel execution \n\nres16: Int = 2 \n\n```", "```py\nx = sc.parallelize([1,2,3,4,5,6,7,8,9,10]) \ny = sc.parallelize([5,6,7,8,9,10,11,12,13,14,15]) \nz = x.intersection(y) \nz.collect() \n\n[8, 9, 10, 5, 6, 7] \n\n```", "```py\nval x = sc.parallelize(1 to 10) \nval y = sc.parallelize(5 to 15) \nval z = x.intersection(y) \nz.collect \n\nres74: Array[Int] = Array(8, 9, 5, 6, 10, 7) \n\n```", "```py\na = sc.parallelize([3,4,5,6,7], 1) \nb = sc.parallelize([7,8,9], 1) \nc = a.union(b) \nc.collect() \n\n[3, 4, 5, 6, 7, 7, 8, 9] \n\n```", "```py\nval a = sc.parallelize(3 to 7, 1) \nval b = sc.parallelize(7 to 9, 1) \nval c = a.union(b)     // An alternative way is (a ++ b).collect \n\nres0: Array[Int] = Array(3, 4, 5, 6, 7, 7, 8, 9) \n\n```", "```py\na = sc.parallelize([\"animal\", \"human\", \"bird\", \"rat\"], 3) \nb = a.map(lambda x: len(x)) \nc = a.zip(b) \nc.collect() \n\n[('animal', 6), ('human', 5), ('bird', 4), ('rat', 3)] \n\n```", "```py\nval a = sc.parallelize(List(\"animal\", \"human\", \"bird\", \"rat\"), 3) \nval b = a.map(_.length) \nval c = a.zip(b) \nc.collect \n\nres0: Array[(String, Int)] = Array((animal,6), (human,5), (bird,4), (rat,3)) \n\n```", "```py\na = sc.parallelize([1,2,3,4,5], 4) \na.flatMap(lambda x: range(1,x+1)).collect() \n   // Range(1,3) returns 1,2 (excludes the higher boundary element) \n[1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5] \n\nsc.parallelize([5, 10, 20], 2).flatMap(lambda x:[x, x, x]).collect() \n[5, 5, 5, 10, 10, 10, 20, 20, 20] \n\n```", "```py\nval a = sc.parallelize(1 to 5, 4) \na.flatMap(1 to _).collect \nres47: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5) \n\n//One more example \nsc.parallelize(List(5, 10, 20), 2).flatMap(x => List(x, x, x)).collect \nres85: Array[Int] = Array(5, 5, 5, 10, 10, 10, 20, 20, 20) \n\n```", "```py\na = sc.parallelize([\"black\", \"blue\", \"white\", \"green\", \"grey\"], 2) \nb = a.map(lambda x:(len(x), x)) \nc = b.keys() \nc.collect() \n\n[5, 4, 5, 5, 4] \n\n```", "```py\nval a = sc.parallelize(List(\"black\", \"blue\", \"white\", \"green\", \"grey\"), 2) \nval b = a.map(x => (x.length, x)) \nb.keys.collect \n\nres2: Array[Int] = Array(5, 4, 5, 5, 4) \n\n```", "```py\nx = sc.parallelize([1,2,3]) \ny = sc.parallelize([10,11,12]) \nx.cartesian(y).collect() \n\n[(1, 10), (1, 11), (1, 12), (2, 10), (2, 11), (2, 12), (3, 10), (3, 11), (3, 12)] \n\n```", "```py\nval x = sc.parallelize(List(1,2,3)) \nval y = sc.parallelize(List(10,11,12)) \nx.cartesian(y).collect \n\nres0: Array[(Int, Int)] = Array((1,10), (1,11), (1,12), (2,10), (2,11), (2,12), (3,10), (3,11), (3,12))  \n\n```", "```py\na = sc.parallelize([\"black\", \"blue\", \"white\", \"green\", \"grey\"], 2) \nb = a.groupBy(lambda x: len(x)).collect() \nsorted([(x,sorted(y)) for (x,y) in b]) \n\n[(4, ['blue', 'grey']), (5, ['black', 'white', 'green'])] \n\n```", "```py\nval a = sc.parallelize(List(\"black\", \"blue\", \"white\", \"green\", \"grey\"), 2) \nval b = a.keyBy(_.length) \nb.groupByKey.collect \n\nres11: Array[(Int, Iterable[String])] = Array((4,CompactBuffer(blue, grey)), (5,CompactBuffer(black, white, green))) \n\n```", "```py\na = sc.parallelize([\"blue\", \"green\", \"orange\"], 3) \nb = a.keyBy(lambda x: len(x)) \nc = sc.parallelize([\"black\", \"white\", \"grey\"], 3) \nd = c.keyBy(lambda x: len(x)) \nb.join(d).collect() \n[(4, ('blue', 'grey')), (5, ('green', 'black')), (5, ('green', 'white'))] \n\n//leftOuterJoin \nb.leftOuterJoin(d).collect() \n[(6, ('orange', None)), (4, ('blue', 'grey')), (5, ('green', 'black')), (5, ('green', 'white'))] \n\n//rightOuterJoin \nb.rightOuterJoin(d).collect() \n[(4, ('blue', 'grey')), (5, ('green', 'black')), (5, ('green', 'white'))] \n\n//fullOuterJoin \nb.fullOuterJoin(d).collect() \n[(6, ('orange', None)), (4, ('blue', 'grey')), (5, ('green', 'black')), (5, ('green', 'white'))] \n\n```", "```py\nval a = sc.parallelize(List(\"blue\", \"green\", \"orange\"), 3) \nval b = a.keyBy(_.length) \nval c = sc.parallelize(List(\"black\", \"white\", \"grey\"), 3) \nval d = c.keyBy(_.length) \nb.join(d).collect \nres38: Array[(Int, (String, String))] = Array((4,(blue,grey)), (5,(green,black)), (5,(green,white))) \n\n//leftOuterJoin \nb.leftOuterJoin(d).collect \nres1: Array[(Int, (String, Option[String]))] = Array((6,(orange,None)), (4,(blue,Some(grey))), (5,(green,Some(black))), (5,(green,Some(white)))) \n\n//rightOuterJoin \nb.rightOuterJoin(d).collect \nres1: Array[(Int, (Option[String], String))] = Array((4,(Some(blue),grey)), (5,(Some(green),black)), (5,(Some(green),white))) \n\n//fullOuterJoin \nb.fullOuterJoin(d).collect \nres1: Array[(Int, (Option[String], Option[String]))] = Array((6,(Some(orange),None)), (4,(Some(blue),Some(grey))), (5,(Some(green),Some(black))), (5,(Some(green),Some(white))))  \n\n```", "```py\na = sc.parallelize([\"black\", \"blue\", \"white\", \"green\", \"grey\"], 2) \nb = a.map(lambda x: (len(x), x)) \nb.reduceByKey(lambda x,y: x + y).collect() \n[(4, 'bluegrey'), (5, 'blackwhitegreen')] \n\na = sc.parallelize([\"black\", \"blue\", \"white\", \"orange\"], 2) \nb = a.map(lambda x: (len(x), x)) \nb.reduceByKey(lambda x,y: x + y).collect() \n[(4, 'blue'), (6, 'orange'), (5, 'blackwhite')] \n\n```", "```py\nval a = sc.parallelize(List(\"black\", \"blue\", \"white\", \"green\", \"grey\"), 2) \nval b = a.map(x => (x.length, x)) \nb.reduceByKey(_ + _).collect \nres86: Array[(Int, String)] = Array((4,bluegrey), (5,blackwhitegreen)) \n\nval a = sc.parallelize(List(\"black\", \"blue\", \"white\", \"orange\"), 2) \nval b = a.map(x => (x.length, x)) \nb.reduceByKey(_ + _).collect \nres87: Array[(Int, String)] = Array((4,blue), (6,orange), (5,blackwhite))  \n\n```", "```py\nz = sc.parallelize([1,2,7,4,30,6], 2) \nz.aggregate(0,(lambda x, y: max(x, y)),(lambda x, y: x + y)) \n37 \nz = sc.parallelize([\"a\",\"b\",\"c\",\"d\"],2) \nz.aggregate(\"\",(lambda x, y: x + y),(lambda x, y: x + y)) \n'abcd' \nz.aggregate(\"s\",(lambda x, y: x + y),(lambda x, y: x + y)) \n'ssabsscds' \nz = sc.parallelize([\"12\",\"234\",\"345\",\"56789\"],2) \nz.aggregate(\"\",(lambda x, y: str(max(len(str(x)), len(str(y))))),(lambda x, y: str(y) + str(x))) \n'53' \nz.aggregate(\"\",(lambda x, y: str(min(len(str(x)), len(str(y))))),(lambda x, y: str(y) + str(x))) \n'11' \nz = sc.parallelize([\"12\",\"234\",\"345\",\"\"],2) \nz.aggregate(\"\",(lambda x, y: str(min(len(str(x)), len(str(y))))),(lambda x, y: str(y) + str(x))) \n'01' \n\n```", "```py\nval z = sc.parallelize(List(1,2,7,4,30,6), 2) \nz.aggregate(0)(math.max(_, _), _ + _) \nres40: Int = 37 \n\nval z = sc.parallelize(List(\"a\",\"b\",\"c\",\"d\"),2) \nz.aggregate(\"\")(_ + _, _+_) \nres115: String = abcd \n\nz.aggregate(\"x\")(_ + _, _+_) \nres116: String = xxabxcd \n\nval z = sc.parallelize(List(\"12\",\"234\",\"345\",\"56789\"),2) \nz.aggregate(\"\")((x,y) => math.max(x.length, y.length).toString, (x,y) => x + y) \nres141: String = 53 \n\nz.aggregate(\"\")((x,y) => math.min(x.length, y.length).toString, (x,y) => x + y) \nres142: String = 11 \n\nval z = sc.parallelize(List(\"12\",\"234\",\"345\",\"\"),2) \nz.aggregate(\"\")((x,y) => math.min(x.length, y.length).toString, (x,y) => x + y) \nres143: String = 01 \n\n```", "```py\n>>> sc.parallelize([2, 3, 4]).count() \n3 \n\n>>> sc.parallelize([2, 3, 4]).collect() \n[2, 3, 4] \n\n>>> sc.parallelize([2, 3, 4]).first() \n2 \n\n>>> sc.parallelize([2, 3, 4]).take(2) \n[2, 3] \n\n```", "```py\nScala> sc.parallelize(List(2, 3, 4)).count() \nres0: Long = 3 \n\nScala> sc.parallelize(List(2, 3, 4)).collect() \nres1: Array[Int] = Array(2, 3, 4) \n\nScala> sc.parallelize(List(2, 3, 4)).first() \nres2: Int = 2 \n\nScala> sc.parallelize(List(2, 3, 4)).take(2) \nres3: Array[Int] = Array(2, 3)  \n\n```"]