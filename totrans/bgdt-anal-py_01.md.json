["```py\n    > ipython\n    In [1]:\n    ```", "```py\n    import numpy as np\n    vec = np.random.randint(0, 100, size=5)\n    print(vec)\n    ```", "```py\n    [23, 66, 12, 54, 98, 3]\n    ```", "```py\n    for j in np.arange(1, vec.size):\n        v = vec[j]\n        i = j\n        while i > 0 and vec[i-1] > v:\n            vec[i] = vec[i-1]\n            i = i - 1\n        vec[i] = v\n    ```", "```py\n    [3, 12, 23, 54, 66, 98]\n    ```", "```py\n    > jupyter notebook\n    ```", "```py\n    In []: x = 2\n           print(x*2)\n    Out []: 4\n    ```", "```py\n    In []: def mean(a,b):\n           return (a+b)/2\n    ```", "```py\n    In []: mean(10,20)\n    Out[]: 15.0\n    ```", "```py\nimport numpy as np\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nimport pandas as pd\n```", "```py\n    import pandas as pd\n    ```", "```py\n    Sample code : df = pd.read_csv(\"/path/to/imports-85.csv\", names = columns)\n    ```", "```py\n    import pandas as pd\n    df = pd.read_csv(\"imports-85.csv\")\n    df.head()\n    ```", "```py\ndf['State']\n```", "```py\ndf[df.State == \"MN\"]\n```", "```py\ndf[(df.State == \"AK\") & (df.Location == \"Nome\")]\n```", "```py\n    import numpy as np\n    import pandas as pd\n    ```", "```py\n    url = \"https://opendata.socrata.com/api/views/cf4r-dfwe/rows.csv?accessType=DOWNLOAD\"\n    df = pd.read_csv(url)\n    ```", "```py\n    df['State'].head()\n    ```", "```py\n    df[df.State == \"MN\"]\n    ```", "```py\n    df[(df.State == 'CA') & (df['Sample Type'] == 'Drinking Water')]\n    ```", "```py\n    df[(df.State == \"MN\") ][\"I-131\"]\n    ```", "```py\n    df_rad.loc[df_rad.State == \"MN\", \"I-131\"]\n    df[['I-132']].head()\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    ```", "```py\n    url = \"https://opendata.socrata.com/api/views/cf4r-dfwe/rows.csv?accessType=DOWNLOAD\"\n    df = pd.read_csv(url)\n    ```", "```py\n    df.dtypes\n    ```", "```py\n    df['Date Posted'] = pd.to_datetime(df['Date Posted'])\n    df['Date Collected'] = pd.to_datetime(df['Date Collected'])\n    columns = df.columns\n    id_cols = ['State', 'Location', \"Date Posted\", 'Date Collected', 'Sample Type', 'Unit']\n    columns = list(set(columns) - set(id_cols))\n    columns\n    ```", "```py\n    ['Co-60',\n     'Cs-136',\n     'I-131',\n     'Te-129',\n     'Ba-140',\n     'Cs-137',\n     'Cs-134',\n     'I-133',\n     'I-132',\n     'Te-132',\n     'Te-129m']\n    ```", "```py\n    df['Cs-134'] = df['Cs-134'].apply(lambda x: np.nan if x == \"Non-detect\" else x)\n    df.loc[:, columns] = df.loc[:, columns].applymap(lambda x: np.nan if x == 'Non-detect' else x)\n    df.loc[:, columns] = df.loc[:, columns].applymap(lambda x: np.nan if x == 'ND' else x)\n    ```", "```py\n    for col in columns:\n        df[col] = pd.to_numeric(df[col])\n    ```", "```py\n    df.dypes\n    ```", "```py\n    df['State'] = df['State'].astype('category')\n    df['Location'] = df['Location'].astype('category')\n    df['Unit'] = df['Unit'].astype('category')\n    df['Sample Type'] = df['Sample Type'].astype('category')\n    ```", "```py\n    df.dtypes\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    ```", "```py\n    df = pd.read_csv('RadNet_Laboratory_Analysis.csv')\n    ```", "```py\n    df.groupby('State')\n    ```", "```py\n    df.groupby('State')['Cs-134'].head()\n    ```", "```py\n    df.groupby('State').mean().head()\n    ```", "```py\n    df.groupby(['State', 'Location']).agg({'Cs-134':['mean', 'std'], 'Te-129':['min', 'max']})\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    url = \"https://opendata.socrata.com/api/views/cf4r-dfwe/rows.csv?accessType=DOWNLOAD\"\n    df = pd.read_csv(url)\n    ```", "```py\n    columns = df.columns\n    id_cols = ['State', 'Location', \"Date Posted\", 'Date Collected', 'Sample Type', 'Unit']\n    columns = list(set(columns) - set(id_cols))\n    columns\n    ```", "```py\n    df['Cs-134'] = df['Cs-134'].apply(lambda x: np.nan if x == \"Non-detect\" else x)\n    df.loc[:, columns] = df.loc[:, columns].applymap(lambda x: np.nan if x == 'Non-detect' else x)\n    df.loc[:, columns] = df.loc[:, columns].applymap(lambda x: np.nan if x == 'ND' else x)\n    ```", "```py\n    df.loc[:, ['State', 'Location', 'Sample Type', 'Unit']] = df.loc[:, ['State', 'Location', 'Sample Type', 'Unit']].applymap(lambda x: x.strip())\n    ```", "```py\n    df['Date Posted'] = pd.to_datetime(df['Date Posted'])\n    df['Date Collected'] = pd.to_datetime(df['Date Collected'])\n    ```", "```py\n    for col in columns:\n        df[col] = pd.to_numeric(df[col])\n    ```", "```py\n    df['State'] = df['State'].astype('category')\n    df['Location'] = df['Location'].astype('category')\n    df['Unit'] = df['Unit'].astype('category')\n    df['Sample Type'] = df['Sample Type'].astype('category')\n    ```", "```py\n    df.to_csv('radiation_clean.csv', index=False, sep=';', encoding='utf-8')\n    ```", "```py\n    df.to_parquet('radiation_clean.prq', index=False)\n    ```"]