- en: Jupyter Dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dashboard is a mechanism to put together multiple displays into one for use
    in a presentation. For example, you can take 3 graphical displays of production
    lines drawn from different data and display them on screen in one frame or dashboard.
    With Jupyter we can draw upon many mechanisms for retrieving and visualizing data
    which can then be put together into a single presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing glyph ready data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A glyph is a symbol. In this section, we are looking to display glyphs at different
    points in a graph rather than the standard dot as the glyph should provide more
    visual information to the viewer. Often there is an attribute about a data point
    that can be used to turn the data point into a useful glyph, as we will see in
    the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: The `ggplot2` package is useful for visualizing data in a variety of ways. `ggplot`
    is described as a plotting system for R. We will look at an example that displays
    volcano data points across the globe. I used the information from the National
    Center for Environmental Information at [https://www.ngdc.noaa.gov/nndc](https://www.ngdc.noaa.gov/nndc).
    I selected volcano information post-1964.
  prefs: []
  type: TYPE_NORMAL
- en: 'This generated a set of data that I copied into a local CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8fb6abed-1aab-4453-8aad-ba24fa9ea6be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we just plot out the points on a world map we can see where the volcanoes
    are located. We are using the `mapdata` package for the map:'
  prefs: []
  type: TYPE_NORMAL
- en: The latest R syntax requires specifying the location of the repository (or mirror)
    to find the package as part of the `install.packages()` function call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e9f0994a-5f48-4350-b43b-ecb6a3b5c24c.png)'
  prefs: []
  type: TYPE_IMG
- en: There are a few scattered volcanoes, but the dominating patterns are on the
    western Americas and southeast Asia, corresponding to the tectonic plate lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use some of the data points as glyphs and present that information in
    a similar graphic using the `qplot` (quick plot) function within `ggplot2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The arguments are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`, `y`, `Longititude`, and `Latitude`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datasets we are referencing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using color to connote the type of volcano
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of the data point corresponds to the elevation of the volcano
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting alpha at a mid-point will draw half-shaded color points so that we have
    a better visual of the overlaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d7d49690-e1b9-472b-ae88-65a3feb856f2.png)'
  prefs: []
  type: TYPE_IMG
- en: There may be a way to overlay the glyph data with the preceding geographic map.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the volcanoes are at over 2,000 feet elevation. Volcanoes in
    southeast Asia and the southern Pacific tend to be underwater.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can display glyph data about the standard `iris` dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/506e46cd-6987-4644-aa82-2eda8b0484bd.png)'
  prefs: []
  type: TYPE_IMG
- en: For the glyphs in this graphic we are using petal length and species. The graphics
    make it very clear that the species can be determined by the dimensions of the
    plant parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, using the diamonds built-in dataset, we can derive some information from
    the glyph data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e18e470c-cd47-407b-81d3-8c3e407b3614.png)'
  prefs: []
  type: TYPE_IMG
- en: I had not expected the size (carats) to be the primary determinant of the price.
    I know everyone has been told or heard that the cut, clarity, and color make a
    difference, but the graph of actual data does not appear to show that those make
    any difference at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also look at the automobile miles-per-gallon dataset in a similar manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are mapping the aesthetic data points where `x`, `y` positions
    are based on engine displacement and highway miles per gallon, but we also `color`
    and `size` the data points based on vehicle class.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9f353de-3f4e-4695-ae24-1182004d93bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The glyphs make it clearer:'
  prefs: []
  type: TYPE_NORMAL
- en: SUVs have lower mileage regardless of engine displacement size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subcompact and compact vehicles have better mileage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is interesting that engine size makes little difference within any vehicle
    class on mileage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I know these are intuitive data points, but having the information confirmed
    using glyphs makes it very clear.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can publish a notebook/dashboard using markdown. Markdown involves adding
    annotations to cells in your notebook that are interpreted by Jupyter and converted
    into the more standard HTML representations that you see in other published materials.
  prefs: []
  type: TYPE_NORMAL
- en: In all cases, we create the cell with the markdown type. We then enter the syntax
    for markdown in the cell. Once we run markdown cells the display of the cell changes
    to the effective markdown representation. You should also note there is no line
    number designation for markdown cells, as there is no code executing in markdown
    cells.
  prefs: []
  type: TYPE_NORMAL
- en: Font markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can adjust font style information using `italic` and `bold` HTML notations.
    For example, if we have the code format of a cell as follows. You can use markdown
    that has markdown tags for italics (`<i>`) and bold (`<b>`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cb96385-d21a-4fb2-9e05-fa6e7cb2322a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we run the cell we see the effective markdown as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/006431ca-1982-4a48-ae2b-75f4ff3e0cf3.png)'
  prefs: []
  type: TYPE_IMG
- en: List markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use lists such as the following, where we start an un-numbered list
    (we could have used `nl` for a numbered list) with two list items enclosed with
    the list item (`<li>`) tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bad76da-bf00-4d35-9865-4cc2b5550f07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we run this cell the resulting markdown is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71f5c261-eea5-421d-b7bd-20b329f5aef0.png)'
  prefs: []
  type: TYPE_IMG
- en: Heading markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A hierarchical set of headings is available, as in this example of markdown
    where Jupyter is paying special attention to heading notation using the sharp
    symbol `#`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40962491-9299-4b3a-983a-a75fb1218806.png)'
  prefs: []
  type: TYPE_IMG
- en: It is curious that Jupyter decided to specially handle this markdown versus
    any others.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the resulting display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3df3276-121b-4ffb-908f-43aa86b1825a.png)'
  prefs: []
  type: TYPE_IMG
- en: Table markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can generate tables, as in HTML. An HTML table starts with the `table` tag.
    Each row of the table starts with the `tr` tag. Columns within a row start with
    the `td` tag. Alternatively, you could use the column heading tag `th` instead
    of the `td` tag. In this example, we have a small table markdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f493e53b-4f33-4bbf-9d5c-308cb03d2003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the resulting display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/562b1384-3235-4b99-bc34-eb302c16b100.png)'
  prefs: []
  type: TYPE_IMG
- en: Tables are centered by default in markdown. We could have changed the table
    to be left justified using more markdown. We could also have put borders around
    the cells of the table by adding the `'borders=1'` phrase to the `table` tag.
    Note that the column headings are bold by default.
  prefs: []
  type: TYPE_NORMAL
- en: Code markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is sometimes useful to display actual code statements as markdown in our
    presentation. We do this by prefixing the code sequence with triple back quotes
    and the name of the language to interpret the coding. We turn off the coding using
    a trailing triple back quote, as seen in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a68515ae-5a0f-4a6e-aa4a-8be1576b1bff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the resulting display corresponding to language-specific keyword highlighting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc48d8ae-b145-4e51-a035-6c963975f334.png)'
  prefs: []
  type: TYPE_IMG
- en: More markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are additional markdown notations for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Emphasis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Math symbols, geometric shapes, horizontal lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monospace font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line breaks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colors (including background)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphic references (note to be sure these are still accessible if your markdown
    is remotely deployed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal and external links (same concern when deployed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Shiny dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shiny is a web application framework for R. It does not require the user to
    code HTML. There are normally two sets of code: the server and the **user interface**
    (**UI**). Both sets of code work on top of a Shiny server. A Shiny server can
    reside on one of your machines or in the cloud (via several hosting companies).'
  prefs: []
  type: TYPE_NORMAL
- en: The Shiny server code set deals with accessing data, computing results, obtaining
    direction from the user, and interacting with other server code set to change
    results. The UI code set deals with layout of the presentation.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you had an application that produced a histogram of data the
    server set would obtain the data and produce results, display the results, and
    interact with the user to change the result—for example, it might change the number
    of buckets or range of data being displayed. The UI code set would strictly be
    concerned with layout.
  prefs: []
  type: TYPE_NORMAL
- en: Shiny code does not run under Jupyter. You can develop the coding using RStudio.
    RStudio is an **integrated development environment** (**IDE**) for developing
    R scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'With RStudio you can develop the code sets for the `server.R` and `ui.R` components
    and then run them. Running a Shiny application will:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new browser window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the coding to generate the corresponding HTML for your coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the generated HTML in the new browser window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once your application is working you can also take the next step to deploy the
    application onto an R server on the internet, where you can share the associated
    URL to your application with other users.
  prefs: []
  type: TYPE_NORMAL
- en: R application coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you start RStudio you will see the (hopefully) familiar display as follows.
    There are four main windows in the display (going clockwise from the upper left):'
  prefs: []
  type: TYPE_NORMAL
- en: Source code window. In this window you enter the script for a particular R script
    file. Saving a file in the source code window will update the file stored on disk
    (and it is viewable in the files window).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment/History window. In this window, any datasets that have been loaded
    or variables that have been established are displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files window. In this window, the current sets of files are displayed (and are
    accessible by clicking on a file to pull it into the source code window).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The execution window. In this window, actual commands are made to the R server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the simple example we will use `server.R` and `io.R` files very similar
    to the files on the Shiny web pages, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b67ceab-bd9b-429f-830c-6b37b0ab93af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `app.R` file has the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The UI file only establishes the layout of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If we run the `app.R` program in RStudio we end up with a page that looks like
    the following. There is a header section, sidebar, and body. The body contains
    the display and the slider control. We can run the application by selecting the
    `app.R` file in the source window and then clicking on the Run App button at the
    top of the source window. Clicking on the Run App button has the effect of entering
    the command `runApp('shiny')` in the console window (so you could have done that
    yourself instead). Once the application is running you will see a message in the
    console window such as Listening on http://127.0.0.1:6142 where R decided to deploy
    your application on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the resultant new browser window we can see our Shiny application displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71fbf6e6-b4cb-4128-98c8-e3c14adb871b.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the Shiny display is responsive. Responsive web applications will
    adjust the layout of components to accommodate changes in the physical size of
    the window. As in the previous display, you would expect the display to have the
    components laid out horizontally as they occur. As I changed the dimensions of
    the display to fit the printed page the layout got reorganized.
  prefs: []
  type: TYPE_NORMAL
- en: The page is fully active. As you move the slider the graphic gets regenerated.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you are satisfied with your dashboard you can publish it to the internet.
    The Deploy button near the top right of the source window will push your application
    set to the service that you connect.
  prefs: []
  type: TYPE_NORMAL
- en: In my case I used a free account with [http://www.shinyapps.io/](http://www.shinyapps.io/).
    There are other services available for hosting your Shiny applications.
  prefs: []
  type: TYPE_NORMAL
- en: Once you select to publish an application, RStudio will prompt you for the service
    and credentials to publish (credentials are provided to you when you enroll).
  prefs: []
  type: TYPE_NORMAL
- en: After that, the files are posted to your host and the application is up and
    running. As can be seen by hitting my demo account at [https://dantoomeysoftware.shinyapps.io/shiny](https://dantoomeysoftware.shinyapps.io/shiny)
    we get the exact same display as the preceding one, except that we are running
    on the hosted server.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23610340-f49b-49ec-8417-41dc003dec4c.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we have a easy to use system for creating our dashboard using a variety
    of display mechanisms. Overall, much easier than I expected—given my experience
    developing such presentations in other systems, such as Microsoft Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Building standalone dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Node.js, developers have come up with a way to host your dashboard/notebook
    without Jupyter on jupyter-dashboard-server.
  prefs: []
  type: TYPE_NORMAL
- en: Installation requires installing Node.js (as the server is written in Node.js).
    This is a larger installation set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Node.js installed, one of the tools installed is npm-node product
    manager. You can use npm to install the dashboard server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed you can run the server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`mygateway.com` is a dummy. You would use your gateway server (if needed).
    At this point the server is running on the environment you mentioned and will
    output a few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can open a browser to the URL (`http://127.0.0.1:3000/dashboards`) and
    see what the server console looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bed6159c-18e5-427d-9395-d0f6d9909cc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As for developing a dashboard you can host on the server, we need to install
    more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then enable the extension (it is a notebook extension):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You then need to install the layout extension using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point you can upload your dashboard notebook file using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Where the URL is prefixed with the hosting site you are using, `PATH` is optional
    (would default to the root location), and `NAME` is as you determine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we visualized data graphically using glyphs to emphasize important
    aspects of the data. We used markdown to annotate a notebook page. We used Shiny
    to generate an interactive application. And we saw a way to host notebooks outside
    of Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at statistical modeling under Jupyter.
  prefs: []
  type: TYPE_NORMAL
