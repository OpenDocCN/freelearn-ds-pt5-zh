- en: Common Pitfalls of Data Science Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the common pitfalls of data science projects,
    as well as the mistakes that increase the risks your projects may encounter and
    that are easy to commit. It's important that you know how to deal with them for
    the success of your projects. Different types of data science solutions have many
    tempting ways of executing the project that can lead to undesired difficulties
    in the later stages of the project. We will pick and mitigate those issues one
    by one while following the data science project life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the common risks of data science projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approaching research projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with prototypes and **minimum viable product** (**MVP**) projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitigating risks in production-oriented data science systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding the common risks of data science projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and most important risk of any data science project is the goal definition.
    The correct goal definition plays a major part in the success formula. It is often
    tempting to jump into the implementation stage of the project right after you
    have the task definition, regardless of whether it is vague or unclear. By doing
    this, you risk solving the task in an entirely different way from what the business
    actually needs. It is important that you define a concrete and measurable goal
    that will give your team a tool that they can use to distinguish between right
    and wrong solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that the project goal is defined correctly, you may use the following
    checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: You have a quantifiable business metric that can be calculated from the input
    data and the algorithm's output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The business understands the most important technical metrics that you use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The task is defined in data science terminology. You know if you are solving
    classification, regression, or another kind of task and have an idea of how to
    approach it technically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You understand the details of the (business) process and domain of the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the data sources that are required for the start of the project exist
    and can be accessed by the implementation team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another important issue is the documentation. In data science projects, experiment
    results can often change the course of the project. It is important to log all
    the experiments, along with the decisions and conclusions that you make. Fixing
    any incoming changes when it comes to data and requirements is also necessary.
    When you have this information, you will be able to see the whole line of thought
    that makes your solution work as it does.
  prefs: []
  type: TYPE_NORMAL
- en: Being aware of the common risks of data science projects will help you recover
    from major mistakes, but the devil is in the detail. In the next section, we will
    cover the different management approaches to research projects, prototypes, and
    end-to-end production systems and cover their specifics.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching research projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A research project is any project that gives you solutions to new, not well-known
    problems. Research projects aren't always about advancing science. If your team
    deals with a new kind of business domain, or a new type of machine learning library,
    these are also considered to be research projects. Discovering ways to apply data
    science to new business domains is also research. Almost every data science project
    includes a research subproject that takes care of the modeling process.
  prefs: []
  type: TYPE_NORMAL
- en: The first pitfall of research projects is the absence of scope. Every research
    project must have a clear scope, otherwise it won't be possible to finish it.
    It is also important to fix any external constraints for a research project. Your
    research budgets will grow as the scope's size increases, so limited budgets may
    also affect the depth and length of research that you will be able to do.
  prefs: []
  type: TYPE_NORMAL
- en: When you have an idea of your research capacity, you can start filling in the
    experiment backlog with your team. Each entry in a backlog should contain an idea
    that may advance your model's quality or help you reach your desired functionality.
    Each experiment should be defined in accordance with the SMART criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an initial experiment backlog for a binary classification problem
    may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform **exploratory data analysis** (**EDA**) and familiarize yourself with
    the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a baseline model using gradient boosting and basic preprocessing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test the encoding for categorical variables: Hash encoding.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test the encoding for categorical variables: Target encoding.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Feature engineering: Measure the effect of date features.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Feature engineering: Aggregate the features day windows.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To be SMART-compliant, each entry should also contain deadlines, links to datasets,
    computation resources, and metric recommendations. We have omitted those details
    for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: You should always prioritize experiments by expected returns. Some experiments
    may take a lot of time to complete in full, but less time for initial tests. If
    you and your team are unsure about priority, it is better to go wide rather than
    deep. Perform quick initial quality checks for all of the experiments in your
    current research iteration to determine the approximate time investment for each
    experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also important to keep track of everything in an experiment, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Input data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time of the experiment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exact code version that produced the experiment's results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model parameters and model type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use a simple shared document for this purpose or invest in integrating
    a specialized experiment tracking framework with a **user interface** (**UI**)
    into your project. Experiment tracking frameworks pay for themselves in projects
    that have lots of experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, care about making each experiment reproducible and document the conclusions
    you drew from the results. To check for reproducibility, use the following criteria
    for each individual experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: Input data is easily accessible and can be discovered by anyone on the team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The experiment code can be run on input data without errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't need to enter undocumented configuration parameters to run the experiment.
    All of the configuration variables are fixed in an experiment configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The experiment code contains documentation and is easily readable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The experiment output is consistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The experiment output contains metrics that you can use for comparison with
    other experiments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusions from experiment results are present in the documentation, comments,
    or output files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To avoid pitfalls in research projects, make sure you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a clear goal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the success criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define constraints, including the time and budget limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fill in the experiment backlog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritize by expectations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track all the experiments and their data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the code reproducible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document your findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Successful research projects can help you find an answer to a complex question
    or push the boundaries of scientific fields and practical disciplines. Research
    projects are often confused with prototypes, though prototypes pursuit different
    goals in general. In the next section, we will look at the properties of prototyping
    projects, along with specific management strategies for these types of projects.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with prototypes and MVP projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are dealing with data science, I bet you will find yourself doing a lot
    of prototyping. Prototypes often have very strict time and money limitations.
    The first lesson of prototyping is to approach every prototype as an MVP. The
    key idea behind MVP is to have just enough core features to show a working solution.
    Bells and whistles can be implemented later, as long as you are able to demonstrate
    the main idea behind your prototype.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on core features does not mean that your prototype should not have
    a pretty UI or stunning data visualizations. If those are the main strengths of
    your future product, by no means include them. To identify the core features of
    your product, you should think in terms of markets and processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ask yourself the following questions to check whether a particular feature
    should be included in the MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: Who are your users?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What (business) processes are your solutions targeting?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problem do you want to solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, look at what features are crucial for reaching the desired goal, what
    is complementary, and what is unrelated to the goal. After that, look at your
    competitors and think about what will distinguish your MVP from them. If you have
    no distinguishing features or you don't solve a different problem, you will have
    a hard time competing with an already developed and possibly highly adopted competitive
    product.
  prefs: []
  type: TYPE_NORMAL
- en: It is beneficial to decompose your competitor's products into feature lists
    and perform the same analysis on them to see what supplementary features you should
    implement to be on par with the market. Doing a detailed feature analysis of competitor
    products is more about product development than creating an MVP, so we won't go
    any further into this topic.
  prefs: []
  type: TYPE_NORMAL
- en: With the information you will have acquired from feature analysis, you should
    be able to rank all the features and select a few core ones for your MVP. Keep
    in mind that you may change the priority of some features if you know that they
    are extremely important for success.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect of delivering MVPs is to cut corners. If you have a
    lot of prototypes, having project templates, internal rapid prototyping tools,
    and document templates will save you a great deal of time and money. If you feel
    that your team spends more time creating MVPs using particular types of algorithms
    or technologies, think about creating tools that will automate most of the work.
    It is crucial to remember that MVP should be only good enough for your customers
    and users to see the benefits. As Voltaire said, *The best is the enemy of the
    good.*
  prefs: []
  type: TYPE_NORMAL
- en: For a more complete review of creating prototypes that can be transformed into
    real projects, please go to [Chapter 7](e5f57688-4506-40ea-858e-84169c97c6ad.xhtml),
    *Managing Innovation*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will have a brief overview of how we can manage an MVP
    in a consulting company environment.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – creating an MVP in a consulting company
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our friend Mark works at a consulting company. His team has created a defect
    detection system prototype for a large manufacturing company. The system should
    analyze the video stream of products on a conveyor belt and detect products that
    are defective. Mark has answered the initial MVP question list:'
  prefs: []
  type: TYPE_NORMAL
- en: Who are your users?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The manufacturing plant product quality department.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What (business) processes are your solutions targeting?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We target the core product quality control process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What problem do you want to solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to decrease the total amount of defected products that are left undetected
    by the current quality control process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using these answers, Mark has created the core feature list for the MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: Defect detection model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration by monitoring cameras over the conveyor belt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark knows that the manufacturing plan director, Anthony, who is the key decision-maker,
    appreciates systems with a slick and intuitive UI. Also, Mark is sure that preparing
    a model quality report is essential for comparing the efficiency of as-is and
    to-be quality control processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two insights added some more deliverables to the MVP:'
  prefs: []
  type: TYPE_NORMAL
- en: A UI for monitoring defects in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A model quality report that provides an efficiency comparison between the old
    process and the improved process, along with an automated quality control step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the customer approved the scope, Mark decided to use Scrum as a management
    methodology and focused on delivering the first working version as fast as possible.
    To get up to speed, Mark's team, who were already experienced in applying computer
    vision algorithms, used internal software libraries that they can develop for
    rapid prototyping. The report template meant that they didn't have to spend a
    lot of time writing documents, which meant they could focus on MVP development.
  prefs: []
  type: TYPE_NORMAL
- en: This example concludes our overview of prototypes. Now, we are ready to dive
    into the topic of assessing and mitigating risks in data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: Mitigating risks in production-oriented data science systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: End-to-end data science projects encompass one or several full iterations of
    the data science project life cycle. End-to-end data science projects comprise
    of all the risks of research projects and MVPs, along with a new set of risks
    related to change management and production deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The first major risk is the inability to sustain a constant change stream. Data
    science projects involve scope changes, and you should be able to work with them
    without making the project fall apart. Scrum gives you the basic tools you need
    for change management by freezing the development scope over the course of the
    week. However, for any tool to work, your customer should understand and follow
    the required processes, along with your team.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is that the implementation of a given change may cause a lot of
    unexpected bugs. Data science projects often lack automated testing procedures.
    The absence of constantly testing existing functionality may cause ripple effects
    when one simple change causes several bugs. Without tests, a lot more bugs also
    go unnoticed and get passed into production. It is also important to implement
    online testing modules since quality assurance does not end in the development
    phase. Models can degrade in performance over time, and your system should monitor
    abrupt changes in business and technical metrics.
  prefs: []
  type: TYPE_NORMAL
- en: If your team has not planned for production in advance, you will face many complex
    engineering issues related to nonfunctional requirements such as the availability,
    scalability, and reliability of your system. To avoid this, care about system
    design and software architecture from the start of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Even if everything has gone well technically, the final result may bewilder
    your customers. If key stakeholders do not see the benefit of your system, you
    must look for any mistakes that were in your goal definitions. It is often the
    case that project goals change midterm, along with the customer's views of what's
    best for their business. To avoid this major risk, you should constantly check
    that the task you are working on is important and that the solution method is
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table, we have enumerated the common risks and their solutions
    to sum up this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Risk group** | **Risk** | **Solution** |'
  prefs: []
  type: TYPE_TB
- en: '| Common | Vague goal definition. | Make sure that the goal''s definition is
    complete and includes all the items from the checklist in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| Common | The project goal is not quantifiable. | Define quantifiable business
    metrics that can be understood by the customer.Define one or several technical
    metrics that correlate with your business metrics. |'
  prefs: []
  type: TYPE_TB
- en: '| Common | Decision-making without keeping track of the record. | Document
    every major decision and conclusion you make throughout the project. Fix data
    and code versions in order to reproduce the results that lead to your decisions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Research | The team can''t reproduce the experiment''s results. | Track the
    experiment''s results and data, along with the code. |'
  prefs: []
  type: TYPE_TB
- en: '| Research | The research has no scope and plan of action. | Plan ahead using
    the research backlog.Prioritize entries in the research backlog and periodically
    check whether there are any obsolete entries that should be removed.Assess your
    expectations of each experiment by performing quick tests, if possible. |'
  prefs: []
  type: TYPE_TB
- en: '| MVP | The prototype does not show how to solve the user''s problem. | Think
    about every prototype as an MVP that solves your customers'' problems.Define your
    scope by taking the minimum amount of functionality required to solve your customers''
    problems into account. |'
  prefs: []
  type: TYPE_TB
- en: '| MVP | The MVP includes too many unnecessary features that take time to develop.
    | Use feature analysis to define the MVP scope. |'
  prefs: []
  type: TYPE_TB
- en: '| MVP | The MVP takes a lot of time to develop. | If your team makes a lot
    of MVPs, think about creating rapid prototyping frameworks and project templates
    to speed up the development process. |'
  prefs: []
  type: TYPE_TB
- en: '| Project development | The customer is constantly pushing the team to make
    urgent scope changes. | Advocate for the use of Agile development methodology
    for your project.Track project scope changes to show how they affect project deadlines.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Project development | The customer does not see how the system solves their
    problem. | Constantly review your project goals and make sure that your way of
    solving the problem has been confirmed by the customer. |'
  prefs: []
  type: TYPE_TB
- en: '| Project development | New changes introduce a lot of bugs. | Write automated
    tests. |'
  prefs: []
  type: TYPE_TB
- en: '| Production deployment | The model''s quality is degraded in production and
    the system has no tools to solve this problem. | Develop an online testing module
    to track metrics in production.Validate incoming data.Periodically retrain your
    models on new data. |'
  prefs: []
  type: TYPE_TB
- en: '| Production deployment | The system is not suitable for production usage.
    | Fix functional and nonfunctional requirements for your system.Prepare an architecture
    vision that provides a production-ready system design. |'
  prefs: []
  type: TYPE_TB
- en: Let's move on to the next case study that will demonstrate how you can detect
    and control these common risks.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – bringing a sales forecasting system into production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jane works as a senior manager in a start-up company that provides sales forecasting
    solutions to various logistic companies all over the world. During a major tech
    conference, a logistics company representative called Max asked if Jane''s company
    could benefit from using an AI. Jane mentioned that tools alone won''t make the
    company better, and that AI is a tool too, such as their ERP software, only more
    flexible. She started by creating a more concrete task definition in order to
    close off risks from the **common **group in the risk table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jane: What about forming a more defined goal? I know it can be hard without
    knowing about the technical details of AI and machine learning, so let me help
    you. Our company provides sales forecasting solutions for logistics companies
    like yours. The typical use case is to integrate our system into your ERP so that
    your personnel won''t waste time making forecasts by hand. Does this sound interesting
    to you?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Max: Sure, can you tell me more?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jane: OK. Our system makes demand forecasts for each item in your warehouse.
    We can estimate the expected number of items that you will need to ship by a given
    date in the future. To do this, we need access to your ERP database. I bet your
    employees already do this, but the process generally takes a lot of time and the
    results are not as accurate as they could be, especially if your product catalog
    contains hundreds or thousands of items.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Max: Yes, the process takes a lot of time indeed. We even struggle to add new
    items to the catalog since this will require us to hire twice as many people in
    the future.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jane: If what I''ve offered sounds interesting to you, I''d be happy to assist
    you in making a small MVP project that will show you how beneficial our system
    will be to your business. However, we''ll need a bit of assistance from your side.
    To show you the positive effect of using the system, we''ll need to make sure
    that the goal is stated in numbers that can be understood by the company''s management.
    Let''s set up a meeting so I can show you how we can quantify the project results
    and what support we''ll need from your IT specialists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Max: Sure, thanks!'
  prefs: []
  type: TYPE_NORMAL
- en: After this discussion, Jane had a meeting with Max, where she showed him a common
    approach to evaluating the project's performance from the business side. She documented
    all the decisions in a small business requirements document and confirmed that
    the results of the discussion were correct by showing it to Max. Jane also discussed
    the success criteria for the MVP. Max agreed that the production deployment is
    not necessary at this stage of the project and that they can make a decision about
    production integration by looking at the offline testing results, which Jane's
    team will present at a meeting. This way, she covered all three major risks in
    the **common **group.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is an MVP project, she also considered risks in the MVP group. Jane
    asked Max how they could present the system to end users and company management
    so that they can understand the benefits of such a system. They settled on integrating
    the system directly into the company's ERP solution as this was the most cost-efficient
    way for both sides. Max had lots of ideas regarding what useful features they
    could include in the MVP, along with visualization dashboards and system administration
    tools. Jane noticed that those features did not add to the core value of the system
    and would be better for the implementation stage to implement.
  prefs: []
  type: TYPE_NORMAL
- en: After creating a clear goal definition and shaping the MVP constraints, Jane's
    team proceeded to the implementation stage. To close the risks in the project
    development group, Jane coordinated with the customer about project management
    methodology. Based on her previous experience, Jane decided to use Scrum for this
    MVP. She explained the importance of fixed scope iterations to the customer and
    made sure that everyone agreed on how changes will be incorporated into sprints
    during the planning phase. She also shared the project's backlog with Max using
    a software project management system so that he could add new tasks and prioritize
    them with the team, acting as the product owner. Jane made sure that Max will
    have the time to participate in the spring planning meetings so that the project
    won't go astray. The general software development practices in Jane's start-up
    have already closed risks related to code quality, delivery pipeline automation,
    and automated testing, so she doesn't need to care about them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored the common pitfalls of data science projects,
    as well as how to manage research projects with tools such as experiment backlog
    and experiment tracking. We have also seen how prototypes differ from research
    projects and looked at how to manage prototype development from the standpoint
    of an MVP. Those techniques were then summarized in a case study that concerned
    MVP development in a consulting company. Finally, we enumerated and systematized
    the major risks and their solutions for research, prototype, and production systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to grow data science products and improve
    internal team performance by using reusable technology.
  prefs: []
  type: TYPE_NORMAL
