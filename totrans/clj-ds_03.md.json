["```py\n(ns cljds.ch3.examples\n  (:require [incanter.charts :as c]\n            [incanter.core :as i]\n            [incanter.excel :as xls]\n            [incanter.stats :as s]))\n\n(defn athlete-data []\n  (-> (io/resource \"all-london-2012-athletes.xlsx\")\n      (str)\n      (xls/read-xls)))\n\n(defn ex-3-1 []\n  (i/view (athlete-data)))\n```", "```py\n(defn ex-3-2 []\n  (-> (remove nil? (i/$ \"Height, cm\" (athlete-data)))\n      (c/histogram :nbins 20\n                   :x-label \"Height, cm\"\n                   :y-label \"Frequency\")\n      (i/view)))\n```", "```py\n(defn ex-3-3 []\n  (-> (remove nil? (i/$ \"Weight\" (athlete-data)))\n      (c/histogram :nbins 20\n                   :x-label \"Weight\"\n                   :y-label \"Frequency\")\n      (i/view)))\n```", "```py\n(defn ex-3-4 []\n  (->> (swimmer-data)\n       (i/$ \"Weight\")\n       (remove nil?) \n       (s/skewness)))\n;; 0.238\n```", "```py\n(defn ex-3-5 []\n  (-> (remove nil? (i/$ \"Weight\" (athlete-data)))\n      (i/log)\n      (c/histogram :nbins 20\n                   :x-label \"log(Weight)\"\n                   :y-label \"Frequency\")\n      (i/view)))\n```", "```py\n(defn swimmer-data []\n  (->> (athlete-data)\n       (i/$where {\"Height, cm\" {:$ne nil} \"Weight\" {:$ne nil}\n                  \"Sport\" {:$eq \"Swimming\"}})))\n(defn ex-3-6 []\n  (let [data (swimmer-data)\n        heights (i/$ \"Height, cm\" data)\n        weights (i/log (i/$ \"Weight\" data))]\n    (-> (c/scatter-plot heights weights\n                        :x-label \"Height, cm\"\n                        :y-label \"Weight\")\n        (i/view))))\n```", "```py\n(defn jitter [limit]\n  (fn [x]\n    (let [amount (- (rand (* 2 limit)) limit)]\n      (+ x amount))))\n\n(defn ex-3-7 []\n  (let [data (swimmer-data)\n        heights (->> (i/$ \"Height, cm\" data)\n                     (map (jitter 0.5)))\n        weights (->> (i/$ \"Weight\" data)\n                     (map (jitter 0.5))\n                     (i/log))]\n    (-> (c/scatter-plot heights weights\n                        :x-label \"Height, cm\"\n                        :y-label \"Weight\")\n        (i/view))))\n```", "```py\n(defn covariance [xs ys]\n  (let [x-bar (s/mean xs)\n        y-bar (s/mean xs)\n        dx (map (fn [x] (- x x-bar)) xs)\n        dy (map (fn [y] (- y y-bar)) ys)]\n    (s/mean (map * dx dy))))\n```", "```py\n(defn correlation [x y]\n  (/ (covariance x y)\n     (* (standard-deviation x)\n        (standard-deviation y))))\n```", "```py\n(defn ex-3-8 []\n  (let [data (swimmer-data)\n        heights (i/$ \"Height, cm\" data)\n        weights (i/log (i/$ \"Weight\" data))]\n    (correlation heights weights)))\n```", "```py\n(defn t-statistic [x y]\n  (let [r (correlation x y)\n        r-square (* r r)\n        df (- (count x) 2)]\n    (/ (* r df)\n       (i/sqrt (- 1 r-square)))))\n\n(defn ex-3-9 []\n  (let [data (swimmer-data)\n        heights (i/$ \"Height, cm\" data)\n        weights (i/log (i/$ \"Weight\" data))\n        t-value (t-statistic heights weights)\n        df (- (count heights) 2)\n        p  (* 2 (s/cdf-t t-value :df df :lower-tail? false))]\n    (println \"t-value\" t-value)\n    (println \"p value \" p)))\n```", "```py\n(defn critical-value [confidence ntails]\n  (let [lookup (- 1 (/ (- 1 confidence) ntails))]\n    (s/quantile-normal lookup)))\n\n(critical-value 0.95 2)\n=> 1.96\n```", "```py\n(defn z->r [z]\n  (/ (- (i/exp (* 2 z)) 1)\n     (+ (i/exp (* 2 z)) 1)))\n\n(defn r-confidence-interval [crit x y]\n  (let [r   (correlation x y)\n        n   (count x)\n        zr  (* 0.5 (i/log (/ (+ 1 r)\n                             (- 1 r))))\n        sez (/ 1 (i/sqrt (- n 3)))]\n    [(z->r (- zr (* crit sez)))\n     (z->r (+ zr (* crit sez)))]))\n\n(defn ex-3-10 []\n  (let [data (swimmer-data)\n        heights  (i/$ \"Height, cm\" data)\n        weights  (i/log (i/$ \"Weight\" data))\n        interval (r-confidence-interval 1.96 heights weights)]\n    (println \"Confidence Interval (95%): \" interval)))\n```", "```py\n(defn celsius->fahrenheit [x]\n  (+ 32 (* 1.8 x)))\n\n(defn ex-3-11 []\n  (-> (c/function-plot celsius->fahrenheit -10 40\n                       :x-label \"Celsius\"\n                       :y-label \"Fahrenheit\")\n      (i/view)))\n```", "```py\n(defn slope [x y]\n  (/ (covariance x y)\n     (variance x)))\n\n(defn intercept [x y]\n  (- (s/mean y)\n     (* (s/mean x)\n        (slope x y))))\n\n(defn ex-3-12 []\n  (let [data (swimmer-data)\n        heights (i/$ \"Height, cm\" data)\n        weights (i/log (i/$ \"Weight\" data))\n        a (intercept heights weights)\n        b (slope heights weights)]\n    (println \"Intercept: \" a)\n    (println \"Slope: \" b)))\n```", "```py\n(defn regression-line [a b]\n  (fn [x] \n    (+ a (* b x))))\n\n(defn ex-3-13 []\n  (let [data (swimmer-data)\n        heights (->> (i/$ \"Height, cm\" data)\n                     (map (jitter 0.5)))\n        weights (i/log (i/$ \"Weight\" data))\n        a (intercept heights weights)\n        b (slope heights weights)]\n    (-> (c/scatter-plot heights weights\n                        :x-label \"Height, cm\"\n                        :y-label \"log(Weight)\")\n        (c/add-function (regression-line a b) 150 210)\n        (i/view))))\n```", "```py\n(defn residuals [a b x y]\n  (let [estimate (regression-line a b)\n        residual (fn [x y]\n                   (- y (estimate x)))]\n    (map residual x y)))\n\n(defn ex-3-14 []\n  (let [data (swimmer-data)\n        heights (->> (i/$ \"Height, cm\" data)\n                     (map (jitter 0.5)))\n        weights (i/log (i/$ \"Weight\" data))\n        a (intercept heights weights)\n        b (slope heights weights)]\n    (-> (c/scatter-plot heights (residuals a b heights weights)\n                        :x-label \"Height, cm\"\n                        :y-label \"Residuals\")\n        (c/add-function (constantly 0) 150 210)\n        (i/view))))\n```", "```py\n(defn r-squared [a b x y]\n  (let [r-var (variance (residuals a b x y))\n        y-var (variance y)]\n    (- 1 (/ r-var y-var))))\n\n(defn ex-3-15 []\n  (let [data (swimmer-data)\n        heights (i/$ \"Height, cm\" data)\n        weights (i/log (i/$ \"Weight\" data))\n        a (intercept heights weights)\n        b (slope heights weights)]\n    (r-squared a b heights weights)))\n```", "```py\n(defn ex-3-16 []\n  (->> (swimmer-data)\n       (i/$ [\"Height, cm\" \"Weight\"])\n       (i/to-matrix)))\n```", "```py\n(defn ex-3-17 []\n  (->> (swimmer-data)\n       (i/$ \"Height, cm\")\n       (i/matrix)))\n```", "```py\n  A 859x1 matrix\n ---------------\n 1.66e+02\n 1.92e+02\n 1.73e+02\n ...\n 1.88e+02\n 1.87e+02\n 1.83e+02\n```", "```py\n(defn add-bias [x]\n  (i/bind-columns (repeat (i/nrow x) 1) x))\n```", "```py\n(defn normal-equation [x y]\n  (let [xtx  (i/mmult (i/trans x) x)\n        xtxi (i/solve xtx)\n        xty  (i/mmult (i/trans x) y)]\n    (i/mmult xtxi xty)))\n```", "```py\n(defn ex-3-18 []\n  (let [data (swimmer-data)\n        x (i/matrix (i/$ \"Height, cm\" data))\n        y (i/matrix (i/log (i/$ \"Weight\" data)))]\n    (normal-equation (add-bias x) y)))\n```", "```py\n A 2x1 matrix\n -------------\n 1.69e+00\n 1.43e-02\n```", "```py\n(defn feature-matrix [col-names dataset]\n  (-> (i/$ col-names dataset)\n      (i/to-matrix)))\n```", "```py\n(defn ex-3-19 []\n  (feature-matrix [\"Height, cm\" \"Age\"] (swimmer-data)))\n```", "```py\nA 859x2 matrix\n ---------------\n 1.66e+02  2.30e+01\n 1.92e+02  2.20e+01\n 1.73e+02  2.00e+01\n ...\n 1.88e+02  2.40e+01\n 1.87e+02  1.90e+01\n 1.83e+02  2.20e+01\n```", "```py\n(defn ex-3-20 []\n  (let [data (swimmer-data)\n        x (->> data\n                (feature-matrix [\"Height, cm\" \"Age\"])\n                (add-bias))\n        y (->> (i/$ \"Weight\" data)\n                (i/log)\n                (i/matrix))]\n    (normal-equation x y)))\n```", "```py\n A 3x1 matrix\n -------------\n 1.69e+00\n 1.40e-02\n 2.80e-03\n```", "```py\n(defn r-squared [coefs x y]\n   (let [fitted      (i/mmult x coefs)\n         residuals   (i/minus y fitted)\n         differences (i/minus y (s/mean y))\n         rss         (i/sum-of-squares residuals)\n         ess         (i/sum-of-squares differences)]\n     (- 1 (/ rss ess))))\n```", "```py\n(defn ex-3-21 []\n  (let [data (swimmer-data)\n        x (->> (feature-matrix [\"Height, cm\" \"Age\"] data)\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)]\n    (r-squared beta x y)))\n```", "```py\n(defn matrix-adj-r-squared [coefs x y]\n  (let [r-squared (matrix-r-squared coefs x y)\n        n (count y)\n        p (count coefs)]\n    (- 1\n       (* (- 1 r-squared)\n          (/ (dec n)\n             (dec (- n p)))))))\n```", "```py\n(defn ex-3-22 []\n  (let [data (swimmer-data)\n        x (->> (feature-matrix [\"Height, cm\" \"Age\"] data)\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)]\n    (adj-r-squared beta x y)))\n```", "```py\n(defn f-test [y x]\n  (let [coefs       (normal-equation x y)\n        fitted      (i/mmult x coefs)\n        difference  (i/minus fitted (s/mean y))\n        residuals   (i/minus y fitted)\n        ess         (i/sum-of-squares difference)\n        rss         (i/sum-of-squares residuals)\n        p           (i/ncol x)\n        n           (i/nrow y)\n        df1         (- p 1)\n        df2         (- n p)\n        msm         (/ ess df1)\n        mse         (/ rss df2)\n        f-stat      (/ msm mse)]\n    (s/cdf-f f-stat :df1 df1 :df2 df2 :lower-tail? false)))\n\n(defn ex-3-23 []\n  (let [data (swimmer-data)\n        x (->> (feature-matrix [\"Height, cm\" \"Age\"] data)\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log))\n        beta (:coefs (s/linear-model y x :intercept false))]\n    (f-test beta x y)))\n```", "```py\n(defn dummy-mf [sex]\n  (if (= sex \"F\")\n    0.0 1.0))\n\n(defn ex-3-25 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Age\"\n                                \"Dummy MF\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)]\n    (adj-r-squared beta x y)))\n```", "```py\n(defn beta-weight [coefs x y]\n  (let [sdx (map s/sd (i/trans x))\n        sdy (s/sd y)]\n    (map #(/ (* %1 %2) sdy) sdx coefs)))\n\n(defn ex-3-26 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Age\"\n                                \"Dummy MF\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)]\n    (beta-weight beta x y)))\n```", "```py\n(0.0 0.650 0.058 0.304)\n```", "```py\n(defn to-year [str]\n  (-> (coerce/from-date str)\n      (time/year)))\n\n(defn ex-3-27 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf)\n                  (i/add-derived-column \"Year of birth\"\n                                        [\"Date of birth\"]\n                                        to-year))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Age\"\n                                \"Dummy MF\"\n                                \"Year of birth\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)]\n    (beta-weight beta x y)))\n\n;; (-0.0 0.650 0.096 0.304 0.038)\n```", "```py\n(defn ex-3-28 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Year of birth\"\n                                        [\"Date of birth\"]\n                                        to-year))\n        x (->> (i/$ \"Age\" data)\n               (map (jitter 0.5)))\n        y (i/$ \"Year of birth\" data)]\n    (-> (c/scatter-plot x y\n                        :x-label \"Age\"\n                        :y-label \"Year of birth\")\n        (i/view))))\n```", "```py\n(defn predict [coefs x]\n  (-> (i/trans coefs)\n      (i/mmult x)\n      (first)))\n```", "```py\n(defn ex-3-29 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf)\n                  (i/add-derived-column \"Year of birth\"\n                                        [\"Date of birth\"]\n                                        to-year))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Dummy MF\"\n                                \"Year of birth\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)\n        xspitz (i/matrix [1.0 183 1 1950])]\n    (i/exp (predict beta xspitz))))\n```", "```py\n (defn prediction-interval [x y a]\n  (let [xtx    (i/mmult (i/trans x) x)\n        xtxi   (i/solve xtx)\n        xty    (i/mmult (i/trans x) y)\n        coefs  (i/mmult xtxi xty)\n        fitted (i/mmult x coefs)\n        resid  (i/minus y fitted)\n        rss    (i/sum-of-squares resid)\n        n      (i/nrow y)\n        p      (i/ncol x)\n        dfe    (- n p)\n        mse    (/ ssr dfe)\n        se-y   (first (i/mmult (i/trans a) xtxi a))\n        t-stat (i/sqrt (* mse (+ 1 se-y)))]\n    (* (s/quantile-t 0.975 :df dfe) t-stat)))\n```", "```py\n(defn ex-3-30 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf)\n                  (i/add-derived-column \"Year of birth\"\n                                        [\"Date of birth\"]\n                                        to-year))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Dummy MF\"\n                                \"Year of birth\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        xspitz (i/matrix [1.0 183 1 1950])]\n    (i/exp (prediction-interval x y xspitz))))\n```", "```py\n(defn ex-3-32 []\n  (let [data (->> (swimmer-data)\n                  (i/add-derived-column \"Dummy MF\"\n                                        [\"Sex\"]\n                                        dummy-mf))\n        x (->> data\n               (feature-matrix [\"Height, cm\"\n                                \"Dummy MF\"\n                                \"Age\"])\n               (add-bias))\n        y (->> (i/$ \"Weight\" data)\n               (i/log)\n               (i/matrix))\n        beta (normal-equation x y)\n        xspitz (i/matrix [1.0 185 1 22])]\n    (i/exp (predict beta xspitz))))\n```"]