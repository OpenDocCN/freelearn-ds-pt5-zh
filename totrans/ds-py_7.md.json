["```py\nimport keras\nbase_model = keras.applications.inception_v3.InceptionV3(include_top=False, weights='imagenet')\n```", "```py\nfor layer in base_model.layers:\n    layer.trainable = False\n```", "```py\nfor layer in base_model.layers[:5]:   layer.trainable = False\n```", "```py\n    from PIL import Image\n    def get_input(file):\n        return Image.open(PATH+file)\n    def get_output(file):\t\n        class_label = file.split('.')[0]\n        if class_label == 'dog': label_vector = [1,0]\n        elif class_label == 'cat': label_vector = [0,1]\n        return label_vector\n    ```", "```py\n    SIZE = 200\n    CHANNELS = 3\n    ```", "```py\n    def preprocess_input(image):\n\n        # Data preprocessing\n        image = image.resize((SIZE,SIZE))\n        image = np.array(image).reshape(SIZE,SIZE,CHANNELS)\n\n        # Normalize image\n        image = image/255.0\n\n        return image\n    ```", "```py\n    import numpy as np\n    def custom_image_generator(images, batch_size = 128):\n\n        while True:\n            # Randomly select images for the batch\n            batch_images = np.random.choice(images, size = batch_size)\n            batch_input = []\n            batch_output = [] \n\n            # Read image, perform preprocessing and get labels\n            for file in batch_images:\n                # Function that reads and returns the image\n                input_image = get_input(file)\n                # Function that gets the label of the image\n                label = get_output(file)\n                # Function that pre-processes and augments the image\n                image = preprocess_input(input_image)\n                batch_input.append(image)\n                batch_output.append(label)\n            batch_x = np.array(batch_input)\n            batch_y = np.array(batch_output)\n            # Return a tuple of (images,labels) to feed the network\n            yield(batch_x, batch_y)\n    ```", "```py\n    from tqdm import tqdm\n    def get_data(files):\n        data_image = []\n        labels = []\n        for image in tqdm(files):\n            label_vector = get_output(image)\n\n            img = Image.open(PATH + image)\n            img = img.resize((SIZE,SIZE))\n\n            labels.append(label_vector)\n            img = np.asarray(img).reshape(SIZE,SIZE,CHANNELS)\n            img = img/255.0\n            data_image.append(img)\n\n        data_x = np.array(data_image)\n        data_y = np.array(labels)\n\n        return (data_x, data_y)\n    ```", "```py\n    from random import shuffle\n    files = os.listdir(PATH)\n    random.shuffle(files)\n    train = files[:7000]\n    test = files[7000:]\n    validation_data = get_data(test)\n    ```", "```py\n    import matplotlib.pyplot as plt\n    plt.figure(figsize=(20,10))\n    columns = 5\n    for i in range(columns):\n        plt.subplot(5 / columns + 1, columns, i + 1)\n        plt.imshow(validation_data[0][i])\n    ```", "```py\n    from keras.applications.inception_v3 import InceptionV3\n    base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(200,200,3))\n    ```", "```py\n    for layer in base_model.layers:\n        layer.trainable = False\n    ```", "```py\n    from keras.layers import GlobalAveragePooling2D, Dense, Dropout\n    from keras.models import Model\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(256, activation='relu')(x)\n    keep_prob = 0.5\n    x = Dropout(rate = 1 - keep_prob)(x)\n    predictions = Dense(2, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n    ```", "```py\n    model.compile(loss='categorical_crossentropy', \n                  optimizer='adam',\n                  metrics = ['accuracy'])\n    ```", "```py\n    EPOCHS = 5\n    BATCH_SIZE = 128\n    model_details = model.fit_generator(custom_image_generator(train, batch_size = BATCH_SIZE),\n                        steps_per_epoch = len(train) // BATCH_SIZE, \n                        epochs = EPOCHS, \n                        validation_data= validation_data,\n                        verbose=1)\n    ```", "```py\n    score = model.evaluate(validation_data[0], validation_data[1])\n    print(\"Accuracy: {0:.2f}%\".format(score[1]*100))\n    ```", "```py\ny_pred = model.predict(validation_data[0])\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(validation_data[1],axis=1))[0]\nlabels = ['dog', 'cat']\nimage = 5\nplt.imshow(validation_data[0][incorrect_indices[image]].reshape(SIZE, SIZE, CHANNELS),  cmap=plt.get_cmap('gray'))\nplt.show()\nprint(\"Prediction: {0}\".format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```", "```py\ny_pred = model.predict(validation_data[0])\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(validation_data[1],axis=1))[0]\nlabels = ['dog', 'cat']\nimage = 5\nplt.imshow(validation_data[0][incorrect_indices[image]].reshape(SIZE, SIZE, CHANNELS),  cmap=plt.get_cmap('gray'))\nplt.show()\nprint(\"Prediction: {0}\".format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```", "```py\nfrom numpy.random import seed\nseed(1)\nfrom tensorflow import set_random_seed\nset_random_seed(1)\n```", "```py\nfrom keras.callbacks import ReduceLROnPlateau\nReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, min_delta=0.0001, min_lr=0)\n```", "```py\nimport pandas_profiling\npandas_profiling.ProfileReport(df)\n```", "```py\nimport keras\nkeras.callbacks.TensorBoard(log_dir='./logs', update_freq='epoch')\n```", "```py\ntensorboard --logdir logs --port 6607\n```", "```py\nimport matplotlib.pyplot as plt\nplt.plot(model_details.history['acc'])\nplt.plot(model_details.history['val_acc'])\nplt.title('Cats vs. Dogs model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train set', 'Dev set'], loc='upper left')\nplt.show()\n```", "```py\nplt.plot(model_details.history['loss'])\nplt.plot(model_details.history['val_loss'])\nplt.title('Cats vs. Dogs model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train set', 'Test set'], loc='upper left')\nplt.show()\n```", "```py\n    def get_label(file):\n        class_label = file.split('.')[0]\n        if class_label == 'dog': label_vector = 0\n        elif class_label == 'cat': label_vector = 1\n        return label_vector\n    ```", "```py\n    SIZE = 50\n    ```", "```py\n    import os\n    from PIL import Image\n    import numpy as np\n    from random import shuffle\n    def get_data():\n        data = []\n        files = os.listdir(PATH)\n        for image in tqdm(files):\n            label_vector = get_label(image)\n\n            img = Image.open(PATH + image).convert('L')\n            img = img.resize((SIZE,SIZE))\n\n            data.append([np.asarray(img),np.array(label_vector)])\n\n        shuffle(data)\n        return data\n    ```", "```py\n    data = get_data()\n    train = data[:7000]\n    test = data[7000:]\n    x_train = [data[0] for data in train]\n    y_train = [data[1] for data in train]\n    x_test = [data[0] for data in test]\n    y_test = [data[1] for data in test]\n    x_train = np.array(x_train).reshape(-1,SIZE,SIZE,1)\n    x_test = np.array(x_test).reshape(-1,SIZE,SIZE,1)\n    ```", "```py\n    TRAINING_TIME = 60 * 60 * 1 # 1 hour\n    ```", "```py\n    import autokeras as ak\n    model = ak.ImageClassifier(verbose=True)\n    model.fit(x_train, y_train, time_limit=TRAINING_TIME)\n    model.final_fit(x_train, y_train, x_test, y_test, retrain=True)\n    ```", "```py\n    model.export_autokeras_model(\"model.h5\")\n    ```", "```py\n    from autokeras.utils import pickle_from_file\n    model = pickle_from_file(\"model.h5\")\n    predictions = model.predict(x_test)\n    ```", "```py\n    score = model.evaluate(x_test, y_test)\n    print(\"\\nScore: {}\".format(score))\n    ```", "```py\nmodel = Sequential()\n\nmodel.add(Conv2D(48, (3, 3), activation='relu', padding='same', input_shape=(50,50,1)))    \nmodel.add(Conv2D(48, (3, 3), activation='relu'))    \nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.10))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\nmodel.summary()\n```", "```py\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png', show_shapes=True)\n```", "```py\ny_pred = model.predict(test_data[0])\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(test_data[1],axis=1))[0]\nlabels = ['dog', 'cat']\nimage = 5\nplt.imshow(test_data[0][incorrect_indices[image]].reshape(SIZE, SIZE, CHANNELS),  cmap=plt.get_cmap('gray'))\nplt.show()\nprint(\"Prediction: {0}\".format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```"]