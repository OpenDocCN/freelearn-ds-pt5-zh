["```py\n(defn load-data [file]\n  (-> (io/resource file)\n      (str)\n      (iio/read-dataset :delim \\tab :header true)))\n\n(defn ex-4-1 []\n  (i/view (load-data :titanic)))\n```", "```py\n(defn frequency-table [sum-column group-columns dataset]\n  (->> (i/$ group-columns dataset)\n       (i/add-column sum-column (repeat 1))\n       (i/$rollup :sum sum-column group-columns)))\n\n(defn ex-4-2 []\n  (->> (load-data \"titanic.tsv\")\n       (frequency-table :count [:sex :survived])))\n```", "```py\n| :survived |   :sex | :count |\n|-----------+--------+--------|\n|         n |   male |    682 |\n|         n | female |    127 |\n|         y |   male |    161 |\n|         y | female |    339 |\n```", "```py\n(defn frequency-map [sum-column group-cols dataset]\n  (let [f (fn [freq-map row]\n            (let [groups (map row group-cols)]\n              (->> (get row sum-column)\n                   (assoc-in freq-map groups))))]\n    (->> (frequency-table sum-column group-cols dataset)\n         (:rows)\n         (reduce f {}))))\n```", "```py\n(defn ex-4-3 []\n  (->> (load-data \"titanic.tsv\")\n       (frequency-map :count [:sex :survived])))\n\n;; => {\"female\" {\"y\" 339, \"n\" 127}, \"male\" {\"y\" 161, \"n\" 682}}\n```", "```py\n(defn fatalities-by-sex [dataset]\n  (let [totals (frequency-map :count [:sex] dataset)\n        groups (frequency-map :count [:sex :survived] dataset)]\n    {:male (/ (get-in groups [\"male\" \"n\"])\n              (get totals \"male\"))\n     :female (/ (get-in groups [\"female\" \"n\"])\n                (get totals \"female\"))}))\n\n(defn ex-4-4 []\n  (-> (load-data \"titanic.tsv\")\n      (fatalities-by-sex)))\n\n;; {:male 682/843, :female 127/466}\n```", "```py\n(defn relative-risk [p1 p2]\n  (float (/ p1 p2)))\n\n(defn ex-4-5 []\n  (let [proportions (-> (load-data \"titanic.tsv\")\n                        (fatalities-by-sex))]\n    (relative-risk (get proportions :male)\n                   (get proportions :female))))\n;; 2.9685\n```", "```py\n(defn odds-ratio [p1 p2]\n  (float\n   (/ (* p1 (- 1 p2))\n      (* p2 (- 1 p1)))))\n\n(defn ex-4-6 []\n  (let [proportions (-> (load-data \"titanic.tsv\")\n                        (fatalities-by-sex))]\n    (odds-ratio (get proportions :male)\n                (get proportions :female))))\n;; 11.3072\n```", "```py\n(defn ex-4-7 []\n  (let [passengers (concat (repeat 127 0)\n                           (repeat 339 1))\n        bootstrap (s/bootstrap passengers i/sum :size 10000)]\n    (-> (c/histogram bootstrap\n                     :x-label \"Female Survivors\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn ex-4-8 []\n  (-> (concat (repeat 127 0)\n              (repeat 339 1))\n      (s/bootstrap i/sum :size 10000)\n      (s/sd)))\n\n;; 9.57\n```", "```py\n(defn ex-4-9 []\n  (let [passengers (concat (repeat 127 0)\n                           (repeat 339 1))\n        bootstrap (s/bootstrap passengers i/sum :size 10000)\n        binomial (fn [x]\n                   (s/pdf-binomial x :size 466 :prob (/ 339 466)))\n        normal (fn [x]\n                 (s/pdf-normal x :mean 339 :sd 9.57))]\n    (-> (c/histogram bootstrap\n                     :x-label \"Female Survivors\"\n                     :series-label \"Bootstrap\"\n                     :nbins 20\n                     :density true\n                     :legend true)\n        (c/add-function binomial 300 380\n                        :series-label \"Biomial\")\n        (c/add-function normal 300 380\n                        :series-label \"Normal\")\n        (i/view))))\n```", "```py\n(defn standard-error-proportion [p n]\n  (-> (- 1 p)\n      (* p)\n      (/ n)\n      (i/sqrt)))\n\n(defn ex-4-10 []\n  (let [survived (->> (load-data \"titanic.tsv\")\n                      (frequency-map :count [:sex :survived]))\n        n (reduce + (vals (get survived \"female\")))\n        p (/ (get-in survived [\"female\" \"y\"]) n)]\n    (se-proportion p n)))\n\n;; 0.0206\n```", "```py\n(defn ex-4-11 []\n  (let [dataset     (load-data \"titanic.tsv\")\n        proportions (fatalities-by-sex dataset)\n        survived    (frequency-map :count [:survived] dataset)\n        total  (reduce + (vals survived))\n        pooled (/ (get survived \"n\") total)\n        p-diff (- (get proportions :male)\n                  (get proportions :female))\n        z-stat (/ p-diff (se-proportion pooled total))]\n    (- 1 (s/cdf-normal (i/abs z-stat)))))\n\n;; 0.0\n```", "```py\n(defn se-large-proportion [p n N]\n  (* (se-proportion p n)\n     (i/sqrt (/ (- N n)\n                (- n 1)))))\n```", "```py\n(defn ex-4-12 []\n  (->> (load-data \"titanic.tsv\")\n       (frequency-table :count [:survived :pclass])))\n```", "```py\n| :pclass | :survived | :count |\n|---------+-----------+--------|\n|   third |         y |    181 |\n|   third |         n |    528 |\n|  second |         y |    119 |\n|  second |         n |    158 |\n|   first |         n |    123 |\n|   first |         y |    200 |\n```", "```py\n(defn ex-4-13 []\n  (let [data (->> (load-data \"titanic.tsv\")\n                  (frequency-table :count [:survived :pclass]))]\n    (-> (c/stacked-bar-chart :pclass :count\n                             :group-by :survived\n                             :legend true\n                             :x-label \"Class\"\n                             :y-label \"Passengers\"\n                             :data data)\n        (i/view))))\n```", "```py\n(defn expected-frequencies [data]\n  (let [as (vals (frequency-map :count [:survived] data))\n        bs (vals (frequency-map :count [:pclass] data))\n        total (-> data :rows count)]\n    (for [a as\n          b bs]\n      (* a (/ b total)))))\n\n(defn ex-4-14 []\n  (-> (load-data \"titanic.tsv\")\n      (expected-frequencies)))\n\n;; => (354500/1309 138500/1309 9500/77 573581/1309 224093/1309 15371/77)\n```", "```py\n(defn observed-frequencies [data]\n  (let [as (->> (i/$rollup :sum :count :survived data)\n                (summary :count [:survived]))\n        bs (->> (i/$rollup :sum :count :pclass data)\n                (summary :count [:pclass]))\n        actual (summary :count [:survived :pclass] data)]\n    (for [a (keys as)\n          b (keys bs)]\n      (get-in actual [a b]))))\n```", "```py\n(defn ex-4-15 []\n  (-> (load-data \"titanic.tsv\")\n      (observed-frequencies)))\n\n;; (200 119 181 123 158 528)\n```", "```py\n(defn chisq-stat [observed expected]\n  (let [f (fn [observed expected]\n            (/ (i/sq (- observed expected)) expected))]\n    (reduce + (map f observed expected))))\n\n(defn ex-4-16 []\n  (let [data (load-data \"titanic.tsv\")\n        observed (observed-frequencies data)\n        expected (expected-frequencies data)]\n    (float (chisq-stat observed expected))))\n\n;; 127.86\n```", "```py\n(defn ex-4-17 []\n  (let [data (load-data \"titanic.tsv\")\n        observed (observed-frequencies data)\n        expected (expected-frequencies data)\n        x2-stat  (chisq-stat observed expected)]\n    (s/cdf-chisq x2-stat :df 2 :lower-tail? false)))\n\n;; 1.721E-28\n```", "```py\n(defn ex-4-18 []\n  (let [table  (->> (load-data \"titanic.tsv\")\n                    (frequency-table :count [:pclass :survived])\n                    (i/$order [:survived :pclass] :asc))\n        frequencies (i/$ :count table)\n        matrix      (i/matrix frequencies 3)]\n    (println \"Observed:\"     table)\n    (println \"Frequencies:\"  frequencies)\n    (println \"Observations:\" matrix)\n    (println \"Chi-Squared test:\")\n    (-> (s/chisq-test :table matrix)\n        (clojure.pprint/pprint))))\n```", "```py\n| :survived | :pclass | :count |\n|-----------+---------+--------|\n|         n |   first |    123 |\n|         n |  second |    158 |\n|         n |   third |    528 |\n|         y |   first |    200 |\n|         y |  second |    119 |\n|         y |   third |    181 |\n```", "```py\nA 2x3 matrix\n -------------\n 1.23e+02  1.58e+02  5.28e+02\n 2.00e+02  1.19e+02  1.81e+02\n```", "```py\n(defn sigmoid-function [coefs]\n  (let [bt (i/trans coefs)\n        z  (fn [x] (- (first (i/mmult bt x))))]\n    (fn [x]\n      (/ 1\n         (+ 1\n            (i/exp (z x)))))))\n```", "```py\n(let [f (sigmoid-function [0])]\n  (f [1])\n  ;; => 0.5\n\n  (f [-1])\n  ;; => 0.5\n\n  (f [42])\n  ;; => 0.5\n  )\n```", "```py\n(let [f (sigmoid-function [0.2])\n      g (sigmoid-function [-0.2])]\n  (f [5])\n  ;; => 0.73\n\n  (g [5])\n  ;; => 0.27\n  )\n```", "```py\n(defn logistic-cost [ys y-hats]\n  (let [cost (fn [y y-hat]\n               (if (zero? y)\n                 (- (i/log (- 1 y-hat)))\n                 (- (i/log y-hat))))]\n    (s/mean (map cost ys y-hats))))\n```", "```py\n(defn ex-4-19 []\n  (let [f (fn [[x]]\n            (i/sq x))\n        init [10]]\n    (o/minimize f init)))\n```", "```py\n(defn ex-4-20 []\n  (let [f (fn [[x]]\n            (i/sin x))]\n    (println (:value (o/minimize f [1])))\n    (println (:value (o/minimize f [10])))\n    (println (:value (o/minimize f [100])))))\n\nA 1x1 matrix\n -------------\n-2.14e+05\n\n A 1x1 matrix\n -------------\n 1.10e+01\n\n A 1x1 matrix\n -------------\n 9.90e+01\n```", "```py\n(defn logistic-regression [ys xs]\n  (let [cost-fn (fn [coefs]\n                  (let [classify (sigmoid-function coefs)\n                        y-hats   (map (comp classify i/trans) xs)]\n                    (logistic-cost ys y-hats)))\n        init-coefs (repeat (i/ncol xs) 0.0)]\n    (o/minimize cost-fn init-coefs)))\n```", "```py\n(defn add-dummy [column-name from-column value dataset]\n  (i/add-derived-column column-name\n                        [from-column]\n                        #(if (= % value) 1 0)\n                        dataset))\n```", "```py\n(defn matrix-dataset []\n  (->> (load-data \"titanic.tsv\")\n       (add-dummy :dummy-survived :survived \"y\")\n       (i/add-column :bias (repeat 1.0))\n       (add-dummy :dummy-mf :sex \"male\")\n       (add-dummy :dummy-1 :pclass \"first\")\n       (add-dummy :dummy-2 :pclass \"second\")\n       (add-dummy :dummy-3 :pclass \"third\")\n       (i/$ [:dummy-survived :bias :dummy-mf\n             :dummy-1 :dummy-2 :dummy-3])\n       (i/to-matrix)))\n```", "```py\n(defn ex-4-21 []\n  (let [data (matrix-dataset)\n        ys (i/$ 0 data)\n        xs (i/$ [:not 0] data)]\n    (logistic-regression ys xs)))\n```", "```py\n;; [0.9308681940090573 -2.5150078795265753 1.1782368822555778\n;;  0.29749924127081434 -0.5448679293359383]\n```", "```py\n(defn ex-4-22 []\n  (let [data (matrix-dataset)\n        ys (i/$ 0 data)\n        xs (i/$ [:not 0] data)\n        coefs (logistic-regression ys xs)\n        classifier (comp logistic-class\n                      (sigmoid-function coefs)\n                      i/trans)]\n    (println \"Observed: \" (map int (take 10 ys)))\n    (println \"Predicted:\" (map classifier (take 10 xs)))))\n\n;; Observed:  (1 1 0 0 0 1 1 0 1 0)\n;; Predicted: (1 0 1 0 1 0 1 0 1 0)\n```", "```py\n(defn ex-4-23 []\n  (let [data (matrix-dataset)\n        ys (i/$ 0 data)\n        xs (i/$ [:not 0] data)\n        coefs (logistic-regression ys xs)\n        classifier (comp logistic-class\n                      (sigmoid-function coefs)\n                      i/trans)\n        y-hats (map classifier xs)]\n    (frequencies (map = y-hats (map int ys)))))\n\n;; {true 1021, false 288}\n```", "```py\n(defn confusion-matrix [ys y-hats]\n  (let [classes   (into #{} (concat ys y-hats))\n        confusion (frequencies (map vector ys y-hats))]\n    (i/dataset (cons nil classes)\n               (for [x classes]\n                 (cons x\n                       (for [y classes]\n                         (get confusion [x y])))))))\n```", "```py\n(defn ex-4-24 []\n  (let [data (matrix-dataset)\n        ys (i/$ 0 data)\n        xs (i/$ [:not 0] data)\n        coefs (logistic-regression ys xs)\n        classifier (comp logistic-class\n                      (sigmoid-function coefs)\n                      i/trans)\n        y-hats (map classifier xs)]\n    (confusion-matrix (map int ys) y-hats)))\n```", "```py\n|   |   0 |   1 |\n|---+-----+-----|\n| 0 | 682 | 127 |\n| 1 | 161 | 339 |\n```", "```py\n(defn kappa-statistic [ys y-hats]\n  (let [n (count ys)\n        pa (/ (count (filter true? (map = ys y-hats))) n)\n        ey (/ (count (filter zero? ys)) n)\n        eyh (/ (count (filter zero? y-hats)) n)\n        pe (+ (* ey eyh)\n              (* (- 1 ey)\n                 (- 1 eyh)))]\n    (/ (- pa pe)\n       (- 1 pe))))\n\n(defn ex-4-25 []\n   (let [data (matrix-dataset)\n         ys (i/$ 0 data)\n         xs (i/$ [:not 0] data)\n         coefs (logistic-regression ys xs)\n         classifier (comp logistic-class\n                       (sigmoid-function coefs)\n                       i/trans)\n         y-hats (map classifier xs)]\n     (float (kappa-statistic (map int ys) y-hats))))\n\n;; 0.527\n```", "```py\n| :survived |   :sex | :count |\n|-----------+--------+--------|\n|         n |   male |    682 |\n|         n | female |    127 |\n|         y |   male |    161 |\n|         y | female |    339 |\n```", "```py\n| :survived | :pclass | :count |\n|-----------+---------+--------|\n|         n |   first |    123 |\n|         n |  second |    158 |\n|         n |   third |    528 |\n|         y |   first |    200 |\n|         y |  second |    119 |\n|         y |   third |    181 |\n\n| :survived |   :sex | :count |\n|-----------+--------+--------|\n|         n | female |    127 |\n|         n |   male |    682 |\n|         y | female |    339 |\n|         y |   male |    161 |\n```", "```py\n(defn inc-class-total [model class]\n  (update-in model [class :total] (fnil inc 0)))\n\n(defn inc-predictors-count-fn [row class]\n  (fn [model attr]\n    (let [val (get row attr)]\n      (update-in model [class attr val] (fnil inc 0)))))\n\n(defn assoc-row-fn [class-attr predictors]\n  (fn [model row]\n    (let [class (get row class-attr)]\n      (reduce (inc-predictors-count-fn row class)\n              (inc-class-total model class)\n              predictors))))\n\n(defn bayes-classifier [data class-attr predictors]\n  (reduce (assoc-row-fn class-attr predictors) {} data))\n```", "```py\n(defn ex-4-26 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (bayes-classifier :survived [:sex :pclass])\n       (clojure.pprint/pprint)))\n```", "```py\n{:classes\n {\"n\"\n  {:predictors\n   {:pclass {\"third\" 528, \"second\" 158, \"first\" 123},\n    :sex {\"male\" 682, \"female\" 127}},\n   :n 809},\n  \"y\"\n  {:predictors\n   {:pclass {\"third\" 181, \"second\" 119, \"first\" 200},\n    :sex {\"male\" 161, \"female\" 339}},\n   :n 500}},\n :n 1309}\n```", "```py\n(defn posterior-probability [model test class-attr]\n  (let [observed (get-in model [:classes class-attr])\n        prior (/ (:n observed)\n                 (:n model))]\n    (apply * prior\n           (for [[predictor value] test]\n             (/ (get-in observed [:predictors predictor value])\n                (:n observed))))))\n```", "```py\n(defn bayes-classify [model test]\n  (let [probability (partial posterior-probability model test)\n        classes     (keys (:classes model))]\n    (apply max-key probability classes)))\n```", "```py\n(defn ex-4-27 []\n  (let [model (->> (load-data \"titanic.tsv\")\n                   (:rows)\n                   (naive-bayes :survived [:sex :pclass]))]\n    (println \"Third class male:\"\n             (bayes-classify model {:sex \"male\" :pclass \"third\"}))\n    (println \"First class female:\"\n             (bayes-classify model {:sex \"female\" :pclass \"first\"}))))\n\n;; Third class male: n\n;; First class female: y\n```", "```py\n(defn ex-4-28 []\n   (let [data (:rows (load-data \"titanic.tsv\"))\n         model (bayes-classifier :survived [:sex :pclass] data)\n         test (fn [test]\n                (= (:survived test)\n                   (bayes-classify model\n                            (select-keys test [:sex :class]))))\n         results (frequencies (map test data))]\n     (/ (get results true)\n        (apply + (vals results)))))\n\n;; 1021/1309\n```", "```py\n(defn ex-4-195 []\n    (let [data (:rows (load-data \"titanic.tsv\"))\n          model (bayes-classifier :survived [:sex :pclass] data)\n          classify (fn [test]\n                     (->> (select-keys test [:sex :pclass])\n                          (bayes-classify model)))\n          ys      (map :survived data)\n          y-hats (map classify data)]\n      (confusion-matrix ys y-hats)))\n```", "```py\n|   |   n |   y |\n|---+-----+-----|\n| n | 682 | 127 |\n| y | 161 | 339 |\n```", "```py\n(defn information [p]\n  (- (i/log2 p)))\n```", "```py\n(defn entropy [xs]\n  (let [n (count xs)\n        f (fn [x]\n            (let [p (/ x n)]\n              (* p (information p))))]\n    (->> (frequencies xs)\n         (vals)\n         (map f)\n         (reduce +))))\n\n(defn ex-4-30 []\n  (let [red-black (concat (repeat 26 1)\n                          (repeat 26 0))]\n    (entropy red-black)))\n\n;; 1.0\n\n(defn ex-4-202 []\n  (let [picture-not-picture (concat (repeat 12 1)\n                                    (repeat 40 0))]\n    (entropy picture-not-picture)))\n\n;; 0.779\n```", "```py\n(entropy \"mississippi\")\n;; 1.82\n```", "```py\n(entropy \"yellowstone\")\n;; 2.91\n```", "```py\n(defn ex-4-32 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (map :survived)\n       (entropy)))\n\n;; 0.959\n```", "```py\n(defn weighted-entropy [groups]\n  (let [n (count (apply concat groups))\n        e (fn [group]\n            (* (entropy group)\n               (/ (count group) n)))]\n    (->> (map e groups)\n         (reduce +))))\n\n(defn ex-4-33 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (group-by :sex)\n       (vals)\n       (map (partial map :survived))\n       (weighted-entropy)))\n\n;; 0.754\n```", "```py\n(defn information-gain [groups]\n  (- (entropy (apply concat groups))\n     (weighted-entropy groups)))\n```", "```py\n(defn ex-4-205 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (group-by :pclass)\n       (vals)\n       (map (partial map :survived))\n       (information-gain)))\n\n;; 0.07\n```", "```py\n(defn gain-for-predictor [class-attr xs predictor]\n  (let [grouped-classes (->> (group-by predictor xs)\n                             (vals)\n                             (map (partial map class-attr)))]\n    (information-gain grouped-classes)))\n```", "```py\n(defn best-predictor [class-attr xs predictors]\n  (let [gain (partial gain-for-predictor class-attr xs)]\n    (when (seq predictors)\n      (apply max-key gain predictors))))\n```", "```py\n(defn ex-4-35 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (best-predictor :survived [:sex :pclass])))\n\n;; :sex\n```", "```py\n(defn modal-class [classes]\n  (->> (frequencies classes)\n       (apply max-key val)\n       (key)))\n```", "```py\n(defn decision-tree [class-attr predictors xs]\n  (let [classes (map class-attr xs)]\n    (if (zero? (entropy classes))\n      (first classes)\n      (if-let [predictor (best-predictor class-attr\n                                         predictors xs)]\n        (let [predictors  (remove #{predictor} predictors)\n              tree-branch (partial decision-tree\n                                   class-attr predictors)]\n          (->> (group-by predictor xs)\n               (map-vals tree-branch)\n               (vector predictor)))\n        (modal-class classes)))))\n```", "```py\n(defn ex-4-36 []\n  (->> (load-data \"titanic.tsv\")\n       (:rows)\n       (decision-tree :survived [:pclass :sex])\n       (clojure.pprint/pprint)))\n\n;; [:sex\n;;  {\"female\" [:pclass {\"first\" \"y\", \"second\" \"y\", \"third\" \"n\"}],\n;;   \"male\" [:pclass {\"first\" \"n\", \"second\" \"n\", \"third\" \"n\"}]}]\n```", "```py\n(defn age-categories [age]\n  (cond\n   (nil? age) \"unknown\"\n   (< age 13) \"child\"\n   :default   \"adult\"))\n\n(defn ex-4-37 []\n  (let [data (load-data \"titanic.tsv\")]\n    (->> (i/transform-col data :age age-categories)\n         (:rows)\n         (decision-tree :survived [:pclass :sex :age])\n         (clojure.pprint/pprint))))\n```", "```py\n[:sex\n {\"female\"\n  [:pclass\n   {\"first\" [:age {\"adult\" \"y\", \"child\" \"n\", \"unknown\" \"y\"}],\n    \"second\" [:age {\"adult\" \"y\", \"child\" \"y\", \"unknown\" \"y\"}],\n    \"third\" [:age {\"adult\" \"n\", \"child\" \"n\", \"unknown\" \"y\"}]}],\n  \"male\"\n  [:age\n   {\"unknown\" [:pclass {\"first\" \"n\", \"second\" \"n\", \"third\" \"n\"}],\n    \"adult\" [:pclass {\"first\" \"n\", \"second\" \"n\", \"third\" \"n\"}],\n    \"child\" [:pclass {\"first\" \"y\", \"second\" \"y\", \"third\" \"n\"}]}]}]\n```", "```py\n(defn tree-classify [model test]\n  (if (vector? model)\n    (let [[predictor branches] model\n          branch (get branches (get test predictor))]\n      (recur branch test))\n    model))\n```", "```py\n(defn ex-4-38 []\n  (let [data (load-data \"titanic.tsv\")\n        tree (->> (i/transform-col data :age age-categories)\n                  (:rows)\n                  (decision-tree :survived [:pclass :sex :age]))\n        test {:sex \"male\" :pclass \"second\" :age \"child\"}]\n    (tree-classify tree test)))\n\n;; \"y\"\n```", "```py\n(defn ex-4-39 []\n  (let [data (-> (load-data \"titanic.tsv\")\n                 (i/transform-col :age age-categories)\n                 (:rows))\n        tree (decision-tree :survived [:pclass :sex :age] data)]\n    (confusion-matrix (map :survived data)\n                      (map (partial tree-classify tree) data))))\n```", "```py\n|   |   n |   y |\n|---+-----+-----|\n| n | 763 |  46 |\n| y | 219 | 281 |\n```", "```py\n(defn ex-4-40 []\n   (let [data (-> (load-data \"titanic.tsv\")\n                  (i/transform-col :age age-categories)\n                  (:rows))\n         tree (decision-tree :survived [:pclass :sex :age] data)\n         ys     (map :survived data)\n         y-hats (map (partial tree-classify tree) data)]\n     (float (kappa-statistic ys y-hats))))\n\n;; 0.541\n```", "```py\n(defn ex-4-41 []\n   (let [data (-> (load-data \"titanic.tsv\")\n                  (:rows))\n         tree (decision-tree :survived\n                             [:pclass :sex :age :fare] data)\n         ys     (map :survived data)\n         y-hats (map (partial tree-classify tree) data)]\n     (float (kappa-statistic ys y-hats))))\n\n;; 0.925\n```", "```py\n(defn to-weka [dataset]\n  (let [attributes [{:survived [\"y\" \"n\"]}\n                    {:pclass [\"first\" \"second\" \"third\"]}\n                    {:sex [\"male\" \"female\"]}\n                    :age\n                    :fare]\n        vectors (->> dataset\n                     (i/$ [:survived :pclass :sex :age :fare])\n                     (i/to-vect))]\n    (mld/make-dataset :titanic-weka attributes vectors\n                      {:class :survived})))\n```", "```py\n(defn ex-4-42 []\n   (let [dataset (to-weka (load-data \"titanic.tsv\"))\n         classifier (-> (cl/make-classifier :decision-tree :c45)\n                        (cl/classifier-train dataset))\n         classify (partial cl/classifier-classify classifier)\n         ys     (map str  (mld/dataset-class-values dataset))\n         y-hats (map name (map classify dataset))]\n     (println \"Confusion:\" (confusion-matrix ys y-hats))\n     (println \"Kappa:\" (kappa-statistic ys y-hats))))\n```", "```py\n;; Confusion:\n;; |   |   n |   y |\n;; |---+-----+-----|\n;; | n | 712 |  97 |\n;; | y | 153 | 347 |\n;;\n;; Kappa: 0.587\n```", "```py\n(defn ex-4-43 []\n  (let [[test-set train-set] (-> (load-data \"titanic.tsv\")\n                                 (to-weka)\n                                 (mld/do-split-dataset :percentage\n                                                       30))\n        classifier (-> (cl/make-classifier :decision-tree :c45)\n                       (cl/classifier-train train-set))\n        classify (partial cl/classifier-classify classifier)\n        ys     (map str  (mld/dataset-class-values test-set))\n        y-hats (map name (map classify test-set))]\n    (println \"Confusion:\" (confusion-matrix ys y-hats))\n    (println \"Kappa:\" (kappa-statistic ys y-hats))))\n\n;; Confusion:\n;; |   |   n |   y |\n;; |---+-----+-----|\n;; | n | 152 |   9 |\n;; | y |  65 | 167 |\n;;\n;; Kappa: 0.630\n```", "```py\n(defn ex-4-44 []\n  (let [[train-set test-set] (-> (load-data \"titanic.tsv\")\n                                 (to-weka)\n                                 (mld/do-split-dataset :percentage\n                                                       70))\n        classifier (-> (cl/make-classifier :decision-tree :c45)\n                       (cl/classifier-train train-set))\n        classify (partial cl/classifier-classify classifier)\n        ys     (map str  (mld/dataset-class-values test-set))\n        y-hats (map name (map classify test-set))]\n    (println \"Kappa:\" (kappa-statistic ys y-hats))))\n\n;; Kappa: 0.092\n```", "```py\n(defn ex-4-45 []\n  (let [dataset (-> (load-data \"titanic.tsv\")\n                    (to-weka))\n         classifier (-> (cl/make-classifier :decision-tree :c45)\n                        (cl/classifier-train dataset))\n         evaluation (cl/classifier-evaluate classifier\n                                            :cross-validation\n                                            dataset 10)]\n     (println (:confusion-matrix evaluation))\n     (println (:summary evaluation))))\n```", "```py\n;; === Confusion Matrix ===\n;;\n;;    a   b   <-- classified as\n;;  338 162 |   a = y\n;;   99 710 |   b = n\n;;\n;;\n;; Correctly Classified Instances        1048            80.0611 %\n;; Incorrectly Classified Instances       261            19.9389 %\n;; Kappa statistic                          0.5673\n;; Mean absolute error                      0.284\n;; Root mean squared error                  0.3798\n;; Relative absolute error                 60.1444 %\n;; Root relative squared error             78.171  %\n;; Coverage of cases (0.95 level)          99.3888 %\n;; Mean rel. region size (0.95 level)      94.2704 %\n;; Total Number of Instances             1309    \n```", "```py\n(defn ex-4-46 []\n  (let [dataset (->> (load-data \"titanic.tsv\")\n                     (to-weka)\n                     (mlf/make-apply-filter\n                      :replace-missing-values {}))\n        classifier (-> (cl/make-classifier :decision-tree :c45)\n                       (cl/classifier-train dataset))\n        evaluation (cl/classifier-evaluate classifier\n                                           :cross-validation\n                                           dataset 10)]\n    (println (:kappa evaluation))))\n\n;; 0.576\n```", "```py\n(defn ex-4-47 []\n  (let [dataset (->> (load-data \"titanic.tsv\")\n                     (to-weka)\n                     (mlf/make-apply-filter\n                      :replace-missing-values {}))\n        classifier (cl/make-classifier :decision-tree\n                                       :random-forest)\n        evaluation (cl/classifier-evaluate classifier\n                                           :cross-validation\n                                           dataset 10)]\n    (println (:confusion-matrix evaluation))\n    (println (:summary evaluation))))\n```", "```py\n(defn ex-4-48 []\n  (let [dataset (->> (load-data \"titanic.tsv\")\n                     (to-weka)\n                     (mlf/make-apply-filter\n                      :replace-missing-values {}))\n        classifier (cl/make-classifier :decision-tree\n                                       :random-forest)\n        file (io/file (io/resource \"classifier.bin\"))]\n    (clu/serialize-to-file classifier file)))\n```"]