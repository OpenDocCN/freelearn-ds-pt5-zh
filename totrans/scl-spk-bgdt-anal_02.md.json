["```py\nval or var VariableName : DataType = Initial_Value\n\n```", "```py\nvar myVar : Int = 50\nval myVal : String = \"Hello World! I've started learning Scala.\"\n\n```", "```py\nvar myVar = 50\nval myVal = \"Hello World! I've started learning Scala.\"\n\n```", "```py\npackage com.chapter3.OOP \nobject VariablesDemo {\n  def main(args: Array[String]) {\n    var myVar : Int = 50 \n    valmyVal : String = \"Hello World! I've started learning Scala.\"  \n    myVar = 90  \n    myVal = \"Hello world!\"   \n    println(myVar) \n    println(myVal) \n  } \n}\n\n```", "```py\nscala> var testVar = 10\ntestVar: Int = 10\n\nscala> testVar = testVar + 10\ntestVar: Int = 20\n\nscala> val testVal = 6\ntestVal: Int = 6\n\nscala> testVal = testVal + 10\n<console>:12: error: reassignment to val\n testVal = testVal + 10\n ^\nscala>\n\n```", "```py\nval myVal = 20\n//use println method to print it to the console; you will also notice that if will be inferred as Int\nprintln(myVal + 10)\nval myVal = 40\nprintln(myVal * \"test\")\n\n```", "```py\nvar name:String = _\n\n```", "```py\nscala> val result = 6 * 5 + 8\nresult: Int = 38\n\n```", "```py\nscala> 0.5 * result\nres0: Double = 19.0\n\n```", "```py\nval myVal : Integer = 10\n\n```", "```py\nscala> val s = \"Ahmed Shadman\" \ns: String = Ahmed Shadman\n\nscala> val p = s:Object \np: Object = Ahmed Shadman \n\nscala>\n\n```", "```py\nscala> lazy val num = 1 / 0\nnum: Int = <lazy>\n\n```", "```py\nscala> val x = {println(\"x\"); 20}\nx\nx: Int = 20\n\nscala> x\nres1: Int = 20\nscala>\n\n```", "```py\ndef min(x1:Int, x2:Int) : Int = {\n  if (x1 < x2) x1 else x2\n}\n\n```", "```py\ndef min(x1:Int, x2:Int):Int= if (x1 < x2) x1 else x2\n\n```", "```py\ndef getPiValue(): Double = 3.14159\n\n```", "```py\ndef getValueOfPi : Double = 3.14159\n\n```", "```py\ndef sayHello(person :String) = \"Hello \" + person + \"!\"\n\n```", "```py\nscala> def sayHello(person :String) = \"Hello \" + person + \"!\"\nsayHello: (person: String)String\n\nscala> sayHello(\"Asif\")\nres2: String = Hello Asif!\n\nscala>\n\n```", "```py\ndef functionName ([list of parameters]) : [return type] = {\n  function body\n  value_to_return\n}\n\n```", "```py\nscala> def addInt( x:Int, y:Int ) : Int = {\n |       var sum:Int = 0\n |       sum = x + y\n |       sum\n |    }\naddInt: (x: Int, y: Int)Int\n\nscala> addInt(20, 34)\nres3: Int = 54\n\nscala>\n\n```", "```py\nscala> def max(x1 : Int , x2: Int)  = {\n |     if (x1>x2) x1 else x2\n | }\nmax: (x1: Int, x2: Int)Int\n\nscala> max(12, 27)\nres4: Int = 27\n\nscala>\n\n```", "```py\nclass Animal {\n  var animalName = null\n  var animalAge = -1\n  def setAnimalName (animalName:String)  {\n    this.animalName = animalName\n  }\n  def setAnaimalAge (animalAge:Int) {\n    this.animalAge = animalAge\n  }\n  def getAnimalName () : String = {\n    animalName\n  }\n  def getAnimalAge () : Int = {\n    animalAge\n  }\n}\n\n```", "```py\nobject <identifier> [extends <identifier>] [{ fields, methods, and classes }]\n\n```", "```py\nobject HelloWorld {\n  def main(args : Array[String]){\n    println(\"Hello world!\")\n  }\n}\n\n```", "```py\npublic class DBConnection {\n  private static DBConnection dbInstance;\n  private DBConnection() {\n  }\n  public static DBConnection getInstance() {\n    if (dbInstance == null) {\n      dbInstance = new DBConnection();\n    }\n    return dbInstance;\n  }\n}\n\n```", "```py\nclass Animal {\n  var animalName:String  = \"notset\"\n  def setAnimalName(name: String) {\n    animalName = name\n  }\n  def getAnimalName: String = {\n    animalName\n  }\n  def isAnimalNameSet: Boolean = {\n    if (getAnimalName == \"notset\") false else true\n  }\n}\n\n```", "```py\nobject Animal{\n  def main(args: Array[String]): Unit= {\n    val obj: Animal = new Animal\n    var flag:Boolean  = false        \n    obj.setAnimalName(\"dog\")\n    flag = obj.isAnimalNameSet\n    println(flag)  // prints true \n\n    obj.setAnimalName(\"notset\")\n    flag = obj.isAnimalNameSet\n    println(flag)   // prints false     \n  }\n}\n\n```", "```py\npublic class Animal {\n  public String animalName = \"null\";\n  public void setAnimalName(String animalName) {\n    this.animalName = animalName;\n  }\n  public String getAnimalName() {\n    return animalName;\n  }\n  public boolean isAnimalNameSet() {\n    if (getAnimalName() == \"notset\") {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  public static void main(String[] args) {\n    Animal obj = new Animal();\n    boolean flag = false;         \n    obj.setAnimalName(\"dog\");\n    flag = obj.isAnimalNameSet();\n    System.out.println(flag);        \n\n    obj.setAnimalName(\"notset\");\n    flag = obj.isAnimalNameSet();\n    System.out.println(flag);\n  }\n}\n\n```", "```py\nobject RunAnimalExample {\n  val animalObj = new Animal\n  println(animalObj.getAnimalName) //prints the initial name\n  println(animalObj.getAnimalAge) //prints the initial age\n  // Now try setting the values of animal name and age as follows:   \n  animalObj.setAnimalName(\"dog\") //setting animal name\n  animalObj.setAnaimalAge(10) //seting animal age\n  println(animalObj.getAnimalName) //prints the new name of the animal \n  println(animalObj.getAnimalAge) //Prints the new age of the animal\n}\n\n```", "```py\nnotset \n-1 \ndog \n10\n\n```", "```py\nclass Animal {\n  val age = 2  \n}\n\n```", "```py\nclass Cat extends Animal{\n  override val age = 3\n  def printAge ={\n    println(age)\n  }\n}\n\n```", "```py\nscala> class Animal {\n |     final val age = 3\n | }\ndefined class Animal\nscala> class Cat extends Animal {\n |     override val age = 5\n | }\n<console>:13: error: overriding value age in class Animal of type Int(3);\n value age cannot override final member\n override val age = 5\n ^\nscala>\n\n```", "```py\nclass OuterClass { //Outer class\n  class InnerClass {\n    def printName() { println(\"My name is Asif Karim!\") }\n\n    class InnerMost { //Inner class\n      printName() // OK\n    }\n  }\n  (new InnerClass).printName() // OK because now printName() is public\n}\n\n```", "```py\npackage MyPackage {\n  class SuperClass {\n    private def printName() { println(\"Hello world, my name is Asif Karim!\") }\n  }   \n  class SubClass extends SuperClass {\n    printName() //ERROR\n  }   \n  class SubsubClass {\n    (new SuperClass).printName() // Error: printName is not accessible\n  }\n}\n\n```", "```py\npackage MyPackage {\n  class SuperClass {\n    protected def printName() { println(\"Hello world, my name is Asif\n                                         Karim!\") }\n  }   \n  class SubClass extends SuperClass {\n    printName()  //OK\n  }   \n  class SubsubClass {\n    (new SuperClass).printName() // ERROR: printName is not accessible\n  }\n}\n\n```", "```py\npackage Country {\n  package Professional {\n    class Executive {\n      private[Professional] var jobTitle = \"Big Data Engineer\"\n      private[Country] var friend = \"Saroar Zahan\" \n      protected[this] var secret = \"Age\"\n\n      def getInfo(another : Executive) {\n        println(another.jobTitle)\n        println(another.friend)\n        println(another.secret) //ERROR\n        println(this.secret) // OK\n      }\n    }\n  }\n}\n\n```", "```py\nclass Animal (animalName:String, animalAge:Int) {\n  def getAnimalName () : String = {\n    animalName\n  }\n  def getAnimalAge () : Int = {\n    animalAge\n  }\n}\n\n```", "```py\nobject RunAnimalExample extends App{\n  val animalObj = new animal(\"Cat\",-1)\n  println(animalObj.getAnimalName)\n  println(animalObj.getAnimalAge)\n}\n\n```", "```py\nclass Hello(primaryMessage: String, secondaryMessage: String) {\n  def this(primaryMessage: String) = this(primaryMessage, \"\")\n  // auxilary constructor\n  def sayHello() = println(primaryMessage + secondaryMessage)\n}\nobject Constructors {\n  def main(args: Array[String]): Unit = {\n    val hello = new Hello(\"Hello world!\", \" I'm in a trouble,\n                          please help me out.\")\n    hello.sayHello()\n  }\n}\n\n```", "```py\ntrait Animal {\n  val age : Int\n  val gender : String\n  val origin : String\n }\n\n```", "```py\ntrait Cat extends Animal{ }\n\n```", "```py\ntrait EqualityChecking {\n  def isEqual(x: Any): Boolean\n  def isNotEqual(x: Any): Boolean = !isEqual(x)\n}\n\n```", "```py\ntrait EqualityPrinter extends Any {\n  def print(): Unit = println(this)\n}\n\n```", "```py\nabstract class Cat extends Animal { }\n\n```", "```py\nabstract class Animal(animalName:String = \"notset\") {\n  //Method with definition/return type\n  def getAnimalAge\n  //Method with no definition with String return type\n  def getAnimalGender : String\n  //Explicit way of saying that no implementation is present\n  def getAnimalOrigin () : String {} \n  //Method with its functionality implemented\n  //Need not be implemented by subclasses, can be overridden if required\n  def getAnimalName : String = {\n    animalName\n  }\n}\n\n```", "```py\nabstract class MyWriter {\n  var message: String = \"null\"\n  def setMessage(message: String):Unit\n  def printMessage():Unit\n}\n\n```", "```py\nclass ConsolePrinter extends MyWriter {\n  def setMessage(contents: String):Unit= {\n    this.message = contents\n  }\n\n  def printMessage():Unit= {\n    println(message)\n  }\n}\n\n```", "```py\ntrait lowerCase extends MyWriter {\n  abstract override def setMessage(contents: String) = printMessage()\n}\n\n```", "```py\nval printer:ConsolePrinter = new ConsolePrinter()\nprinter.setMessage(\"Hello! world!\")\nprinter.printMessage()\n\n```", "```py\ncase class <identifier> ([var] <identifier>: <type>[, ... ])[extends <identifier>(<input parameters>)] [{ fields and methods }]\n\n```", "```py\npackage com.chapter3.OOP \nobject CaseClass {\n  def main(args: Array[String]) {\n    case class Character(name: String, isHacker: Boolean) // defining a\n                               class if a person is a computer hacker     \n    //Nail is a hacker\n    val nail = Character(\"Nail\", true)     \n    //Now let's return a copy of the instance with any requested changes\n    val joyce = nail.copy(name = \"Joyce\")\n    // Let's check if both Nail and Joyce are Hackers\n    println(nail == joyce)    \n    // Let's check if both Nail and Joyce equal\n    println(nail.equals(joyce))        \n    // Let's check if both Nail and Nail equal\n    println(nail.equals(nail))    \n    // Let's the hasing code for nail\n    println(nail.hashCode())    \n    // Let's the hasing code for nail\n    println(nail)\n    joyce match {\n      case Character(x, true) => s\"$x is a hacker\"\n      case Character(x, false) => s\"$x is not a hacker\"\n    }\n  }\n}\n\n```", "```py\nfalse \nfalse \ntrue \n-112671915 \nCharacter(Nail,true) \nJoyce is a hacker\n\n```", "```py\n// import only one member of a package\nimport java.io.File\n// Import all members in a specific package\nimport java.io._\n// Import many members in a single import statement\nimport java.io.{File, IOException, FileNotFoundException}\n// Import many members in a multiple import statement\nimport java.io.File\nimport java.io.FileNotFoundException\nimport java.io.IOException\n\n```", "```py\nimport java.util.{List => UtilList}\nimport java.awt.{List => AwtList}\n// In the code, you can use the alias that you have created\nval list = new UtilList\n\n```", "```py\nimport java.io.{File => _, _}\n\n```", "```py\npackage fo.ba\nclass Fo {\n  override def toString = \"I'm fo.ba.Fo\"\n}\n\n```", "```py\npackage singlePack {\n  class Test { override def toString = \"I am SinglePack.Test\" }\n}\n\n```", "```py\npackage nestParentPack {\n  class Test { override def toString = \"I am NestParentPack.Test\" }\n\n  package nestChildPack {\n    class TestChild { override def toString = \"I am nestParentPack.nestChildPack.TestChild\" }\n  }\n}\n\n```", "```py\nobject MainProgram {\n  def main(args: Array[String]): Unit = {\n    println(new nestParentPack.Test())\n    println(new nestParentPack.nestChildPack.TestChild())\n  }\n}\n\n```", "```py\nArrayList<String> animals = new ArrayList<String>();\nanimals.add(\"cat\");\nanimals.add(\"dog\");\nanimals.add(\"rabbit\");\nfor (String animal : animals) {\n  System.out.println(animal);\n}\n\n```", "```py\nimport java.util.ArrayList\nval animals = new ArrayList[String]\nanimals.add(\"cat\")\nanimals.add(\"dog\")\nanimals.add(\"rabbit\")\nfor (animal <- animals) {\n  println(animal)\n}\n\n```", "```py\nobject PatternMatchingDemo1 {\n  def main(args: Array[String]) {\n    println(matchInteger(3))\n  }   \n  def matchInteger(x: Int): String = x match {\n    case 1 => \"one\"\n    case 2 => \"two\"\n    case _ => \"greater than two\"\n  }\n}\n\n```", "```py\n>scalac Test.scala\n>scala Test\n\n```", "```py\nGreater than two\n\n```", "```py\nobject PatternMatchingDemo2 {\n  def main(args: Array[String]): Unit = {\n    println(comparison(\"two\"))\n    println(comparison(\"test\"))\n    println(comparison(1))\n  }\n  def comparison(x: Any): Any = x match {\n    case 1 => \"one\"\n    case \"five\" => 5\n    case _ => \"nothing else\"\n  }\n}\n\n```", "```py\nnothing else\nnothing else\none\n\n```", "```py\nscala> implicit def stringToInt(s: String) = s.toInt\nstringToInt: (s: String)Int\n\n```", "```py\nscala> def add(x:Int, y:Int) = x + y\nadd: (x: Int, y: Int)Int\n\nscala> add(1, \"2\")\nres5: Int = 3\nscala>\n\n```", "```py\ndef add(implicit num: Int) = 2 + num\n\n```", "```py\nimplicit val adder = 2\n\n```", "```py\nadd\n\n```", "```py\n scala> def helloWold(implicit a: Int, b: String) = println(a, b)\n helloWold: (implicit a: Int, implicit b: String)Unit\n\n scala> val i = 2\n i: Int = 2\n\n scala> helloWorld(i, implicitly)\n (2,)\n\n scala>\n\n```", "```py\n scala> def helloWold(implicit a: Int, b: String) = println(a, b)\n helloWold: (implicit a: Int, implicit b: String)Unit\n\n scala> helloWold(i, implicitly)\n (1,)\n\n scala>\n\n```", "```py\n scala> def helloWold(implicit a: Int, b: String) = println(a, b)\n helloWold: (implicit a: Int, implicit b: String)Unit\n\n scala> helloWold(20, \"Hello world!\")\n (20,Hello world!)\n scala>\n\n```", "```py\nscala> class Stack[A] {\n |       private var elements: List[A] = Nil\n |       def push(x: A) { elements = x :: elements }\n |       def peek: A = elements.head\n |       def pop(): A = {\n |         val currentTop = peek\n |         elements = elements.tail\n |         currentTop\n |       }\n |     }\ndefined class Stack\nscala>\n\n```", "```py\nobject ScalaGenericsForStack {\n  def main(args: Array[String]) {\n    val stack = new Stack[Int]\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    stack.push(4)\n    println(stack.pop) // prints 4\n    println(stack.pop) // prints 3\n    println(stack.pop) // prints 2\n    println(stack.pop) // prints 1\n  }\n}\n\n```", "```py\n4\n3\n2\n1\n\n```", "```py\nclass UsingGenericsForLinkedList[X] { // Create a user specific linked list to print heterogenous values\n  private class Node[X](elem: X) {\n    var next: Node[X] = _\n    override def toString = elem.toString\n  }\n\n  private var head: Node[X] = _\n\n  def add(elem: X) { //Add element in the linekd list\n    val value = new Node(elem)\n    value.next = head\n    head = value\n  }\n\n  private def printNodes(value: Node[X]) { // prining value of the nodes\n    if (value != null) {\n      println(value)\n      printNodes(value.next)\n    }\n  }\n  def printAll() { printNodes(head) } //print all the node values at a time\n}\n\n```", "```py\nobject UsingGenericsForLinkedList {\n  def main(args: Array[String]) {\n    // To create a list of integers with this class, first create an instance of it, with type Int:\n    val ints = new UsingGenericsForLinkedList[Int]()\n    // Then populate it with Int values:\n    ints.add(1)\n    ints.add(2)\n    ints.add(3)\n    ints.printAll()\n\n    // Because the class uses a generic type, you can also create a LinkedList of String:\n    val strings = new UsingGenericsForLinkedList[String]()\n    strings.add(\"Salman Khan\")\n    strings.add(\"Xamir Khan\")\n    strings.add(\"Shah Rukh Khan\")\n    strings.printAll()\n\n    // Or any other type such as Double to use:\n    val doubles = new UsingGenericsForLinkedList[Double]()\n    doubles.add(10.50)\n    doubles.add(25.75)\n    doubles.add(12.90)\n    doubles.printAll()\n  }\n}\n\n```", "```py\n3\n2\n1\nShah Rukh Khan\nAamir Khan\nSalman Khan\n12.9\n25.75\n10.5\n\n```", "```py\n           name := \"projectname-sbt\"\n           organization :=\"org.example\"\n           scalaVersion :=\"2.11.8\"\n           version := \"0.0.1-SNAPSHOT\"\n\n```"]