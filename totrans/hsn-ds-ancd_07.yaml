- en: Optimization in Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optimization plays a very important role in the area of data science. For example,
    in finance, investors are constantly seeking a trade-off between risk and return.
    To diversify their investment, they would like to invest in different industries
    or buy several stocks. Thus, for an expected portfolio return, how do they choose
    appropriate stocks to minimize their portfolio risk? For this objective, we could
    apply some kind of portfolio optimization technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another application is linked to the government''s tax policy. We know that
    cutting the corporate tax rate would encourage companies that are considering
    more capital investment (that is, long-term investment), such as in equipment.
    However, at the same time, the government''s revenue might fall. If this is true,
    the government would have to cut many programs intended to help unfortunate people.
    Because of this, the government has a strong incentive to find an optimal tax
    rate. In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Why optimization is important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General issues for optimization problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quadratic optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example #1 – stock portfolio optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example #2 – optimal tax policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages for optimization in R, Python, Octave, and Julia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why optimization is important
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our lives, people face all kinds of choices. In a sense, we implement, either
    consciously or subconsciously, various kinds of *implied* optimization procedures.
    For example, when a high school junior or senior is looking for a college, they
    might have many choices, such as good schools, local schools, public schools,
    or private schools. When making a decision with a couple of offers, these high
    school students usually have some objectives in their mind. These objectives might
    include the ranking and cost of attending a school, scholarships, the reputation,
    and name recognition of the program, or even the fame of the football team. For
    corporations, they have to make all kinds of optimal or reasonable decisions.
    For instance, what kinds of products they should produce, what are the quantities
    and at what prices, and to whom they should target. Since most companies have
    limited resources, they have to make an optimal decision with certain constraints.
    For example, in employee scheduling, the target function is the total cost. At
    the same time, we have certain constraints such as the number of employees, their
    seniority, preferences, and the like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a general form for the optimization problem, where *Min()* is a minimizing
    function and *f(x)* is our objective function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a03813d1-d62e-4304-bf70-f399b952c466.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We intend to minimize *f* by changing *x*, which is a set of input values,
    by subjecting it to certain constraints. Note that if we plan to maximize *f*,
    we simply could have minimized its negative value. Later in the chapter, we introduce
    a utility function for investors, which could be viewed as the trade-off between
    benefits (expected portfolio return) and cost (the portfolio risk). For investors,
    they want to maximize the utility. It could be equivalent to minimizing its negative
    objective function; see the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5fc38a5-2e31-4e78-95cc-960bed6ea055.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Where *U()* is the utility function and *x* will be a set of input variables.
    The following table shows a partial list of applications for optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Area** | **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Economics | Utility function | For many variables in the real world, it is
    difficult to quantify them, such as happiness. For this, economists have developed
    a utility function. To find an optimal solution, users could maximize their utility
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| Quantity, price, and production | A company might consider the best strategy
    to produce, price, and sell its products. |'
  prefs: []
  type: TYPE_TB
- en: '| Welfare transfer | Governments might consider many input variables such as
    incentives to work, crime rate, and other factors. |'
  prefs: []
  type: TYPE_TB
- en: '| Optimal tax policy | Maximize the GDP growth, subject to controllable inflation
    rate. |'
  prefs: []
  type: TYPE_TB
- en: '| Finance | Portfolio optimization | For a given portfolio of expected returns,
    choose a set of stocks to minimize the portfolio risk. |'
  prefs: []
  type: TYPE_TB
- en: '| Optimal investment strategy | When facing several possible investment opportunities
    and many constraints, how to choose the best combination to achieve the best result.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Profit optimization | For companies, they want to maximize their profit by
    optimally choosing their input variables. |'
  prefs: []
  type: TYPE_TB
- en: '| High-frequency trading | Balance the signalling effect with various bid-and-ask
    offers, and long-term and short-term profits. |'
  prefs: []
  type: TYPE_TB
- en: '| Others | Scheduling | Minimize the total cost with certain constraints. |'
  prefs: []
  type: TYPE_TB
- en: '| Minimize total cost | Consider various trade-offs between certain benefits
    and costs. |'
  prefs: []
  type: TYPE_TB
- en: '| Flying issues | Minimize the total distance by visiting certain cities. |'
  prefs: []
  type: TYPE_TB
- en: '| Task arrangements | With many tasks and potential labor and input variables
    available, how to achieve an optimal solution. |'
  prefs: []
  type: TYPE_TB
- en: Application of optimization
  prefs: []
  type: TYPE_NORMAL
- en: General issues for optimization problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several issues in optimization. The most important one is how to choose
    an appropriate objective function. For some cases, the objective function is obvious.
    Unfortunately, for other cases, it is not that crystal clear. Since choosing a
    good objective depends on the specific situation, we will discuss it further,
    but remember that an appropriate objective function might make our task much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In many cases, an inappropriate objective function might cause the following
    problems:'
  prefs: []
  type: TYPE_NORMAL
- en: It is difficult to find a feasible solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We might end up with a local solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We might have a corner solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes a long time to converge (that is, too much computation time to find
    a good solution)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a convex function; the code and corresponding graph are given
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will provide an output shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9e7034c-dc1e-45b2-9bc1-1a00a3849d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Geometrically, a function is convex if a line segment drawn from any point
    *(x[1],y[1])* to another point *(x[2],y[2])* – called the chord from *x* to *y*
    – lies on or above the graph of *f*, as shown in the diagram here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0a97731-cb27-4bad-b752-34598a42bf16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code for this graph and one of its chords is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For a convex function, it is quite easy to find its optimal solution. However,
    it is not that easy to find an optimal solution for a non-convex function. In
    that case, we would have to face a few issues: a global solution versus a local
    solution, unconstrained versus constrained optimization, initial input values,
    and conversion criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A global solution is a solution that achieves our objective function by using
    all the values or possible input values. However, for some reason, our program
    could fail to find a global solution, but finds a local solution instead. A local
    solution is an optimal solution for just a small area. Let''s look at the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a897b69c-14ff-45fb-a7c1-2fc1f61c3f6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since both items on the right-hand side are positive, *f(x,y)* could have multiple
    minima. When *x=-1* and *y=0*, *f(x,y)* is zero, so *(-1,0)* is a minimum. In
    addition, when *x=1* and *y=2*, *f(x,y)* is zero as well, so *(1,2)* is also a
    minimum. Note that users need to run `install.packages(''scatterplot3d'')` if
    that library is not installed yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The related three-dimensional graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36eba030-f5a3-4f5d-9277-ca9448e54aa3.png)'
  prefs: []
  type: TYPE_IMG
- en: A corner solution is a special solution to a maximization or minimization problem
    in which the quantity of one of the input variables is zero or with an extreme
    value. In non-technical terms, a corner solution is when the chooser is either
    unwilling or unable to make a trade-off between benefit and cost. Most of the
    time, corner solutions are not optional, let alone a global optimal solution.
    To avoid a local or corner solution, we sometimes have to find our input spaces
    for various input variables first. Then, we choose some evenly spaced intervals
    for our initial input values. Here is one example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PIN measure of information asymmetry is derived from the market microstructure
    model proposed in *Easley and O''Hara* (1992) and *Easley et al*. (1997). Mathematically,
    the model specifies that on any day, the likelihood of observing the number of
    buy trades (*ε[b]*) and the number of sell trades (*ε[s]*) is represented by the
    following joint Poisson distribution, *L*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cc1fdb6-d65b-4a71-b36f-0ecabe8bd678.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The values of *X*, *Y*, and *Z* are defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fcb6511-181c-4506-b496-57b1add45cc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Where *θ=[α,δ,μ,ε[b],ε[s]]* represents five structural parameters that describe
    the trading process in each day. Specifically, *α* denotes the probability that
    an information event occurs, *δ* is the probability of a bad event happening,
    *μ* is the Poisson parameter for when no information event happens, *ε[b]* is
    the Poisson parameter for when a good event happens (then investors would buy),
    *ε[s]* is the Poisson parameter for when a bad event happens (then investors would
    sell), *B[i]* is the number of buyer-initiated trades on day *i*, while *S[i]*
    is the number of seller-initiated trades.
  prefs: []
  type: TYPE_NORMAL
- en: Since this likelihood objective is not well-behaved, it is sometimes difficult
    to converge or end up at a corner solution. For many scenarios, optimal solutions
    depend on the initial input values. *Yan and Zhang* (2014) first found the ranges
    of those five input values and then designed an even distribution of initial values.
    Their results showed that such optimally designed input values would reduce corner
    solutions dramatically.
  prefs: []
  type: TYPE_NORMAL
- en: Expressing various kinds of optimization problems as LPP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LPP stands for **Linear Programming Problem** or linear optimization problem.
    It is a method of reaching the best (optimal) outcome, such as the maximum expected
    portfolio return for a given risk level, in a mathematical model whose requirements
    are represented by linear relationships. LPP has the following standard form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92bbedc5-91dc-46a8-9b76-53d8d4f19930.png)'
  prefs: []
  type: TYPE_IMG
- en: Where *C^TX* is our objective function, *Ax≤b* is a set of constraints, and
    *x≥0* is another set of constraints. For the constraints, we can have many different
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: Quadratic optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the highest power is 1, then we call it a linear model. On the other hand,
    if the highest power is 2, we call it a quadratic function. The R `optim()` function
    can be used to find a solution for a minimization problem. For example, we have
    the following objective function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/109645a8-747b-471b-b6b9-7c03f70f7f15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since there is only one variable, we can solve it manually. Take the first-order
    derivative and set it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7b15110-17e3-412d-9f92-f8938b45cf43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the graph, we know that we could get a maximum *y* value when *x* is zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding formula, we use a negative function since the R `optim()`
    function would get a minimum value instead of a maximum one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Optimization in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we show one example of optimization for R. The first one is
    quite simple, which is the maximum of a user''s utility, expressed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/520fcbf0-0a6c-4799-9f25-374a0fb82324.png)'
  prefs: []
  type: TYPE_IMG
- en: Where *U* is the utility function, *E(x)* is the expectation function, *R[p]*
    is the portfolio return, *A* is a parameter representing risk preference, and
     ![](img/8efa3c24-36ef-467f-a595-56dee7f3d340.png) is the portfolio variance.
    Obviously, the utility is positively correlated with the expected portfolio return
    and negatively correlated with the portfolio risk (that is, variance). Note that
    this is a quadratic function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we try to use the value-weighted five industries supplied by Fama and
    French to see how to use the optimization procedure. First, we retrieve the data
    by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58792d01-b444-4d74-8a18-a133063633e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first column is the date, while the next five columns are returns for the
    value-weighted industry portfolios, and the last five columns are for the equal-weighed
    industry portfolios. `Cnsmr` is for consumer, `Manuf` is for manufacture, `Hlth`
    is for health care, and `Other` is for other industries. For a more detailed definition,
    see the link at [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/det_5_ind_port.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/Data_Library/det_5_ind_port.html).
    In the following function, we use the value-weighted five industries as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding function, a negative sign was added to the utility function
    since the `optim()` function is to minimize. In addition, a so-called loss was
    added to the objective function. Its value is associated with the deviation of
    summation of all weights equal to 1\. In other words, if the summation of weights
    is 1, this loss variable has a value of zero. This is one convenient way of adding
    a constraint. In the following code, we call the R `optim()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The weights for these five industries are 103%, -19%, 14.7%, 88.7%, and -87.2%.
    A negative weight indicates a short position. If we have a lower bound and an
    upper bound, we could specify this with the following code. Note that the related
    method is `method="L-BFGS-B"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows that the weights of this five-industry portfolio should be
    `(0.5, 0.016, 0.084, 0.5,-0.1)`. To get more information about this function,
    we could type `help(optim)`; see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Optimization in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For optimization, the most frequently used Python function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7db0a379-f055-4716-80cf-9597688459f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find the usage of a function called `minimize`, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here. To save space, only the top part is presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c43b67d4-6a68-4e4f-8084-1444aa5b0d81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next example is from [https://scipy.org/](https://scipy.org/).The objective
    function is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d966170e-0180-4e15-b0a3-47bef1822147.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is the Rosenbrock function with five input variables. Since each item on
    the right-hand side is non-negative, we would like to find a set of input variables
    *(x[1],x[2],x[3],x[4],x[5])* to minimize the objective function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The code of `x[1:]` means the values of *x* from the second item to the last
    one, while the code of `x[:-1]` is the values included in *x* except the last
    one. The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a34cca7-eddc-4766-aecb-9c5dcc4ad58f.png)'
  prefs: []
  type: TYPE_IMG
- en: Optimization in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next example is from the web page [https://jump.readthedocs.io/en/release-0.2/jump.html](https://jump.readthedocs.io/en/release-0.2/jump.html).
    The code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'First, the objective function is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a827fae0-42af-41b5-b962-90ec9505a763.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output is given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95ddd80f-b46b-4d87-849e-8d2ae45959e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the code of `m=Model(solver=ECOSSolver())` in the preceding program, the
    solver contained in the package called `ECOS` was used. The following table shows
    various solver functions embedded in different Julia packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/216a817a-8d98-4414-9bac-fc36623cb69f.png)'
  prefs: []
  type: TYPE_IMG
- en: Julia packages with solver
  prefs: []
  type: TYPE_NORMAL
- en: 'The notations in the table are defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'LP: Linear programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SOCP: Second-order conic programming (including problems with convex quadratic
    constraints and/or objectives)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MILP: Mixed-integer linear programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NLP: Nonlinear programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MINLP: Mixed-integer nonlinear programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SDP: Semidefinite programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source of the previous table is here : [http://jump.readthedocs.io/en/latest/installation.html.](http://jump.readthedocs.io/en/latest/installation.html)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, consider the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdf89950-5b1d-40c7-a8a1-346387f76697.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following Julia program is to find a solution for the preceding function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd1c9524-de7d-4a57-a481-3b96d969447b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next example is from Julia''s website, [http://julianlsolvers.github.io/Optim.jl/latest/user/minimization/](http://julianlsolvers.github.io/Optim.jl/latest/user/minimization/).
    The code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/531157fd-a633-40cb-bc7c-8f2822ce8ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: Optimization in Octave
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Octave package called `Optim` can be downloaded easily from [https://octave.sourceforge.io/optim/](https://octave.sourceforge.io/optim/).
    The following screenshot indicates the version of the package. Note this was the
    version on March 1, 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12f1c67c-ab77-4577-8e30-514378445c1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After downloading and installing the package (see [Chapter 6](c812a40e-eb24-4bb8-8af5-1cfe1834ec77.xhtml)*,
    Managing Packages,* for more detail on how to install an Octave package), we could
    use the following command lines to see some functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output. To save space, only the top part
    is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64690671-0c98-4d99-96d7-80e0ff173fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find the usage of a specific function, we could use the `help()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fc27527-8e61-4480-9469-f7e67e526e76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding information, we know that the `fminsearch()` function would
    minimize our objective function with a given set of initial values with a set
    of options. Next, we have two examples. For the first example, the objective function
    is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ccf33df-35c1-4ee9-bcd6-5356f5558164.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code and related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For the next example, its objective function is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c46796a-e103-451a-a0ee-9b96ae9dbea3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see each step, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line is for the settings for the optimization procedure. The word
    `Display` means to display all the intermediate steps while `iter` means integration.
    The output is shown here. To save space, we show the top and bottom parts. The
    top part is given first:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/958e501c-c887-4b5f-bdeb-77015d74aad1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the bottom part:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9766b85b-2bab-4a8a-be3e-5ef606d2ab73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Example #1 – stock portfolio optimization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we refer to single-period portfolio optimization as Markowitz portfolio
    optimization. Our input datasets include the expected returns, the standard deviations,
    and the correlation matrix between financial assets, and our output will be an
    efficient frontier formed by those assets. In the rest of the chapter, we will
    use historical returns to represent expected returns and use the historical correlation
    in place of expected correlation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following examples, we use an R package called `fPortfolio`. We use
    the following code to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To load various embedded datasets, we use the `data()` function (see the following
    example code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists the embedded datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **#** | **Name** | **Dimension** | **#** | **Name** | **Dimension** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | ECON85 | [1] 304 12 | 7 | SMALLCAP | [1] 60 22 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | ECON85LONG | [1] 304 19 | 8 | GCCINDEX.RET | [1] 824 11 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | GCCINDEX | [1] 825 11 | 9 | SPISECTOR.RET | [1] 2198 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | SPISECTOR | [1] 2216 10 | 10 | SWX.RET | [1] 1916 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | SWX | [1] 1917 6 | 11 | LPP2005.RET | [1] 377 9 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | LPP2005 | [1] 377 9 | 12 | SMALLCAP.RET | [1] 60 22 |'
  prefs: []
  type: TYPE_TB
- en: A list of datasets in the fPorfolio R package
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the efficient frontier, the connections of all efficient portfolios,
    we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we first load the R package called `fPotfolio`. Then, `data(GCCINDEX.RET)`
    loads the dataset. The related plot is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4654aa66-3eca-4f4e-8efa-5d3c00177809.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Example #2 – optimal tax policy'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another example is the optimal taxation level in an LQ economy. Here, LQ stands
    for Linear Quadratic (model). This example is borrowed from Thomas J. Sargent
    and John Stachurski. Their webpage is at [https://lectures.quantecon.org/py/lqramsey.html](https://lectures.quantecon.org/py/lqramsey.html).
    They modify a well-known model of Robert Lucas and Nancy Stokey so that convenient
    formulas for solving linear-quadratic models can be applied to simplify the calculations.
    There are two types of player in the economy: the household and a benevolent government.
    The government finances an exogenous stream of government purchases with state-contingent
    loans and a linear tax on labor income. The household maximizes its utility function
    by choosing paths for consumption and labor, taking prices and the government''s
    tax rate and borrowing plans as given. Note that to maximize attainable utility
    for the household depends on the government''s tax and borrowing plans. The program
    would choose the best competitive equilibrium. The Python program can be downloaded
    at [https://raw.githubusercontent.com/QuantEcon/QuantEcon.lectures.code/master/lqramsey/lqramsey.py](https://raw.githubusercontent.com/QuantEcon/QuantEcon.lectures.code/master/lqramsey/lqramsey.py).
    Note that their program depends on the `quantecon` Python package, which can be
    downloaded at [https://pypi.python.org/pypi/quantecon/](https://pypi.python.org/pypi/quantecon/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After activating several subroutines, then we can run the following main Python
    program. The related output is shown after the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4aab533c-55db-4a03-be8b-9156e24a9f93.png)'
  prefs: []
  type: TYPE_IMG
- en: Packages for optimization in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many R packages available for various types of optimization, such
    as `optimization`, `MlBayesOpt`, `rgenoud`, `colf`, and `mize`. The following
    table offers a partial list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **#** | **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `[dtwclust](https://cran.case.edu/web/packages/dtwclust/index.html)`
    | Time Series Clustering Along with Optimizations for the Dynamic Time Warping
    Distance |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `CVXR` | Disciplined Convex Optimization |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `IROmiss` | Imputation Regularized Optimization Algorithm |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `subplex` | Unconstrained Optimization using the Subplex Algorithm |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `GPareto` | Gaussian Processes for Pareto Front Estimation and Optimization
    |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `OOR` | Optimistic Optimization in R |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `ROI` | R Optimization Infrastructure |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `lbreg` | Log-Binomial Regression with Constrained Optimization |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `PEIP` | Geophysical Inverse Theory and Optimization |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `dfoptim` | Derivative-Free Optimization |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | `SPOT` | Sequential Parameter Optimization Toolbox |'
  prefs: []
  type: TYPE_TB
- en: A partial list of R packages for optimization
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we can check the task view related to optimization. To do this,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the R home page at [https://r-project.org](https://r-project.org)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Download under CRAN
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a mirror location close to your location
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Task View on the left-hand side
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Optimization on the list, see the top part here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90adfb3b-750d-44ea-b1c3-145992e24a56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are over 100 R packages included in the preceding task view. To install
    all at once, we can issue the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Packages for optimization in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From [Chapter 6](c812a40e-eb24-4bb8-8af5-1cfe1834ec77.xhtml), *Managing Packages*,
    we know that to find all Python packages, we go to the website at [https://pypi.python.org/](https://pypi.python.org/).
    The following table shows a list of Python packages/models related to optimization
    after we type `Optimization` as the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Package** | **Wt*** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `heuristic-optimization 0.4.3` | 7 | Heuristics for derivative-free optimization
    |'
  prefs: []
  type: TYPE_TB
- en: '| `streams-optimization 1.0.0.dev3` | 7 | A library for LHCb trigger/stripping
    streams optimization |'
  prefs: []
  type: TYPE_TB
- en: '| `adjointShapeOptimizationFlux 1.0` | 6 | Python frontend of the `adjointShapeOptimizationFoam`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bayesian-optimization 0.6.0` | 6 | Bayesian Optimization package |'
  prefs: []
  type: TYPE_TB
- en: '| `emzed_optimizations 0.6.0` | 6 | particular optimizations for speeding up
    `emzed` |'
  prefs: []
  type: TYPE_TB
- en: '| `scikits.optimization 0.3` | 6 | A python module for numerical optimization
    |'
  prefs: []
  type: TYPE_TB
- en: '| `asprin 3.0.2` | 5 | Qualitative and quantitative optimization in answer
    set programming |'
  prefs: []
  type: TYPE_TB
- en: '| `bolib 0.19.11` | 5 | Python library for Bayesian Optimization |'
  prefs: []
  type: TYPE_TB
- en: '| `brent-search 1.0.32` | 5 | Brent''s method for univariate function optimization
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clientMOE 0.1` | 5 | Metric Optimization Engine |'
  prefs: []
  type: TYPE_TB
- en: '| `cma 2.5.3` | 5 | CMA-ES, Covariance Matrix Adaptation Evolution Strategy
    for nonlinear numerical optimization in Python |'
  prefs: []
  type: TYPE_TB
- en: '| `coopr.opt 2.12.2` | 5 | Coopr generic optimization interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| `coopr.os 1.0.4` | 5 | Coopr interfaces to the COIN-OR Optimization Services
    project |'
  prefs: []
  type: TYPE_TB
- en: '| `cro 0.0.5.0` | 5 | **Coral Reef Optimization** (**CRO**) Algorithm |'
  prefs: []
  type: TYPE_TB
- en: '| `dfoalgos 0.5` | 5 | Derivative-free optimization algorithms |'
  prefs: []
  type: TYPE_TB
- en: '| `dillinger 1.0.0.dev1` | 5 | Bayesian optimization for iterated multi-armed
    bandit experiments |'
  prefs: []
  type: TYPE_TB
- en: '| `downhill 0.4.0` | 5 | Stochastic optimization routines for Theano |'
  prefs: []
  type: TYPE_TB
- en: '| `dy 0.0.1` | 5 | Dynamic Optimization/Dynamic Programming |'
  prefs: []
  type: TYPE_TB
- en: '| `fst-pso 1.3.2` | 5 | Fuzzy Self-Tuning PSO global optimization library |'
  prefs: []
  type: TYPE_TB
- en: A partial list of the Python packages for optimization
  prefs: []
  type: TYPE_NORMAL
- en: Packages for optimization in Octave
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find packages for optimization in Octave, we go to the web page at [https://octave.sourceforge.io/packages.php](https://octave.sourceforge.io/packages.php).
    Then, we can search these packages by using the keyword `optimization`; see the
    first package called `ga` in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e26734a7-2c84-47e4-b9ea-f37ac24b4d6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second one is the `optim` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3331836-c3a7-40fb-b136-93a2233e6814.png)'
  prefs: []
  type: TYPE_IMG
- en: Packages for optimization in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, for packages for optimization in Julia, we go to the web page at
    [https://pkg.julialang.org/](https://pkg.julialang.org/). Then, we can search
    these packages by using the keyword `optimization`; see one package called `JuMP`
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7c3ada2-6fa5-4f5d-af42-5ea60d62f445.png)'
  prefs: []
  type: TYPE_IMG
- en: There are about 45 matches for the keyword `optimization`. To save space, we
    won't show the other packages. This web page, titled *Optimization packages for
    Julia language,* might be quite useful: [http://www.juliaopt.org/](http://www.juliaopt.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed several topics around optimization, such
    as general issues for optimization problems, expressing various kinds of optimization
    problems as LPPs, and quadratic optimization. Several examples were offered to
    make our discussion more practice-oriented, such as how to choose an optimal stock
    portfolio, optimize wealth and resources to promote sustainable development, and
    how much the government really should tax. In addition, we introduced several
    packages for optimization in R, Python, Julia, and Octave.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss unsupervised learning. In particular, we
    will explain hierarchical clustering and k-means clustering. For R and Python,
    we will explain in detail several related packages. For R, we will discuss `Rattle`, `randomUniformForest`,
    and `Rmixmod`. For Python, we will cover `SciPy`, `Contrastive`, `milk`, `Scikit-learn`,
    and `skleam`. Several real-world examples will be used to illustrate the application
    of these R and Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does optimization mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an LPP? What are its uses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a global solution and a local solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what situations would our LPP program not converge? Give a few simple examples
    and possible solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain why we have the following weird result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What does quadratic equation mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From where could we search all the R packages targeting optimization issues?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the usage of the task view related to optimization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to the related task view, how many R packages are associated with
    optimization, and how do we install them all at once?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Prof. French Data Library, download the return data for 10 industries.
    Then, choose an optimal portfolio by applying the following utility function for
    five types of investors with A=1, 3, 5,20, and 100:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf669c71-5677-4e7f-89fb-ff52a0964fa7.png)'
  prefs: []
  type: TYPE_IMG
- en: Where *U* is the utility function, *E()* is the expectation function, *R[p]*
    is the portfolio return, *A* is a parameter representing risk preference, and
    ![](img/53ff0cc8-7c98-42b5-99c5-2945276e2d01.png) is the portfolio variance. Note
    the source of data is at [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For Octave, find two examples of using the `leasqr` (least square) function.
    You can use the following code to get information about this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How many functions could we find for the Octave package called `optim`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Octave, download a package called `ga`. Find out the uses of several functions
    included in the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'How many R packages are installed after you issue the following three lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Install a Julia package called `JuMP` and find a few examples its embedded functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
