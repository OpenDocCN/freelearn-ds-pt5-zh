- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students in performing the activities
    in the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 01: The Python Data Science Stack'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: IPython and Jupyter'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open the `python_script_student.py` file in a text editor, copy the contents
    to a notebook in IPython, and execute the operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy and paste the code from the Python script into a Jupyter notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, update the values of the `x` and `c` variables. Then, change the definition
    of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 2: Working with Data Problems'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import pandas and NumPy library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the RadNet dataset from the U.S. Environmental Protection Agency, available
    from the Socrata project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list with numeric columns for radionuclides in the RadNet dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `apply` method on one column, with a `lambda` function that compares
    the `Non-detect` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.19: DataFrame after applying the lambda function](img/C12913_01_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.19: DataFrame after applying the lambda function'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Replace the text values with `NaN` in one column with `np.nan`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the same lambda comparison and use the `applymap` method on several columns
    at the same time, using the list created in the first step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list of the remaining columns that are not numeric:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.20: List of columns and their type](img/C12913_01_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.20: List of columns and their type'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Convert the DataFrame objects into floats using the `to_numeric` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.21: List of columns and their type](img/C12913_01_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.21: List of columns and their type'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Using the selection and filtering methods, verify that the names of the string
    columns don''t have any spaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.22: DataFrame after applying the selection and filtering method](img/C12913_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.22: DataFrame after applying the selection and filtering method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 3: Plotting Data with Pandas'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the RadNet DataFrame that we have been working with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix all the data type problems, as we saw before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a plot with a filter per `Location`, selecting the city of `San Bernardino`,
    and one radionuclide, with the *x*-axis set to the `date` and the *y*-axis with
    radionuclide `I-131`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_01_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.23: Plot of Date collected vs I-131'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a scatter plot with the concentration of two related radionuclides,
    `I-131` and `I-132`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.24: Plot of concentration of I-131 and I-132](img/C12913_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.24: Plot of concentration of I-131 and I-132'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 02: Statistical Visualizations Using Matplotlib and Seaborn'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 4: Line Graphs with the Object-Oriented API and Pandas DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries in the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.29: The auto-mpg DataFrame](img/C12913_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.29: The auto-mpg DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Convert the `horsepower` and `year` data types to float and integer using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s display the data types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.30: The data types](img/C12913_02_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.30: The data types'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now plot the average `horsepower` per `year` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.31: Line plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 5: Understanding Relationships of Variables Using Scatter Plots'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries into the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.32: Auto-mpg DataFrame](img/C12913_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.32: Auto-mpg DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now plot the scatter plot using the `scatter` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.33: Scatter plot using the scatter method](img/Image54488.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.33: Scatter plot using the scatter method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 6: Exporting a Graph to a File on Disk'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries in the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a bar plot using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.34: Bar plot](img/C12913_02_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.34: Bar plot'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Export it to a PNG file using the `savefig` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 7: Complete Plot Design'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries in the Jupyter notebook and read the dataset
    from the Auto-MPG dataset repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the column names to simplify the dataset, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now read the new dataset with column names and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform GroupBy on `year` and `cylinders`, and unset the option to use them
    as indexes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the average miles per gallon over the grouping and set `year` as
    index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set year as the DataFrame index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the figure and axes using the object-oriented API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Group the `df_g` dataset by `cylinders` and plot the miles per gallon variable
    using the axes created with size (`10`,`8`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the **title**, **x** label, and **y** label on the axes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/Image54506.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.35: Line plot for average car power per year (without legends)'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Include legends, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/Image54515.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.36: Line plot for average car power per year (with legends)'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Save the figure to disk as a PNG file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 03: Working with Big Data Frameworks'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Parsing Text'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Read the text files into the Spark object using the `text` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To parse the file that we are reading, we will use lambda functions and Spark
    operations such as `map`, `flatMap`, and `reduceByKey`. `flatmap` applies a function
    to all elements of an RDD, flattens the results, and returns the transformed RDD.
    `reduceByKey` merges the values based on the given key, combining the values.
    With these functions, we can count the number of lines and words in the text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Extract the `lines` from the text using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This splits each line in the file as an entry in the list. To check the result,
    you can use the `collect` method, which gathers all data back to the driver process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s count the number of lines, using the `count` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Be careful when using the `collect` method! If the DataFrame or RDD being collected
    is larger than the memory of the local driver, Spark will throw an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s first split each line into words, breaking it by the space around
    it, and combining all elements, removing words in uppercase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also remove the *stop words*. We could use a more consistent stop words
    list from **NLTK**, but for now, we will row our own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to remove the stop words from our token list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now process our token list and count the unique words. The idea is to
    generate a list of tuples, where the first element is the `token` and the second
    element is the `count` of that particular token.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, let''s `map` our token to a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `reduceByKey` operation, which will apply the operation to each of
    the lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember, collect all data back to the driver node! Always check whether there
    is enough memory by using tools such as `top` and `htop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 04: Diving Deeper with Spark'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 9: Getting Started with Spark DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using Google Collab to run the Jupyter notebook, add these lines
    to ensure you have set the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Install findspark if not installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a sample DataFrame by manually specifying the schema, importing findspark
    module to connect Jupyter with Spark:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `SparkContext` and `SQLContext` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the DataFrame using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.29: Sample DataFrame](img/C12913_04_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.29: Sample DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a sample DataFrame from an existing RDD. First creating RDD as illustrated
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Converting RDD to DataFrame using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.30: RDD to DataFrame](img/Image54539.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.30: RDD to DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a sample DataFrame by reading the data from a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print first seven rows of the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.31: First seven rows of the DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the schema of the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is as follows:![](img/C12913_04_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.32: Schema of the DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the number of columns and rows in DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the summary statistics of DataFrame and any two individual columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.33: Summary statistics of DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the summary of any two columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.34: Summary statistics of mpg and cyl columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Write first seen rows of the sample DataFrame in a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10: Data Manipulation with Spark DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Install the packages as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, import the `findspark` module to connect the Jupyter with Spark use the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the `SparkContext` and `SQLContext` as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a DataFrame in Spark as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.35: DataFrame in Spark'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Rename any five columns of DataFrame using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.36: Columns of DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Select any two numeric and one categorical column from the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.37: Two numeric and one categorical column from the DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Count the number of distinct categories in the categorical variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two new columns in DataFrame by summing up and multiplying together
    the two numerical columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.38: New columns in DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Drop both the original numerical columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/C12913_04_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.39: New columns in DataFrame after dropping'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Sort the data by categorical column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.40: Sort data by categorical columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Calculate the `mean` of the summation column for each distinct category in
    the `categorical` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_41.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.41: Mean of the summation column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Filter the rows with values greater than the `mean` of all the `mean` values
    calculated in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_42.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.42: Mean of all the mean values calculated of the summation column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'De-duplicate the resultant DataFrame to make sure it has all unique records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is `15`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 11: Graphs in Spark'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required Python libraries in the Jupyter Notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read and show the data from the CSV file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.43: Auto-mpg DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Visualize the discrete frequency distribution of any continuous numeric variable
    from your dataset using a histogram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.44: Discrete frequency distribution histogram](img/C12913_04_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.44: Discrete frequency distribution histogram'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Visualize the percentage share of the categories in the dataset using a pie
    chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_04_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.45: Percentage share of the categories using pie chart'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the distribution of a continuous variable across the categories of a categorical
    variable using a boxplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.46: Distribution of a continuous using boxplot](img/C12913_04_46.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.46: Distribution of a continuous using boxplot'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Visualize the values of a continuous numeric variable using a line chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.47: Continuous numeric variable using a line chart](img/Image54696.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.47: Continuous numeric variable using a line chart'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the values of multiple continuous numeric variables on the same line chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.48: Multiple continuous numeric variables](img/C12913_04_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.48: Multiple continuous numeric variables'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 05: Missing Value Handling and Correlation Analysis in Spark'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 12: Missing Value Handling and Correlation Analysis with PySpark DataFrames'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries and modules in the Jupyter notebook, as illustrated
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the `SparkContext` with the help of the following command in the Jupyter
    notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, set up the `SQLContext` in the notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, read the CSV data into a Spark object using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.14: Iris DataFrame, reading the CSV data into a Spark object](img/C12913_05_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.14: Iris DataFrame, reading the CSV data into a Spark object'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Fill in the missing values in the `Sepallength` column with the column's mean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, calculate the mean of the `Sepallength` column using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, impute the missing values in the `Sepallength` column with the column''s
    mean, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.15: Iris DataFrame](img/C12913_05_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.15: Iris DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Compute the correlation matrix for the dataset. Make sure to import the required
    modules, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, fill the missing values in the DataFrame before computing the correlation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, remove the `String` columns from the PySpark DataFrame, as illustrated
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, compute the correlation matrix in Spark:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, convert the correlation matrix into a pandas DataFrame using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.16: Convert the correlation matrix into a pandas DataFrame](img/Image54735.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.16: Convert the correlation matrix into a pandas DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Plot the variable pairs showing strong positive correlation and fit a linear
    line on them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, load the data from the Spark DataFrame into a pandas DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, load the required modules and plotting data using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.17: Seaborn plot for x = “Sepallength”, y = “Petallength”](img/Image54744.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.17: Seaborn plot for x = "Sepallength", y = "Petallength"'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the graph so that `x` equals `Sepallength`, and `y` equals `Petalwidth`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.18: Seaborn plot for x = “Sepallength”, y = “Petalwidth”](img/Image54754.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.18: Seaborn plot for x = "Sepallength", y = "Petalwidth"'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the graph so that `x` equals `Petalwidth` and `y` equals `Petalwidth`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.19: Seaborn plot for x = “Petallength”, y = “Petalwidth”](img/C12913_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.19: Seaborn plot for x = "Petallength", y = "Petalwidth"'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 6: Business Process Definition and Exploratory Data Analysis'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 13: Carry Out Mapping to Gaussian Distribution of Numeric Features
    from the Given Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Download the `bank.csv`. Now, use the following commands to read the data from
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Identify the numeric data from the DataFrame. The data can be categorized according
    to its type, such as categorical, numeric (float, integer), date, and so on. We
    identify numeric data here because we can only carry out normalization on numeric
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.12: DataFrame](img/C12913_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.12: DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Carry out a normality test and identify the features that have a non-normal
    distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_06_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.13: Normality test and identify the features'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The normality test conducted here is based on D'Agostino and Pearson's test
    ([https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.normaltest.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.normaltest.html)),
    which combines skew and kurtosis to identify how close the distribution of the
    features is to a Gaussian distribution. In this test, if the p-value is less than
    the set alpha value, then the null hypothesis is rejected, and the feature does
    not have a normal distribution. Here, we look into each column using a loop function
    and identify the distribution of each feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the probability density of the features to visually analyze their distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The density plot of the features to check the normality is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.14: Plot of features](img/C12913_06_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.14: Plot of features'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Multiple variables' density plots are shown in the previous graph. The distribution
    of the features in the graph can be seen with a high positive kurtosis, which
    is not a normal distribution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Prepare the power transformation model and carry out transformations on the
    identified features to convert them to normal distribution based on the `box-cox`
    or `yeo-johnson` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous commands, we prepare the power transformation model and apply
    it to the data of selected features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the probability density of the features again after the transformations
    to visually analyze the distribution of the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.15: Plot of features](img/C12913_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Plot of features'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 07: Reproducibility in Big Data Analysis'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 14: Test normality of data attributes (columns) and carry out Gaussian
    normalization of non-normally distributed attributes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the required libraries and packages in the Jupyter notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, import the libraries required for preprocessing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the working directory using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, import the dataset into the Spark object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Identify the target variable in the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate training and testing data using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Y` and `X` data, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Drop the `DV` or `y` using the `drop` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.22: Bank dataset](img/C12913_07_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.22: Bank dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Segment the data numerically and categorically and perform distribution transformation
    on the numeric data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Perform data preprocessing on the data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, create a `loop` to identify the columns with a non-normal distribution
    using the following command (converting to NumPy arrays for more efficient computation):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.23: Identifying the columns with a non-linear distribution](img/C12913_07_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.23: Identifying the columns with a non-linear distribution'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a `PowerTransformer` based transformation (`box-cox`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: '`box-cox` can handle only positive values.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Apply the power transformation model on the data. Select the columns to normalize:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a density plot to check the normality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.24: Density plot to check the normality](img/Image54824.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.24: Density plot to check the normality'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, transform the columns to a normal distribution using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Again, create a density plot to check the normality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.25: Another density plot to check the normality](img/Image54838.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.25: Another density plot to check the normality'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use a `loop` to identify the columns with non-normal distribution on the transformed
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.26: Power transformation model to data](img/Image54847.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.26: Power transformation model to data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Bind the normalized and non-normalized columns. Select the columns not to normalize:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to bind both the non-normalized and normalized columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.27: Non-normalized and normalized columns](img/C12913_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.27: Non-normalized and normalized columns'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 08: Creating a Full Analysis Report'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 15: Generating Visualization Using Plotly'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Import all the required libraries and packages into the Jupyter notebook. Make
    sure to read the data from `bank.csv` into the Spark DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the libraries for Plotly, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, for visualization in Plotly, we need to initiate an offline session. Use
    the following command (requires version >= 1.9.0):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now Plotly is initiated offline. Use the following command to start a Plotly
    notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After starting the Plotly notebook, we can use Plotly to generate many types
    of graphs, such as a bar graph, a boxplot, or a scatter plot, and convert the
    entire output into a user interface or an app that is supported by Python's Flask
    framework.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, plot each graph using Plotly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bar graph:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The bar graph is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12913_08_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.18: Bar graph'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Scatter plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'The scatter plot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19: Scatter plot](img/C12913_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.19: Scatter plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Boxplot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'The boxplot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20: Boxplot](img/C12913_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.20: Boxplot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
