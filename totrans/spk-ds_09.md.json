["```py\n//Subset and visualize \n//GraphX subset example \n//Datasource: http://snap.stanford.edu/data/egonets-Facebook.html  \nimport org.apache.spark.graphx._ \nimport org.apache.spark.graphx.util.GraphGenerators \n//Load edge file and create base graph \nval base_dir = \"../data/facebook\" \nval graph = GraphLoader.edgeListFile(sc,base_dir + \"/0.edges\") \n\n//Explore subgraph of a given set of nodes \nval circle = \"155  99  327  140  116  147  144  150  270\".split(\"\\t\").map( \n       x=> x.toInt) \nval subgraph = graph.subgraph(vpred = (id,name) \n     => circle.contains(id)) \nprintln(\"Edges: \" + subgraph.edges.count +  \n       \" Vertices: \" + subgraph.vertices.count) \n\n//Create a two level contact tree for a given node  \n//Step1: Get all edges for a given source id \nval subgraph_level1 = graph.subgraph(epred= (ed) =>  \n    ed.srcId == 144) \n\n//Step2: Extract Level 1 contacts \nimport scala.collection.mutable.ArrayBuffer \nval lvl1_nodes : ArrayBuffer[Long] = ArrayBuffer() \nsubgraph_level1.edges.collect().foreach(x=> lvl1_nodes+= x.dstId) \n\n//Step3: Extract Level 2 contacts, 3 each for 3 lvl1_nodes \nimport scala.collection.mutable.Map \nval linkMap:Map[Long, ArrayBuffer[Long]] = Map() //parent,[Child] \nval lvl2_nodes : ArrayBuffer[Long] = ArrayBuffer() //1D Array \nvar n : ArrayBuffer[Long] = ArrayBuffer() \nfor (i <- lvl1_nodes.take(3)) {    //Limit to 3 \n    n = ArrayBuffer() \n    graph.subgraph(epred = (ed) => ed.srcId == i && \n        !(lvl2_nodes contains ed.dstId)).edges.collect(). \n             foreach(x=> n+=x.dstId) \n    lvl2_nodes++=n.take(3)    //Append to 1D array. Limit to 3 \n  linkMap(i) = n.take(3)  //Assign child nodes to its parent \n } \n\n //Print output and examine the nodes \n println(\"Level1 nodes :\" + lvl1_nodes) \n println(\"Level2 nodes :\" + lvl2_nodes) \n println(\"Link map :\" + linkMap) \n\n //Copy headNode to access from another cell \n z.put(\"headNode\",144) \n //Make a DataFrame out of lvl2_nodes and register as a view \n val nodeDF = sc.parallelize(linkMap.toSeq).toDF(\"parentNode\",\"childNodes\") \n nodeDF.createOrReplaceTempView(\"node_tbl\") \n\n```", "```py\n//Model visualization example using zeppelin visualization  \n Prepare Model and predictions \n\n```"]