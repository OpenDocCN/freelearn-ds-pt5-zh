["```py\nfrom lxml import html import requests from time import sleep # setup the URL for the symbol we are interested in exchange = \"NASDAQ\" ticker = \"AMD\" url = \"https://www.google.com/finance/historical?q=%s:%s\"%(exchange,ticker) # retrieve the web page response = requests.get(url) print (\"Retrieving prices for %s from %s\"%(ticker,url)) # give it a few seconds in case there is some delay sleep(3) # convert the text into an HTML Document parser = html.fromstring(response.text) # find the HTML DIV tag that has id 'prices' price_store = parser.get_element_by_id(\"prices\") # we will store our price information in the price_data list price_data = [] # find the HTML TABLE element within the prices DIV for table in price_store:\n #every row (skip first row headings) of table has #  date, open, high, low, close, volume for row in table[1:]: #store tuples for a day together day = {\"date\":row[0].text.strip('\\n'), \\ \"open\":row[1].text.strip('\\n'), \\ \"high\":row[2].text.strip('\\n'), \\ \"low\":row[3].text.strip('\\n'), \\ \"close\":row[4].text.strip('\\n'), \\ \"volume\":row[5].text.strip('\\n')}        #add day's information to our set\n price_data.append(day) print (\"The last day of pricing information we have is:\") print (price_data[0])\n```", "```py\n# numpy arrays\nimport numpy as np\n\n# create an array 'a' with 3 3-tuples\na = np.array([[1, 1, 2], [3, 5, 8], [13, 21, 34]])\nprint(\"Array contents\", a)\n\n# determine the minimum value in array\nprint(\"max value = \", a.max())\n\n# max value in array\nprint(\"min value = \", a.min())\n\n# sum across the 2nd axis  \nprint(\"sum across 2nd axis\", a.sum(axis = 1))\n```", "```py\nimport numpy as np\nimport random\n\n# build up 2 sets of random numbers\n\n# setup empty array 2 columns, 1000 rows\nnumbers = np.empty([2,1000], int)\n\n# set seed so we can repeat results\nrandom.seed(137)\n\n# populate the array\nfor num in range(0, 1000):\n numbers[0,num] = random.randint(0, 1000)\n numbers[1,num] = random.randint(0, 1000)\n\n# produce a histogram of the data\n(hist, bins) = np.histogram(numbers, bins = 10, range = (0,1000))\nprint (\"Histogram is \",hist)\n\n# calculate correlation between the 2 columns\n\ncorrs = np.correlate(numbers[:,1], numbers[:,2], mode='valid')\nprint (\"Correlation of the two rows is \", corrs)  \n```", "```py\nimport pandas as pd\ndf = pd.read_csv ('https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv')\nprint (df.head)  \n```", "```py\nimport pandas as pd\ndf = pd.read_excel('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.xls')\nprint (df.head)  \n```", "```py\n# read in the titanic data set\nimport pandas as pd\ndf = pd.read_excel('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.xls')\n# extract just the age column to its own dataset, \n# group by the age, and\n# add a count for each age\nages = df[['age']].groupby('age')['age'].count()\nprint (ages)  \n```", "```py\nimport pandas as pd\ndf = pd.read_excel('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.xls')\n# the [[]] syntax extracts the column(s) into a new dataframe\n# we groupby the age column, and \n# apply a count to the age column\nages = df[['age']].groupby('age')['age'].count()\nprint(\"The most common ages\")\nprint (ages.sort_values(ascending=False))  \n```", "```py\nimport pandas as pd\n\ndf = pd.read_excel('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.xls')\n\n# compute mean age\ndf['x-Mean'] = abs(df['age'] - df['age'].mean())\n\n# 1.96 times standard deviation for age\ndf['1.96*std'] = 1.96*df['age'].std()\n\n# this age is an outlier if abs difference > 1.96 times std dev\ndf['Outlier'] = abs(df['age'] - df['age'].mean()) > 1.96*df['age'].std()\n\n# print (results)\nprint (\"Dataset dimensions\", df.count)\nprint (\"Number of age outliers\", df.Outlier.value_counts()[True])  \n```", "```py\nNumber of age outliers 65  \n```", "```py\nfrom scipy.integrate import quad\nimport math\n\ndef integrand(x, a, b):\n return a*math.pi + b\n\na = 2\nb = 1\nquad(integrand, 0, 1, args=(a,b))\n```", "```py\nfrom scipy.integrate import quad\nimport math\n\ncounter = 0\ndef integrand(x, a, b):\n global counter\n counter = counter + 1\n print ('called with x=',x,'a = ',a,'b = ', b)\n return a*math.pi + b\n\na = 2\nb = 1\nprint(quad(integrand, 0, 1, args=(a,b)))\nprint(counter)\n```", "```py\n%matplotlib inline\nfrom scipy import optimize\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(x):\n return x**4 - x**3 + x**2 + 1\n\nx = np.linspace(-100, 50, 100)\nplt.plot(x, f(x));  \n```", "```py\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nx = [1, 3, 5, 7]\ny = [0.5, 0.4, 0.35, 0.29]\nplt.plot(x,y)\n```", "```py\nfrom scipy.interpolate import interp1d \ng = interp1d(x, y) \nprint (g(4)) \n```", "```py\nfrom scipy.fftpack import fft import numpy as np x = np.array([2.0, 1.0, 2.0, 1.0, 2.0]) fft(x) \n```", "```py\nfrom scipy.fftpack import fft import numpy as np\n# how many points n = 100 spacing = 1.0 / 250.0 x = np.linspace(0.0, n*spacing, n) y = np.sin(30.0 * np.pi * x) + 0.5 * np.sin(7.0 * np.pi * x) yf = fft(y) xf = np.linspace(0.0, 1.0/(2.0*spacing), n//2)\n#plot the data to get a visual import matplotlib.pyplot as plt plt.plot(xf, 2.0/n * np.abs(yf[0:n//2])) plt.grid() plt.show()\n```", "```py\nimport numpy as np from scipy import linalg\nA = np.array([[1, 1], [2, 3]]) print (\"A array\") print (A)\nb = np.array([[1], [2]]) print (\"b array\") print (b)\nsolution = np.linalg.solve(A, b) print (\"solution \") print (solution)\n# validate results print (\"validation of solution (should be a 0 matrix)\") print (A.dot(solution) â€“ b)\n```", "```py\nimport pandas as pd\ndf = pd.read_excel('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.xls')\n```", "```py\ndf.info()  \n```", "```py\ndf.describe()  \n```", "```py\nprint(df[df.age < 5])  \n```", "```py\ndf.set_index('name').head()\n```", "```py\nprint(df.sort_values(by='home.dest', ascending=True).head())  \n```"]