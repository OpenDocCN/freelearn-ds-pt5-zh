["```py\nfrom pyspark import SparkContext\nsc = SparkContext()\n```", "```py\nfrom pyspark.sql import SQLContext\nsqlc = SQLContext(sc)\n```", "```py\n    from pyspark import SparkContext\n    sc = SparkContext()\n    from pyspark.sql import SQLContext\n    sqlc = SQLContext(sc)\n    ```", "```py\n    from pyspark.sql import *\n    na_schema = Row(\"Name\",\"Age\")\n    ```", "```py\n    row1 = na_schema(\"Ankit\", 23)\n    row2 = na_schema(\"Tyler\", 26)\n    row3 = na_schema(\"Preity\", 36)\n    ```", "```py\n    na_list = [row1, row2, row3]\n    df_na = sqlc.createDataFrame(na_list)\n    type(df_na)\n    ```", "```py\n    df_na.show()\n    ```", "```py\n    data = [(\"Ankit\",23),(\"Tyler\",26),(\"Preity\",36)]\n    data_rdd = sc.parallelize(data)\n    type(data_rdd)\n    ```", "```py\n    data_sd = sqlc.createDataFrame(data_rdd)\n    ```", "```py\n    data_sd.show()\n    ```", "```py\n    pyspark â€“packages com.databricks:spark-csv_2.10:1.4.0\n    ```", "```py\n    df = sqlc.read.format('com.databricks.spark.csv').options(header='true', inferschema='true').load('iris.csv')\n    type(df)\n    ```", "```py\n    df.show(4)\n    ```", "```py\n    import pandas as pd\n    df.toPandas()\n    ```", "```py\n    df.toPandas().to_csv('iris.csv')\n    ```", "```py\n    df.printSchema()\n    ```", "```py\n    df.schema.names\n    ```", "```py\n    ## Counting the number of rows in DataFrame\n    df.count()#134\n    ## Counting the number of columns in DataFrame\n    len(df.columns)#5\n    ```", "```py\n    df.show(4)\n    ```", "```py\n    df.describe().show()\n    ```", "```py\n    df.describe('Sepalwidth').show()\n    ```", "```py\n    df = df.withColumnRenamed('Sepal.Width','Sepalwidth')\n    ```", "```py\n    df.select('Sepalwidth','Sepallength').show(4)\n    ```", "```py\n    df = df.withColumn('Half_sepal_width', df['Sepalwidth']/2.0)\n    ```", "```py\n    df.show(4)\n    ```", "```py\n    df = df.drop('Half_sepal_width')\n    ```", "```py\n    df.show(4)\n    ```", "```py\n    df.select('Species').distinct().show()\n    ```", "```py\n    df.select('Species').distinct().count()\n    ```", "```py\n    df.select('Species').dropDuplicates().show()\n    ```", "```py\n    # Filtering using a single condition\n    df.filter(df.Species == 'setosa').show(4)\n    ```", "```py\n    df.filter((df.Sepallength > 5) & (df.Species == 'setosa')).show(4)\n    ```", "```py\n    df.orderBy(df.Sepallength).show(5)\n    ```", "```py\n    df.orderBy(df.Sepallength.desc()).show(5)\n    ```", "```py\n    df.groupby('Species').agg({'Sepalwidth' : 'mean'}).show()\n    ```", "```py\n    df.groupby('Species').count().show()\n    ```", "```py\n.agg function; however, the method we used is more popular.\n```", "```py\n    data = df.groupby('Species').count().toPandas()\n    ```", "```py\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    sns.barplot( x = data['Species'], y = data['count'])\n    plt.xlabel('Species')\n    plt.ylabel('count')\n    plt.title('Number of rows per species')\n    ```", "```py\n    data = df.toPandas()\n    sns.lmplot(x = \"Sepallength\", y = \"Sepalwidth\", data = data)\n    ```", "```py\n    plt.show()\n    ```", "```py\n    import seaborn as sns\n    data = df.toPandas()\n    sns.kdeplot(data.Sepalwidth, shade = True)\n    plt.show()\n    ```", "```py\n    sns.boxplot(x = \"Sepallength\", y = \"Sepalwidth\", data = data)\n    plt.show()\n    ```"]