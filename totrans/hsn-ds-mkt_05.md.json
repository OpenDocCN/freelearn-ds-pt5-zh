["```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.read_csv('../data/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv')\n```", "```py\ndf['Engaged'] = df['Response'].apply(lambda x: 0 if x == 'No' else 1)\n```", "```py\nengagement_rate_df = pd.DataFrame(\n    df.groupby('Engaged').count()['Response'] / df.shape[0] * 100.0\n)\n```", "```py\nengagement_by_sales_channel_df = pd.pivot_table(\n    df, values='Response', index='Sales Channel', columns='Engaged', aggfunc=len\n).fillna(0.0)\n\nengagement_by_sales_channel_df.columns = ['Not Engaged', 'Engaged']\n```", "```py\nengagement_by_sales_channel_df.plot(\n    kind='pie',\n    figsize=(15, 7),\n    startangle=90,\n    subplots=True,\n    autopct=lambda x: '%0.1f%%' % x\n)\n\nplt.show()\n```", "```py\nax = df[['Engaged', 'Total Claim Amount']].boxplot(\n    by='Engaged',\n    showfliers=False,\n    figsize=(7,5)\n)\n\nax.set_xlabel('Engaged')\nax.set_ylabel('Total Claim Amount')\nax.set_title('Total Claim Amount Distributions by Engagements')\n\nplt.suptitle(\"\")\nplt.show()\n```", "```py\nax = df[['Engaged', 'Total Claim Amount']].boxplot(\n    by='Engaged',\n    showfliers=True,\n    figsize=(7,5)\n)\n\nax.set_xlabel('Engaged')\nax.set_ylabel('Total Claim Amount')\nax.set_title('Total Claim Amount Distributions by Engagements')\n\nplt.suptitle(\"\")\nplt.show()\n```", "```py\ncontinuous_vars = [\n    'Customer Lifetime Value', 'Income', 'Monthly Premium Auto', \n    'Months Since Last Claim', 'Months Since Policy Inception', \n    'Number of Open Complaints', 'Number of Policies', \n    'Total Claim Amount'\n]\n```", "```py\nimport statsmodels.formula.api as sm\n```", "```py\nlogit = sm.Logit(\n    df['Engaged'], \n    df[continuous_vars]\n)\n```", "```py\nlogit_fit = logit.fit()\n```", "```py\nlogit_fit.summary()\n```", "```py\ngender_values, gender_labels = df['Gender'].factorize()\n```", "```py\ncategories = pd.Categorical(\n    df['Education'], \n    categories=['High School or Below', 'Bachelor', 'College', 'Master', 'Doctor']\n)\n```", "```py\ndf['GenderFactorized'] = gender_values\ndf['EducationFactorized'] = categories.codes\n```", "```py\nlogit = sm.Logit(\n    df['Engaged'], \n    df[[\n        'GenderFactorized',\n        'EducationFactorized'\n    ]]\n)\n\nlogit_fit = logit.fit()\n```", "```py\nlogit = sm.Logit(\n    df['Engaged'], \n    df[['Customer Lifetime Value',\n        'Income',\n        'Monthly Premium Auto',\n        'Months Since Last Claim',\n        'Months Since Policy Inception',\n        'Number of Open Complaints',\n        'Number of Policies',\n        'Total Claim Amount',\n        'GenderFactorized',\n        'EducationFactorized'\n    ]]\n)\n\nlogit_fit = logit.fit()\n```", "```py\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Load data\ndf <- read.csv(\n  file=\"~/Documents/data-science-for-marketing/ch.3/data/WA_Fn-UseC_-Marketing-Customer-Value-Analysis.csv\", \n  header=TRUE, \n  sep=\",\"\n)\n```", "```py\n# Encode Response as 0s and 1s\ndf$Engaged <- as.integer(df$Response) - 1\n```", "```py\nengagementRate <- df %>% \n  group_by(Engaged) %>% \n  summarise(Count=n()) %>%\n  mutate(Percentage=Count/nrow(df)*100.0)\n```", "```py\n# Transpose\ntransposed <- t(engagementRate)\n\ncolnames(transposed) <- engagementRate$Engaged\ntransposed <- transposed[-1,]\n```", "```py\nsalesChannel <- df %>% \n  group_by(Engaged, Channel=Sales.Channel) %>% \n  summarise(Count=n())\n```", "```py\n# pie chart\nggplot(salesChannel, aes(x=\"\", y=Count, fill=Channel)) + \n  geom_bar(width=1, stat = \"identity\", position=position_fill()) +\n  geom_text(aes(x=1.25, label=Count), position=position_fill(vjust = 0.5)) +\n  coord_polar(\"y\") +\n  facet_wrap(~Engaged) +\n  ggtitle('Sales Channel (0: Not Engaged, 1: Engaged)') +\n  theme(\n    axis.title.x=element_blank(),\n    axis.title.y=element_blank(),\n    plot.title=element_text(hjust=0.5),\n    legend.position='bottom'\n  )\n```", "```py\nggplot(df, aes(x=\"\", y=Total.Claim.Amount)) + \n  geom_boxplot() +\n  facet_wrap(~Engaged) +\n  ylab(\"Total Claim Amount\") +\n  xlab(\"0: Not Engaged, 1: Engaged\") +\n  ggtitle(\"Engaged vs. Not Engaged: Total Claim Amount\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\n# without outliers\nggplot(df, aes(x=\"\", y=Total.Claim.Amount)) + \n  geom_boxplot(outlier.shape = NA) +\n  scale_y_continuous(limits = quantile(df$Total.Claim.Amount, c(0.1, 0.9))) +\n  facet_wrap(~Engaged) +\n  ylab(\"Total Claim Amount\") +\n  xlab(\"0: Not Engaged, 1: Engaged\") +\n  ggtitle(\"Engaged vs. Not Engaged: Total Claim Amount\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\n# get data types of each column\nsapply(df, class)\n```", "```py\n# summary statistics per column\nsummary(df)\n```", "```py\n# get numeric columns\ncontinuousDF <- select_if(df, is.numeric)\ncolnames(continuousDF)\n```", "```py\n# Fit regression model with continuous variables\nlogit.fit <- glm(Engaged ~ ., data = continuousDF, family = binomial)\n```", "```py\nEngaged ~ Income + Customer.Lifetime.Value\n```", "```py\nsummary(logit.fit)\n```", "```py\n# a. Education\n# Fit regression model with Education factor variables\nlogit.fit <- glm(Engaged ~ factor(Education), data = df, family = binomial)\nsummary(logit.fit)\n```", "```py\n# b. Education + Gender\n# Fit regression model with Education & Gender variables\nlogit.fit <- glm(Engaged ~ factor(Education) + factor(Gender), data = df, family = binomial)\n\nsummary(logit.fit)\n```", "```py\ncontinuousDF$Gender <- factor(df$Gender)\ncontinuousDF$Education <- factor(df$Education)\n```", "```py\n# Fit regression model with Education & Gender variables\nlogit.fit <- glm(Engaged ~ ., data = continuousDF, family = binomial)\nsummary(logit.fit)\n```"]