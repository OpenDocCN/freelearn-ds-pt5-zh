["```py\njulia> Pkg.add(\"Distributions\") \n\n```", "```py\njulia> typealias UnivariateDistribution{S<:ValueSupport}   Distribution{Univariate,S} \n\njulia> typealias MultivariateDistribution{S<:ValueSupport} Distribution{Multivariate,S} \n\njulia> typealias MatrixDistribution{S<:ValueSupport}       Distribution{Matrixvariate,S} \n\n```", "```py\njulia> typealias UnivariateDistribution{S<:ValueSupport} Distribution{Univariate,S} \n\njulia> typealias DiscreteUnivariateDistribution   Distribution{Univariate, Discrete} \njulia> typealias ContinuousUnivariateDistribution Distribution{Univariate, Continuous} \n\n```", "```py\njulia> rand(distributionX)\n\n```", "```py\nJulia> rand(distributionX,n) \n\n```", "```py\njulia> Bernoulli(p) \n\n```", "```py\njulia> Chi(k) \n\n```", "```py\njulia> Chisq(k) \n\n```", "```py\nJulia> TruncatedNormal(mu, sigma, l, u) \n\n```", "```py\njulia> typealias MultivariateDistribution{S<:ValueSupport} Distribution{Multivariate,S} \n\njulia> typealias DiscreteMultivariateDistribution   Distribution{Multivariate, Discrete} \njulia> typealias ContinuousMultivariateDistribution Distribution{Multivariate, Continuous} \n\n```", "```py\njulia> Multinomial(n, p) \n\n```", "```py\njulia> typealias FullNormal MvNormal{PDMat,    Vector{Float64}} \njulia> typealias DiagNormal MvNormal{PDiagMat, Vector{Float64}} \njulia> typealias IsoNormal  MvNormal{ScalMat,  Vector{Float64}} \n\njulia> typealias ZeroMeanFullNormal MvNormal{PDMat,    ZeroVector{Float64}} \njulia> typealias ZeroMeanDiagNormal MvNormal{PDiagMat, ZeroVector{Float64}} \njulia> typealias ZeroMeanIsoNormal  MvNormal{ScalMat,  ZeroVector{Float64}} \n\n```", "```py\njulia> Dirichlet(alpha) \n\n```", "```py\njulia> Dirichlet(k, a) \n\n```", "```py\njulia> Wishart(v, S) \n\n```", "```py\njulia> InverseWishart(v, P) \n\n```", "```py\njulia> d = fit(Distribution_type, dataset) \n\n```", "```py\njulia> fit_mle(Distribution, dataset) \n\n```", "```py\n julia> fit_mle(Distribution, weights, dataset)\n\n```", "```py\njulia> gensuffstats = suffstats(Distribution, dataset, weights) \n\n```", "```py\njulia>  fit_mle(Distribution, gensuffstats) \n\n```", "```py\njulia> posterior(priori, suffst) \n\n```", "```py\njulia> fit_map(priori, G, dataset[, weights]) \n\n```", "```py\njulia> complete(priori, G, params) \n\n```", "```py\nci(x::HypothesisTests.Btest) \nci(x::HypothesisTests.BTest, alpha::Float64)\n\nci(x::HypothesisTests.BinomialTest) \nci(x::HypothesisTests.BinomialTest, alpha::Float64)\n\nci(x::HypothesisTests.SignTest) \nci(x::HypothesisTests.SignTest, alpha::Float64)\n\nci(x::HypothesisTests.FisherExactTest) \nci(x::HypothesisTests.FisherExactTest, alpha::Float64)\nci(x::HypothesisTests.TTest) \nci(x::HypothesisTests.TTest, alpha::Float64)\n\nci(x::HypothesisTests.PowerDivergenceTest) \nci(x::HypothesisTests.PowerDivergenceTest, alpha::Float64) \n\n```", "```py\njulia> ci(test::BinomialTest,alpha=0.05; tail=:both,method=:clopper_pearson) \n\n```", "```py\njulia> ci(test::PowerDivergenceTest, alpha=0.05; tail=:both, method=:sison_glaz) \n\n```", "```py\njulia> zscore(X,  μ, σ) \n\n```", "```py\njulia> pvalue(test::HypothesisTest; tail=:both) \n\n```"]