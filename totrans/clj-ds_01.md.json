["```py\nlein repl\n\n```", "```py\nlein run –-example 1.1\n\n```", "```py\nlein run –e 1.1\n\n```", "```py\nscript/download-data.sh\n\n```", "```py\n  :dependencies [[incanter/incanter-core \"1.5.5\"]\n                 [incanter/incanter-stats \"1.5.5\"]\n                 [incanter/incanter-charts \"1.5.5\"]\n                 [incanter/incanter-excel \"1.5.5\"]\n                 ...]\n```", "```py\n:dependencies [[incanter/incanter \"1.5.5\"]\n               ...]\n```", "```py\n(ns cljds.ch1.data\n  (:require [clojure.java.io :as io]\n            [incanter.core :as i]\n            [incanter.excel :as xls]))\n```", "```py\n(defmulti load-data identity)\n\n(defmethod load-data :uk [_]\n  (-> (io/resource \"UK2010.xls\")\n      (str)\n      (xls/read-xls)))\n```", "```py\n(defn ex-1-1 []\n  (i/col-names (load-data :uk)))\n```", "```py\nlein run –e 1.1\n\n```", "```py\n[\"Press Association Reference\" \"Constituency Name\" \"Region\" \"Election Year\" \"Electorate\" \"Votes\" \"AC\" \"AD\" \"AGS\" \"APNI\" \"APP\" \"AWL\" \"AWP\" \"BB\" \"BCP\" \"Bean\" \"Best\" \"BGPV\" \"BIB\" \"BIC\" \"Blue\" \"BNP\" \"BP Elvis\" \"C28\" \"Cam Soc\" \"CG\" \"Ch M\" \"Ch P\" \"CIP\" \"CITY\" \"CNPG\" \"Comm\" \"Comm L\" \"Con\" \"Cor D\" \"CPA\" \"CSP\" \"CTDP\" \"CURE\" \"D Lab\" \"D Nat\" \"DDP\" \"DUP\" \"ED\" \"EIP\" \"EPA\" \"FAWG\" \"FDP\" \"FFR\" \"Grn\" \"GSOT\" \"Hum\" \"ICHC\" \"IEAC\" \"IFED\" \"ILEU\" \"Impact\" \"Ind1\" \"Ind2\" \"Ind3\" \"Ind4\" \"Ind5\" \"IPT\" \"ISGB\" \"ISQM\" \"IUK\" \"IVH\" \"IZB\" \"JAC\" \"Joy\" \"JP\" \"Lab\" \"Land\" \"LD\" \"Lib\" \"Libert\" \"LIND\" \"LLPB\" \"LTT\" \"MACI\" \"MCP\" \"MEDI\" \"MEP\" \"MIF\" \"MK\" \"MPEA\" \"MRLP\" \"MRP\" \"Nat Lib\" \"NCDV\" \"ND\" \"New\" \"NF\" \"NFP\" \"NICF\" \"Nobody\" \"NSPS\" \"PBP\" \"PC\" \"Pirate\" \"PNDP\" \"Poet\" \"PPBF\" \"PPE\" \"PPNV\" \"Reform\" \"Respect\" \"Rest\" \"RRG\" \"RTBP\" \"SACL\" \"Sci\" \"SDLP\" \"SEP\" \"SF\" \"SIG\" \"SJP\" \"SKGP\" \"SMA\" \"SMRA\" \"SNP\" \"Soc\" \"Soc Alt\" \"Soc Dem\" \"Soc Lab\" \"South\" \"Speaker\" \"SSP\" \"TF\" \"TOC\" \"Trust\" \"TUSC\" \"TUV\" \"UCUNF\" \"UKIP\" \"UPS\" \"UV\" \"VCCA\" \"Vote\" \"Wessex Reg\" \"WRP\" \"You\" \"Youth\" \"YRDPL\"]\n```", "```py\n(defn ex-1-2 []\n  (i/$ \"Election Year\" (load-data :uk)))\n\n;; (2010.0 2010.0 2010.0 2010.0 2010.0 ... 2010.0 2010.0 nil)\n```", "```py\n(defn ex-1-3 []\n  (->> (load-data :uk)\n       (i/$ \"Election Year\")\n       (distinct)))\n\n;; (2010 nil)\n```", "```py\n(defn ex-1-4 [ ]\n  (->> (load-data :uk)\n       (i/$ \"Election Year\")\n       (frequencies)))\n\n;; {2010.0 650 nil 1}\n```", "```py\n(-> (load-data :uk)\n    (i/query-dataset {\"Election Year\" {:$eq nil}}))\n```", "```py\n(defn ex-1-5 []\n  (->> (load-data :uk)\n       (i/$where {\"Election Year\" {:$eq nil}})\n       (i/to-map)))\n\n;; {:ILEU nil, :TUSC nil, :Vote nil ... :IVH nil, :FFR nil}\n```", "```py\n(->> (load-data :uk)\n      (i/$where {\"Election Year\" {:$ne nil}}))\n```", "```py\n(defmethod load-data :uk-scrubbed [_]\n  (->> (load-data :uk)\n       (i/$where {\"Election Year\" {:$ne nil}})))\n```", "```py\n(defn ex-1-6 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (count)))\n\n;; 650\n```", "```py\n(defn mean [xs]\n  (/ (reduce + xs)\n     (count xs)))\n```", "```py\n(defn ex-1-7 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (mean)))\n\n;; 70149.94\n```", "```py\n(defn median [xs]\n  (let [n   (count xs)\n        mid (int (/ n 2))]\n    (if (odd? n)\n      (nth (sort xs) mid)\n      (->> (sort xs)\n           (drop (dec mid))\n           (take 2)\n           (mean)))))\n```", "```py\n(defn ex-1-8 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (median)))\n\n;; 70813.5\n```", "```py\n(defn variance [xs]\n  (let [x-bar (mean xs)\n        n     (count xs)\n        square-deviation (fn [x]\n                           (i/sq (- x x-bar)))]\n    (mean (map square-deviation xs))))\n```", "```py\n(defn standard-deviation [xs]\n  (i/sqrt (variance xs)))\n\n(defn ex-1-9 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (standard-deviation)))\n\n;; 7672.77\n```", "```py\n[10 11 15 21 22.5 28 30]\n```", "```py\n(defn quantile [q xs]\n  (let [n (dec (count xs))\n        i (-> (* n q)\n              (+ 1/2)\n              (int))]\n    (nth (sort xs) i)))\n\n(defn ex-1-10 []\n  (let [xs (->> (load-data :uk-scrubbed)\n                (i/$ \"Electorate\"))\n        f (fn [q]\n            (quantile q xs))]\n    (map f [0 1/4 1/2 3/4 1])))\n\n;; (21780.0 66219.0 70991.0 75115.0 109922.0)\n```", "```py\n(defn bin [n-bins xs]\n  (let [min-x    (apply min xs)\n        max-x    (apply max xs)\n        range-x  (- max-x min-x)\n        bin-fn   (fn [x]\n                   (-> x\n                       (- min-x)\n                       (/ range-x)\n                       (* n-bins)\n                       (int)\n                       (min (dec n-bins))))]\n    (map bin-fn xs)))\n```", "```py\n(bin 5 (range 15))\n\n;; (0 0 0 1 1 1 2 2 2 3 3 3 4 4 4)\n```", "```py\n(defn ex-1-11 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (bin 10)\n       (frequencies)))\n\n;; {1 26, 2 450, 3 171, 4 1, 0 2}\n```", "```py\n(defn ex-1-12 []\n  (-> (load-data :uk-scrubbed)\n      (i/$ \"Electorate\")\n      (c/histogram)\n      (i/view)))\n```", "```py\n(defn ex-1-13 []\n  (-> (uk-electorate)\n      (c/histogram :nbins 200)\n      (i/view)))\n```", "```py\n(defn ex-1-14 []\n  (-> (i/$ \"Electorate\" (load-data :uk-scrubbed))\n      (c/histogram :x-label \"UK electorate\"\n                   :nbins 20)\n      (i/view)))\n```", "```py\n(defn ex-1-15 []\n  (let [xs (->> (repeatedly rand)\n                (take 10000))]\n    (-> (c/histogram xs\n                     :x-label \"Uniform distribution\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn ex-1-16 []\n  (let [xs (->> (repeatedly rand)\n                (partition 10)\n                (map mean)\n                (take 10000))]\n    (-> (c/histogram xs\n                     :x-label \"Distribution of means\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn ex-1-17 []\n  (let [distribution (d/normal-distribution)\n        xs (->> (repeatedly #(d/draw distribution))\n                (take 10000))]\n    (-> (c/histogram xs\n                     :x-label \"Normal distribution\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn honest-baker [mean sd]\n  (let [distribution (d/normal-distribution mean sd)]\n    (repeatedly #(d/draw distribution))))\n\n(defn ex-1-18 []\n  (-> (take 10000 (honest-baker 1000 30))\n      (c/histogram :x-label \"Honest baker\"\n                   :nbins 25)\n      (i/view)))\n```", "```py\n(defn dishonest-baker [mean sd]\n  (let [distribution (d/normal-distribution mean sd)]\n    (->> (repeatedly #(d/draw distribution))\n         (partition 13)\n         (map (partial apply max)))))\n\n(defn ex-1-19 []\n  (-> (take 10000 (dishonest-baker 950 30))\n      (c/histogram :x-label \"Dishonest baker\"\n                   :nbins 25)\n      (i/view)))\n```", "```py\n(defn ex-1-20 []\n  (let [weights (take 10000 (dishonest-baker 950 30))]\n    {:mean (mean weights)\n     :median (median weights)\n     :skewness (s/skewness weights)}))\n```", "```py\n(defn ex-1-21 []\n  (->> (honest-baker 1000 30)\n       (take 10000)\n       (c/qq-plot)\n       (i/view))\n  (->> (dishonest-baker 950 30)\n       (take 10000)\n       (c/qq-plot)\n       (i/view)))\n```", "```py\n(defn ex-1-22 []\n  (-> (c/box-plot (->> (honest-baker 1000 30)\n                       (take 10000))\n                  :legend true\n                  :y-label \"Loaf weight (g)\"\n                  :series-label \"Honest baker\")\n      (c/add-box-plot (->> (dishonest-baker 950 30)\n                           (take 10000))\n                      :series-label \"Dishonest baker\")\n      (i/view)))\n```", "```py\n(defn ex-1-23 []\n  (let [sample-honest    (->> (honest-baker 1000 30)\n                              (take 1000))\n        sample-dishonest (->> (dishonest-baker 950 30)\n                              (take 1000))\n        ecdf-honest    (s/cdf-empirical sample-honest)\n        ecdf-dishonest (s/cdf-empirical sample-dishonest)]\n    (-> (c/xy-plot sample-honest (map ecdf-honest sample-honest)\n                   :x-label \"Loaf Weight\"\n                   :y-label \"Probability\"\n                   :legend true\n                   :series-label \"Honest baker\")\n        (c/add-lines sample-dishonest\n                     (map ecdf-dishonest sample-dishonest)\n                     :series-label \"Dishonest baker\")\n        (i/view))))\n```", "```py\n(defn ex-1-24 []\n  (let [electorate (->> (load-data :uk-scrubbed)\n                        (i/$ \"Electorate\"))\n        ecdf   (s/cdf-empirical electorate)\n        fitted (s/cdf-normal electorate\n                             :mean (s/mean electorate)\n                             :sd   (s/sd electorate))]\n    (-> (c/xy-plot electorate fitted\n                   :x-label \"Electorate\"\n                   :y-label \"Probability\"\n                   :series-label \"Fitted\"\n                   :legend true)\n        (c/add-lines electorate (map ecdf electorate)\n                     :series-label \"Empirical\")\n        (i/view))))\n```", "```py\n(defn ex-1-25 []\n  (->> (load-data :uk-scrubbed)\n       (i/$ \"Electorate\")\n       (c/qq-plot)\n       (i/view)))\n```", "```py\n(defn ex-1-26 []\n  (->> (load-data :uk-scrubbed)\n       (i/add-derived-column :victors [:Con :LD] +)))\n```", "```py\nClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:126)\n```", "```py\n(->> (load-data :uk-scrubbed)\n     ($ \"Con\")\n     (map type)\n     (frequencies))\n\n;; {java.lang.Double 631, java.lang.String 19}\n\n(->> (load-data :uk-scrubbed)\n     ($ \"LD\")\n     (map type)\n     (frequencies))\n\n;; {java.lang.Double 631, java.lang.String 19}\n```", "```py\n(defn ex-1-27 []\n  (->> (load-data :uk-scrubbed)\n       (i/$where #(not-any? number? [(% \"Con\") (% \"LD\")]))\n       (i/$ [:Region :Electorate :Con :LD])))\n\n;; |           Region | Electorate | Con | LD |\n;; |------------------+------------+-----+----|\n;; | Northern Ireland |    60204.0 |     |    |\n;; | Northern Ireland |    73338.0 |     |    |\n;; | Northern Ireland |    63054.0 |     |    |\n;; ...\n```", "```py\n(defmethod load-data :uk-victors [_]\n  (->> (load-data :uk-scrubbed)\n       (i/$where {:Con {:$fn number?} :LD {:$fn number?}})\n       (i/add-derived-column :victors [:Con :LD] +)\n       (i/add-derived-column :victors-share [:victors :Votes] /)\n       (i/add-derived-column :turnout [:Votes :Electorate] /)))\n```", "```py\n(defn ex-1-28 []\n  (->> (load-data :uk-victors)\n       (i/$ :victors-share)\n       (c/qq-plot)\n       (i/view)))\n```", "```py\n  :jvm-opts [\"-Xmx1G\"]\n```", "```py\n(defmethod load-data :ru [_]\n  (i/conj-rows (-> (io/resource \"Russia2011_1of2.xls\")\n                   (str)\n                   (xls/read-xls))\n               (-> (io/resource \"Russia2011_2of2.xls\")\n                   (str)\n                   (xls/read-xls))))\n```", "```py\n(defn ex-1-29 []\n  (-> (load-data :ru)\n      (i/col-names)))\n\n;; [\"Code for district\"\n;; \"Number of the polling district (unique to state, not overall)\"\n;; \"Name of district\" \"Number of voters included in voters list\"\n;; \"The number of ballots received by the precinct election\n;; commission\" ...]\n```", "```py\n(defmethod load-data :ru-victors [_]\n  (->> (load-data :ru)\n       (i/rename-cols\n        {\"Number of voters included in voters list\" :electorate\n         \"Number of valid ballots\" :valid-ballots\n         \"United Russia\" :victors})\n       (i/add-derived-column :victors-share\n                             [:victors :valid-ballots] i/safe-div)\n       (i/add-derived-column :turnout\n                             [:valid-ballots :electorate] /)))\n```", "```py\n(defn ex-1-30 []\n  (-> (i/$ :turnout (load-data :ru-victors))\n      (c/histogram :x-label \"Russia turnout\"\n                   :nbins 20)\n      (i/view)))\n```", "```py\n(defn ex-1-31 []\n  (->> (load-data :ru-victors)\n       (i/$ :turnout)\n       (c/qq-plot)\n       (i/view)))\n```", "```py\n(defn as-pmf [bins]\n  (let [histogram (frequencies bins)\n        total     (reduce + (vals histogram))]\n    (->> histogram\n         (map (fn [[k v]]\n                [k (/ v total)]))\n         (into {}))))\n```", "```py\n(defn ex-1-32 []\n  (let [n-bins 40\n        uk (->> (load-data :uk-victors)\n                (i/$ :turnout)\n                (bin n-bins)\n                (as-pmf))\n        ru (->> (load-data :ru-victors)\n                (i/$ :turnout)\n                (bin n-bins)\n                (as-pmf))]\n    (-> (c/xy-plot (keys uk) (vals uk)\n                   :series-label \"UK\"\n                   :legend true\n                   :x-label \"Turnout Bins\"\n                   :y-label \"Probability\")\n        (c/add-lines (keys ru) (vals ru)\n                     :series-label \"Russia\")\n        (i/view))))\n```", "```py\n(defn ex-1-33 []\n  (let [data (load-data :uk-victors)]\n    (-> (c/scatter-plot (i/$ :turnout data)\n                        (i/$ :victors-share data)\n                        :x-label \"Turnout\"\n                        :y-label \"Victor's Share\")\n        (i/view))))\n```", "```py\n(defn ex-1-34 []\n  (let [data (load-data :ru-victors)]\n    (-> (c/scatter-plot (i/$ :turnout data)\n                        (i/$ :victors-share data)\n                        :x-label \"Turnout\"\n                        :y-label \"Victor's Share\")\n        (i/view))))\n```", "```py\n(defn ex-1-35 []\n  (let [data (-> (load-data :ru-victors)\n                 (s/sample :size 10000))]\n    (-> (c/scatter-plot (i/$ :turnout data)\n                        (i/$ :victors-share data)\n                        :x-label \"Turnout\"\n                        :y-label \"Victor Share\")\n        (c/set-alpha 0.05)\n        (i/view))))\n```"]