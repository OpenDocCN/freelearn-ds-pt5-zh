["```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.preprocessing import LabelBinarizer\n    from keras.datasets import mnist\n    from keras.models import Sequential\n    from keras.layers import Dense\n    ```", "```py\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    ```", "```py\n    x_train.shape\n    ```", "```py\n    plt.imshow(x_test[0], cmap=plt.get_cmap(‘gray'))\n    plt.show()\n    ```", "```py\n    x_train = x_train.reshape(60000, 784)\n    x_test = x_test.reshape(10000, 784)\n    ```", "```py\n    label_binarizer = LabelBinarizer()\n    label_binarizer.fit(range(10))\n    y_train = label_binarizer.transform(y_train)\n    y_test = label_binarizer.transform(y_test)\n    ```", "```py\n    model = Sequential()\n    model.add(Dense(units=32, activation='relu', input_dim=784))\n    model.add(Dense(units=32, activation='relu'))\n    model.add(Dense(units=10, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics = [‘acc'])\n    model.summary()\n    ```", "```py\n    model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs=40, batch_size=32)\n    score = model.evaluate(x_test, y_test)\n    print(“Accuracy: {0:.2f}%”.format(score[1]*100))\n    ```", "```py\nimage = 6\nplt.imshow(x_test[image].reshape(28,28), \ncmap=plt.get_cmap(‘gray'))\nplt.show()\ny_pred = model.predict(x_test)\nprint(“Prediction: {0}”.format(np.argmax(y_pred[image])))\n```", "```py\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(y_test,axis=1))[0]\nimage = 4\nplt.imshow(x_test[incorrect_indices[image]].reshape(28,28), \ncmap=plt.get_cmap(‘gray'))\nplt.show()\nprint(“Prediction: {0}”.format(np.argmax(y_pred[incorrect_indices[image]])))\n```", "```py\n    from keras.datasets import mnist\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    ```", "```py\n    x_train = x_train.reshape(-1, 28, 28, 1)\n    x_test = x_test.reshape(-1, 28, 28, 1)\n    ```", "```py\n    from sklearn.preprocessing import LabelBinarizer\n    label_binarizer = LabelBinarizer()\n    label_binarizer.fit(range(10))\n    y_train = label_binarizer.transform(y_train)\n    y_test = label_binarizer.transform(y_test)\n    ```", "```py\n    from keras.models import Model, Sequential\n    from keras.layers import Dense, Conv2D, MaxPool2D, Flatten\n    model = Sequential()\n    ```", "```py\n    model.add(Conv2D(32, kernel_size=3, \n    padding=”same”,input_shape=(28, 28, 1),    activation = ‘relu'))\n    model.add(Conv2D(32, kernel_size=3, activation = ‘relu'))\n    ```", "```py\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    model.add(Flatten())\n    ```", "```py\n    model.add(Dense(128, activation = “relu”))\n    model.add(Dense(10, activation = “softmax”))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', \n    metrics = [‘acc'])\n    model.summary()\n    ```", "```py\n    model.fit(x_train, y_train, validation_data = (x_test, y_test), \n    epochs=10, batch_size=1024)\n    score = model.evaluate(x_test, y_test)\n    print(“Accuracy: {0:.2f}%”.format(score[1]*100))\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(y_test,axis=1))[0]\nimage = 4\nplt.imshow(x_test[incorrect_indices[image]].reshape(28,28), \ncmap=plt.get_cmap(‘gray'))\nplt.show()\nprint(“Prediction: {0}”.format(np.argmax(y_pred[incorrect_indices[image]])))\n```", "```py\nkeras.layers.Dropout(0.5)\n```", "```py\nkeras.regularizers.l1(0.01)\nkeras.regularizers.l2(0.01)\nkeras.regularizers.l1_l2(l1=0.01, l2=0.01)\n```", "```py\nkeras.layers.BatchNormalization()\n```", "```py\n    from keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout, BatchNormalization\n    from keras.datasets import cifar10\n    (x_train, y_train), (x_test, y_test) = cifar10.load_data()\n    ```", "```py\n    x_train.shape\n    ```", "```py\n    y_train.shape\n    ```", "```py\n    x_train = x_train.reshape(-1, 32, 32, 3)\n    x_test = x_test.reshape(-1, 32, 32, 3)\n    ```", "```py\n    from sklearn.preprocessing import LabelBinarizer\n    label_binarizer = LabelBinarizer()\n    label_binarizer.fit(range(10))\n    y_train = label_binarizer.transform(y_train)\n    y_test = label_binarizer.transform(y_test)\n    ```", "```py\n    from keras.models import Sequential\n    model = Sequential()\n    ```", "```py\n    model.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32,32,3)))    \n    model.add(Conv2D(32, (3, 3), activation='relu'))\n    ```", "```py\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    model.add(Flatten())\n    ```", "```py\n    model.add(Dense(512, activation='relu'))\n    model.add(Dense(10, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', \n    metrics = [‘acc'])\n    ```", "```py\n    model.fit(x_train, y_train, validation_data = (x_test, y_test), \n    epochs=10, batch_size=512)\n    ```", "```py\n    score = model.evaluate(x_test, y_test)\n    print(“Accuracy: {0:.2f}%”.format(score[1]*100))\n    ```", "```py\n    model = Sequential()\n    ```", "```py\n    model.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32,32,3)))    \n    model.add(Conv2D(32, (3, 3), activation='relu'))   \n    ```", "```py\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    model.add(BatchNormalization())\n    model.add(Dropout(0.10))\n    ```", "```py\n    model.add(Flatten())\n    ```", "```py\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(10, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', \n    metrics = [‘acc'])\n    model.summary()\n    ```", "```py\n    model.fit(x_train, y_train, validation_data = (x_test, y_test), \n    epochs=10, batch_size=512)\n    score = model.evaluate(x_test, y_test)\n    print(“Accuracy: {0:.2f}%”.format(score[1]*100))\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\ny_pred = model.predict(x_test)\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(y_test,axis=1))[0]\nlabels = [‘airplane', ‘automobile', ‘bird', ‘cat', ‘deer', ‘dog', ‘frog', ‘horse', ‘ship', ‘truck']\nimage = 3\nplt.imshow(x_test[incorrect_indices[image]].reshape(32,32,3))\nplt.show()\nprint(“Prediction: {0}”.format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```", "```py\nfrom PIL import Image\nimage = Image.open(‘rgb.png').convert(‘LA')\nimage.save(‘greyscale.png')\n```", "```py\n    area = (1000, 500, 2500, 2000)\n    cropped_img = img.crop(area)\n    ```", "```py\n    size = (2000,2000)\n    back = Image.new(“RGB”, size, “white”)\n    offset = (250, 250)\n    back.paste(cropped_img, offset)\n    ```", "```py\nimg.transpose(Image.FLIP_LEFT_RIGHT)\n```", "```py\nimg.rotate(45)\n```", "```py\nimport PIL\nwidth, height = img.size\nimage = PIL.ImageChops.offset(img, 1000, 0)\nimage.paste((0), (0, 0, 1000, height))\n```", "```py\nimport matplotlib.pyplot as plt\ny_pred = model.predict(x_test)\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(y_test,axis=1))[0]\nlabels = [‘dog', ‘cat']\nimage = 5\nplt.imshow(x_test[incorrect_indices[image]].reshape(50,50),  cmap=plt.get_cmap(‘gray'))\nplt.show()\nprint(“Prediction: {0}”.format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```", "```py\nBATCH_SIZE = 32\naug = ImageDataGenerator(rotation_range=20, \nwidth_shift_range=0.2, height_shift_range=0.2, \nshear_range=0.15, zoom_range=0.15,\nhorizontal_flip=True, vertical_flip=True, \nfill_mode=”nearest”)\n\nlog = model.fit_generator(\naug.flow(x_train, y_train, batch_size= BATCH_SIZE),\nvalidation_data=( x_test, y_test), steps_per_epoch=len(x_train) // BATCH_SIZE, epochs=10)\n```", "```py\ndef custom_image_generator(images, labels, batch_size = 128):    \n    while True:\n          # Randomly select images for the batch           batch_images = np.random.choice(images, \n                                     size = batch_size)          batch_input = []          batch_output = []           \n          # Read image, perform preprocessing and get labels\n          for image in batch_images:\n               # Function that reads and returns the image\n              input = get_input(image)\n              # Function that gets the label of the image\n                output = get_output(image,labels =labels)\n              # Function that pre-processes and augments the image\n                input = preprocess_image(input)\n              batch_input += [input]              batch_output += [output]\n\n          batch_x = np.array( batch_input )          batch_y = np.array( batch_output )          \n            # Return a tuple of (images,labels) to feed the network           yield(batch_x, batch_y)\n```", "```py\n    from keras.datasets import cifar10\n    (x_train, y_train), (x_test, y_test) = cifar10.load_data()\n    ```", "```py\n    x_train = x_train.reshape(-1, 32, 32, 3)\n    x_test = x_test.reshape(-1, 32, 32, 3)\n    ```", "```py\n    from sklearn.preprocessing import LabelBinarizer\n    label_binarizer = LabelBinarizer()\n    label_binarizer.fit(range(10))\n    y_train = label_binarizer.transform(y_train)\n    y_test = label_binarizer.transform(y_test)\n    ```", "```py\n    from keras.models import Sequential\n    model = Sequential()\n    ```", "```py\n    from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten, BatchNormalization\n    model.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32,32,3)))\n    model.add(Conv2D(32, (3, 3), activation='relu'))\n    ```", "```py\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    model.add(BatchNormalization())\n    model.add(Dropout(0.10))\n    ```", "```py\n    model.add(Flatten())\n    ```", "```py\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(10, activation='softmax'))\n    ```", "```py\n    model.compile(loss='categorical_crossentropy', optimizer='adam', \n    metrics = [‘acc'])\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    datagen = ImageDataGenerator(\n        rotation_range=45,\n        width_shift_range=0.2,  \n        height_shift_range=0.2,  \n        horizontal_flip=True)\n    ```", "```py\n    BATCH_SIZE = 128\n    model_details = model.flow(datagen.flow(x_train, y_train, batch_size = BATCH_SIZE),\n                        steps_per_epoch = len(x_train) // BATCH_SIZE, \n                        epochs = 10, \n                        validation_data= (x_test, y_test),\n                        verbose=1)\n    ```", "```py\n    score = model.evaluate(x_test, y_test)\n    print(“Accuracy: {0:.2f}%”.format(score[1]*100))\n    ```", "```py\ny_pred = model.predict(x_test)\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(y_test,axis=1))[0]\nlabels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\nimage = 2\nplt.imshow(x_test[incorrect_indices[image]].reshape(32,32,3))\nplt.show()\nprint(\"Prediction: {0}\".format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```", "```py\nimport matplotlib.pyplot as plt\ny_pred = model.predict(validation_data[0])\nincorrect_indices = np.nonzero(np.argmax(y_pred,axis=1) != np.argmax(validation_data[1],axis=1))[0]\nlabels = ['dog', 'cat']\nimage = 7\nplt.imshow(validation_data[0][incorrect_indices[image]].reshape(50,50), cmap=plt.get_cmap('gray'))\nplt.show()\nprint(\"Prediction: {0}\".format(labels[np.argmax(y_pred[incorrect_indices[image]])]))\n```"]