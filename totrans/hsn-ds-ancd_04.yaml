- en: Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is said that *a picture is worth a thousand words*. Through various pictures
    and graphical presentations, we can express many abstract concepts, theories,
    data patterns, or certain ideas much clearer. In this chapter, we first explain
    why we should care about data visualization. After that, we will discuss several
    techniques often used for data visualization in R, Python, and Julia. Several
    special topics will be introduced, such as how to generate a graph, pie chart,
    and bar chart, how to add a title, trend line, Greek letters, and how to output
    our graphs. An optional topic at the end of the chapter will discuss dynamic presentations
    and how to save them as HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization in R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization in Julia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing simple graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualization packages for R, Python, and Julia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For learners, users, or researchers in the areas of data science and business
    analytics, using various types of graphs, pie charts, bar charts, and other visual
    means to show some underlying trend or pattern implied by data is vital to understand
    data and to help researchers present their data to their audience or clients better.
    There are several reasons for this. First, it is sometimes difficult to describe
    our findings, especially when we have several patterns or influencing factors.
    With several separate graphs and a joint one, complex relationships can be understood
    or explained better.
  prefs: []
  type: TYPE_NORMAL
- en: We can use graphs or pictures to explain certain algorithms, such as the Bisection
    method (see the section related to dynamic visual presentation, *Dynamic visualization*).
  prefs: []
  type: TYPE_NORMAL
- en: We can also use relative sizes to represent different meanings. In finance,
    a basic concept is called **time value of money** (**TVM**). It means that *a
    bird in the hand is worth two in the bush*. Today's $100 is more valuable than
    a future cash flow of the same amount. With different sizes of different circles
    representing the present value of cash flow occurring at different points in time
    in the future, learners can understand this concept much more clearly.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, our data might be quite messy, and simply showing the data points would
    confuse audiences further. If we could have a simple graph to show its main characteristics,
    properties, or patterns, it would help greatly.
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, let''s see the simplest graph for R. With the following one-line R
    code, we draw a cosine function from *-2π* to *2π*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/839d23c7-3044-486a-89ba-6421674d67ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Histograms could also help us understand the distribution of data points. The
    previous graph is a simple example of this. First, we generate a set of random
    numbers drawn from a standard normal distribution. For the purposes of illustration,
    the first line of `set.seed()` is actually redundant. Its existence would guarantee
    that all users would get the same set of random numbers if the same `seed` was
    used ( `333` in this case).
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, with the same set of input values, our histogram would look
    the same. In the next line, the `rnorm(n)` function draws *n* random numbers from
    a standard normal distribution. The last line then has the `hist()` function to
    generate a histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated histogram is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7323040d-a7ff-49e3-b805-46114bb6ffbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the code of `rnorm(5000)` is the same as `rnorm(5000,mean=0,sd=1)`,
    which implies that the default value of the `mean` is `0` and the default value
    for `sd` is `1`. The next R program would shade the left-tail for a standard normal
    distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a097376c-f347-4279-a899-e96bbecd467c.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that according to the last line in the preceding graph, the shaded area
    is red.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of exploring the properties of various datasets, the R package called
    `rattle` is quite useful. If the `rattle` package is not preinstalled, we could
    run the following code to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, we run the following code to launch it;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After hitting the *Enter* key, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a1d05f5-7af1-4785-8e4d-0d6d85eddee3.png)'
  prefs: []
  type: TYPE_IMG
- en: As our first step, we need to import certain datasets. For the sources of data,
    we choose from seven potential formats, such as File, ARFF, ODBC, R Dataset, and RData
    File, and we can load our data from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way is using the `Library` option, which would list all the embedded
    datasets in the `rattle` package. After clicking Library, we can see a list of
    embedded datasets. Assume that we choose `acme:boot:Monthly Excess Returns` after
    clicking Execute in the top left. We would then see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35d7569b-5339-456d-8ccc-fee9eb631108.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can study the properties of the dataset. After clicking Explore, we
    can use various graphs to view our dataset. Assume that we choose Distribution
    and select the Benford check box. We can then refer to the following screenshot
    for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e089dce7-2eb7-4307-a045-293ebdab2fee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Execute, the following would pop up. The top red line shows
    the frequencies for the **Benford** Law for each digits of 1 to 9, while the blue
    line at the bottom shows the properties of our data set. Note that if you don''t
    have the `reshape` package already installed in your system, then this either
    won''t run or will ask for permission to install the package to your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fee5dae2-a0b6-430b-b89e-719d803903be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dramatic difference between those two lines indicates that our data does
    not follow a distribution suggested by the Benford Law. In our real world, we
    know that many people, events, and economic activities are interconnected, and
    it would be a great idea to use various graphs to show such a multi-node, interconnected
    picture. If the `qgraph` package is not preinstalled, users have to run the following
    to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The next program shows the connection from a to b, a to c, and the like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If the data is shown, the meaning of the program will be much clearer. The
    correlation shows how strongly those stocks are connected. Note that all those
    values are randomly chosen with no real-world meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A high value for the third variable suggests a stronger correlation. For example,
    `IBM` is more strongly correlated with `MSFT`, with a value of `10`, than its
    correlation with `WMT`, with a value of `3`. The following graph shows how strongly
    those three stocks are correlated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffdb5baa-e96b-4dd6-bfa6-bac76d087f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following program shows the relationship or interconnection between five
    factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7288546-4c01-43e3-b4b4-733be0ecf09c.png)'
  prefs: []
  type: TYPE_IMG
- en: Data visualization in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most widely used Python package for graphs and images is called `matplotlib`.
    The following program can be viewed as the simplest Python program to generate
    a graph since it has just three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first command line would upload a Python package called `matplotlib.pyplot`
    and rename it to `plt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we could even use other short names, but it is conventional to use
    `plt` for the `matplotlib` package. The second line plots four points, while the
    last one concludes the whole process. The completed graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bebad0c7-7ce8-4c91-825e-fba2ea5949b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the next example, we add labels for both `x` and *`y`*, and a title. The
    function is the cosine function with an input value varying from *-2π* to *2π*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The nice-looking cosine graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/212be63a-bd9f-4d4f-b930-432a67e7dc5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we received $100 today, it would be more valuable than what would be received
    in two years. This concept is called the time value of money, since we could deposit
    $100 today in a bank to earn interest. The following Python program uses `size`
    to illustrate this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated graph is shown here. Again, the different sizes show their present
    values in relative terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c137965f-6253-49a3-99e6-ee67ba541d29.png)'
  prefs: []
  type: TYPE_IMG
- en: Data visualization in Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following Julia program, we use a package called `Plots`. The command
    used to install the package is `Pkg.add("Plots")`. Here, we run Julia programs
    via a Jupyter notebook. The Julia program is presented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30bef40c-6d51-4b5f-a036-9ac61011d782.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Kernel on the menu bar, and then Restart and Run All, we get
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e9c0945-9907-4f1f-b3dd-6c4f4ccdc1eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, the `srand(123)` command guarantees that any user who applies the same
    random seed will get the same set of random numbers. Because of this, he/she would
    get the same graph shown previously. The next example is a scatter plot using
    a Julia package called `PyPlot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f910387-03ce-442d-a545-077243e075bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next Julia program is borrowed from *Sargent and Stachursk*i (2017):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The impressive graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22361ae3-3276-4a55-b933-3080de094b46.png)'
  prefs: []
  type: TYPE_IMG
- en: Drawing simple graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest graph will be a straight line. For R, we have the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this simple program, type would specify the format of the line, and `b`
    would specify both the spot and the line. The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d255665-d906-482d-bcf6-260a88862c41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The possible values for type are given in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `p` | for **p**oints |'
  prefs: []
  type: TYPE_TB
- en: '| `l` | for **l**ines |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | for **b**oth |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | for the lines part, alone of `b` |'
  prefs: []
  type: TYPE_TB
- en: '| `o` | for both **o**verplotted |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | for **h**istogram-like (or high-density) vertical lines |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | for stair **s**teps |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | for other **s**teps *(see the following details)* |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | for no plotting |'
  prefs: []
  type: TYPE_TB
- en: Table 4.1 Possible values for type in the R function plot()
  prefs: []
  type: TYPE_NORMAL
- en: 'For Python, we have the following simple example for a future value, given
    the present value and interest rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The formula used is given here, where *FV* is the future value, *PV* is the
    present value, *R* is the interest rate, and *n* is the number of periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceeb3ffd-961a-4a27-824f-8eb2820b1dd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The associated line is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e1d9758-e80b-45a5-886a-4f02774a7f52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For Julia, one simple example is drawing the sine function. The input variable
    for the sine function varies from *0* to *2π*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/592cf355-bb04-4b68-9606-0a7bf0252b57.png)'
  prefs: []
  type: TYPE_IMG
- en: Various bar charts, pie charts, and histograms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the next R program, we show a pie chart based on the percentage of each
    input value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99d92293-71d7-4e46-9215-3e75a86ae43b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next Python program shows the histogram for a standard normal distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a80873cc-b5fd-45ed-a7a2-39bb4df50a22.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a trend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following R program, we first generate a set of `x ` and `y`  values.
    Then, we estimate the intercept and slope by running a linear regression. After
    that, we plot `(x,y)` values with a trend line, based on the result of our linear
    regression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph associated with the previous program is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8990a877-dc3c-4cca-a570-37069c99d6ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding legends and other explanations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following Julia function, we add the legend *y=sin(x)* to the output
    graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fb3b647-d4b1-4f88-af66-6dbeedfefbea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the R program, we add the following formula to the graph (the formula for
    the normal distribution):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2123fb8a-cbd9-4988-83ab-a2325beda1e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The R code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the command of `frac(1,2)` would generate ![](img/ca923c71-001c-4ee7-abbc-a839a07fcb10.png).
    When included in the expression function, sigma would generate *σ* and `mu` would
    generate *μ*. In a sense, they are reserved words when included in the expression
    function. The related graph is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bd92a6b-606e-47b3-b1b5-3f0dfe1e8663.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next Python program generates the image for the famous **Black-Scholes**
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated image is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f0e5577-3d73-4ace-b0d8-38ab634bcf86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding program, the backslash of `\` is used many times. For example,
    `\frac{}{}` indicates that this is a ratio, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Meanings (example)** |'
  prefs: []
  type: TYPE_TB
- en: '| `\frac{a}{b}` | ![](img/338c28e8-ebfa-42c8-8248-81663fe2e6d8.png) |'
  prefs: []
  type: TYPE_TB
- en: '| `\sigma` | σ |'
  prefs: []
  type: TYPE_TB
- en: '| `\sqrt{T}` | ![](img/b92f81c4-3541-46fd-8c36-00341cd504bf.png) |'
  prefs: []
  type: TYPE_TB
- en: '| `a_1` | a1 |'
  prefs: []
  type: TYPE_TB
- en: '| `s_0` | s0 |'
  prefs: []
  type: TYPE_TB
- en: Table 4.2 Meanings of a few notations
  prefs: []
  type: TYPE_NORMAL
- en: Visualization packages for R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To find out about some packages written in R, you can go to the home page for
    the R software at [http://r-project.org](http://r-project.org) and click CRAN
    on the left-hand side. Then, you can choose a mirror location (close to you).
    After clicking Packages on the left-hand side, you will find two lists. One is
    sorted by date while the second one is sorted alphabetically. To search for useful
    packages, we can use both lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many R packages associated with data visualization (see the partial
    list that follows):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name of R package** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `showtext` | Use fonts more easily in R graphs |'
  prefs: []
  type: TYPE_TB
- en: '| `shinyaframe` | WebVR Data Visualizations with RStudio Shiny and Mozilla
    A-Frame |'
  prefs: []
  type: TYPE_TB
- en: '| `moveVis` | Movement Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `sjPlot` | Data Visualization for Statistics in Social Science |'
  prefs: []
  type: TYPE_TB
- en: '| `qgraph` | Graph Plotting methods, Psychometric Data Visualization, and Graphical
    Model Estimation |'
  prefs: []
  type: TYPE_TB
- en: '| `statquotes` | Quotes on Statistics, Data Visualization, and Science |'
  prefs: []
  type: TYPE_TB
- en: '| `HistData` | Datasets from the History of Statistics and Data Visualization
    |'
  prefs: []
  type: TYPE_TB
- en: '| `loon` | Interactive Statistical Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `Bdvis` | Biodiversity Data Visualizations |'
  prefs: []
  type: TYPE_TB
- en: '| `Visdat` | Preliminary Data Visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `Ggfortify` | Data Visualization Tools for Statistical Analysis Results |'
  prefs: []
  type: TYPE_TB
- en: '| `ggplot2` | Create Elegant Data Visualizations Using the Grammar of Graphics
    |'
  prefs: []
  type: TYPE_TB
- en: '| `RcmdrPlugin.KMggplot2` | R Commander Plugin for Data Visualization with
    ggplot2 |'
  prefs: []
  type: TYPE_TB
- en: '| `hierarchicalSets` | Set Data Visualization Using Hierarchies |'
  prefs: []
  type: TYPE_TB
- en: '| `Dashboard` | Interactive Data Visualization with D3.js |'
  prefs: []
  type: TYPE_TB
- en: '| `Mapplots` | Data Visualization on Maps |'
  prefs: []
  type: TYPE_TB
- en: '| `Zoom` | A spatial data visualization tool |'
  prefs: []
  type: TYPE_TB
- en: Table 4.3 A partial list of R packages
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we use `ggplot2` as an example to show you how to get information about
    this specific package. Note that when uploading an R package, if we want to eliminate
    package startup messages, we could use `suppressPackageStartupMessages()`. To
    get more information about this package, we could issue the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The first R command line would upload the package while the second one would
    go to a specific website related to this package (see the first part in the following
    screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd09ff83-85ee-4f32-ae58-c16feb9e5e2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization packages for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most widely used Python package is `matplotlib`. To find all its functions,
    we could issue the following three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f785014-e767-4d01-8989-fceeffa6a09c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To find out about all Python packages associated with data visualization, we
    can go to [https://pypi.python.org](https://pypi.python.org). The following table
    shows the first several packages when we search `data visualization`, where *W*
    is the weight (in terms of popularity):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Package** | **W** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| [PyQtDataVisualization 5.9.2](https://pypi.python.org/pypi/PyQtDataVisualization/5.9.2)
    | 11 | Python bindings for the Qt Data Visualization library |'
  prefs: []
  type: TYPE_TB
- en: '| [data-utilities 1.2.8](https://pypi.python.org/pypi/data-utilities/1.2.8)
    | 10 | A data analysis and visualization helper module |'
  prefs: []
  type: TYPE_TB
- en: '| [DataEnvironment 0.0.0](https://pypi.python.org/pypi/DataEnvironment/0.0.0)
    | 10 | Data environment is for data analysis, visualization, and management |'
  prefs: []
  type: TYPE_TB
- en: '| [dataswim 0.4.10](https://pypi.python.org/pypi/dataswim/0.4.10) | 10 | Utilities
    to swim in a data lake |'
  prefs: []
  type: TYPE_TB
- en: '| [datashader 0.4](https://pypi.python.org/pypi/datashader/0.4) | 9 | Data
    visualization tool chain based on aggregating data into a grid |'
  prefs: []
  type: TYPE_TB
- en: '| [scikit-data 0.1.3](https://pypi.python.org/pypi/scikit-data/0.1.3) | 9 |
    The purpose of this library is to allow the data analysis process to be more easy
    and automatic |'
  prefs: []
  type: TYPE_TB
- en: '| [DataSpyre 0.2.7](https://pypi.python.org/pypi/DataSpyre/0.2.7) | 8 | Spyre
    makes it easy to build interactive web applications and requires no knowledge
    of HTML, CSS, or JavaScript |'
  prefs: []
  type: TYPE_TB
- en: '| [Khooshe 0.2](https://pypi.python.org/pypi/Khooshe/0.2) | 8 | Big GeoSptial
    Data Points Visualization Tool |'
  prefs: []
  type: TYPE_TB
- en: '| [lolviz 1.3.1](https://pypi.python.org/pypi/lolviz/1.3.1) | 8 | A simple
    Python data structure visualization tool for lists of lists, lists, and dictionaries
    |'
  prefs: []
  type: TYPE_TB
- en: '| [bitjet 0.2.1](https://pypi.python.org/pypi/bitjet/0.2.1) | 7 | Binary visualization
    using IPython widgets |'
  prefs: []
  type: TYPE_TB
- en: '| [ckanext-wirecloud_view 1.0.0](https://pypi.python.org/pypi/ckanext-wirecloud_view/1.0.0)
    | 7 | Provides visualization dashboards on CKAN using WireCloud |'
  prefs: []
  type: TYPE_TB
- en: '| [Data-viz 0.13](https://pypi.python.org/pypi/Data-viz/0.13) | 7 | Represents
    your high-dimensional data in a 2D space and plays with it |'
  prefs: []
  type: TYPE_TB
- en: '| [datapusher 0.0.12](https://pypi.python.org/pypi/datapusher/0.0.12) | 7 |
    A standalone web service that parses the contents of a CKAN site''s data files
    and pushes them into its DataStore |'
  prefs: []
  type: TYPE_TB
- en: '| [datatank_py 0.71](https://pypi.python.org/pypi/datatank_py/0.71) | 7 | Module
    for reading and writing DataTank files |'
  prefs: []
  type: TYPE_TB
- en: '| [gmane 0.1.dev25](https://pypi.python.org/pypi/gmane/0.1.dev25) | 7 | Utilities
    for the analysis of the GMANE email list database |'
  prefs: []
  type: TYPE_TB
- en: '| [gviz_data_table 1.0.2](https://pypi.python.org/pypi/gviz_data_table/1.0.2)
    | 7 | Python API for Google visualization |'
  prefs: []
  type: TYPE_TB
- en: '| [lightning-python 1.2.1](https://pypi.python.org/pypi/lightning-python/1.2.1)
    | 7 | A Python client library for the Lightning data visualization server |'
  prefs: []
  type: TYPE_TB
- en: '| [Orange3-Network 1.3.0](https://pypi.python.org/pypi/Orange3-Network/1.3.0)
    | 7 | Network add-on for the Orange 3 data mining software package |'
  prefs: []
  type: TYPE_TB
- en: '| [phovea_data_hdf 0.1.0](https://pypi.python.org/pypi/phovea_data_hdf/0.1.0)
    | 7 | Data provider plugin for loading data stored in hierarchical data format
    (HDF) |'
  prefs: []
  type: TYPE_TB
- en: '| [phovea_data_mongo 0.1.0](https://pypi.python.org/pypi/phovea_data_mongo/0.1.0)
    | 7 | Data provider plugin for loading graph data stored in a MongoDB |'
  prefs: []
  type: TYPE_TB
- en: '| [phovea_data_redis 0.1.0](https://pypi.python.org/pypi/phovea_data_redis/0.1.0)
    | 7 | Data provider plugin for loading data stored in a Redis in-memory database
    |'
  prefs: []
  type: TYPE_TB
- en: '| [phovea_data_sql 0.1.0](https://pypi.python.org/pypi/phovea_data_sql/0.1.0)
    | 7 | Data provider plugin for loading tabular data stored in an SQLite database
    |'
  prefs: []
  type: TYPE_TB
- en: '| [psyplot 1.0.0.post1](https://pypi.python.org/pypi/psyplot/1.0.0.post1) |
    7 | Python package for interactive data visualization |'
  prefs: []
  type: TYPE_TB
- en: '| [scikit-dataaccess 1.9.9](https://pypi.python.org/pypi/scikit-dataaccess/1.9.9)
    | 7 | Scikit Data Access Package for accessing scientific datasets |'
  prefs: []
  type: TYPE_TB
- en: Table 4.4 A partial list of Python packages associated with data visualization
  prefs: []
  type: TYPE_NORMAL
- en: Visualization packages for Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, we can go to [https://pkg.julialang.org](https://pkg.julialang.org)
    to find out about all the packages written in Julia for data visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Package** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `ExperimentalAnalysis` | A package for creating scatter matrix plots and
    visualizing linear models and DataFrames |'
  prefs: []
  type: TYPE_TB
- en: '| `GLBooks` | GLVisualize used as a notebook |'
  prefs: []
  type: TYPE_TB
- en: '| `GLVisualize` | Visualization library written in Julia and OpenGL |'
  prefs: []
  type: TYPE_TB
- en: '| `GR` | Plotting for Julia based on GR, a framework for visualization applications
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GraphPlot` | Graph visualization for Julia |'
  prefs: []
  type: TYPE_TB
- en: '| `NetworkViz` | Julia interface to visualize graphs |'
  prefs: []
  type: TYPE_TB
- en: '| `Plots` | Powerful convenience for Julia visualizations and data analysis
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ProfileView` | Visualization of Julia profiling data |'
  prefs: []
  type: TYPE_TB
- en: '| `D3Trees` | Flexible interactive visualization for large trees in Julia using
    D3.js |'
  prefs: []
  type: TYPE_TB
- en: Table 4.5 A partial list of packages written in Julia for data visualization
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic visualization means that we can see the concept or theory vividly, just
    like a video or movie. For example, in the Monte Carlo simulation, we could generate
    a set of random numbers from certain distributions, such as a uniform or a normal
    distribution. If we could show how particles moved within a range, learners would
    understand the concept of randomness better. This is like dropping red ink into
    a basin of water and observing how the ink diffuses. Another example is related
    to the so-called bisection method or bisection search. Assume that we have a database
    that contains daily trading data for over 5,000 stocks. There are many ways to
    retrieve one specific stock's information. One is called sequential search. In
    a sequential search, we pick up the first stock and compare it with our target.
    If it doesn't match, we go to the next stock. Since it uses too much computational
    power, it is not efficient. The bisection method is much more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we illustrate several examples based on the R package called
    `animation`. The first example is to dynamically show the random movement called
    `Brownian motion`, shown in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'One static picture is shown here. Again, the preceding code would show the
    Brownian moving dynamically ( just like watching a short movie):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/001ab4c0-0e78-4bd1-87e2-61865653602a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next R program shows the logic behind the `Bisection method` dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this is a dynamic picture, we can just show you a diagram. Note that
    we use *Ctrl + Shift + PrintScrn* to capture it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dee7adf-c975-4ddd-9c20-9f4afbfac89d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We know that if we toss a coin, we could end up with either a head or a tail.
    The following R program shows the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A diagram is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16387b33-f09f-4704-bd30-845d37c9ef7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving pictures as pdf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways to generate a picture. We can summarize them into the
    following four methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Method #1: Using the Snipping Tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Method #2: Saving the picture by clicking it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Method #3: Using *Ctrl + Shift + PrintScrn* and the Paint software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Method #4: Using our programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The easiest way to save our picture is to use the Snipping Tool. After a picture
    is generated, launch the Snipping Tool and choose an appropriate area to save.
    The following example shows the simplest output to a PDF file in R. Let''s use
    the previous example code of drawing a cosine function from *-2π* to *2π*, shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Saving dynamic visualization as HTML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, it was shown that we could use the R package called
    `animation` to generate dynamic pictures, such as a YouTube video. Actually, we
    could generate HTML for our students or audience to watch, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is to save the dynamic motion for the bisection method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The website [http://canisius.edu/~yany/visual/bisection.shtml](http://canisius.edu/~yany/visual/bisection.shtml)
    is related to the preceding program, which generated a moving image.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed various types of visual presentation, which
    included simple graphs, bar charts, pie charts, and histograms written in different
    languages such as R, Python, and Julia. Visual presentations can help our audience
    understand our data better. For many complex concepts or theories, we can use
    visual presentations to help explain their logic and complexity. A typical example
    is the so-called bisection method or bisection search.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain many important issues related to statistics,
    such as the T-distribution, F-distribution, T-test, F-test, and other hypothesis
    tests. We will also discuss how to run a linear regression, how to deal with missing
    data, how to treat outliers, how to detect collinearity and its treatments, and
    how to run a multi-variable linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should we care about data visualization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can we find lists of R, Python, and Julia packages associated with data
    visualization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Draw a graph using R and Python for the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1d58bfd-8f91-42fd-bc0b-50a71a2d722e.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on R programming, put the following two graphs together: ![](img/b9274665-7333-4d15-b8f3-c92f12cc23a3.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the R dataset related to the Fama-French monthly factor time series
    at [http://canisius.edu/~yany/RData/ff3monthly.RData](http://canisius.edu/~yany/RData/ff3monthly.RData).
    Then, draw the histograms for these three factors: Market, SMB, and HML.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write an R program to generate 1,000 random numbers from a uniform distribution.
    Then, estimate their mean and standard deviation. Finally, draw a histogram. Note
    that the R function for drawing *n* random numbers from a uniform distribution
    is `runif(n)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous exercise using Python and Julia.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Python to draw both the sine and cosine functions together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a beta distribution, generate 1,000 random numbers, estimate their mean
    and standard deviation, and draw a histogram. Note that the related R function
    is `rbeta(n)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From Yahoo!Finance ( [http://finance.yahoo.com](http://finance.yahoo.com)),
    download the latest 5 years of monthly data for Walmart, with a ticker symbol
    of WMT. Generate a histogram from the monthly returns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find more information about the `HistData` R package. Show a few typical examples
    by using embedded functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find all the embedded functions of the `dataswim` Python package. Show a few
    examples from the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same things as in the previous two exercises for the `GraphPlot` Julia
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write an R program to show the following formula for the present value of annuity,
    where *PV(annuity)* is the present value of annuity, *R* is the period rate, and
    *n* is the number of periods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e8b1719-2997-4e23-af33-8648063ac944.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Write a Python program to print the following formula, where *FV(growing annuity)*
    is the future value of a growing annuity, *R* is the period rate, *n* is the number
    of periods, and *g* is the growth rate per period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5a0482f-9a71-4a24-9749-3a84e581960b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the famous Black-Scholes call option model, we have the following formula,
    where s is the underlying security price today, x is the exercise price, *T* is
    maturity day (in years), r is a continuously compounded risk-free rate, and sigma
    is the volatility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, in the following set of values, the call option is 2.28, from
    `bsCall(40,42,0.5,0.1,0.2)`. Answer the following two questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Graphically show that the call option price is an increasing function of volatility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically show how to use the Bisection method to find the implied volatility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the implied volatility is the volatility implied by the price of a
    call with the same set of input values, except the last one of sigma. For example,
    for *s=40, x=42, T=0.5, r=0.1,* and *c=3*, where c is the market call value we
    observed, what is the implied volatility?
  prefs: []
  type: TYPE_NORMAL
- en: Download the IBM, WMT, and MSFT historical monthly stock data from Yahoo!Finance
    at [http://finance.yahoo.com](http://finance.yahoo.com). Estimate their correlation
    and show how strongly or weakly they are interconnected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find a way to save the following R program as HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Find out how to save a JPG file in the R package called `animation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find out how to run a stock price simulation in the R package called `animation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
