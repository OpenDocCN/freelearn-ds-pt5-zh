- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Jupyter Fundamentals'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Building a Third-Order Polynomial Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scroll to the empty cells at the bottom of `Subtopic C` in your Jupyter Notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These will be found beneath the linear-model `Activity` heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: You should fill these empty cells in with code as we complete the activity.
    You may need to insert new cells as these become filled up; please do so as needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will first pull out our dependent feature from and target variable from
    `df.` using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is identical to what we did earlier for the linear model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify what `x` looks like by printing the first few samples with `print(x[:3])`:![Figure
    1.49: Printing first three values of x using print()](img/C13018_01_491.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.49: Printing first three values of x using print()'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how each element in the array is itself an array with length 1\. This
    is what `reshape(-1,1)` does, and it is the form expected by scikit-learn.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Transform `x` into "polynomial features" by importing the appropriate transformation
    tool from scikit-learn and instantiating the third-degree polynomial feature transformer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The rationale for this step may not be immediately obvious but will be explained shortly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Transform the `x`) by running the `fit_transform` method. Build the polynomial
    feature set by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have used the instance of the transformer feature to transform the
    LSTAT variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify what `x_poly` looks like by printing the first few samples with `print(x_poly[:3])`.![Figure
    1.50: Printing first three values of x_poly using print()](img/C13018_01_501.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.50: Printing first three values of x_poly using print()'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Unlike *x*, the arrays in each row now have length 4, where the values have
    been calculated as *xº*, *x¹*, *x²* and *x³*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are now going to use this data to fit a linear model. Labeling the features
    as *a*, *b*, *c*, and *d*, we will calculate the coefficients αₒ, α1, α2, and
    α3 and of the linear model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C13018_01_50_a.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can plug in the definitions of a, b, c, and d, to get the following polynomial
    model, where the coefficients are the same as the previous ones:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C13018_01_50_b.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Import the `LinearRegression` class and build our linear classification model
    the same way as done while calculating the MSE. Run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extract the coefficients and print the polynomial model using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.51: Extracting coefficients and printing the polynomial model](img/C13018_01_511.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.51: Extracting coefficients and printing the polynomial model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: To get the actual model intercept, we have to add the `intercept_` and `coef_`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[0]` attributes. The higher-order coefficients are then given by the remaining
    values of `coef_`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Determine the predicted values for each sample and calculate the residuals
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print some of the residual values by running `print(resid_MEDV[:10])`:![Figure
    1.52: Printing residual values](img/C13018_01_521.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.52: Printing residual values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We'll plot these soon to compare with the linear model residuals, but first
    we will calculate the MSE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following code to print the MSE for the third-order polynomial model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.53: Calculating the mean squared error](img/C13018_01_531.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.53: Calculating the mean squared error'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: As can be seen, the **MSE** is significantly less for the polynomial model compared
    to the linear model (which was 38.5). This error metric can be converted to an
    average error in dollars by taking the square root. Doing this for the polynomial
    model, we find the average error for the median house value is only $5,300.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we'll visualize the model by plotting the polynomial line of best fit along
    with the data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the polynomial model along with the samples by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.54: Plotting the polynomial model for MEDV and LSTAT](img/C13018_01_541.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.54: Plotting the polynomial model for MEDV and LSTAT'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we are plotting the red curve by calculating the polynomial model predictions
    on an array of `x` values. The array of `x` values was created using `np.linspace`,
    resulting in 50 values arranged evenly between 2 and 38.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we'll plot the corresponding residuals. Whereas we used Seaborn for this
    earlier, we'll have to do it manually to show results for a scikit-learn model.
    Since we already calculated the residuals earlier, as reference by the `resid_MEDV`
    variable, we simply need to plot this list of values on a scatter chart.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the residuals by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.55: Plotting the residuals for LSTAT and MEDV](img/C13018_01_551.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.55: Plotting the residuals for LSTAT and MEDV'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Compared to the linear model **LSTAT** residual plot, the polynomial model residuals
    appear to be more closely clustered around *y -* ŷ *= 0.* Note that y is the sample
    **MEDV** and ŷ is the predicted value. There are still clear patterns, such as
    the cluster near *x = 7* and *y = -7* that indicates suboptimal modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Having successfully modeled the data using a polynomial model, let's finish
    up this chapter by looking at categorical features. In particular, we are going
    to build a set of categorical features and use them to explore the dataset in
    more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Data Cleaning and Advanced Machine'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 2: Preparing to Train a Predictive Model for the Employee-Retention
    Problem'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scroll to the `Activity A` section of the `lesson-2-workbook.ipynb` notebook
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the head of the table by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Judging by the output, convince yourself that it looks to be in standard CSV
    format. For CSV files, we should be able to simply load the data with pd.read_csv.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load the data with Pandas by running `df = pd.read_csv('../data/hr- analytics/hr_data.csv')`.
    Write it out yourself and use tab completion to help type the file path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the columns by printing `df.columns` and make sure the data has loaded
    as expected by printing the DataFrame `head` and `tail` with `df.head()` and `df.tail()`:![Figure
    2.46: Output for inspecting head and tail of columns](img/C13018_02_46.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.46: Output for inspecting head and tail of columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that it appears to have loaded correctly. Based on the tail index
    values, there are nearly 15,000 rows; let's make sure we didn't miss any.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the number of rows (including the header) in the CSV file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.46: Output after checking for number of rows](img/C13018_02_47.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.47: Output after checking for number of rows'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Compare this result to `len(df)` to make sure you''ve loaded all the data:![Figure
    2.48: Output after checking for number of sample uploaded](img/C13018_02_48.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.48: Output after checking for number of sample uploaded'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that our client's data has been properly loaded, let's think about how we
    can use predictive analytics to find insights into why their employees are leaving.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s run through the first steps for creating a predictive analytics plan:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Look at the available data: You''ve already done this by looking at the columns,
    datatypes, and the number of samples.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Determine the business needs: The client has clearly expressed their needs:
    reduce the number of employees who leave.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assess the data for suitability: Let''s try to determine a plan that can help
    satisfy the client''s needs, given the provided data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recall, as mentioned earlier, that effective analytics techniques lead to impactful
    business decisions. With that in mind, if we were able to predict how likely an
    employee is to quit, the business could selectively target those employees for
    special treatment. For example, their salary could be raised or their number of
    projects reduced. Furthermore, the impact of these changes could be estimated
    using the model!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To assess the validity of this plan, let's think about our data. Each row represents
    an employee who either works for the company or has left, as labeled by the column
    named left. We can therefore train a model to predict this target, given a set
    of features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assess the target variable. Check the distribution and number of missing entries
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.49: Distribution of the target variables](img/C13018_02_49.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.49: Distribution of the target variables'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Here''s the output of the second code line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.50: Output to check missing data points](img/C13018_02_50.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.50: Output to check missing data points'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: About three-quarters of the samples are employees who have not left. The group
    that has left make up the other quarter of the samples. This tells us we are dealing
    with an imbalanced classification problem, which means we'll have to take special
    measures to account for each class when calculating accuracies. We also see that
    none of the target variables are missing (no `NaN` values).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we''ll assess the features:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the datatype of each by executing `df.dtypes`. Observe how we have a
    mix of continuous and discrete features:![Figure 2.51: Printing data types for
    verification](img/C13018_02_51.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.51: Printing data types for verification'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Display the feature distributions by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Figure 2.52: Distribution of all features: satisfaction_level and last_evaluation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 2.52: Distribution of all remaining features](img/C13018_02_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.53: Distribution of all remaining features'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 2.54: Distribution for the variable promotion_last_5years](img/C13018_02_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.54: Distribution for the variable promotion_last_5years'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For many features, we see a wide distribution over the possible values, indicating
    a good variety in the feature spaces. This is encouraging; features that are strongly
    grouped around a small range of values may not be very informative for the model.
    This is the case for `promotion_last_5years`, where we see that the vast majority
    of samples are `0`.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is remove any `NaN` values from the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check how many `NaN` values are in each column by running the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.55: Verification for the number of NaN values](img/C13018_02_55.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.55: Verification for the number of NaN values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see there are about 2.5% missing for `average_montly_hours`, 1% missing
    for `time_spend_company`, and 98% missing for `is_smoker!` Let's use a couple
    of different strategies that you've learned to handle these.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drop the `is_smoker` column as there is barely any information in this metric.
    Do this by running: `del df[''is_smoker'']`.*   Fill the `NaN` values in the `time_spend_company`
    column. This can be done with the following code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final column to deal with is `average_montly_hours`. We could do something
    similar and use the median or rounded mean as the integer fill value. Instead
    though, let's try to take advantage of its relationship with another variable.
    This may allow us to fill the missing data more accurately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a boxplot of `average_montly_hours` segmented by `number_project`. This
    can be done by running the following code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.56: Boxplot for average_monthly_hours and number_project](img/C13018_02_56.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.56: Boxplot for average_monthly_hours and number_project'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see how the number of projects is correlated with `average_ monthly_hours`,
    a result that is hardly surprising. We'll exploit this relationship by filling
    in the `NaN` values of `average_montly_hours` differently, depending on the number
    of projects for that sample.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Specifically, we'll use the mean of each group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the mean of each group by running the following code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.57: Calculation of mean values for average_monthly_hours](img/C13018_02_57.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.57: Calculation of mean values for average_monthly_hours'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can then map this onto the `number_project` column and pass the resulting
    series object as the argument to `fillna`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fill the `NaN` values in `average_montly_hours` by executing the following
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that `df` has no more `NaN` values by running the following assertion
    test. If it does not raise an error, then you have successfully removed the `NaNs`
    from the table:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: We pass `index=False` so that the index is not written to file. In this case,
    the index is a set of integers spanning from 0 to the DataFrame length, and it
    therefore tells us nothing important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Transform the string and Boolean fields into integer representations. In particular,
    we''ll manually convert the target variable `left` from `yes` and `no` to `1`
    and `0` and build the one-hot encoded features. Do this by running the following
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print `df.columns` to show the fields:![Figure 2.58: A screenshot of the different
    fields in the dataframe](img/C13018_02_58.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 2.58: A screenshot of the different fields in the dataframe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that department and salary have been split into various binary features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final step to prepare our data for machine learning is scaling the features,
    but for various reasons (for example, some models do not require scaling), we'll
    do it as part of the model-training workflow in the next activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We have completed the data preprocessing and are ready to move on to training
    models! Let''s save our preprocessed data by running the following code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 3: Web Scraping and Interactive Visualizations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 3: Web Scraping with Jupyter Notebooks'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this page, the data can be scraped using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `lesson-3-workbook.ipynb` Jupyter Notebook, scroll to `Activity A: Web
    scraping with Python`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `url` variable and load an IFrame of our page in the notebook by running
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page should load in the notebook. Scrolling down, we can see the **Countries
    in the world by population** heading and the table of values beneath it. We'll
    scrape the first three columns from this table to get the countries, populations,
    and yearly population changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the IFrame by selecting the cell and clicking **Current Outputs** | **Clear**
    from the **Cell** menu in the Jupyter Notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Request the page and load it as a `BeautifulSoup` object by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We feed the page content to the `BeautifulSoup` constructor. Recall that previously,
    we used `page.text` here instead. The difference is that `page.content` returns
    the raw binary response content, whereas `page.text` returns the UTF-8 decoded
    content. It's usually best practice to pass the bytes object and let `BeautifulSoup`
    decode it, rather than doing it with Requests using `page.text`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the H1 for the page by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll scrape the table by searching for `<th>`, `<tr>`, and `<td>` elements,
    as in the previous exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get and print the table headings by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are only interested in the first three columns. Select these and parse the
    text with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After selecting the subset of table headers we want, we parse the text content
    from each and remove any newline characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we'll get the data. Following the same prescription as the previous exercise,
    we'll test how to parse the data for a sample row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get the data for a sample row by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How many columns of data do we have? Print the length of `row_data` by running
    `print(len(row_data))`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Print the first elements by running `print(row_data[:4])`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's pretty obvious that we want to select list indices 1, 2, and 3\. The first
    data value can be ignored, as it's simply the index.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the data elements we''re interested in parsing by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Looking at the `row_data` output, we can find out how to correctly parse the
    data. We''ll want to select the content of the `<a>` element in the first data
    element, and then simply get the text from the others. Test these assumptions
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Excellent! This looks to be working well. Now, we're ready to scrape the entire table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Scrape and parse the table data by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is quite similar to before, where we try to parse the text and skip the
    row if there's some error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the head of the scraped data by running `print(data[:10])`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It looks like we have managed to scrape the data! Notice how similar the process
    was for this table compared to the Wikipedia one, even though this web page is
    completely different. Of course, it will not always be the case that data is contained
    within a table, but regardless, we can usually use `find_all` as the primary method
    for parsing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, save the data to a CSV file for later use. Do this by running the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 4: Exploring Data with Interactive Visualizations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `lesson-3-workbook.ipynb` file, scroll to the `Activity B: Interactive
    visualizations with Bokeh` section.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the previously scraped, merged, and cleaned web page data by running the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Recall what the data looks like by displaying the DataFrame:![Figure 3.18:
    Output of the data within DataFrame](img/C13018_03_18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 3.18: Output of the data within DataFrame'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Whereas in the previous exercise we were interested in learning how Bokeh worked,
    now we are interested in what this data looks like. In order to explore this dataset,
    we are going to use interactive visualizations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Draw a scatter plot of the population as a function of the interest rate by
    running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.19: Scatter plot of population and interest rate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.19: Scatter plot of population and interest rate'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: This is quite similar to the final examples we looked at when introducing Bokeh
    in the previous exercise. We set up a customized data source with the *x* and
    *y* coordinates for each point, along with the country name. This country name
    is passed to the Hover Tool, so that it's visible when hovering the mouse over
    the dot. We pass this tool to the figure, along with a set of other useful tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the data, we see some clear outliers with high populations. Hover over these
    to see what they are:![Figure 3.20: Labels obtained by hovering over data points'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13018_03_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.20: Labels obtained by hovering over data points'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We see they belong to India and China. These countries have fairly average interest
    rates. Let's focus on the rest of the points by using the Box Zoom tool to modify
    the view window size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the Box Zoom tool and alter the viewing window to better see the majority
    of the data:![Figure 3.21: The Box Zoom tool'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13018_03_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.21: The Box Zoom tool'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 3.22: Scatter plot with majority of the data points within the box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.22: Scatter plot with majority of the data points within the box'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Explore the points and see how the interest rates compare for various countries.
    What are the countries with the highest interest rates?:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.23: Hovering over data points to view detailed data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.23: Hovering over data points to view detailed data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Some of the lower population countries appear to have negative interest rates.
    Select the **Wheel Zoom** tool and use it to zoom in on this region. Use the **Pan**
    tool to re-center the plot, if needed, so that the negative interest rate samples
    are in view. Hover over some of these and see what countries they correspond to:![Figure
    3.24: Screen shot of the Wheel Zoom tool'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13018_03_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.24: Screen shot of the Wheel Zoom tool'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Figure 3.25: Data points of negative interest rates countries'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.25: Data points of negative interest rates countries'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Let's re-plot this, adding a color based on the date of last interest rate change.
    This will be useful to search for relations between the date of last change and
    the interest rate or population size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a **Year of last change** column to the DataFrame by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a map to group the last change date into color categories by running
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once mapped to the **Year of last change** column, this will assign values
    to colors based on the available categories: 2018, 2017, 2016, and Other. The
    colors here are standard strings, but they could alternatively by represented
    by hexadecimal codes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the colored visualization by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the complete code, refer to the following: [https://bit.ly/2Si3K04](https://bit.ly/2Si3K04)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.26: Visualization obtained after assigning values to colors'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.26: Visualization obtained after assigning values to colors'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: There are some technical details that are important here. First of all, we add
    the colors and labels for each point to the `ColumnDataSource`. These are then
    referenced when plotting the circles by setting the `fill_color` and legend arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Looking for patterns, zoom in on the lower population countries:![Figure 3.27:
    A zoomed in view of the lower population countries'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13018_03_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.27: A zoomed in view of the lower population countries'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see how the dark dots are more prevalent to the right-hand side of the
    plot. This indicates that countries that have higher interest rates are more likely
    to have been recently updated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The one data column we have not yet looked at is the year-over-year change in
    population. Let's visualize this compared to the interest rate and see if there
    is any trend. We'll also enhance the plot by setting the circle size based on
    the country population.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the interest rate as a function of the year-over-year population change
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.28: Plotting interest rate as a function of YoY population change'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.28: Plotting interest rate as a function of YoY population change'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we use the square root of the population for the radii, making sure to
    also scale down the result to a good size for the visualization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We see a strong correlation between the year-over-year population change and
    the interest rate. This correlation is especially strong when we take the population
    sizes into account, by looking primarily at the bigger circles. Let's add a line
    of best fit to the plot to illustrate this correlation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll use scikit-learn to create the line of best fit, using the country populations
    (as visualized in the preceding plot) as weights.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Determine the line of best fit for the previously plotted relationship by running
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The scikit-learn code should be familiar from earlier in this book. As promised,
    we are using the transformed populations, as seen in the previous plot, as the
    weights. The line of best fit is then calculated by predicting the linear model
    values for a range of x values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To plot the line, we can reuse the preceding code, adding an extra call to the
    `line` module in Bokeh. We'll also have to set a new data source for this line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Re-plot the preceding figure, adding a line of best fit, by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.29: Adding a best fit line to the plot of YoY population change
    and interest rates'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13018_03_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.29: Adding a best fit line to the plot of YoY population change and
    interest rates'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: For the line source, `lm_source`, we include `N/A` as the country name and population,
    as these are not applicable values for the line of best fit. As can be seen by
    hovering over the line, they indeed appear in the tooltip.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The interactive nature of this visualization gives us a unique opportunity to
    explore outliers in this dataset, for example, the tiny dot in the lower-right
    corner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Explore the plot by using the zoom tools and hovering over interesting samples.
    Note the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ukraine has an unusually high interest rate, given the low year-over-year population
    change:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.30: Using the Zoom tool to explore the data for Ukraine'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13018_03_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.30: Using the Zoom tool to explore the data for Ukraine'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The small country of Bahrain has an unusually low interest rate, given the
    high year-over-year population change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31: Using the Zoom tool to explore the data for Bahrain](img/C13018_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.31: Using the Zoom tool to explore the data for Bahrain'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Preface](C13018_Preface_comm_Final.xhtml#_idParaDest-1)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[About the Book](C13018_Preface_comm_Final.xhtml#_idParaDest-2)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[About the Author](C13018_Preface_comm_Final.xhtml#_idParaDest-3)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Objectives](C13018_Preface_comm_Final.xhtml#_idParaDest-4)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Audience](C13018_Preface_comm_Final.xhtml#_idParaDest-5)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Approach](C13018_Preface_comm_Final.xhtml#_idParaDest-6)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Minimum Hardware Requirements](C13018_Preface_comm_Final.xhtml#_idParaDest-7)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Software Requirements](C13018_Preface_comm_Final.xhtml#_idParaDest-8)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installation and Setup](C13018_Preface_comm_Final.xhtml#_idParaDest-9)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installing Anaconda](C13018_Preface_comm_Final.xhtml#_idParaDest-10)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Updating Jupyter and Installing Dependencies](C13018_Preface_comm_Final.xhtml#_idParaDest-11)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Additional Resources](C13018_Preface_comm_Final.xhtml#_idParaDest-12)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conventions](C13018_Preface_comm_Final.xhtml#_idParaDest-13)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Jupyter Fundamentals](C13018_1_comm_Final.xhtml#_idParaDest-14)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13018_1_comm_Final.xhtml#_idParaDest-15)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Basic Functionality and Features](C13018_1_comm_Final.xhtml#_idParaDest-16)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What is a Jupyter Notebook and Why is it Useful?](C13018_1_comm_Final.xhtml#_idParaDest-17)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Navigating the Platform](C13018_1_comm_Final.xhtml#_idParaDest-18)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 1: Introducing Jupyter Notebooks](C13018_1_comm_Final.xhtml#_idParaDest-19)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Jupyter Features](C13018_1_comm_Final.xhtml#_idParaDest-20)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 2: Implementing Jupyter''s Most Useful Features](C13018_1_comm_Final.xhtml#_idParaDest-21)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Converting a Jupyter Notebook to a Python Script](C13018_1_comm_Final.xhtml#_idParaDest-22)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python Libraries](C13018_1_comm_Final.xhtml#_idParaDest-23)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 3: Importing the External Libraries and Setting Up the Plotting Environment](C13018_1_comm_Final.xhtml#_idParaDest-24)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Our First Analysis - The Boston Housing Dataset](C13018_1_comm_Final.xhtml#_idParaDest-25)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Loading the Data into Jupyter Using a Pandas DataFrame](C13018_1_comm_Final.xhtml#_idParaDest-26)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 4: Loading the Boston Housing Dataset](C13018_1_comm_Final.xhtml#_idParaDest-27)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Exploration](C13018_1_comm_Final.xhtml#_idParaDest-28)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 5: Analyzing the Boston Housing Dataset](C13018_1_comm_Final.xhtml#_idParaDest-29)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Predictive Analytics with Jupyter Notebooks](C13018_1_comm_Final.xhtml#_idParaDest-30)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 6: Applying Linear Models With Seaborn and Scikit-learn](C13018_1_comm_Final.xhtml#_idParaDest-31)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 1: Building a Third-Order Polynomial Model](C13018_1_comm_Final.xhtml#_idParaDest-32)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Using Categorical Features for Segmentation Analysis](C13018_1_comm_Final.xhtml#_idParaDest-33)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 7: Creating Categorical Fields From Continuous Variables and Make
    Segmented Visualizations](C13018_1_comm_Final.xhtml#_idParaDest-34)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13018_1_comm_Final.xhtml#_idParaDest-35)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Cleaning and Advanced Machine Learning](C13018_2_comm_Final.xhtml#_idParaDest-36)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13018_2_comm_Final.xhtml#_idParaDest-37)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Preparing to Train a Predictive Model](C13018_2_comm_Final.xhtml#_idParaDest-38)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Determining a Plan for Predictive Analytics](C13018_2_comm_Final.xhtml#_idParaDest-39)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 8: Explore Data Preprocessing Tools and Methods](C13018_2_comm_Final.xhtml#_idParaDest-40)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 2: Preparing to Train a Predictive Model for the Employee-Retention
    Problem](C13018_2_comm_Final.xhtml#_idParaDest-41)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Training Classification Models](C13018_2_comm_Final.xhtml#_idParaDest-42)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Classification Algorithms](C13018_2_comm_Final.xhtml#_idParaDest-43)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 9: Training Two-Feature Classification Models With Scikit-learn](C13018_2_comm_Final.xhtml#_idParaDest-44)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The plot_decision_regions Function](C13018_2_comm_Final.xhtml#_idParaDest-45)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 10: Training K-nearest Neighbors for Our Model](C13018_2_comm_Final.xhtml#_idParaDest-46)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 11: Training a Random Forest](C13018_2_comm_Final.xhtml#_idParaDest-47)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Assessing Models With K-fold Cross-Validation and Validation Curves](C13018_2_comm_Final.xhtml#_idParaDest-48)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 12: Using K-fold Cross Validation and Validation Curves in Python
    With Scikit-learn](C13018_2_comm_Final.xhtml#_idParaDest-49)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Dimensionality Reduction Techniques](C13018_2_comm_Final.xhtml#_idParaDest-50)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 13: Training a Predictive Model for the Employee Retention Problem](C13018_2_comm_Final.xhtml#_idParaDest-51)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13018_2_comm_Final.xhtml#_idParaDest-52)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Web Scraping and Interactive Visualizations](C13018_3_comm_Final.xhtml#_idParaDest-53)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13018_3_comm_Final.xhtml#_idParaDest-54)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Scraping Web Page Data](C13018_3_comm_Final.xhtml#_idParaDest-55)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to HTTP Requests](C13018_3_comm_Final.xhtml#_idParaDest-56)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Making HTTP Requests in the Jupyter Notebook](C13018_3_comm_Final.xhtml#_idParaDest-57)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 14: Handling HTTP Requests With Python in a Jupyter Notebook](C13018_3_comm_Final.xhtml#_idParaDest-58)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Parsing HTML in the Jupyter Notebook](C13018_3_comm_Final.xhtml#_idParaDest-59)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 15: Parsing HTML With Python in a Jupyter Notebook](C13018_3_comm_Final.xhtml#_idParaDest-60)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 3: Web Scraping With Jupyter Notebooks](C13018_3_comm_Final.xhtml#_idParaDest-61)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Interactive Visualizations](C13018_3_comm_Final.xhtml#_idParaDest-62)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Building a DataFrame to Store and Organize Data](C13018_3_comm_Final.xhtml#_idParaDest-63)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 16: Building and Merging Pandas DataFrames](C13018_3_comm_Final.xhtml#_idParaDest-64)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Bokeh](C13018_3_comm_Final.xhtml#_idParaDest-65)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 17: Introduction to Interactive Visualization With Bokeh](C13018_3_comm_Final.xhtml#_idParaDest-66)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 4: Exploring Data with Interactive Visualizations](C13018_3_comm_Final.xhtml#_idParaDest-67)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13018_3_comm_Final.xhtml#_idParaDest-68)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Appendix A](C13018_Solutions_Final.xhtml#_idParaDest-69)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 1: Jupyter Fundamentals](C13018_Solutions_Final.xhtml#_idParaDest-70)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 1: Building a Third-Order Polynomial Model](C13018_Solutions_Final.xhtml#_idParaDest-71)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 2: Data Cleaning and Advanced Machine](C13018_Solutions_Final.xhtml#_idParaDest-72)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 2: Preparing to Train a Predictive Model for the Employee-Retention
    Problem](C13018_Solutions_Final.xhtml#_idParaDest-73)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 3: Web Scraping and Interactive Visualizations](C13018_Solutions_Final.xhtml#_idParaDest-74)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 3: Web Scraping with Jupyter Notebooks](C13018_Solutions_Final.xhtml#_idParaDest-75)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 4: Exploring Data with Interactive Visualizations](C13018_Solutions_Final.xhtml#_idParaDest-76)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Landmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Cover](Images/cover.xhtml)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Table of Contents](C13018_Credits_comm_Final.xhtml#_idContainer004)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
