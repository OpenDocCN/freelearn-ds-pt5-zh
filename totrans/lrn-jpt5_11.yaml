- en: Multiuser Jupyter Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter Notebooks have the inherent ability to be modifiable by users when the
    user enters data or makes a selection. However, there is an issue with the standard
    implementation of the Notebook server software that does not account for more
    than one person working with a Notebook at the same time. The Notebook server
    software is the underlying Jupyter software that displays the page and interacts
    with the user—it follows the directions in your Notebook for display and interaction.
  prefs: []
  type: TYPE_NORMAL
- en: A Notebook server, really a specialized internet web server, typically creates
    a new path or thread of execution for each user to allow for multiple users. A
    problem arises when a lower-level subroutine, used for all instances, does not
    properly account for multiple users where each has their own set of data.
  prefs: []
  type: TYPE_NORMAL
- en: Note that some of the coding/installs in this chapter may not work in a Windows
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will explore the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Give an example of the issue that occurs when multiple users access the same
    Notebook in a standard Jupyter installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a new version of Jupyter, JupyterHub, that was built by extending Jupyter
    to specifically address the multiple user problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also use Docker, a tool to allow for multiple instances of any software, in
    order to address the issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample interactive Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we will use a simple Notebook that asks the user for some
    information, and displays certain information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could have a script like this (taken from the previous [Chapter
    9](1cc377b7-32f9-4de4-92f8-da73293b2d0b.xhtml), *Interactive Widgets*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The script presents a textbox to the user with the original value of the box
    containing the `Hello World` string. As the user interacts with the input field
    and changes the value, then the value of the `x` variable in the script changes
    accordingly and is displayed on screen. For example, I have changed the value
    to letter `A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95189c02-c525-470c-9c6f-96e9c00acae7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the multiuser problem: if we just open the same page in another
    browser window (copy the URL, open a new browser window, paste in the URL, and
    hit the *Enter* key), we get the exact same display. The new window should have
    started with a new script, just prompting you with the default `Hello World` message.
    However, since the Jupyter server software is only expecting one user, there is
    only one copy of the `x` variable, so it displays its value.'
  prefs: []
  type: TYPE_NORMAL
- en: JupyterHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once Jupyter Notebooks were shared, it became obvious that the multiuser problem
    had to be solved. A new version of the Jupyter software was developed called **JupyterHub**.
    JupyterHub was specifically designed to handle multiple users, giving each user
    their own set of variables to work with. Actually, the system will give each user
    a whole new instance of the Jupyter software to each user—a **brute-force** approach,
    but it works.
  prefs: []
  type: TYPE_NORMAL
- en: When JupyterHub starts, it begins a hub or controlling agent. The hub will start
    an instance of a listener or proxy for Jupyter requests. When the proxy gets requests
    for Jupyter, it turns them over to the hub. If the hub decides this is a new user,
    it will generate a new instance of the Jupyter server and attach all further interactions
    between that user and Jupyter to their own version of the server.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JupyterHub requires Python 3.3 or better, and we will use the Python tool `pip3`
    to install JupyterHub. You can check the version of Python you are running by
    just entering `Python` on a command line and the prologue will echo out the current
    version. For example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you need to upgrade to a new version, refer to the instructions on [http://python.org](http://python.org)
    since they are specific to the operating system and version of Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'JupyterHub is installed much like other software using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'First, installing the proxy. `-g` on the proxy install means to make that software
    available to all users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we install JupyterHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now start JupyterHub directly from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following display that will appear in the command console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the script completed, and a window did not open for you in your
    default browser as it would have in the standard Jupyter installation.
  prefs: []
  type: TYPE_NORMAL
- en: More important is the last line of output (which is also printed on screen in
    red), `Refusing to run JupyterHub without SSL`. JupyterHub is specifically built
    to account for multiple users logging in and using a single Notebook, so it is
    complaining that it is expected to have SSL running (to secure user interactions).
  prefs: []
  type: TYPE_NORMAL
- en: 'The last half of the last line gives us a clue as to what to do—we need to
    tell JupyterHub that we are not using a certificate/SSL. We can do that with the
    `--no-ssl` argument, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the expected outcome in the console, and leaves the server
    still running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now go to that URL shown (`http://127.0.0.1:8000/`[)](http://127.0.0.1:8000/))
    on the last line of the output, we get to a login screen for JupyterHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fac8f6f-82a7-40b7-899f-b42e16f53726.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we have avoided requiring SSL, but we still need to configure the users
    for the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JupyterHub software uses a configuration file to determine how it should
    work. You can generate a configuration file using JupyterHub, providing default
    values using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated configuration file has close to 500 lines available. The start
    of the sample file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, most of the configuration settings are prefixed with a sharp
    (`#`) denoting that they are commented out. The setting that is mentioned is the
    default value that will be applied. If you needed to change one of the settings,
    you would remove the prefix sharp symbol and change the right-hand side of the
    equal sign (`=`) to your new value. By the way, this is a good way to test out
    changes: make one change; save the file; try out your change; continue with additional
    changes. As you progress, if one change does not work as expected, you need to
    just replace the prefix sharp symbol and you are back to a working position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at several of the configuration options available. It is interesting
    to note that many of the settings in this file are Python settings, not particular
    to JupyterHub. The list of items includes those shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Area** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `JupyterHub` | Settings for JupyterHub itself |'
  prefs: []
  type: TYPE_TB
- en: '| `LoggingConfigurable` | Logging information layout |'
  prefs: []
  type: TYPE_TB
- en: '| `SingletonConfigurable` | A configurable that only allows one instance |'
  prefs: []
  type: TYPE_TB
- en: '| `Application` | Date format and logging level |'
  prefs: []
  type: TYPE_TB
- en: '| `Security` | SSL certificate |'
  prefs: []
  type: TYPE_TB
- en: '| `Spawner` | How the hub starts new instances of Jupyter for new users |'
  prefs: []
  type: TYPE_TB
- en: '| `LocalProcessSpawner` | Uses popen to start local processes as users |'
  prefs: []
  type: TYPE_TB
- en: '| `Authenticator` | The primary API is one method, `authenticate` |'
  prefs: []
  type: TYPE_TB
- en: '| `PAMAuthenticator` | Interaction with Linux to login |'
  prefs: []
  type: TYPE_TB
- en: '| `LocalAuthenticator` | Checks for local users, and can attempt to create
    them if they exist |'
  prefs: []
  type: TYPE_TB
- en: Continuing with operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I made no changes to the configuration file to get my installation up and running.
    By default, the configuration uses the PEM system, which will hook into the operating
    system you are running on to pass in credentials (as if they were logging into
    the machine) for validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are seeing the `JupyterHub single-user server requires notebook >= 4.0` message
    in the console log when trying to log in to your JupyterHub installation, you
    need to update the base Jupyter using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will update your base Jupyter to the latest version, currently 4.1.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have `pip3` installed, you need to upgrade to Python 3 or better.
    See the documentation at [http://python.org](http://python.org) regarding the
    steps to be taken for your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can start JupyterHub using this following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to the login screen (shown previously) using the same credentials you
    use to log in to the machine (remember JupyterHub is using PEM, which calls into
    your operating system to validate credentials). You will end up in something that
    looks very much like your standard Jupyter home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1abdd1d2-e0c6-4eab-b1e0-2a06d59ebb96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks very similar, except there are now two additional buttons in the top
    right of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Control Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on the Logout button logs you out of JupyterHub and redirects you to
    the login screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the Control Panel button brings you to a new screen with two options,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop My Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/84688a22-6847-4380-abe5-3181dfe5b590.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Stop My Server button stops your Jupyter installation and brings
    you to a page with one button: My Server (as shown in the following section).
    You may also have noticed the changes that have occurred in the console log of
    your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/67f342c6-ec25-48ef-82b8-2fa350c05948.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the My Server button brings you back to the Jupyter home page.
    If you had hit the Stop My Server button earlier, then the underlying Jupyter
    software would be restarted, as you may notice in the console output (which I
    have shown as follows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: JupyterHub summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, in summary, with JupyterHub we have an installation of Jupyter that will
    maintain a separate instance of the Jupyter software for each user and thereby
    avoid any collision on variable values. The software knows whether to instantiate
    a new instance of Jupyter since the user logs in to the application and the system
    maintains a user list.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is another mechanism that can be used to allow multiple users of the
    same Notebook without collision. Docker is a system that allows you to construct
    sets of applications into an image that can be run in a container. Docker runs
    in most environments. Docker allows for many instances of an image to be run in
    the same machine, but to maintain a separate address space. So, each user of a
    Docker image has their own instance of the software and their own set of data/variables.
  prefs: []
  type: TYPE_NORMAL
- en: Each image is a complete stack of software necessary to run, for example, a
    web server, web application(s), APIs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: It is not a large leap to think of an image of your Notebook. The image contains
    Jupyter server code and your Notebook. The result is a completely intact unit
    that does not share any space with another's instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Docker involves downloading the latest file (the `docker.dmg` file
    for a macOS and the `.exe` file install for Windows) and then copying the Docker
    applications into your `Applications` folder. **Docker QuickStart** **Terminal**
    is the go-to application of use to most developers. Docker QuickStart will start
    Docker on your local machine, allocate an IP address / port number for addressing
    the Docker application(s), and bring you into the Docker Terminal. Once QuickStart
    has completed, if you have installed your image, you could access your application
    (in this case, your Jupyter Notebook).
  prefs: []
  type: TYPE_NORMAL
- en: From the Docker Terminal, you can load images, remove images, check status,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you run `Docker QuickStart`, you will be brought to the Docker Terminal
    window with a display like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: (The odd graphic near the end of the display is a character representation of
    a whale—the logo for Docker.)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the following from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker machine was started—the Docker machine controls the images that are
    running in your space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using certificates, the certificates are copied into your Docker
    space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, it tells you the IP address to use when accessing your Docker instances—it
    should be the IP address of the machine you are using
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your Jupyter image for Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker knows about images that contain the entire software stack necessary to
    run an application. We need to build an image with a Notebook and place this in
    Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to download all of the Jupyter-Docker coding necessary. In the Docker
    Terminal window, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is a large download that will take some time. It is downloading and installing
    all of the possibly necessary components needed to run Jupyter in an image. Remember
    that each image is completely self-contained so each image has ALL of the software
    needed to run Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the download is complete, we can start an image for our Notebook using
    a command such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`docker run`: The command to Docker to start executing an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: Runs the image as a server (daemon) that will continue running until
    manually stopped by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p 8888:8888`: Exposes the internal port `8888` to external users with the
    same port address. Notebooks use port `8888` by default already, so we are saying
    just expose the same port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v /disk-directory:/virtual-notebook`: Takes the Notebook from the `disk-directory`
    and exposes it as the `virtual-notebook` name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last argument is to use `all-spark-notebook` as the basis for this image.
    In my case, I used the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The big hex number displayed is the image identifier. We can make sure the
    image is running using the `docker ps -l` command that lists out the images in
    our Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The parts of the display are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first name `b59...` is the assigned ID of the container. Each image in Docker
    is assigned to a container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image is `jupyter/all-spark-notebook`, and it contains all of the software
    needed to run your Notebook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command is telling Docker to start the image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The port access point is as we expected: `8888`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, Docker assigns random names to every running image `modest_bardeen` (not
    sure why they do this).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we try to access Docker Jupyter at this point, we will be asked to set up
    security for the system, as in this display:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/bd6c29f8-ecfb-4afe-a91c-2a4f0bbe1b98.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have set up security, we should be able to access the Notebook from
    a browser at `http:// 127.0.0.1:8888`. We saw the preceding IP address when Docker
    started (`0.0.0.0`) and we are using port `8888` as we specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/312cafba-1a33-43c6-8aad-01f904ed7bec.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the URL in the top-left corner. Beneath that, we have a standard
    empty Notebook. The Docker image used has all of the latest versions, so you do
    not have to do anything special to get updated software or components for your
    Notebook. You can see the language options available by pulling down the New menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/40a025d2-d91b-4f11-b81a-084e30b8a581.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: Docker summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed Docker, and we have created an image with our Notebook. We
    have also placed the Docker image into Docker, and we have accessed our Docker
    Notebook image.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to expose a Notebook so that multiple users
    can use a Notebook at the same time. We saw an example of an error occurring.
    We installed a Jupyter server that addresses the problem, and we used Docker to
    alleviate the issue as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at some upcoming feature enhancements for
    Jupyter.
  prefs: []
  type: TYPE_NORMAL
