["```py\n(defn load-data [file]\n  (-> (io/resource file)\n      (iio/read-dataset :header true :delim \\tab)))\n\n(defn ex-2-1 []\n  (-> (load-data \"dwell-times.tsv\")\n      (i/view)))\n```", "```py\n(defn ex-2-2 []\n  (-> (i/$ :dwell-time (load-data \"dwell-times.tsv\"))\n      (c/histogram :x-label \"Dwell time (s)\"\n                   :nbins 50)\n      (i/view)))\n```", "```py\n(defn ex-2-3 []\n  (-> (i/$ :dwell-time (load-data \"dwell-times.tsv\"))\n      (c/histogram :x-label \"Dwell time (s)\"\n                   :nbins 20)\n      (c/set-axis :y (c/log-axis :label \"Log Frequency\"))\n      (i/view)))\n```", "```py\n(defn ex-2-4 []\n  (let [dwell-times (->> (load-data \"dwell-times.tsv\")\n                         (i/$ :dwell-time))]\n    (println \"Mean:  \" (s/mean dwell-times))\n    (println \"Median:\" (s/median dwell-times))\n    (println \"SD:    \" (s/sd dwell-times))))\n\nMean:   93.2014074074074\nMedian: 64.0\nSD:     93.96972402519796\n```", "```py\n(defn with-parsed-date [data]\n  (i/transform-col data :date (comp tc/to-local-date f/parse)))\n\n(defn filter-weekdays [data]\n  (i/$where {:date {:$fn p/weekday?}} data))\n\n(defn mean-dwell-times-by-date [data]\n  (i/$rollup :mean :dwell-time :date data))\n\n(defn daily-mean-dwell-times [data]\n  (->> (with-parsed-date data)\n       (filter-weekdays)\n       (mean-dwell-times-by-date)))\n```", "```py\n(defn ex-2-5 []\n  (let [means (->> (load-data \"dwell-times.tsv\")\n                   (daily-mean-dwell-times)\n                   (i/$ :dwell-time))]\n    (println \"Mean:   \" (s/mean means))\n    (println \"Median: \" (s/median means))\n    (println \"SD:     \" (s/sd means))))\n\n;; Mean:    90.210428650562\n;; Median:  90.13661202185791\n;; SD:      3.722342905320035\n```", "```py\n(defn ex-2-6 []\n  (let [means (->> (load-data \"dwell-times.tsv\")\n                   (daily-mean-dwell-times)\n                   (i/$ :dwell-time))]\n    (-> (c/histogram means\n                     :x-label \"Daily mean dwell time (s)\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn ex-2-7 []\n  (let [means (->> (load-data \"dwell-times.tsv\")\n                   (daily-mean-dwell-times)\n                   (i/$ :dwell-time))\n        mean (s/mean means)\n        sd   (s/sd means)\n        pdf  (fn [x]\n               (s/pdf-normal x :mean mean :sd sd))]\n    (-> (c/histogram means\n                     :x-label \"Daily mean dwell time (s)\"\n                     :nbins 20\n                     :density true)\n        (c/add-function pdf 80 100)\n        (i/view))))\n```", "```py\n(defn standard-deviation [xs]\n  (Math/sqrt (variance xs)))\n\n(defn standard-error [xs]\n  (/ (standard-deviation xs)\n     (Math/sqrt (count xs))))\n```", "```py\n(defn ex-2-8 []\n  (let [may-1 (f/parse-local-date \"2015-05-01\")]\n    (->> (load-data \"dwell-times.tsv\")\n         (with-parsed-date)\n         (filtered-times {:date {:$eq may-1}})\n         (standard-error))))\n\n;; 3.627\n```", "```py\n(defn confidence-interval [p xs]\n  (let [x-bar  (s/mean xs)\n        se     (standard-error xs)\n        z-crit (s/quantile-normal (- 1 (/ (- 1 p) 2)))]\n    [(- x-bar (* se z-crit))\n     (+ x-bar (* se z-crit))]))\n\n(defn ex-2-9 []\n  (let [may-1 (f/parse-local-date \"2015-05-01\")]\n    (->> (load-data \"dwell-times.tsv\")\n         (with-parsed-date)\n         (filtered-times {:date {:$eq may-1}})\n         (confidence-interval 0.95))))\n\n;; [83.53415272762004 97.75306531749274]\n```", "```py\n(defn ex-2-10 []\n  (let [times (->> (load-data \"campaign-sample.tsv\")\n                   (i/$ :dwell-time))]\n    (println \"n:      \" (count times))\n    (println \"Mean:   \" (s/mean times))\n    (println \"Median: \" (s/median times))\n    (println \"SD:     \" (s/sd times))\n    (println \"SE:     \" (standard-error times))))\n\n;; n:       300\n;; Mean:    130.22\n;; Median:  84.0\n;; SD:      136.13370714388046\n;; SE:      7.846572839994115\n```", "```py\n(defn ex-2-11 []\n  (->> (load-data \"campaign-sample.tsv\")\n       (i/$ :dwell-time)\n       (confidence-interval 0.95)))\n\n;; [114.84099983154137 145.59900016845864]\n```", "```py\n(p/weekend? (t/date-time 2015 6 6))\n;; true\n```", "```py\n(defn ex-2-12 []\n  (let [means (->> (load-data \"dwell-times.tsv\")\n                   (with-parsed-date)\n                   (mean-dwell-times-by-date)\n                   (i/$ :dwell-time))]\n    (-> (c/histogram means\n                     :x-label \"Daily mean dwell time unfiltered (s)\"\n                     :nbins 20)\n        (i/view))))\n```", "```py\n(defn ex-2-13 []\n  (let [weekend-times (->> (load-data \"dwell-times.tsv\")\n                           (with-parsed-date)\n                           (i/$where {:date {:$fn p/weekend?}})\n                           (i/$ :dwell-time))]\n    (println \"n:      \" (count weekend-times))\n    (println \"Mean:   \" (s/mean weekend-times))\n    (println \"Median: \" (s/median weekend-times))\n    (println \"SD:     \" (s/sd weekend-times))\n    (println \"SE:     \" (standard-error weekend-times))))\n\n;; n:       5860\n;; Mean:    117.78686006825939\n;; Median:  81.0\n;; SD:      120.65234077179436\n;; SE:      1.5759770362547665\n```", "```py\n(defn pooled-standard-error [a b]\n  (i/sqrt (+ (/ (i/sq (standard-deviation a)) (count a))\n             (/ (i/sq (standard-deviation b)) (count b)))))\n```", "```py\n(defn z-stat [a b]\n  (-> (- (mean a)\n         (mean b))\n      (/ (pooled-standard-error a b))))\n```", "```py\n(defn z-test [a b]\n  (s/cdf-normal (z-stat a b)))\n```", "```py\n(defn ex-2-14 []\n    (let [data (->> (load-data \"new-site.tsv\")\n                    (:rows)\n                    (group-by :site)\n                    (map-vals (partial map :dwell-time)))\n          a (get data 0)\n          b (get data 1)]\n      (println \"a n:\" (count a))\n      (println \"b n:\" (count b))\n      (println \"z-stat: \" (z-stat a b))\n      (println \"p-value:\" (z-test a b))))\n\n;; a n: 284\n;; b n: 16\n;; z-stat:  -1.6467438180091214\n;; p-value: 0.049805356789022426\n```", "```py\n(defn pooled-standard-error [a b]\n  (i/sqrt (+ (i/sq (standard-error a))\n             (i/sq (standard-error b)))))\n```", "```py\n(def t-stat z-stat)\n\n(defn ex-2-15 []\n    (let [data (->> (load-data \"new-site.tsv\")\n                    (:rows)\n                    (group-by :site)\n                    (map-vals (partial map :dwell-time)))\n          a (get data 0)\n          b (get data 1)]\n      (t-stat a b)))\n\n;; -1.647\n```", "```py\n(defn t-test [a b]\n  (let [df (+ (count a) (count b) -2)]\n    (- 1 (s/cdf-t (i/abs (t-stat a b)) :df df))))\n```", "```py\n(defn ex-2-16 []\n  (let [data (->> (load-data \"new-site.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        a (get data 0)\n        b (get data 1)]\n    (t-test a b)))\n\n;; 0.0503\n```", "```py\n(defn ex-2-17 []\n  (let [data (->> (load-data \"new-site.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        a (get data 0)\n        b (get data 1)]\n    (clojure.pprint/print (s/t-test a :y b))))\n\n;; {:p-value 0.12756432502462456,\n;;  :df 17.7613823496861,\n;;  :n2 16,\n;;  :x-mean 87.95070422535211,\n;;  :y-mean 122.0,\n;;  :x-var 10463.941024237305,\n;;  :conf-int [-78.9894629402365 10.890871390940724],\n;;  :y-var 6669.866666666667,\n;;  :t-stat -1.5985205593851322,\n;;  :n1 284}\n```", "```py\n(defn ex-2-18 []\n  (let [data (->> (load-data \"new-site.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        b (get data 1)]\n    (clojure.pprint/pprint (s/t-test b :mu 90))))\n\n;; {:p-value 0.13789520958229406,\n;;  :df 15,\n;;  :n2 nil,\n;;  :x-mean 122.0,\n;;  :y-mean nil,\n;;  :x-var 6669.866666666667,\n;;  :conf-int [78.48152745280898 165.51847254719104],\n;;  :y-var nil,\n;;  :t-stat 1.5672973291495713,\n;;  :n1 16}\n```", "```py\n(defn ex-2-19 []\n  (let [data (->> (load-data \"new-site.tsv\")\n                  (i/$where {:site {:$eq 1}})\n                  (i/$ :dwell-time ))]\n    (-> (s/bootstrap data s/mean :size 10000)\n        (c/histogram :nbins 20\n                     :x-label \"Bootstrapped mean dwell times (s)\")\n        (i/view))))\n```", "```py\n(defn ex-2-20 []\n  (->> (i/transform-col (load-data \"multiple-sites.tsv\")\n                        :dwell-time float)\n       (i/$rollup :mean :dwell-time :site)\n       (i/$order :dwell-time :desc)\n       (i/view)))\n```", "```py\n(defn ex-2-21 []\n  (let [data (->> (load-data \"multiple-sites.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        alpha 0.05]\n    (doseq [[site-a times-a] data\n            [site-b times-b] data\n            :when (> site-a site-b)\n            :let [p-val (-> (s/t-test times-a :y times-b)\n                            (:p-value))]]\n      (when (< p-val alpha)\n        (println site-b \"and\" site-a\n                 \"are significantly different:\"\n                 (format \"%.3f\" p-val))))))\n```", "```py\n(defn ex-2-22 []\n  (let [data (->> (load-data \"multiple-sites.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        baseline (get data 0)\n        alpha 0.05]\n    (doseq [[site-a times-a] data\n            :let [p-val (-> (s/t-test times-a :y baseline)\n                            (:p-value))]]\n      (when (< p-val alpha)\n        (println site-a\n                 \"is significantly different from baseline:\"\n                 (format \"%.3f\" p-val))))))\n```", "```py\n;; 6 is significantly different from baseline: 0.007\n;; 10 is significantly different from baseline: 0.006\n```", "```py\nlein cljsbuild once\n\n```", "```py\nlein cljsbuild auto\n\n```", "```py\n(defn randexp [lambda]\n  (js/jStat.exponential.sample lambda))\n```", "```py\n(defn exponential-distribution [lambda]\n  (repeatedly #(randexp lambda)))\n```", "```py\n(defn sample-histograms [sample-a sample-b]\n  (-> (c/histogram sample-a :x-axis [0 200] :bins 20)\n      (c/add-histogram sample-b)\n      (svg/as-svg :width 550 :height 400)))\n```", "```py\n(defn pdf-t [t & {:keys [df]}]\n  (js/jStat.studentt.pdf t df))\n```", "```py\n(defn t-statistic [test {:keys [mean n sd]}]\n  (/ (- mean test)\n     (/ sd (Math/sqrt n))))\n```", "```py\n(defn probability-density [sample alpha]\n  (let [mu (mean sample)\n        sd (standard-deviation sample)\n        n  (count sample)]\n    (fn [x]\n      (let [df     (dec (count sample))\n            t-crit (threshold-t 2 df alpha)\n            t-stat (t-statistic x {:mean mu\n                                   :sd sd\n                                   :n n})]\n        (if (< (Math/abs t-stat) t-crit)\n          (pdf-t t-stat :df df)\n          0)))))\n```", "```py\n(defn sample-means [sample-a sample-b alpha]\n  (-> (c/function-area-plot (probability-density sample-a alpha)\n                            :x-axis [0 200])\n      (c/add-function (probability-density sample-b alpha))\n      (svg/as-svg :width 550 :height 250)))\n```", "```py\n(defn update-sample [{:keys [mean-a mean-b sample-size]\n                      :as state}]\n  (let [sample-a (->> (float (/ 1 mean-a))\n                      (exponential-distribution)\n                      (take sample-size))\n        sample-b (->> (float (/ 1 mean-b))\n                      (exponential-distribution)\n                      (take sample-size))]\n    (-> state\n        (assoc :sample-a sample-a)\n        (assoc :sample-b sample-b)\n        (assoc :sample-mean-a (int (mean sample-a)))\n        (assoc :sample-mean-b (int (mean sample-b))))))\n\n(defn update-sample! [state]\n  (swap! state update-sample))\n```", "```py\n(defn layout-interface []\n  (let [sample-a (get @state :sample-a)\n        sample-b (get @state :sample-b)\n        alpha (/ (get @state :alpha) 100)]\n    [:div\n     [:div.row\n      [:div.large-12.columns\n       [:h1 \"Parameters & Statistics\"]]]\n     [:div.row\n      [:div.large-5.large-push-7.columns\n       [controllers state]]\n      [:div.large-7.large-pull-5.columns {:role :content}\n       [sample-histograms sample-a sample-b]\n       [sample-means sample-a sample-b alpha]]]]))\n\n(defn run []\n  (r/render-component\n   [layout-interface]\n   (.getElementById js/document \"root\")))\n```", "```py\n(defn ex-2-23 []\n  (let [data (->> (load-data \"multiple-sites.tsv\")\n                  (:rows)\n                  (group-by :site)\n                  (map-vals (partial map :dwell-time)))\n        alpha (/ 0.05 (count data))]\n    (doseq [[site-a times-a] data\n            [site-b times-b] data\n            :when (> site-a site-b)\n            :let [p-val (-> (s/t-test times-a :y times-b)\n                            (:p-value))]]\n      (when (< p-val alpha)\n        (println site-b \"and\" site-a\n                 \"are significantly different:\"\n                 (format \"%.3f\" p-val))))))\n```", "```py\n(defn ssw [groups]\n  (->> (map s/sum-of-square-devs-from-mean groups)\n       (reduce +)))\n```", "```py\n(defn sst [groups]\n  (->> (apply concat groups)\n       (s/sum-of-square-devs-from-mean)))\n\n(defn ssb [groups]\n  (- (sst groups)\n     (ssw groups)))\n```", "```py\n(defn f-stat [groups df1 df2]\n  (let [msb (/ (ssb groups) df1)\n        msw (/ (ssw groups) df2)]\n    (/ msbmsw)))\n```", "```py\n(defn f-test [groups]\n  (let [n (count (apply concat groups))\n        m (count groups)\n        df1 (- m 1)\n        df2 (- n m)\n        f-stat (f-stat groups df1 df2)]\n    (s/cdf-f f-stat :df1 df1 :df2 df2 :lower-tail? false)))\n```", "```py\n(defn ex-2-24 []\n  (let [grouped (->> (load-data \"multiple-sites.tsv\")\n                     (:rows)\n                     (group-by :site)\n                     (vals)\n                     (map (partial map :dwell-time)))]\n    (f-test grouped)))\n\n;; 0.014\n```", "```py\n(defn ex-2-25 []\n  (let [grouped (->> (load-data \"multiple-sites.tsv\")\n                     (:rows)\n                     (group-by :site)\n                     (sort-by first)\n                     (map second)\n                     (map (partial map :dwell-time)))\n        box-plot (c/box-plot (first grouped)\n                             :x-label \"Site number\"\n                             :y-label \"Dwell time (s)\")\n        add-box (fn [chart dwell-times]\n                  (c/add-box-plot chart dwell-times))]\n    (-> (reduce add-box box-plot (rest grouped))\n        (i/view))))\n```", "```py\n(defn ex-2-26 []\n  (let [data (load-data \"multiple-sites.tsv\")\n        site-0 (->> (i/$where {:site {:$eq 0}} data)\n                    (i/$ :dwell-time))\n        site-10 (->> (i/$where {:site {:$eq 10}} data)\n                     (i/$ :dwell-time))]\n    (s/t-test site-10 :y site-0)))\n\n;; 0.0069\n```", "```py\n(defn ex-2-27 []\n  (let [data (load-data \"multiple-sites.tsv\")\n        site-0 (->> (i/$where {:site {:$eq 0}} data)\n                    (i/$ :dwell-time))\n        site-6 (->> (i/$where {:site {:$eq 6}} data)\n                    (i/$ :dwell-time))]\n    (s/t-test site-6 :y site-0)))\n\n;; 0.007\n```", "```py\n(defn pooled-standard-deviation [a b]\n  (i/sqrt (+ (i/sq (standard-deviation a))\n             (i/sq (standard-deviation b)))))\n```", "```py\n(defn ex-2-28 []\n  (let [data (load-data \"multiple-sites.tsv\")\n        a (->> (i/$where {:site {:$eq 0}} data)\n               (i/$ :dwell-time))\n        b (->> (i/$where {:site {:$eq 6}} data)\n               (i/$ :dwell-time))]\n    (/ (- (s/mean b)\n          (s/mean a))\n       (pooled-standard-deviation a b))))\n\n;; 0.389\n```"]