["```py\n# 1.Load a variable with sentences\nsentence = \"Peter Piper picked a peck of pickled peppers A peck of pickled \\\npeppers Peter Piper picked If Peter Piper picked a peck of pickled \\\npeppers Wheres the peck of pickled peppers Peter Piper picked\"\n\n# 2.Initialize a dictionary object\nword_dict = {}\n\n# 3.Perform the word count\nfor word in sentence.split():\n    if word not in word_dict:\n        word_dict[word] =1\n    else:  \n        word_dict[word]+=1\n# 4.print the outputprint (word_dict)\n```", "```py\n{'a': 2, 'A': 1, 'Peter': 4, 'of': 4, 'Piper': 4, 'pickled': 4, 'picked': 4, 'peppers': 4, 'the': 1, 'peck': 4, 'Wheres': 1, 'If': 1}\n```", "```py\nword_dict.setdefault(word,0)\n```", "```py\nfor word in sentence.split():\nword_dict.setdefault(word,0)\nword_dict[word]+=1\n```", "```py\nfrom collections import defaultdict\n\nsentence = \"Peter Piper picked a peck of pickled peppers  A peck of pickled \\\n            peppers Peter Piper picked If Peter Piper picked a peck of pickled \\\n            peppers Wheres the peck of pickled peppers Peter Piper picked\"\n\nword_dict = defaultdict(int)\n\nfor word in sentence.split():\n    word_dict[word]+=1print word_dict   \n```", "```py\nFor key, value in word_dict.items():\nprint key,value\n```", "```py\nfrom collections import Counter\n\nsentence = \"Peter Piper picked a peck of pickled peppers  A peck of pickled \\\n            peppers Peter Piper picked If Peter Piper picked a peck of pickled \\\n            peppers Wheres the peck of pickled peppers Peter Piper picked\"\n\nwords = sentence.split()\n\nword_count = Counter(words)\n\nprint word_count['Peter']print word_dict   \n```", "```py\nCounter({'Peter': 4, 'of': 4, 'Piper': 4, 'pickled': 4, 'picked': 4, 'peppers': 4, 'peck': 4, 'a': 2, 'A': 1, 'the': 1, 'Wheres': 1, 'If': 1})\n```", "```py\nfrom collections import defaultdict\n\nuser_movie_rating = defaultdict(lambda :defaultdict(int))\n\n# Initialize ratings for Alice\nuser_movie_rating[\"Alice\"][\"LOR1\"] =  4\nuser_movie_rating[\"Alice\"][\"LOR2\"] =  5\nuser_movie_rating[\"Alice\"][\"LOR3\"] =  3\nuser_movie_rating[\"Alice\"][\"SW1\"]  =  5\nuser_movie_rating[\"Alice\"][\"SW2\"]  =  3\nprint user_movie_rating\n```", "```py\n# 1.Ways of creating a tuple\na_tuple = (1,2,'a')\nb_tuple =1,2,'c'\n\n# 2.Accessing elements of a tuple through index\nprint b_tuple[0]\nprint b_tuple[-1]\n\n# 3.It is not possible to change the value of an item in a tuple,\n# for example the next statement will result in an error.\ntry:\n    b_tuple[0] = 20\nexcept:\n    print \"Cannot change value of tuple by index\"    \n\n# 4.Though tuples are immutable\n# But elements of a tuple can be mutable objects,\n# for instance a list, as in the following line of code\nc_tuple =(1,2,[10,20,30])\nc_tuple[2][0] = 100\n\n# 5.Tuples once created cannot be extended like list, \n# however two tuples can be concatenated.\n\nprint a_tuple + b_tuple\n\n# 6 Slicing of uples\na =(1,2,3,4,5,6,7,8,9,10)\nprint a[1:]\nprint a[1:3]\nprint a[1:6:2]\nprint a[:-1]\n\n# 7.Tuple min max\nprint min(a),max(a)\n\n# 8.in and not in\nif 1 in a:\n    print \"Element 1 is available in tuple a\"\nelse:\nprint \"Element 1 is available in tuple a\"\n```", "```py\n>>> print b_tuple[0]\n1\n>>> print b_tuple[-1]\nc\n>>> \n```", "```py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n```", "```py\nc_tuple[2][0] = 100\n```", "```py\nprint  c_tuple\n```", "```py\n(1, 2, [100, 20, 30])\n```", "```py\nprint a[1:]\n```", "```py\n(2, 3, 4, 5, 6, 7, 8, 9, 10)\n```", "```py\nprint a[1:3]\n```", "```py\n(2, 3)\n```", "```py\nprint a[1:6:2]\n```", "```py\n(2, 4, 6)\n```", "```py\nprint a[:-1]\n```", "```py\n(1, 2, 3, 4, 5, 6, 7, 8, 9)\n```", "```py\nprint a[::-1]\n```", "```py\n(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\n```", "```py\n>>> print min(a), max(a)\n1 10\n>>>\n```", "```py\nif 1 in a:\n    print \"Element 1 is available in tuple a\"\nelse:\n    print \"Element 1 is available in tuple a\"\n```", "```py\nfrom collections import namedtuple\n\nvector = namedtuple(\"Dimension\",'x y z')\nvec_1 = vector(1,1,1)\nvec_2 = vector(1,0,1)\n\nmanhattan_distance = abs(vec_1.x - vec_2.x) + abs(vec_1.y - vec_2.y) \\\n                            + abs(vec_1.z - vec_2.z)\n\nprint \"Manhattan distance between vectors = %d\"%(manhattan_distance)\n```", "```py\n# 1.Initialize two sentences.\nst_1 = \"dogs chase cats\"\nst_2 = \"dogs hate cats\"\n\n# 2.Create set of words from strings\nst_1_wrds = set(st_1.split())\nst_2_wrds = set(st_2.split())\n\n# 3.Find out the number of unique words in each set, vocabulary size.\nno_wrds_st_1 = len(st_1_wrds)\nno_wrds_st_2 = len(st_2_wrds)\n\n# 4.Find out the list of common words between the two sets.\n# Also find out the count of common words.\ncmn_wrds = st_1_wrds.intersection(st_2_wrds)\nno_cmn_wrds = len(st_1_wrds.intersection(st_2_wrds))\n\n# 5.Get a list of unique words between the two sets.\n# Also find out the count of unique words.\nunq_wrds = st_1_wrds.union(st_2_wrds)\nno_unq_wrds = len(st_1_wrds.union(st_2_wrds))\n\n# 6.Calculate Jaccard similarity \nsimilarity = no_cmn_wrds / (1.0 * no_unq_wrds)\n\n# 7.Let us now print to grasp our output.\nprint \"No words in sent_1 = %d\"%(no_wrds_st_1)\nprint \"Sentence 1 words =\", st_1_wrds\nprint \"No words in sent_2 = %d\"%(no_wrds_st_2)\nprint \"Sentence 2 words =\", st_2_wrds\nprint \"No words in common = %d\"%(no_cmn_wrds)\nprint \"Common words =\", cmn_wrds\nprint \"Total unique words = %d\"%(no_unq_wrds)\nprint \"Unique words=\",unq_wrds\nprint \"Similarity = No words in common/No unique words, %d/%d = %.2f\"%(no_cmn_wrds,no_unq_wrds,similarity)\n```", "```py\n>>> a =(1,2,1)\n>>> set(a)\nset([1, 2])\n>>> b =[1,2,1]\n>>> set(b)\nset([1, 2]\n```", "```py\nNo words in sent_1 = 3\nSentence 1 words = set(['cats', 'dogs', 'chase'])\nNo words in sent_2 = 3\nSentence 2 words = set(['cats', 'hate', 'dogs'])\nNo words in common = 2\nCommon words = set(['cats', 'dogs'])\nTotal unique words = 4\nUnique words= set(['cats', 'hate', 'dogs', 'chase'])\nSimilarity = No words in common/No unique words, 2/4 = 0.50\n```", "```py\n# Load libraries\nfrom sklearn.metrics import jaccard_similarity_score\n\n# 1.Initialize two sentences.\nst_1 = \"dogs chase cats\"\nst_2 = \"dogs hate cats\"\n\n# 2.Create set of words from strings\nst_1_wrds = set(st_1.split())\nst_2_wrds = set(st_2.split())\n\nunq_wrds = st_1_wrds.union(st_2_wrds)\n\na  =[ 1 if w in st_1_wrds else 0 for w in unq_wrds ]\nb  =[ 1 if w in st_2_wrds else 0 for w in unq_wrds]\n\nprint a\nprint b\nprint jaccard_similarity_score(a,b)\n```", "```py\n[1, 0, 1, 1]\n[1, 1, 1, 0]\n0.5\n```", "```py\n# 1.Let us look at a quick example of list creation. \na = range(1,10)\nprint a\nb = [\"a\",\"b\",\"c\"]\nprint b\n\n# 2.List can be accessed through indexing. Indexing starts at 0.\nprint a[0]\n\n# 3.With negative indexing the elements of a list are accessed from backwards.\na[-1]\n\n# 4.Slicing is accessing a subset of list by providing two indices.\nprint a[1:3]  # prints [2, 3]\nprint a[1:]   # prints [2, 3, 4, 5, 6, 7, 8, 9]\nprint a[-1:]  # prints [9]\nprint a[:-1]  # prints [1, 2, 3, 4, 5, 6, 7, 8]\n\n#5.List concatenation\na = [1,2]\nb = [3,4]\nprint a + b # prints [1, 2, 3, 4]\n\n# 6.\tList  min max\nprint min(a),max(a)\n\n# 7.\tin and not in\nif 1 in a:\n    print \"Element 1 is available in list a\"\nelse:\n    print \"Element 1 is available in tuple a\"\n\n# 8\\. Appending and extending list\na = range(1,10)\nprint a\na.append(10)\nprint a\n\n# 9.List as a stack\na_stack = []\n\na_stack.append(1)\na_stack.append(2)\na_stack.append(3)\n\nprint a_stack.pop()\nprint a_stack.pop()\nprint a_stack.pop()\n\n# 10.List as queue\na_queue = []\n\na_queue.append(1)\na_queue.append(2)\na_queue.append(3)\n\nprint a_queue.pop(0)\nprint a_queue.pop(0)\nprint a_queue.pop(0)\n\n# 11.\tList sort and reverse\nfrom random import shuffle\na = range(1,20)\nshuffle(a)\nprint a\na.sort()\nprint a\n\na.reverse()\nprint a\n```", "```py\n>>> a = range(1,10)\n>>> print a\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> a.append(10)\n>>> print a\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>>\n```", "```py\n>>> b=range(11,15)\n>>> a.extend(b)\n>>> print a\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n>>>\n```", "```py\n3\n2\n1\n```", "```py\n1\n2\n3\n```", "```py\na = range(1,20)\n```", "```py\n[19, 14, 11, 12, 4, 13, 17, 5, 2, 3, 1, 16, 8, 15, 18, 6, 7, 9, 10]\n```", "```py\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n```", "```py\n[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n```", "```py\n# 1.\tLet us define a simple list with some positive and negative numbers.\na = [1,2,-1,-2,3,4,-3,-4]\n\n# 2.\tNow let us write our list comprehension.\n# pow() a power function takes two input and\n# its output is the first variable raised to the power of the second.\nb = [pow(x,2) for x in a if x < 0]\n\n# 3.\tFinally let us see the output, i.e. the newly created list b.\nprint b\n```", "```py\nb = [pow(x,2) for x in a if x < 0]\n```", "```py\na = {'a':1,'b':2,'c':3}\nb = {x:pow(y,2) for x,y in a.items()}\nprint b\n```", "```py\n{'a': 1, 'c': 9, 'b': 4}\n```", "```py\ndef process(x):\n    if isinstance(x,str):\n        return x.lower()\n    elif isinstance(x,int):\n        return x*x\n    else:\n        return -9\n\na = (1,2,-1,-2,'D',3,4,-3,'A')\nb = tuple(process(x) for x in a )\n\nprint b\n```", "```py\n<generator object <genexpr> at 0x05E87D00>\n```", "```py\nb = tuple(process(x) for x in a )\n```", "```py\n(1, 4, 1, 4, 'd', 9, 16, 9, 'a')\n```", "```py\n# 1.\tLet us write a simple iterator.\nclass SimpleCounter(object):\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n\n    def __iter__(self):\n        'Returns itself as an iterator object'\n        return self\n\n    def next(self):\n        'Returns the next value till current is lower than end'\n        if self.current > self.end:\n\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\n# 2.\tNow let us try to access the iterator\nc = SimpleCounter(1,3)\nprint c.next()\nprint c.next()\nprint c.next()\nprint c.next()\n\n# 3.\tAnother way to access\nfor entry in iter(c):\n    print entry     \n```", "```py\nprint next(c)\n```", "```py\n    raise StopIteration\nStopIteration\n>>>\n```", "```py\nf = open(some_file_of_interest)\nfor l in iter(f):\nprint l\nf.close()\n```", "```py\nSimpleCounter  = (x**2 for x in range(1,10))\n\ntot = 0\nfor val in SimpleCounter:\n    tot+=val\n\nprint tot    \n```", "```py\nSimpleCounter and we use it in a for loop in order to access the underlying data sequentially. Note that we have not used the iter() function here. Notice how clean the code is. We successfully recreated our old SimpleCounter class in a very elegant manner.\n```", "```py\ndef my_gen(low,high):\n    for x in range(low,high):\n        yield x**2\n\ntot = 0     \n\nfor val in my_gen(1,10):\n    tot+=val\nprint tot    \n```", "```py\ngen = (x**2 for x in range(1,10))\n\nfor val in iter(gen):\n    print val\n```", "```py\n# 1.\tLet us define a simple class with __iter__ method.\nclass SimpleIterable(object):\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __iter__(self):\n        for x in range(self.start,self.end):\n            yield x**2\n\n#  Now let us invoke this class and iterate over its values two times.\nc = SimpleIterable(1,10)\n\n# First iteration\ntot = 0\nfor val in iter(c):\n    tot+=val\n\nprint tot\n\n# Second iteration\ntot =0\nfor val in iter(c):\n    tot+=val\n\nprint tot\n```", "```py\n# 1.Let us define a simple function.\ndef square_input(x):\n    return x*x\n# We will follow it by assigning that function to a variable\nsquare_me = square_input\n\n# And finally invoke the variable\nprint square_me(5)    \n```", "```py\n# 1.\tLet us define a function of function to find the sum of squares of the given input\ndef sum_square(x):\n    def square_input(x):\n        return x*x\n    return sum([square_input(x1) for x1 in x])\n\n# Print the output to check for correctness\nprint sum_square([2,4,5])    \n```", "```py\n[4, 9, 16]\n```", "```py\nHow to do it…\n```", "```py\nfrom math import log\n\ndef square_input(x):\n    return x*x\n\n# 1.\tDefine a generic function, which will take another function as input\n# and will apply it on the given input sequence.\ndef apply_func(func_x,input_x):\n    return map(func_x,input_x)\n\n# Let us try to use the apply_func() and verify the results  \na = [2,3,4]\n\nprint apply_func(square_input,a)\nprint apply_func(log,a)    \n```", "```py\n[4, 9, 16]\n```", "```py\n[0.69314718055994529, 1.0986122886681098, 1.3862943611198906]\n```", "```py\nVolume = area * height = pi * r^2 * h\n```", "```py\n# 1.\tLet us define a function which will explain our\n#  concept of function returning a function.\ndef cylinder_vol(r):\n    pi = 3.141\n    def get_vol(h):\n        return pi * r**2 * h\n    return get_vol\n\n# 2.\tLet us define a radius and find get a volume function,\n#  which can now find out the volume for the given radius and any height.\nradius = 10\nfind_volume = cylinder_vol(radius)\n\n# 3.\tLet us try to find out the volume for different heights\nheight = 10\nprint \"Volume of cylinder of radius %d and height %d = %.2f  cubic units\" \\\n                %(radius,height,find_volume(height))        \n\nheight = 20\nprint \"Volume of cylinder of radius %d and height %d = %.2f  cubic units\" \\\n                %(radius,height,find_volume(height))        \n```", "```py\nVolume of cylinder of radius 10 and height 10 = 3141.00  cubic units\nVolume of cylinder of radius 10 and height 20 = 6282.00  cubic units\n```", "```py\nfrom string import punctuation\n\ndef pipeline_wrapper(func):\n\n    def to_lower(x):\n        return x.lower()\n\n    def remove_punc(x):\n        for p in punctuation:\n            x = x.replace(p,'')\n        return x\n\n    def wrapper(*args,**kwargs):\n        x = to_lower(*args,**kwargs)\n        x = remove_punc(x)\n        return func(x)\n    return wrapper\n\n@pipeline_wrapper        \ndef tokenize_whitespace(inText):\n    return inText.split()\n\ns = \"string. With. Punctuation?\"    \nprint tokenize_whitespace(s)\n```", "```py\ns = \"string. With. Punctuation?\" \nprint tokenize_whitespace(s)\n```", "```py\n@pipeline_wrapper \ndef tokenize_whitespace(inText):\nreturn inText.split()\n```", "```py\ndef pipeline_wrapper(func):\n\ndef to_lower(x):\nreturn x.lower()\ndef remove_punc(x):\nfor p in punctuation:\nx = x.replace(p,'')\nreturn x\ndef wrapper(*args,**kwargs):\nx = to_lower(*args,**kwargs)\nx = remove_punc(x)\nreturn func(x)\nreturn wrapper\n```", "```py\n['string', 'with', 'punctuation']\n```", "```py\n# 1.\tCreate a simple list and a function similar to the\n# one in functions as parameter section.\na =[10,20,30]\n\ndef do_list(a_list,func):\n    total = 0\n    for element in a_list:\n        total+=func(element)\n    return total\n\nprint do_list(a,lambda x:x**2)   \nprint do_list(a,lambda x:x**3)   \n\nb =[lambda x: x%3 ==0  for x in a  ]\n```", "```py\nlambda x:x**2\n```", "```py\nmap(aFunction, iterable)\n```", "```py\n#First let us declare a list.\na =[10,20,30]\n# Let us now call the map function in our Print statement.\nprint map(lambda x:x**2,a)   \n```", "```py\nlambda x:x**2\n```", "```py\n[100,400,900]\n```", "```py\nprint map(lambda x:x**3,a)\n```", "```py\nprint sum(map(lambda x:x**2,a))\nprint sum(map(lambda x:x**3,a))\n```", "```py\na =[10,20,30]\nb = [1,2,3]\n\nprint map(pow,a,b) \n```", "```py\n[10, 400, 27000]\n>>>\n```", "```py\nFilter(aFunction, iterable)\n```", "```py\n# Let us declare a list.\na = [10,20,30,40,50]\n# Let us apply Filter function on all the elements of the list.\nprint filter(lambda x:x>10,a)\n```", "```py\n[20, 30, 40, 50]\n\n```", "```py\nprint zip(range(1,5),range(1,5))\n```", "```py\n[1,2,3,4]\n```", "```py\n[(1, 1), (2, 2), (3, 3), (4, 4)]\n```", "```py\nx,y = zip(*out)\nprint x,y\n```", "```py\na =(2,3)\nprint pow(*a)\n```", "```py\na_dict = {\"x\":10,\"y\":10,\"z\":10,\"x1\":10,\"y1\":10,\"z1\":10} \n```", "```py\ndef dist(x,y,z,x1,y1,z1):\nreturn abs((x-x1)+(y-y1)+(z-z1))\n\nprint dist(**a_dict) \n```", "```py\ndef any_sum(*args):\ntot = 0\nfor arg in args:\ntot+=arg\nreturn tot\n\nprint any_sum(1,2)\nprint any_sum(1,2,3)\n```", "```py\nany_sum function can now work on any number of variables. A curious reader may comment about why not use a list instead as an argument to the any_sum function, where we can now pass a list of values. Very well, yes in this case, but we will soon encounter cases where we really don't know what kind of arguments will be passed.\n```", "```py\n# 1.\tLet us simulate a small tablular input using StringIO\nimport numpy as np\nfrom StringIO import StringIO\nin_data = StringIO(\"10,20,30\\n56,89,90\\n33,46,89\")\n\n# 2.Read the input using numpyâ€™s genfromtext to create a nummpy array.\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\")\n\n# cases where we may not need to use some columns.\nin_data = StringIO(\"10,20,30\\n56,89,90\\n33,46,89\")\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",usecols=(0,1))\n\n# providing column names\nin_data = StringIO(\"10,20,30\\n56,89,90\\n33,46,89\")\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",names=\"a,b,c\")\n\n# using column names from data\nin_data = StringIO(\"a,b,c\\n10,20,30\\n56,89,90\\n33,46,89\")\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",names=True)\n```", "```py\n>>> data\narray([[10, 20, 30],\n       [56, 89, 90],\n       [33, 46, 89]])\n```", "```py\ngenfromtxt(fname, dtype=<type 'float'>, comments='#', delimiter=None, skiprows=0, skip_header=0, skip_footer=0, converters=None, missing='', missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=None, replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True)\n```", "```py\nin_data = StringIO(\"10,20,30\\n56,89,90\\n33,46,89\")\n\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",usecols=(0,1))\n```", "```py\n>>> data\narray([[10, 20],\n       [56, 89],\n       [33, 46]])\n```", "```py\nin_data = StringIO(\"10,20,30\\n56,89,90\\n33,46,89\")\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",names=\"a,b,c\")\n\n>>> data\narray([(10, 20, 30), (56, 89, 90), (33, 46, 89)], \n      dtype=[('a', '<i4'), ('b', '<i4'), ('c', '<i4')])\n```", "```py\nin_data = StringIO(\"a,b,c\\n10,20,30\\n56,89,90\\n33,46,89\")\ndata = np.genfromtxt(in_data,dtype=int,delimiter=\",\",names=True)\n\n>>> data\narray([(10, 20, 30), (56, 89, 90), (33, 46, 89)], \n      dtype=[('a', '<i4'), ('b', '<i4'), ('c', '<i4')])\n```", "```py\n30kg,inr2000,31.11,56.33,1\n52kg,inr8000.35,12,16.7,2\n```", "```py\nin_data = StringIO(\"30kg,inr2000,31.11,56.33,1\\n52kg,inr8000.35,12,16.7,2\")\ndata = np.genfromtxt(in_data,delimiter=\",\")\n```", "```py\n>>> data\narray([[   nan,    nan,  31.11,  56.33,   1\\.  ],\n       [   nan,    nan,  12\\.  ,  16.7 ,   2\\.  ]])\n```", "```py\nimport numpy as np\nfrom StringIO import StringIO\n\n# Define a data set\nin_data = StringIO(\"30kg,inr2000,31.11,56.33,1\\n52kg,inr8000.35,12,16.7,2\")\n\n# 1.Let us define two data pre-processing using lambda functions,\nstrip_func_1 = lambda x : float(x.rstrip(\"kg\"))\nstrip_func_2 = lambda x : float(x.lstrip(\"inr\"))\n\n# 2.Let us now create a dictionary of these functions,\nconvert_funcs = {0:strip_func_1,1:strip_func_2}\n\n# 3.Now provide this dictionary of functions to genfromtxt.\ndata = np.genfromtxt(in_data,delimiter=\",\", converters=convert_funcs)\n\n# Using a lambda function to handle conversions\nin_data = StringIO(\"10,20,30\\n56,,90\\n33,46,89\")\nmss_func = lambda x : float(x.strip() or -999)\ndata = np.genfromtxt(in_data,delimiter=\",\", converters={1:mss_func})\n```", "```py\n>>> data\narray([[  3.00000000e+01,   2.00000000e+03,   3.11100000e+01,\n          5.63300000e+01,   1.00000000e+00],\n       [  5.20000000e+01,   8.00035000e+03,   1.20000000e+01,\n          1.67000000e+01,   2.00000000e+00]])\n```", "```py\nin_data = StringIO(\"10,20,30\\n56,,90\\n33,46,89\")\nmss_func = lambda x : float(x.strip() or -999)\ndata = np.genfromtxt(in_data,delimiter=\",\", converters={1:mss_func})\n```", "```py\n>>> data\narray([[  10.,   20.,   30.],\n       [  56., -999.,   90.],\n       [  33.,   46.,   89.]])\n```", "```py\n# Let us look at a very small code snippet, which does sorting of a given list.\na = [8, 0, 3, 4, 5, 2, 9, 6, 7, 1]\nb = [8, 0, 3, 4, 5, 2, 9, 6, 7, 1]\n\nprint a\na.sort()\nprint a\n\nprint b\nb_s = sorted(b)\nprint b_s\n```", "```py\n[8, 0, 3, 4, 5, 2, 9, 6, 7, 1]\n```", "```py\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n>>> a = [8, 0, 3, 4, 5, 2, 9, 6, 7, 1]\n>>> print a\n[8, 0, 3, 4, 5, 2, 9, 6, 7, 1]\n>>> a.sort(reverse=True)\n>>> print a\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n>>>\nNow, we have a descending order sorting.\nFor other iterables, we have to fall back on the sorted function. Let's look at a tuple example:\n>>> a = (8, 0, 3, 4, 5, 2, 9, 6, 7, 1)\n>>> sorted(a)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>>\n```", "```py\n#1.The first step is to create a list of tuples, which we will use to test our sorting.\n\nemployee_records = [ ('joe',1,53),('beck',2,26), \\\n                     ('ele',6,32),('neo',3,45),  \\\n                    ('christ',5,33),('trinity',4,29), \\\n                    ]\n\n# 2.Let us now sort it by employee name\nprint sorted(employee_records,key=lambda emp : emp[0])\n\"\"\"\nIt prints as follows\n[('beck', 2, 26), ('christ', 5, 33), ('ele', 6, 32), ('joe', 1, 53), ('neo', 3, 45), ('trinity', 4, 29)]\n\"\"\"\n# 3.Let us now sort it by employee id\nprint sorted(employee_records,key=lambda emp : emp[1])\n\"\"\"\nIt prints as follows\n[('joe', 1, 53), ('beck', 2, 26), ('neo', 3, 45), ('trinity', 4, 29), ('christ', 5, 33), ('ele', 6, 32)]\n\"\"\"\n# 4.Finally we sort it with employee age\nprint sorted(employee_records,key=lambda emp : emp[2])\n\"\"\"\nIts prints as follows\n[('beck', 2, 26), ('trinity', 4, 29), ('ele', 6, 32), ('christ', 5, 33), ('neo', 3, 45), ('joe', 1, 53)]\n\"\"\"\n```", "```py\nfrom operator import itemgetter\nemployee_records = [ ('joe',1,53),('beck',2,26), \\\n                     ('ele',6,32),('neo',3,45),  \\\n                     ('christ',5,33),('trinity',4,29), \\\n                     ]\nprint sorted(employee_records,key=itemgetter(0))\n\"\"\"\n[('beck', 2, 26), ('christ', 5, 33), ('ele', 6, 32), ('joe', 1, 53), ('neo', 3, 45), ('trinity', 4, 29)]\n\"\"\"\nprint sorted(employee_records,key=itemgetter(1))\n\"\"\"\n[('joe', 1, 53), ('beck', 2, 26), ('neo', 3, 45), ('trinity', 4, 29), ('christ', 5, 33), ('ele', 6, 32)]\n\"\"\"\nprint sorted(employee_records,key=itemgetter(2))\n\"\"\"\n[('beck', 2, 26), ('trinity', 4, 29), ('ele', 6, 32), ('christ', 5, 33), ('neo', 3, 45), ('joe', 1, 53)]\n\"\"\"\n```", "```py\n>>> sorted(employee_records,key=itemgetter(0,1))\n[('beck', 2, 26), ('christ', 5, 33), ('ele', 6, 32), ('joe', 1, 53), ('neo', 3, 45), ('trinity', 4, 29)]\n```", "```py\n# Let us now enclose the employee records as class objects,\nclass employee(object):\n    def __init__(self,name,id,age):\n        self.name = name\n        self.id = id\n        self.age = age\n    def pretty_print(self):\n       print self.name,self.id,self.age\n\n# Now let us populate a list with these class objects.\nemployee_records = []\nemp1 = employee('joe',1,53)\nemp2 = employee('beck',2,26)\nemp3 = employee('ele',6,32)\n\nemployee_records.append(emp1)\nemployee_records.append(emp2)\nemployee_records.append(emp3)\n\n# Print the records\nfor emp in employee_records:\n    emp.pretty_print()\n\nfrom operator import attrgetter\nemployee_records_sorted = sorted(employee_records,key=attrgetter('age'))\n# Now let us print the sorted list,\nfor emp in employee_records_sorted:\n    emp.pretty_print()\n```", "```py\nemployee_records = []\nemp1 = employee('joe',1,53)\nemp2 = employee('beck',2,26)\nemp3 = employee('ele',6,32)\n\nemployee_records.append(emp1)\nemployee_records.append(emp2)\nemployee_records.append(emp3)\n```", "```py\njoe 1 53\nbeck 2 26\nele 6 32\n```", "```py\nemployee_records_sorted = sorted(employee_records,key=attrgetter('age'))\n```", "```py\nbeck 2 26\nele 6 32\njoe 1 53\n```", "```py\nclass employee(object):\n    def __init__(self,name,id,age):\n        self.name = name\n        self.id = id\n        self.age = age\n\n    def pretty_print(self):\n       print self.name,self.id,self.age\n\n    def random_method(self):\n       return self.age / self.id \n\n# Populate data\nemployee_records = []\nemp1 = employee('joe',1,53)\nemp2 = employee('beck',2,26)\nemp3 = employee('ele',6,32)\n\nemployee_records.append(emp1)\nemployee_records.append(emp2)\nemployee_records.append(emp3)\n\nfrom operator import methodcaller\nemployee_records_sorted = sorted(employee_records,key=methodcaller('random_method'))\nfor emp in employee_records_sorted:\n    emp.pretty_print() \n```", "```py\nsorted(employee_records,key=methodcaller('random_method'))\n```", "```py\nele 6 32\nbeck 2 26\njoe 1 53\n```", "```py\n# Load libraries\nfrom itertools import chain,compress,combinations,count,izip,islice\n\n# 1.Chain example, where different iterables can be combined together.\na = [1,2,3]\nb = ['a','b','c']\nprint list(chain(a,b)) # prints [1, 2, 3, 'a', 'b', 'c']\n\n# 2.Compress example, a data selector, where the data in the first iterator\n#  is selected based on the second iterator.\na = [1,2,3]\nb = [1,0,1]\nprint list(compress(a,b)) # prints [1, 3]\n\n# 3.From a given list, return n length sub sequences.\na = [1,2,3,4]\nprint list(combinations(a,2)) # prints [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n\n# 4.A counter which produces infinite consequent integers, given a start integer,\na = range(5)\nb = izip(count(1),a)\nfor element in b:\n    print element\n\n# 5.\tExtract an iterator from another iterator, \n# let us say we want an iterator which only returns every \n# alternate elements from the input iterator\na = range(100)\nb = islice(a,0,100,2)\nprint list(b)\n```", "```py\n>>> chain(a,b)\n<itertools.chain object at 0x060DD0D0>\n```", "```py\n>>> list(chain(a,b))\n[1, 2, 3, 'a', 'b', 'c']\n```", "```py\n(1, 0)\n(2, 1)\n(3, 2)\n(4, 3)\n(5, 4)\n```"]