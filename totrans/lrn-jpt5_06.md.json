["```py\nconda install nodejs \nnpm install -g iJavaScript \nijsinstall \n```", "```py\nvar msg = \"Hello, World!\" \nconsole.log(msg) \n```", "```py\n{ \n  \"cells\": [ \n    <<same format as seen earlier for the cells>> \n  ], \n  \"metadata\": { \n    \"kernelspec\": { \n      \"display_name\": \"JavaScript (Node.js)\", \n      \"language\": \"JavaScript\", \n      \"name\": \"JavaScript\" \n    }, \n    \"language_info\": { \n      \"file_extension\": \".js\", \n      \"mimetype\": \"application/JavaScript\", \n      \"name\": \"JavaScript\", \n      \"version\": \"8.9.3\" \n    } \n  }, \n  \"nbformat\": 4, \n  \"nbformat_minor\": 2 \n} \n```", "```py\nnpm install name-of-module \n```", "```py\nvar fs = require(\"fs\");\nvar d3 = require(\"d3\");\nvar _ = require(\"lodash\");\nvar _ = require(\"isomorphic-fetch\");\n\n//read and parse the animals file\nconsole.log(\"Animal\\tWeight\");\nd3.csv(\"http://www.dantoomeysoftware.com/data/animals.csv\", function(data) {\n    console.log(data.name + '\\t' + data.avg_weight);\n});\n```", "```py\nName,avg_weight \nLion,400 \nTiger,400 \nHuman,150 \nElephant,2000 \n```", "```py\nconst stats = require(\"stats-analysis\"); \n\nvar arr = [98, 98.6, 98.4, 98.8, 200, 120, 98.5]; \n\n//standard deviation \nvar my_stddev = stats.stdev(arr).toFixed(2); \n\n//mean \nvar my_mean = stats.mean(arr).toFixed(2); \n\n//median \nvar my_median = stats.median(arr); \n\n//median absolute deviation \nvar my_mad = stats.MAD(arr); \n\n// Get the index locations of the outliers in the data set \nvar my_outliers = stats.indexOfOutliers(arr); \n\n// Remove the outliers \nvar my_without_outliers = stats.filterOutliers(arr); \n\n//display our stats \nconsole.log(\"Raw data is \", arr); \nconsole.log(\"Standard Deviation is \", my_stddev); \nconsole.log(\"Mean is \", my_mean); \nconsole.log(\"Median is \", my_median); \nconsole.log(\"Median Abs Deviation is \" + my_mad); \nconsole.log(\"The outliers of the data set are \", my_outliers); \nconsole.log(\"The data set without outliers is \", my_without_outliers); \n```", "```py\n//load the JSON dataset \n//http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford \nvar fords = require('/Users/dtoomey/fords.json'); \n\n//display how many Ford models are in our data set \nconsole.log(\"There are \" + fords.Models.length + \" Ford models in the data set\"); \n\n//loop over the set \nvar index = 1 \nfor(var i=0; i<fords.Models.length; i++) { \n\n    //get this model \n    var model = fords.Models[i]; \n\n    //pull it's name \n    var name = model.model_name; \n\n    //if the model name does not have numerics in it \n    if(! name.match(/[0-9]/i)) { \n        //display the model name \n        console.log(\"Model \" + index + \" is a \" + name); \n        index++; \n    } \n\n    //only display the first 5 \n    if (index>5) break; \n} \n```", "```py\nnpm install canvas \nbrew install pkg-config cairo libpng jpeg giflib \n```", "```py\n// create a canvas 200 by 200 pixels \nvar Canvas = require('canvas') \n  , Image = Canvas.Image \n  , canvas = new Canvas(200, 200) \n  , ctx = canvas.getContext('2d') \n  , string = \"Jupyter!\"; \n\n// place our string on the canvas \nctx.font = '30px Impact'; \nctx.rotate(.1); \nctx.fillText(string, 50, 100); \n\nvar te = ctx.measureText(string); \nctx.strokeStyle = 'rgba(0,0,0,0.5)'; \nctx.beginPath(); \nctx.lineTo(50, 102); \nctx.lineTo(50 + te.width, 102); \nctx.stroke(); \n\n//create an html img tag, with embedded graphics \nconsole.log('<img src=\"img/' + canvas.toDataURL() + '\" />'); \n```", "```py\n<html>\n <body>\n <img src=\"img/png;base64,iVBORw0KGgo<the rest of the tag>CC\" />\n </body>\n </head> \n```", "```py\nnpm install plotly \n```", "```py\n//set random seed \nvar seedrandom = require('seedrandom'); \nvar rng = seedrandom('Jupyter'); \n//setup plotly \nvar plotly = require('plotly')(username=\"<username>\", api_key=\"<key>\") \nvar x = []; \nfor (var i = 0; i < 500; i ++) { \n    x[i] = Math.random(); \n} \nrequire('plotly')(username, api_key); \nvar data = [ \n  { \n    x: x, \n    type: \"histogram\" \n  } \n]; \nvar graphOptions = {filename: \"basic-histogram\", fileopt: \"overwrite\"}; \nplotly.plot(data, graphOptions, function (err, msg) { \n    console.log(msg); \n}); \n```", "```py\n//thread function - invoked for every number in items array \nfunction async(arg, callback) { \n  console.log('cube \\''+arg+'\\', and return 2 seconds later'); \n  setTimeout(function() { callback(arg * 3); }, 2000); \n} \n\n//function called once - after all threads complete \nfunction final() { console.log('Done', results); } \n\n//list of numbers to operate upon \nvar items = [ 0, 1, 1, 2, 3, 5, 7, 11 ]; \n\n//results of each step \nvar results = []; \n\n//loop the drives the whole process \nitems.forEach(function(item) { \n  async(item, function(result){ \n    results.push(result); \n    if(results.length == items.length) { \n      final(); \n    } \n  }) \n}); \n```", "```py\nnpm install decision-tree \n```", "```py\n//Import the modules \nvar DecisionTree = require('decision-tree'); \nvar fs = require(\"fs\"); \nvar d3 = require(\"d3\"); \nvar util = require('util'); \n\n//read in the car/mpg file \nfs.readFile(\"/Users/dtoomey/car-mpg.csv\", \"utf8\", function(error, data) { \n\n    //parse out the csv into a dataset \n    var dataset = d3.tsvParse(data); \n\n    //display on screen - just for debugging \n    //console.log(JSON.stringify(dataset)); \n\n    var rows = dataset.length; \n    console.log(\"rows = \" + rows); \n    var training_size = rows * 2 / 3; \n    console.log(\"training_size = \" + training_size); \n    var test_size = rows - training_size; \n    console.log(\"test_size = \" + test_size); \n\n    //Prepare training dataset \n    var training_data = dataset.slice(1, training_size); \n\n    //Prepare test dataset \n    var test_data = dataset.slice(training_size, rows); \n\n    //Setup Target Class used for prediction \n    var class_name = \"mpg\"; \n\n    //Setup Features to be used by decision tree \n    var features = [\"cylinders\",\"displacement\",\"horsepower\", \"weight\", \"acceleration\", \"modelyear\", \"maker\"]; \n\n    //Create decision tree and train model \n    var dt = new DecisionTree(training_data, class_name, features); \n    console.log(\"Decision Tree is \" + util.inspect(dt, {showHidden: false, depth: null})); \n\n    //Predict class label for an instance \n    var predicted_class = dt.predict({ \n        cylinders: 8, \n        displacement: 400, \n        horsepower: 200, \n        weight: 4000, \n        acceleration: 12, \n        modelyear: 70, \n        maker: \"US\" \n    }); \n    console.log(\"Predicted Class is \" + util.inspect(predicted_class, {showHidden: false, depth: null})); \n\n    //Evaluate model on a dataset \n    var accuracy = dt.evaluate(test_data); \n    console.log(\"Accuracy is \" + accuracy); \n\n    //Export underlying model for visualization or inspection \n    var treeModel = dt.toJSON(); \n    console.log(\"Decision Tree JSON is \" + util.inspect(treeModel, {showHidden: false, depth: null})); \n}); \n```"]