["```py\n# Creating an array\nimport numpy as np\na = np.array([2,4,6,8,10])\nprint(a)\n\nOutput:\n[ 2 4 6 8 10]\n```", "```py\n# Creating an array using arange()\nimport numpy as np\na = np.arange(1,11)\nprint(a)\n\nOutput:\n[ 1 2 3 4 5 6 7 8 9 10]\n```", "```py\nimport numpy as np\n\n# Create an array of all zeros\np = np.zeros((3,3)) \nprint(p) \n\n# Create an array of all ones\nq = np.ones((2,2)) \nprint(q)\n\n# Create a constant array\nr = np.full((2,2), 4) \nprint(r) \n\n# Create a 2x2 identity matrix\ns = np.eye(4) \nprint(s) \n\n# Create an array filled with random values\nt = np.random.random((3,3))\nprint(t)\n```", "```py\n[[0\\. 0\\. 0.]\n [0\\. 0\\. 0.]\n [0\\. 0\\. 0.]]\n\n[[1\\. 1.]\n [1\\. 1.]]\n\n[[4 4]\n [4 4]]\n\n[[1\\. 0\\. 0\\. 0.]\n [0\\. 1\\. 0\\. 0.]\n [0\\. 0\\. 1\\. 0.]\n [0\\. 0\\. 0\\. 1.]]\n\n[[0.16681892 0.00398631 0.61954178]\n [0.52461924 0.30234715 0.58848138]\n [0.75172385 0.17752708 0.12665832]]\n```", "```py\n# Creating an array using arange()\nimport numpy as np\na = np.arange(1,11)\n\nprint(type(a))\nprint(a.dtype)\n Output: <class 'numpy.ndarray'>\nint64\n```", "```py\nprint(a.shape)\nOutput: (10,)\n```", "```py\na = np.array([[5,6],[7,8]])\nprint(a)\n\nOutput: [[5 6]\n [7 8]]\n```", "```py\nprint(a[0,0])\nOutput: 5\n\nprint(a[0,1])\nOutput: 6\n\nprinta([1,0])\nOutput: 7\n\nprinta([1,1])\nOutput: 8\n\n```", "```py\nprint(np.float64(21))\nOutput: 21.0\n\nprint(np.int8(21.0))\nOutput: 42\n\nprint(np.bool(21))\nOutput: True\n\nprint(np.bool(0))\nOutput: False\n\nprint(np.bool(21.0))\nOutput: True\n\nprint(np.float(True))\nOutput: 1.0\n\nprint(np.float(False))\nOutput: 0.0\n```", "```py\narr=np.arange(1,11, dtype= np.float32)\nprint(arr)\n Output:  \n[ 1\\. 2\\. 3\\. 4\\. 5\\. 6\\. 7\\. 8\\. 9\\. 10.]\n```", "```py\nnp.int(42.0 + 1.j)\n```", "```py\nc= complex(42, 1)\nprint(c)\n\nOutput: (42+1j)\n\nprint(c.real,c.imag)\n Output: 42.0 1.0\n```", "```py\n# Creating an array\nimport numpy as np\na = np.array([2,4,6,8,10])\n\nprint(a.dtype)\nOutput: 'int64'\n```", "```py\nprint(a.dtype.itemsize)\nOutput:8\n```", "```py\n# Create numpy array using arange() function\nvar1=np.arange(1,11, dtype='f')\nprint(var1)\n\nOutput:\n[ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]\n```", "```py\nprint(np.arange(1,6, dtype='D'))\n\nOutput:\n[1.+0.j, 2.+0.j, 3.+0.j, 4.+0.j, 5.+0.j]\n```", "```py\nprint(np.dtype(float))\nOutput: float64\n```", "```py\nprint(np.dtype('f'))\nOutput: float32\n```", "```py\nprint(np.dtype('d'))\nOutput: float64\n```", "```py\nprint(np.dtype('f8'))\nOutput: float64\n```", "```py\n# Create numpy array \nvar2=np.array([1,2,3],dtype='float64')\n\nprint(var2.dtype.char)\n\nOutput: 'd'\n```", "```py\nprint(var2.dtype.type)\n\nOutput: <class 'numpy.float64'>\n```", "```py\n# Create an array\narr = np.arange(12)\nprint(arr)\n Output: [ 0  1  2  3  4  5  6  7  8  9 10 11]\n\n# Reshape the array dimension\nnew_arr=arr.reshape(4,3)\n\nprint(new_arr)\n\nOutput: [[ 0,  1,  2],\n               [ 3,  4,  5],\n               [ 6,  7,  8],\n               [ 9, 10, 11]]\n\n# Reshape the array dimension\nnew_arr2=arr.reshape(3,4)\n\nprint(new_arr2)\n\nOutput:\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n```", "```py\n# Create an array\narr=np.arange(1,10).reshape(3,3)\nprint(arr)\n\nOutput: \n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\nprint(arr.flatten())\n\nOutput: \n[1 2 3 4 5 6 7 8 9]\n```", "```py\nprint(arr.ravel())\n Output: \n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n# Transpose the matrix\nprint(arr.transpose())\n Output:\n[[1 4 7]\n [2 5 8]\n [3 6 9]]\n```", "```py\n# resize the matrix\narr.resize(1,9)\nprint(arr)\n\nOutput:[[1 2 3 4 5 6 7 8 9]]\n```", "```py\narr1 = np.arange(1,10).reshape(3,3)\nprint(arr1)\n\nOutput: [[1 2 3]\n [4 5 6]\n [7 8 9]]\n```", "```py\narr2 = 2*arr1\nprint(arr2)\n\nOutput: [[ 2 4 6]\n [ 8 10 12]\n [14 16 18]]\n```", "```py\n# Horizontal Stacking\narr3=np.hstack((arr1, arr2))\nprint(arr3)\n\nOutput: [[ 1 2 3 2 4 6]\n [ 4 5 6 8 10 12]\n [ 7 8 9 14 16 18]]\n```", "```py\n# Horizontal stacking using concatenate() function\narr4=np.concatenate((arr1, arr2), axis=1)\nprint(arr4)\n\nOutput: [[ 1 2 3 2 4 6]\n [ 4 5 6 8 10 12]\n [ 7 8 9 14 16 18]]\n```", "```py\n# Vertical stacking\narr5=np.vstack((arr1, arr2))\nprint(arr5)\n\nOutput: [[ 1 2 3]\n [ 4 5 6]\n [ 7 8 9]\n [ 2 4 6]\n [ 8 10 12]\n [14 16 18]]\n```", "```py\narr6=np.concatenate((arr1, arr2), axis=0) \nprint(arr6)\n\nOutput: [[ 1 2 3]\n [ 4 5 6]\n [ 7 8 9]\n [ 2 4 6]\n [ 8 10 12]\n [14 16 18]]\n\n```", "```py\narr7=np.dstack((arr1, arr2))\nprint(arr7)\n\nOutput: [[[ 1 2]\n  [ 2 4]\n  [ 3 6]]\n\n [[ 4 8]\n  [ 5 10]\n  [ 6 12]]\n\n [[ 7 14]\n  [ 8 16]\n  [ 9 18]]]\n```", "```py\n# Create 1-D array\narr1 = np.arange(4,7) \nprint(arr1)\n\nOutput: [4, 5, 6]\n```", "```py\n# Create 1-D array\narr2 = 2 * arr1\nprint(arr2)\n\nOutput: [ 8, 10, 12]\n```", "```py\n# Create column stack\narr_col_stack=np.column_stack((arr1,arr2))\nprint(arr_col_stack)\n\nOutput: [[ 4 8]\n [ 5 10]\n [ 6 12]]\n```", "```py\n# Create row stack\narr_row_stack = np.row_stack((arr1,arr2)) \nprint(arr_row_stack)\n\nOutput: [[ 4 5 6]\n [ 8 10 12]]\n```", "```py\n# Create an array\narr=np.arange(1,10).reshape(3,3)\nprint(arr)\n\nOutput: \n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\n# Peroform horizontal splitting\narr_hor_split=np.hsplit(arr, 3)\n\nprint(arr_hor_split)\n\nOutput: [array([[1],\n       [4],\n       [7]]), array([[2],\n       [5],\n       [8]]), array([[3],\n       [6],\n       [9]])]\n\n```", "```py\n# vertical split\narr_ver_split=np.vsplit(arr, 3)\n\nprint(arr_ver_split)\n\nOutput: [array([[1, 2, 3]]), array([[4, 5, 6]]), array([[7, 8, 9]])]\n```", "```py\n# split with axis=0\narr_split=np.split(arr,3,axis=0)\n\nprint(arr_split)\n\nOutput: [array([[1, 2, 3]]), array([[4, 5, 6]]), array([[7, 8, 9]])]\n\n# split with axis=1\narr_split = np.split(arr,3,axis=1)\n\nOutput:\n[array([[1],\n        [4],\n        [7]]), array([[2],\n        [5],\n        [8]]), array([[3],\n        [6],\n        [9]])]\n```", "```py\n# Create an array\narr=np.arange(1,10).reshape(3,3)\nprint(\"Integer Array:\",arr)\n\n# Change datatype of array\narr=arr.astype(float)\n\n# print array\nprint(\"Float Array:\", arr)\n\n# Check new data type of array\nprint(\"Changed Datatype:\", arr.dtype)\n```", "```py\n# Change datatype of array\narr=arr.astype(float)\n\n# Check new data type of array\nprint(arr.dtype)\n\nOutput: float64\n```", "```py\n# Create an array\narr=np.arange(1,10)\n\n# Convert NumPy array to Python List\nlist1=arr.tolist()\nprint(list1)\n\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n# Create NumPy Array\narr = np.arange(1,5).reshape(2,2)\nprint(arr)\n\nOutput: [[1, 2],\n[3, 4]]\n```", "```py\n# Create no copy only assignment\narr_no_copy=arr\n\n# Create Deep Copy\narr_copy=arr.copy()\n\n# Create shallow copy using View\narr_view=arr.view()\nprint(\"Original Array: \",id(arr))\nprint(\"Assignment: \",id(arr_no_copy))\nprint(\"Deep Copy: \",id(arr_copy))\nprint(\"Shallow Copy(View): \",id(arr_view))\n\nOutput: Original Array:  140426327484256\nAssignment:  140426327484256\nDeep Copy:  140426327483856\nShallow Copy(View):  140426327484496\n```", "```py\n# Update the values of original array\narr[1]=[99,89]\n\n# Check values of array view\nprint(\"View Array:\\n\", arr_view)\n\n# Check values of array copy\nprint(\"Copied Array:\\n\", arr_copy)\n\nOutput: \nView Array:\n [[ 1 2]\n [99 89]]\nCopied Array:\n [[1 2]\n [3 4]]\n```", "```py\n# Create NumPy Array\narr = np.arange(0,10)\nprint(arr)\n\nOutput: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nprint(arr[3:6])\nOutput: [3, 4, 5]\n```", "```py\nprint(arr[3:])\nOutput: array([3, 4, 5, 6, 7, 8, 9])\n```", "```py\nprint(arr[-3:])\nOutput: array([7, 8, 9])\n```", "```py\nprint(arr[2:7:2])\nOutput: array([2, 4,6])\n```", "```py\n# Create NumPy Array\narr = np.arange(21,41,2)\nprint(\"Orignial Array:\\n\",arr)\n\n# Boolean Indexing\nprint(\"After Boolean Condition:\",arr[arr>30])\n Output: Orignial Array:\n [21 23 25 27 29 31 33 35 37 39]\nAfter Boolean Condition: [31 33 35 37 39]\n```", "```py\n# Create NumPy Array\narr = np.arange(1,21).reshape(5,4)\nprint(\"Orignial Array:\\n\",arr)\n\n# Selecting 2nd and 3rd row\nindices = [1,2]\nprint(\"Selected 1st and 2nd Row:\\n\", arr[indices])\n\n# Selecting 3nd and 4th row\nindices = [2,3]\nprint(\"Selected 3rd and 4th Row:\\n\", arr[indices])\n\nOutput:\n\nOrignial Array:\n [[ 1 2 3 4]\n [ 5 6 7 8]\n [ 9 10 11 12]\n [13 14 15 16]\n [17 18 19 20]]\nSelected 1st and 2nd Row:\n [[ 5 6 7 8]\n [ 9 10 11 12]]\nSelected 3rd and 4th Row:\n [[ 9 10 11 12]\n [13 14 15 16]]\n```", "```py\n# Create row and column indices\nrow = np.array([1, 2])\ncol = np.array([2, 3])\n\nprint(\"Selected Sub-Array:\", arr[row, col])\n\nOutput:\nSelected Sub-Array: [ 7 12]\n```", "```py\n# Create NumPy Array\narr1 = np.arange(1,5).reshape(2,2) \nprint(arr1)\n\nOutput: [[1 2]\n [3 4]]\n\n# Create another NumPy Array\narr2 = np.arange(5,9).reshape(2,2) \nprint(arr2)Output: [[5 6]\n [7 8]]\n\n# Add two matrices\nprint(arr1+arr2)\n\nOutput: [[ 6 8]\n [10 12]]\n```", "```py\n# Multiply two matrices\nprint(arr1*arr2)\n\nOutput: [[ 5 12]\n [21 32]]\n```", "```py\n# Add a scaler value\nprint(arr1 + 3)\n\nOutput: [[4 5]\n [6 7]]\n\n# Multiply with a scalar value\nprint(arr1 * 3)\n\nOutput: [[ 3 6]\n [ 9 12]]\n```", "```py\n# Import pandas library\nimport pandas as pd\n\n# Create empty DataFrame\ndf = pd.DataFrame()\n\n# Header of dataframe. \ndf.head()\n\nOutput:\n_ \n```", "```py\n# Create dictionary of list\ndata = {'Name': ['Vijay', 'Sundar', 'Satyam', 'Indira'], 'Age': [23, 45, 46, 52 ]}  \n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data)\n\n# Header of dataframe.\ndf.head()\n\nOutput:\n  Name Age0 Vijay 231 Sundar 45\n2 Satyam 46\n3 Indira 52\n```", "```py\n# Pandas DataFrame by lists of dicts. \n# Initialise data to lists. \ndata =[ {'Name': 'Vijay', 'Age': 23},{'Name': 'Sundar', 'Age': 25},{'Name': 'Shankar', 'Age': 26}]\n\n# Creates DataFrame. \ndf = pd.DataFrame(data,columns=['Name','Age']) \n\n# Print dataframe header \ndf.head() \n```", "```py\n# Creating DataFrame using list of tuples.\ndata = [('Vijay', 23),( 'Sundar', 45), ('Satyam', 46), ('Indira',52)]\n\n# Create dataframe\ndf = pd.DataFrame(data, columns=['Name','Age'])\n\n# Print dataframe header\ndf.head() \n\nOutput:\n  Name Age\n0 Vijay 23\n1 Sundar 25\n2 Shankar 26\n```", "```py\n# Creating Pandas Series using Dictionary\ndict1 = {0 : 'Ajay', 1 : 'Jay', 2 : 'Vijay'}\n\n# Create Pandas Series\nseries = pd.Series(dict1)\n\n# Show series\nseries\n\nOutput: 0     Ajay\n1      Jay\n2    Vijay\ndtype: object\n```", "```py\n#Load Pandas and NumPy libraries\nimport pandas as pd\nimport numpy as np\n\n# Create NumPy array\narr = np.array([51,65,48,59, 68])\n\n# Create Pandas Series\nseries = pd.Series(arr)\nseries\n\nOutput: 0    51\n1    65\n2    48\n3    59\n4    68\ndtype: int64\n```", "```py\n# load Pandas and NumPy\nimport pandas as pd\nimport numpy as np\n\n# Create Pandas Series\nseries = pd.Series(10, index=[0, 1, 2, 3, 4, 5])\nseries\n\nOutput: 0    10\n1    10\n2    10\n3    10\n4    10\n5    10\ndtype: int64\n```", "```py\n# Import pandas\nimport pandas as pd\n\n# Load data using read_csv()\ndf = pd.read_csv(\"WHO_first9cols.csv\")\n\n# Show initial 5 records\ndf.head()\n```", "```py\n# Select a series\ncountry_series=df['Country']\n\n# check datatype of series\ntype(country_series)\n\nOutput:\npandas.core.series.Series\n```", "```py\n# Show the shape of DataFrame\nprint(\"Shape:\", df.shape)\n\nOutput: Shape: (202, 9)\n```", "```py\n# Check the column list of DataFrame\nprint(\"List of Columns:\", df.columns)\n\nOutput:List of Columns: Index(['Country', 'CountryID', 'Continent', 'Adolescent fertility rate (%)',\n       'Adult literacy rate (%)',\n       'Gross national income per capita (PPP international $)',\n       'Net primary school enrolment ratio female (%)',\n       'Net primary school enrolment ratio male (%)',\n       'Population (in thousands) total'],\n       dtype='object')\n```", "```py\n# Show the datatypes of columns\nprint(\"Data types:\", df.dtypes)\n\nOutput: Data types: Country                                                    object\n            CountryID                                                   int64\n            Continent                                                   int64\n            Adolescent fertility rate (%)                             float64\n            Adult literacy rate (%)                                   float64\n            Gross national income per capita (PPP international $)    float64\n            Net primary school enrolment ratio female (%)             float64\n            Net primary school enrolment ratio male (%)               float64\n            Population (in thousands) total                           float64\n            dtype: object\n```", "```py\n# Pandas Series Slicing\ncountry_series[-5:]\n\nOutput:\n197               Vietnam\n198    West Bank and Gaza\n199                 Yemen\n200                Zambia\n201              Zimbabwe\nName: Country, dtype: object\n```", "```py\n$ pip3 install Quandl\n```", "```py\nimport quandl\nsunspots = quandl.get(\"SIDC/SUNSPOTS_A\")\n```", "```py\nsunspots.head()\n```", "```py\nsunspots.tail()\n```", "```py\n# Select columns\nsunspots_filtered=sunspots[['Yearly Mean Total Sunspot Number','Definitive/Provisional Indicator']]\n\n# Show top 5 records\nsunspots_filtered.head()\n```", "```py\n# Select rows using index\nsunspots[\"20020101\": \"20131231\"]\n```", "```py\n# Boolean Filter\nsunspots[sunspots['Yearly Mean Total Sunspot Number'] > sunspots['Yearly Mean Total Sunspot Number'].mean()]\n```", "```py\n# Describe the dataset\ndf.describe()\n```", "```py\n# Count number of observation\ndf.count()\n```", "```py\n# Compute median of all the columns\ndf.median()\n```", "```py\n# Compute the standard deviation of all the columns\ndf.std()\n```", "```py\n# Group By DataFrame on the basis of Continent column\ndf.groupby('Continent').mean()\n```", "```py\n# Group By DataFrame on the basis of continent and select adult literacy rate(%)\ndf.groupby('Continent').mean()['Adult literacy rate (%)']\n```", "```py\n# Import pandas\nimport pandas as pd\n\n# Load data using read_csv()\ndest = pd.read_csv(\"dest.csv\")\n\n# Show DataFrame\ndest.head()\n```", "```py\n# Load data using read_csv()\ntips = pd.read_csv(\"tips.csv\")\n\n# Show DataFrame\ntips.head()\n```", "```py\n# Join DataFrames using Inner Join\ndf_inner= pd.merge(dest, tips, on='EmpNr', how='inner')\ndf_inner.head()\n```", "```py\n# Join DataFrames using Outer Join\ndf_outer= pd.merge(dest, tips, on='EmpNr', how='outer')\ndf_outer.head()\n```", "```py\n# Join DataFrames using Right Outer Join\ndf_right= pd.merge(dest, tips, on='EmpNr', how='right')\ndf_right.head()\n```", "```py\n# Join DataFrames using Left Outer Join\ndf_left= pd.merge(dest, tips, on='EmpNr', how='left')\ndf_left.head()\n```", "```py\n# Count missing values in DataFrame\npd.isnull(df).sum()\n```", "```py\ndf.isnull().sum()\n```", "```py\n# Drop all the missing values\ndf.dropna(inplace=True)\n\ndf.info()\n```", "```py\n# Fill missing values with 0\ndf.fillna(0,inplace=True)\n\ndf.info()\n```", "```py\n# Import pandas\nimport pandas as pd\n\n# Load data using read_csv()\npurchase = pd.read_csv(\"purchase.csv\")\n\n# Show initial 10 records\npurchase.head(10)\n```", "```py\n# Summarise dataframe using pivot table\npd.pivot_table(purchase,values='Number', index=['Weather',],\n                    columns=['Food'], aggfunc=np.sum)\n```", "```py\npd.date_range('01-01-2000', periods=45, freq='D')\n\nOutput: DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04',\n               '2000-01-05', '2000-01-06', '2000-01-07', '2000-01-08',\n               '2000-01-09', '2000-01-10', '2000-01-11', '2000-01-12',\n               '2000-01-13', '2000-01-14', '2000-01-15', '2000-01-16',\n               '2000-01-17', '2000-01-18', '2000-01-19', '2000-01-20',\n               '2000-01-21', '2000-01-22', '2000-01-23', '2000-01-24',\n               '2000-01-25', '2000-01-26', '2000-01-27', '2000-01-28',\n               '2000-01-29', '2000-01-30', '2000-01-31', '2000-02-01',\n               '2000-02-02', '2000-02-03', '2000-02-04', '2000-02-05',\n               '2000-02-06', '2000-02-07', '2000-02-08', '2000-02-09',\n               '2000-02-10', '2000-02-11', '2000-02-12', '2000-02-13',\n               '2000-02-14'],\n              dtype='datetime64[ns]', freq='D')\n```", "```py\n# Date range function\npd.date_range('01-01-2000', periods=45, freq='D')\n```", "```py\n# Convert argument to datetime\npd.to_datetime('1/1/1970')\n\nOutput:  Timestamp('1970-01-01 00:00:00')\n```", "```py\n# Convert argument to datetime in specified format\npd.to_datetime(['20200101', '20200102'], format='%Y%m%d')\n\nOutput: DatetimeIndex(['2020-01-01', '2020-01-02'], dtype='datetime64[ns]', freq=None)\n```", "```py\n# Value Error\npd.to_datetime(['20200101', 'not a date'])\n\nOutput: ValueError: ('Unknown string format:', 'not a date')\n\n# Handle value error\npd.to_datetime(['20200101', 'not a date'], errors='coerce')\n\nOutput: DatetimeIndex(['2020-01-01', 'NaT'], dtype='datetime64[ns]', freq=None)\n```"]