- en: Jupyter Python Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter was originally IPython, an interactive version of Python to be used
    as a development environment. As such, most of the features of Python are available
    to you when developing your Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Python scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python dataset access (from a library)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python random numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Python in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We must open a Python section of our Notebook to use Python coding. So, start
    your Notebook, and then in the upper-right menu, select Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c47da8b7-1269-47b6-9750-be5bdea4b51e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a Python window to work in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1bd59aa-a937-47e9-8f25-82c351e44d9e.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned in the previous chapter, the new window shows an empty cell so
    that you can enter Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give the new work area a name, `Learning Jupyter 5, Chapter 2`. Autosave
    should be on (as you can see next to the title). With an accurate name, we can
    find this section again easily from the Notebook home page. If you select your
    browser''s Home tab and refresh it, you will see this new window name being displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3ef1515-d01b-4f63-9445-b35fb0e27a88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that it has an Notebook icon versus a folder icon. The extension that''s
    automatically assigned is `.ipynb` (Python Notebook). And, since the item is in
    a browser in a Jupyter environment, it is marked as running. There is a file by
    that name in your directory on the disk as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fdd1af0-d3a8-4943-9825-0e202a1c0363.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you open the `.ipynb` file in a text editor, you will see the basic contents
    of a Jupyter node (as mentioned in the *Notebook structure* section in [Chapter
    1](5b555482-7a8c-4327-8d4a-b7223db52388.xhtml), *Introduction to Jupyter*). We
    have one empty cell and metadata about the Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now enter Python coding into the cells. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in some Python in the first cell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add another cell to the end (using the Insert Cell Above or Insert Cell Below
    menu command):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the second cell, enter the Python code that references the variables
    from the first cell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then have this display:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/15352f6d-8b7f-4591-a2f9-fa80053525c8.png)'
  prefs: []
  type: TYPE_IMG
- en: It's important to note that Jupyter color codes your Python (just as a decent
    editor would), and that we have these empty braces to the left of each code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute Run All, the results are displayed inline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5e9e5e1-00b3-4efb-abd8-9d3e20b8bcf0.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have the braces filled in with cell numbers, and the output of cells
    is appended to the bottom of each cell. It's important to note that cell two was
    able to reference variables that were declared in cell one.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we either wait for autosave to kick in or hit the save icon (the leftmost
    icon of a diskette), we will update the `.pynb` file on the disk with our results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It's interesting that Jupyter keeps track of the output last generated in the
    saved version of the file. You can also clear the output using the Cell| All Ouput
    | Clear command.
  prefs: []
  type: TYPE_NORMAL
- en: If you were then to rerun your cells (using Cell | Run All), the output would
    be regenerated (and saved via autosave). The cell numbering is incremented if
    you do this – Jupyter is keeping track of the latest version of each cell.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if you were to close the browser tab, refresh the display in the
    Home tab, find the new item we created (`Learning Jupyter 5, Chapter 2.pynb`)
    and click on it, the new tab (as created previously) will be displayed, showing
    the outputs that we generated when we last run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the server command-line window (where the Jupyter service is running),
    you will see a list of the actions that we have made during our session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0a4138d-c1ea-4ed7-beba-0c1def638dac.png)'
  prefs: []
  type: TYPE_IMG
- en: The logging entries are at a high level. There may be a way to increase the
    logging level if there is some difficulty being encountered.
  prefs: []
  type: TYPE_NORMAL
- en: Python data access in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how Python works in Jupyter, including the underlying
    encoding, how does Python access a large dataset of work in Jupyter?
  prefs: []
  type: TYPE_NORMAL
- en: I started another view for pandas, using Python data access as the name. From
    here, we will read in a large dataset and compute some standard statistics on
    the data. We are interested in seeing how we use pandas in Jupyter, how well the
    script performs, and what information is stored in the metadata (especially if
    it is a larger dataset).
  prefs: []
  type: TYPE_NORMAL
- en: Our script accesses the `iris` dataset that is built-in to one of the Python
    packages. All we are looking to do is read in a slightly large number of items
    and calculate some basic operations on the dataset. We are really interested to
    see how much of the data is cached in the `.pynb` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'I broke these steps into a couple of cells in Jupyter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04922030-dd2e-46a9-9f64-02eae1c0e6a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, run the cells (using Cell | Run All) and we will get the following display.
    The only difference is the last out line where our values are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67517812-7148-4a11-8a1c-f2c20abe383d.png)'
  prefs: []
  type: TYPE_IMG
- en: It seemed to take longer to load the library (the first time I ran the script)
    than to read the data and calculate the statistics.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look in the `.pynb` file for this Notebook, we can see that none of the
    data is cached in the `.pynb` file. We simply have code references to the library,
    our code, and the output from when we last calculated the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Python pandas in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most widely used features of Python is pandas. The pandas are built-in
    libraries of data analysis packages that can be used freely. In this example,
    we will develop a Python script that uses pandas to see if there is any affect
    of using them in Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: I am using the Titanic dataset from [https://www.kaggle.com/c/titanic/data](https://www.kaggle.com/c/titanic/data).
    I am sure that the same data is available from a variety of sources.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you have to sign up for **Kaggle** in order to download the data.
    It's free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our Python script that we want to run in Jupyter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The result is that we calculate the survival rates of the passengers based on
    sex.
  prefs: []
  type: TYPE_NORMAL
- en: We create a new Notebook, enter the script into the appropriate cells, include
    adding displays of calculated data at each point, and produce our results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our Notebook laid out, where we added displays of calculated data at
    each cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/662c6bd0-e8af-4ab8-8035-7adf3a2e1f88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When I ran this script, I had two problems:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, it is common to use a backslash (`\`) to separate parts of a filename.
    However, this coding uses the backslash as a special character. So, I had to change
    over to using a forward slash (`/`) in my `.csv` file path.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset column names are taken directly from the file and are case-sensitive.
    In this case, I was originally using the `sex` field in my script, but in the
    `.csv` file, the column is named `Sex`. Similarly, I had to change `survived` to
    `Survived`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final script and results look like this when we run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7051258-a2c7-4cb3-b5ad-0310a852d356.png)'
  prefs: []
  type: TYPE_IMG
- en: I have used the `head()` function to display the first few lines of the dataset.
    It is interesting the amount of detail that is available for all of the passengers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down, you will see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62b99992-e518-4740-a37b-8c4f95af9d6d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that 74% of the survivors were women versus just 19% men. I would
    like to think that chivalry is not dead.
  prefs: []
  type: TYPE_NORMAL
- en: It's curious that the results do not total to 100%. However, like every other
    dataset I have seen, there is missing and/or inaccurate data present.
  prefs: []
  type: TYPE_NORMAL
- en: Python graphics in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do Python graphics work in Jupyter?
  prefs: []
  type: TYPE_NORMAL
- en: I started another view for this named Python graphic*s* so as to distinguish
    the work.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to build a sample dataset of baby names and the number of births
    in a year of that name, we could then plot the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python coding is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps for the script are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the graphics library (and data library) we need
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define our data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the data into a format that allows for an easy graphical display
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We would expect a resultant graph of the number of births by baby name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking the previous script and placing it into cells of our Jupyter node, we
    get something that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5798f7b5-1fec-4c5e-820e-d24a2bf3c82b.png)'
  prefs: []
  type: TYPE_IMG
- en: I have broken the script into different cells for easier readability. Having
    different cells also allows you to develop the script easily, step-by-step, where
    you can display the values computed so far to validate your results. I have done
    this in most of the cells by displaying the dataset and dataframe at the bottom
    of those cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we run this script (Cell | Run All), we can see the results at each step
    being displayed as the script progresses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/312b8b3f-503f-449a-91ef-b5b134eefba4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And finally, we can see our plot of the births:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/936fed00-074c-40d3-9a76-4c9a7a4fea33.png)'
  prefs: []
  type: TYPE_IMG
- en: I was curious about what metadata was stored for this script. Looking into the
    `.ipynb` file, you can see the expected value for the formula cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tabular data display of the dataframe is stored as HTML convenient:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The graphic output cell is stored like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Where the `image/png` tag contains a large hex digit string representation of
    the graphical image displayed on screen (I abbreviated the display in the coding
    that's shown). So, the actual generated image is stored in the metadata for the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: So, rather than a cache, Jupyter is remembering the output from when each cell
    was last executed.
  prefs: []
  type: TYPE_NORMAL
- en: Python random numbers in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many analyses, we are interested in calculating repeatable results. However,
    much of this analysis relies on some random numbers being used. In Python, you
    can set `seed` for the random number generator to achieve repeatable results with
    the `random.seed()` function.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we simulate rolling a pair of dice and look at the outcome.
    We would expect the average total of the two dice to be six, which is the half-way
    point between the faces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script we are using is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the script in Jupyter and execute it, we will get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8691328d-6cb5-48d2-a554-b1a59a303926.png)'
  prefs: []
  type: TYPE_IMG
- en: I added some more statistics. I'm not sure that I would have counted on such
    a high standard deviation. If we increased the number of `samples`, this would
    decrease.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting graph was opened in a new window, much as it would if you ran
    this script in another Python development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b018639-3a67-454b-81c1-a47a5aa9c928.png)'
  prefs: []
  type: TYPE_IMG
- en: The graphic looks a little more jagged than I would have expected for a thousand
    samples.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we walked through a simple Notebook and the underlying structure.
    Then, we saw an example of using pandas and looked at a graphics example. Finally,
    we looked at an example using random numbers in a Python script.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about R scripting in a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
