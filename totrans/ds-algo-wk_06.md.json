["```py\n# source_code/6/fahrenheit_celsius.py\nimport numpy as np\nfrom scipy.linalg import lstsq\n\n#temperature data\nfahrenheit = np.array([5,14,23,32,41,50])\ncelsius = np.array([-15,-10,-5,0,5,10])\n\nM = fahrenheit[:, np.newaxis]**[0, 1]\nmodel, _, _, _ = lstsq(M,celsius)\nprint \"Intercept =\", model[0]\nprint \"fahrenheit =\", model[1] \n```", "```py\n$ python fahrenheit_celsius.py Intercept = -17.777777777777782\nfahrenheit = 0.5555555555555558\n```", "```py\n# source_code/6/weight_prediction.py\nimport numpy as np\nfrom scipy.linalg import lstsq\n\nheight = np.array([180,174,184,168,178])\nweight = np.array([75,71,83,63,70])\n\nM = height[:, np.newaxis]**[0, 1]\nmodel, _, _, _ = lstsq(M,weight)\nprint \"Intercept =\", model[0]\nprint \"height coefficient =\", model[1] \n```", "```py\n$ python weight_prediction.py Intercept = -127.68817204301082\nheight coefficient = 1.1317204301075274\n```", "```py\n# source_code/6/regression.py\n# Linear regression program to learn a basic linear model.\nimport math\nimport sys\nsys.path.append('../common')\nimport common # noqa\n\n# Calculate the gradient by which the parameter should be updated.\ndef linear_gradient(data, old_parameter):\n    gradient = [0.0, 0.0]\n    for (x, y) in data:\n        term = float(y) - old_parameter[0] - old_parameter[1] * float(x)\n        gradient[0] += term\n        gradient[1] += term * float(x)\n    return gradient\n\n# This function will apply gradient descent algorithm\n# to learn the linear model.\ndef learn_linear_parameter(data, learning_rate,\n acceptable_error, LIMIT):\n    parameter = [1.0, 1.0]\n    old_parameter = [1.0, 1.0]\n    for i in range(0, LIMIT):\n        gradient = linear_gradient(data, old_parameter)\n        # Update the parameter with the Least Mean Squares rule.\n        parameter[0] = old_parameter[0] + learning_rate * gradient[0]\n        parameter[1] = old_parameter[1] + learning_rate * gradient[1]\n        # Calculate the error between the two parameters to compare with\n        # the permissible error in order to determine if the calculation\n        # is sufficiently accurate.\n        if abs(parameter[0] - old_parameter[0]) <= acceptable_error\n        and abs(parameter[1] - old_parameter[1]) <= acceptable_error:\n            return parameter\n        old_parameter[0] = parameter[0]\n        old_parameter[1] = parameter[1]\n    return parameter\n\n# Calculate the y coordinate based on the linear model predicted.\ndef predict_unknown(data, linear_parameter):\n    for (x, y) in data:\n        print(x, linear_parameter[0] + linear_parameter[1] * float(x))\n\n# Program start\ncsv_file_name = sys.argv[1]\n# The maximum number of the iterations in the batch learning algorithm.\nLIMIT = 100\n# Suitable parameters chosen for the problem given.\nlearning_rate = 0.0000001\nacceptable_error = 0.001\n\n(heading, complete_data, incomplete_data,\n enquired_column) = common.csv_file_to_ordered_data(csv_file_name)\nlinear_parameter = learn_linear_parameter(\n    complete_data, learning_rate, acceptable_error, LIMIT)\nprint(\"Linear model:\\n(p0,p1)=\" + str(linear_parameter) + \"\\n\")\nprint(\"Unknowns based on the linear model:\")\npredict_unknown(incomplete_data, linear_parameter)\n```", "```py\n# source_code/6/height_weight.csv\nheight,weight\n180,75 \n174,71 \n184,83 \n168,63 \n178,70 \n172,? \n```", "```py\n$ python regression.py height_weight.csv Linear model:\n(p0,p1)=[0.9966468959362077, 0.4096393414704317]\n\nUnknowns based on the linear model:\n('172', 71.45461362885045)  \n```", "```py\nsource_code/6/flight_time.py import numpy as np\nfrom scipy.linalg import lstsq\n\ndistance = np.array([365,1462,1285,1096,517,1686,932,1160])\ntime = np.array([1.167,2.333,2.250,2.083,2.250,2.833,1.917,2.167])\n\nM = distance[:, np.newaxis]**[0, 1]\nmodel, _, _, _ = lstsq(M,time)\nprint \"Intercept =\", model[0]\nprint \"distance coefficient =\", model[1]\n```", "```py\n$ python flight_time.py Intercept = 1.2335890147536381\ndistance coefficient = 0.0008386790405704925\n```", "```py\nsource_code/6/speed_distance.py import numpy as np\nfrom scipy.linalg import lstsq\n\ndistance = np.array([38098, 85692, 152220])\nsquared_speed = np.array([160000,360000,640000])\n\nM = distance[:, np.newaxis]**[0, 1]\nmodel, _, _, _ = lstsq(M,squared_speed)\nprint \"Intercept =\", model[0]\nprint \"distance coefficient =\", model[1]\n```", "```py\n$ python speed_distance.py Intercept = -317.7078806050511\ndistance coefficient = 4.206199498720391\n```", "```py\nsource_code/6/cloud_storage.py\nimport numpy as np\nfrom scipy.linalg import lstsq\n\nmonth = np.array([1,2,3,4,5])\nbill = np.array([120.0,131.2,142.1,152.9,164.3])\n\nM = month[:, np.newaxis]**[0, 1]\nmodel, _, _, _ = lstsq(M,bill)\nprint \"Intercept =\", model[0]\nprint \"month_data =\", model[1]\n```", "```py\n$ python cloud_storage.py Intercept = 109.00999999999992\nmonth_data = 11.030000000000008\n```", "```py\nIntercept = 32.000000000000014\ncelsius = 1.7999999999999998\n```"]