- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist you in performing the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Introduction to Data Science and Data Preprocessing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Pre-Processing Using the Bank Marketing Subscription Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform various pre-processing tasks on the`Bank Marketing Subscription`
    dataset. We''ll also be splitting the dataset into training and testing data.
    Follow these steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Jupyter notebook and add a new cell to import the pandas library and
    load the dataset into a pandas dataframe. To do so, you first need to import the
    library, and then use the `pd.read_csv()` function, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find the number of rows and columns in the dataset, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.60: Number of rows and columns in the dataset](img/C13322_01_61.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.60: Number of rows and columns in the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To print the list of all columns, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.61: List of columns present in the dataset](img/C13322_01_62.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.61: List of columns present in the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To overview the basic statistics of each column, such as the count, mean, median,
    standard deviation, minimum value, maximum value, and so on, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.62: Basic statistics of each column](img/C13322_01_63.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.62: Basic statistics of each column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To print the basic information of each column, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.63: Basic information of each column'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_64.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.63: Basic information of each column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the preceding figure, you can see that none of the columns contains any null
    values. Also, the type of each column is provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s check for missing values and the type of each feature. Add the following
    code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have a look at the output for this in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.64: Information of each column stating the number of null values
    and the data types'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_65.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.64: Information of each column stating the number of null values and
    the data types'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Since we have loaded the dataset into the `data` object, we will remove the
    null values from the dataset. To remove the null values from the dataset, add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have a look at the output for this in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.65: Features of dataset with no null values'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_66.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.65: Features of dataset with no null values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we check the frequency distribution of the `education` column in the dataset.
    Use the `value_counts()` function to implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have a look at the output for this in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.66: Frequency distribution of the education column'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_67.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.66: Frequency distribution of the education column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the preceding figure, we can see that the `education` column of the dataset
    has many categories. We need to reduce the categories for better modeling. To
    check the various categories in the `education` column, we use the `unique()`
    function. Type the following code to implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.67: Various categories of the education column'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_68.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.67: Various categories of the education column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now let''s group the `basic.4y`, `basic.9y`, and `basic.6y` categories together
    and call them `basic`. To do this, we can use the `replace` function from pandas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the list of categories after grouping, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.68: Various categories of the education column'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_69.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.68: Various categories of the education column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the preceding figure, you can see that `basic.9y`, `basic.6y`, and `basic.4y`
    are grouped together as `Basic`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we select and perform a suitable encoding method for the data. Add the
    following code to implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.69: Various columns of the dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_70.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.69: Various columns of the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we define a list with all the names of the categorical features in the
    data. Also, we loop through every variable in the list, getting dummy variable
    encoded output. Add the following code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.70: List of categorical features in the data'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_71.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.70: List of categorical features in the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we neglect the categorical column for which we have done encoding. We''ll
    select only the numerical and encoded categorical columns. Add the code to do
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.71: List of numerical and encoded categorical columns'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_01_72.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.71: List of numerical and encoded categorical columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, we split the data into train and test sets. Add the following code
    to implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.72: Shape of the full, train, and test datasets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_01_73.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.72: Shape of the full, train, and test datasets'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 2: Data Visualization'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 2: Line Plot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list of 6 strings for each month, January through June, and save it
    as x using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list of 6 values for ''`Items Sold`'' that starts at 1000 and increases
    by 200, so the final value is 2000 and save it as y as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot y (''`Items Sold`'') by x (''`Month`'') with a dotted blue line and star
    markers using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the x-axis to ''`Month`'' using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the y-axis to ''`Items Sold`'' as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To set the title to read ''`Items Sold has been Increasing Linearly`'', refer
    to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check out the following screenshot for the resultant output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.33: Line plot of items sold by month'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.33: Line plot of items sold by month'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 3: Bar Plot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list of five strings for `x` containing the names of NBA franchises
    with the most titles using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list of five values for `y` containing values for ''`Titles Won`''
    that correspond with the strings in `x` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place `x` and `y` into a data frame with the column names ''`Team`'' and ''`Titles`'',
    respectively, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To sort the data frame descending by ''Titles'' and save it as df_sorted, refer
    to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: If we sort with `ascending=True`, the plot will have larger values to the right.
    Since we want the larger values on the left, we will be using `ascending=False`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a programmatic title and save it as title by first finding the team with
    the most titles and saving it as the `team_with_most_titles` object using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, retrieve the number of titles for the team with the most titles using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, create a string that reads ''`The Boston Celtics have the most titles
    with 17`'' using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a bar graph to plot the number of titles by team using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the x-axis label to ''`Team`'' using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the y-axis label to ''`Number of Championships`'' using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To prevent the x tick labels from overlapping by rotating them 45 degrees,
    refer to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the title of the plot to the programmatic `title` object we created as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the plot to our current working directory as ''`Titles_by_Team.png`''
    using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the plot using `plt.show()`. To understand this better, check out the
    following output screenshot:![Figure 2.34: The bar plot of the number of titles
    held by an NBA team'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C13322_02_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.34: The bar plot of the number of titles held by an NBA team'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: When we print the plot to the console using `plt.show()`, it appears as intended;
    however, when we open the file we created titled '`Titles_by_Team.png`', we see
    that it crops the x tick labels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following figure displays the bar plot with the cropped x tick labels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.35: ''Titles_by_Team.png'' with x tick labels cropped'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.35: ''Titles_by_Team.png'' with x tick labels cropped'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To fix the cropping issue, add `bbox_inches=''tight''` as an argument inside
    of `plt.savefig()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, when we open the saved '`Titles_by_Team.png`' file from our working directory,
    we see that the x tick labels are not cropped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the following output for the final result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.36: ''Titles_by_Team.png'' without cropped x tick labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.36: ''Titles_by_Team.png'' without cropped x tick labels'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 4: Multiple Plot Types Using Subplots'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the ''`Items_Sold_by_Week.csv`'' file and save it as the `Items_by_Week`
    data frame object using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the ''`Weight_by_Height.csv`'' file and save it as the `Weight_by_Height`
    data frame object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate an array of 100 normally distributed numbers to use as data for the
    histogram and box-and-whisker plots and save it as y using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To generate a figure with six subplots organized in three rows and two columns
    that do not overlap refer to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the respective axes'' titles to match those in Figure 2.32 using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.37: Titled, non-overlapping empty subplots'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.37: Titled, non-overlapping empty subplots'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On the ''`Line`'', ''`Bar`'', and ''`Horizontal Bar`'' axes, plot ''`Items_Sold`''
    by ''`Week`'' from ''`Items_by_Week`'' using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the resultant output in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.38: Line, bar, and horizontal bar plots added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.38: Line, bar, and horizontal bar plots added'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On the ''`Histogram`'' and ''`Box-and-Whisker`'' axes, plot the array of 100
    normally distributed numbers using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The resultant output is displayed here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.39: The histogram and box-and-whisker added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.39: The histogram and box-and-whisker added'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot ''`Weight`'' by ''`Height`'' on the ''`Scatterplot`'' axes from the ''`Weight_by_Height`''
    data frame using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the figure here for the resultant output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.40: Scatterplot added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.40: Scatterplot added'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Label the x- and y-axis for each subplot using `axes[row, column].set_xlabel('X-Axis
    Label')` and `axes[row, column].set_ylabel('Y-Axis Label')`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'See the figure here for the resultant output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.41: X and y axes have been labeled'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_41.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.41: X and y axes have been labeled'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Increase the size of the figure with the `figsize` argument in the subplots
    function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the figure to the current working directory as ''`Six_Subplots`'' using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following figure displays the ''`Six_Subplots.png`'' file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.42: The Six_Subplots.png file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.42: The Six_Subplots.png file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 3: Introduction to Machine Learning via Scikit-Learn'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Generating Predictions and Evaluating the Performance of a Multiple
    Linear Regression Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate predictions on the test data using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.33: A scatterplot of predicted versus actual values from a multiple
    linear regression model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.33: A scatterplot of predicted versus actual values from a multiple
    linear regression model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a much stronger linear correlation between the predicted and actual
    values in the multiple linear regression model (r = 0.93) relative to the simple
    linear regression model (r = 0.62).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To plot the distribution of the residuals, refer to the code here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.34: The distribution of the residuals from a multiple linear regression
    model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.34: The distribution of the residuals from a multiple linear regression
    model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Our residuals are negatively skewed and non-normal, but this is less skewed
    than in the simple linear model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the metrics for mean absolute error, mean squared error, root mean
    squared error, and R-squared, and put them into a DataFrame as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Please refer to the resultant output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.35: Model evaluation metrics from a multiple linear regression model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.35: Model evaluation metrics from a multiple linear regression model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The multiple linear regression model performed better on every metric relative
    to the simple linear regression model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6: Generating Predictions and Evaluating Performance of a Tuned Logistic
    Regression Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate the predicted probabilities of rain using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate the predicted class of rain using `predicted_class = model.predict(X_test)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Evaluate performance using a confusion matrix and save it as a DataFrame using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.36: The confusion matrix from our logistic regression grid search
    model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.36: The confusion matrix from our logistic regression grid search
    model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Nice! We have decreased our number of false positives from 6 to 2\. Additionally,
    our false negatives were lowered from 10 to 4 (see in *Exercise 26*). Be aware
    that results may vary slightly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For further evaluation, print a classification report as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.37: The classification report from our logistic regression grid
    search model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_03_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.37: The classification report from our logistic regression grid search
    model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: By tuning the hyperparameters of the logistic regression model, we were able
    to improve upon a logistic regression model that was already performing very well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7: Generating Predictions and Evaluating the Performance of the SVC
    Grid Search Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract predicted classes of rain using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create and print a confusion matrix using the code here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.38: The confusion matrix from our SVC grid search model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.38: The confusion matrix from our SVC grid search model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Generate and print a classification report as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.39: The classification report from our SVC grid search model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_03_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.39: The classification report from our SVC grid search model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we demonstrated how to tune the hyperparameters of an SVC model using
    grid search.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8: Preparing Data for a Decision Tree Classifier'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `weather.csv` and store it as a DataFrame using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dummy code the `Description` column as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Shuffle `df_dummies` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Split `df_shuffled` into X and y as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Split `X` and `y` into testing and training data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scale `X_train` and `X_test` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 9: Generating Predictions and Evaluating the Performance of a Decision
    Tree Classifier Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate the predicted probabilities of rain using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the predicted classes of rain using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate and print a confusion matrix with the code here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.40: The confusion matrix from our tuned decision tree classifier
    model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.40: The confusion matrix from our tuned decision tree classifier model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print a classification report as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.41: The classification report from our tuned decision tree classifier
    model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_03_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.41: The classification report from our tuned decision tree classifier
    model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There was only one misclassified observation. Thus, by tuning a decision tree
    classifier model on our `weather.csv` dataset, we were able to predict rain (or
    snow) with great accuracy. We can see that the sole driving feature was temperature
    in Celsius. This makes sense due to the way in which decision trees use recursive
    partitioning to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10: Tuning a Random Forest Regressor'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the hyperparameter space as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate the `GridSearchCV` model, optimizing the explained variance using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the grid search model to the training set using the following (note that
    this may take a while):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.42: The output from our tuned random forest regressor grid search
    model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_42.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.42: The output from our tuned random forest regressor grid search
    model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the tuned parameters as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the resultant output below:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.43: The tuned hyperparameters from our random forest regressor grid
    search model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_03_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.43: The tuned hyperparameters from our random forest regressor grid
    search model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 11: Generating Predictions and Evaluating the Performance of a Tuned
    Random Forest Regressor Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate predictions on the test data using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the correlation of predicted and actual values using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.44: A scatterplot of predicted and actual values from our random
    forest regression model with tuned hyperparameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_44.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.44: A scatterplot of predicted and actual values from our random forest
    regression model with tuned hyperparameters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the distribution of residuals as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.45: A histogram of residuals from a random forest regression model
    with'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tuned hyperparameters
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_03_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.45: A histogram of residuals from a random forest regression model
    with tuned hyperparameters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Compute metrics, place them in a DataFrame, and print it using the code here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the resultant output here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.46: Model evaluation metrics from our random forest regression model
    with tuned hyperparameters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_03_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.46: Model evaluation metrics from our random forest regression model
    with tuned hyperparameters'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The random forest regressor model seems to underperform compared to the multiple
    linear regression, as evidenced by greater MAE, MSE, and RMSE values, as well
    as less explained variance. Additionally, there was a weaker correlation between
    the predicted and actual values, and the residuals were further from being normally
    distributed. Nevertheless, by leveraging ensemble methods using a random forest
    regressor, we constructed a model that explains 75.8% of the variance in temperature
    and predicts temperature in Celsius + 3.781 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: Dimensionality Reduction and Unsupervised Learning'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 12: Ensemble k-means Clustering and Calculating Predictions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the glass dataset has been imported, shuffled, and standardized (see
    Exercise 58):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instantiate an empty data frame to append each model and save it as the new
    data frame object `labels_df` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `KMeans` function outside of the loop using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Complete 100 iterations as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save a KMeans model object with two clusters (arbitrarily decided upon, a priori)
    using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the model to `scaled_features` using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the labels array and save it as the labels object, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store labels as a column in `labels_df` named after the iteration using the
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After labels have been generated for each of the 100 models (see Activity 21),
    calculate the mode for each row using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign `row_mode` to a new column in `labels_df`, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the first five rows of labels_df
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 4.24: First five rows of labels_df'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_04_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.24: First five rows of labels_df'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We have drastically increased the confidence in our predictions by iterating
    through numerous models, saving the predictions at each iteration, and assigning
    the final predictions as the mode of these predictions. However, these predictions
    were generated by models using a predetermined number of clusters. Unless we know
    the number of clusters a priori, we will want to discover the optimal number of
    clusters to segment our observations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13: Evaluating Mean Inertia by Cluster after PCA Transformation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instantiate a PCA model with the value for the `n_components` argument equal
    to `best_n_components` (that is, remember, `best_n_components = 6`) as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the model to `scaled_features` and transform them into the six components,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `numpy` and the `KMeans` function outside the loop using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate an empty list, `inertia_list`, for which we will append inertia
    values after each iteration using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the inside for loop, we will iterate through 100 models as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build our `KMeans` model with `n_clusters=x` using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The value for x will be dictated by the outer loop which is covered in detail
    here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fit the model to `df_pca` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the inertia value and save it to the object inertia using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append inertia to `inertia_list` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Moving to the outside loop, instantiate another empty list to store the average
    inertia values using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we want to check the average inertia over 100 models for `n_clusters`
    1 through 10, we will instantiate the outer loop as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the inside loop has run through its 100 iterations, and the inertia value
    for each of the 100 models have been appended to `inertia_list`, compute the mean
    of this list, and save the object as `mean_inertia` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append `mean_inertia` to `mean_inertia_list_PCA` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print `mean_inertia_list_PCA` to the console using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice the output in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25: mean_inertia_list_PCA'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_04_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.25: mean_inertia_list_PCA'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 5: Mastering Structured Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 14: Training and Predicting the Income of a Person'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the libraries and load the income dataset using pandas. First, import
    pandas and then read the data using `read_csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The reason we are passing the names of the columns is because the data doesn't
    contain them. We do this to make our lives easy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use Label Encoder from sklearn to encode strings. First, import `Label Encoder`.
    Then, encode all string categorical columns one by one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we encode all the categorical string data that we have. There is another
    method we can use to prevent writing the same piece of code again and again. See
    if you can find it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We first separate the dependent and independent variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we divide them into training and testing sets with an 80:20 split.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we convert them into DMatrix, a data structure that the library supports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we use the following parameters to train the model using XGBoost.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the accuracy of the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.36: Final model accuracy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_05_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.36: Final model accuracy'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 15: Predicting the Loss of Customers'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the income dataset using pandas. First, import pandas, and then read the
    data using `read_csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `customerID` variable is not required because any future prediction will
    have a unique `customerID`, making this variable useless for prediction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Convert all categorical variables to integers using scikit. One example is given
    below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the data types of the variables in the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The data types of the variables will be shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.37: Data types of variables'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_05_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.37: Data types of variables'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see, `TotalCharges` is an object. So, convert the data type of `TotalCharges`
    from object to numeric. coerce will make the missing values null.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Convert the data frame to an XGBoost variable and find the best parameters for
    the dataset using the previous exercises as reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check out the output in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.38: Graph of max depth to test error for telecom churn dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_05_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.38: Graph of max depth to test error for telecom churn dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: From the graph, it is clear that a max depth of 4 gives the least error. So,
    we will be using that to train our model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the model using the `max_depth` parameter that we chose from the previous
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.39: Final accuracy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_05_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.39: Final accuracy'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Save the model for future use using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 16: Predicting a Customer''s Purchase Amount'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the `Black Friday` dataset using pandas. First, import `pandas`, and then,
    read the data using `read_csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `User_ID` variable is not required to allow predictions on new user Ids,
    so we drop it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The product category variables have high null values, so we drop them as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Convert all categorical variables to integers using scikit-learn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Split the data into training and testing sets and convert it into the form required
    by the embedding layers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the network using the embedding and dense layers in Keras and perform
    hyperparameter tuning to get the best accuracy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we create a three-layer network after the embedding layers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the RMSE of the model on the test set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The RMSE is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.40: RMSE model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_05_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.40: RMSE model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Visualize the product ID embedding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C13322_05_41.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.41: Plot of clustered model'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: From the plot, you can see that similar products have been clustered together
    by the model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the model for future use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 6: Decoding Images'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 17: Predict if an Image Is of a Cat or a Dog'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the name of the images in the dataset, you will find that the
    images of dogs start with dog followed by ''.'' and then a number, for example
    – "dog.123.jpg". Similarly, the images of cats start with cat. So, let''s create
    a function to get the label from the name of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a function to read, resize, and preprocess the images:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`SIZE` here refers to the dimension of the final square image we will input
    to the model. We resize the image to have the length and breadth equal to `SIZE`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: When running `os.listdir(PATH)`, you will find that all the images of cats come
    first, followed by images of dogs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To have the same distribution of both the classes in the training and testing
    sets, we will shuffle the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the size of the image and read the data. Split the loaded data into
    training and testing sets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Transform the lists to numpy arrays and reshape the images to a format that
    Keras will accept:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CNN model that makes use of regularization to perform training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the convolutional layers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the pooling layer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the batch normalization layer along with a dropout layer using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Flatten the 2D matrices into 1D vectors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use dense layers as the final layers for the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile the model and then train it using the training data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the model''s accuracy on the test set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.39: Model accuracy on the test set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_06_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.39: Model accuracy on the test set'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the model''s accuracy on the training set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.40: Model accuracy on the train set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_06_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.40: Model accuracy on the train set'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The test set accuracy for this model is 70.4%. The training set accuracy is
    really high, at 96%. This means that the model has started to overfit. Improving
    the model to get the best possible accuracy is left for you as an exercise. You
    can plot the incorrectly predicted images using the code from previous exercises
    to get a sense of how well the model performs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.41: Incorrect prediction of a dog by the regularized CNN model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_06_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.41: Incorrect prediction of a dog by the regularized CNN model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 18: Identifying and Augmenting an Image'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create functions to get the images and the labels of the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create functions to preprocess and augment images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implement the augmentation functions to randomly execute the augmentation when
    passed an image and return the image with the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is for horizontal flip:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is for rotation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is for image shift:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the generator that will generate images batches to be used
    to train the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create functions to load the test dataset''s images and labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This `get_data` function is similar to the one we used in *Activity 1*. The
    modification here is that we get the list of images to be read as an input parameter,
    and we return a tuple of images and their labels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the test train split and load the test dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model and perform training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the convolutional layers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the pooling layer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the batch normalization layer along with a dropout layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Flatten the 2D matrices into 1D vectors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use dense layers as the final layers for the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile the model and train it using the generator that you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The test set accuracy for this model is 72.6%, which is an improvement on the
    model in *Activity 21*. You will observe that the training accuracy is really
    high, at 98%. This means that this model has started to overfit, much like the
    one in *Activity 21*. This could be due to a lack of data augmentation. Try changing
    the data augmentation parameters to see if there is any change in accuracy. Alternatively,
    you can modify the architecture of the neural network to get better results. You
    can plot the incorrectly predicted images to get a sense of how well the model
    performs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.42: Incorrect prediction of a cat by the data augmentation CNN model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_06_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.42: Incorrect prediction of a cat by the data augmentation CNN model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 7: Processing Human Language'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 19: Predicting Sentiments of Movie Reviews'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the IMDB movie review dataset using pandas in Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the tweets to lowercase to reduce the number of unique words:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Keep in mind that "`Hello`" and "`hellow`" are not the same to a computer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clean the reviews using RegEx with the `clean_str` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, remove stop words and other frequently occurring unnecessary words from
    the reviews:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: To see how we found these, words refer to *Exercise 51*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This step converts strings into tokens (which will be helpful in the next step):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the word embedding of the reviews with the tokens created in the previous
    step. Here, we will use genism Word2Vec to create these embedding vectors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Combine the tokens to get a string and then drop any review that does not have
    anything in it after stop word removal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tokenize the reviews using the Keras Tokenizer and convert them into numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, pad the tweets to have a maximum of 100 words. This will remove any
    words after the 100-word limit and add 0s if the number of words is less than
    100:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the created embedding to get the embedding matrix using the `load_embedding`
    function discussed in the *Text Processing* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the label into one-hot vector using pandas'' `get_dummies` function
    and split the dataset into testing and training sets with an 80:20 split:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the neural network model starting with the input and embedding layers.
    This layer converts the input words into their embedding vectors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the rest of the fully connected neural network using Keras:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and train the model for 10 epochs. You can modify the model and the
    hyperparameters to try and get a better accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the accuracy of the model on the test set to see how well our model
    performs on previously unseen data by using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The accuracy of the model is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.39: Model accuracy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_07_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.39: Model accuracy'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the confusion matrix of the model to get a proper sense of the model''s
    prediction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the following
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.40: Confusion matrix of the model (0 = negative sentiment, 1 = positive
    sentiment)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_07_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.40: Confusion matrix of the model (0 = negative sentiment, 1 = positive
    sentiment)'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check the performance of the model by seeing the sentiment predictions on random
    reviews using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that you receive the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.41: A review from the IMDB dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_07_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.41: A review from the IMDB dataset'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 20: Predicting Sentiments from Tweets'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the tweet dataset using pandas and rename the columns with those given
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Drop the following columns as we won''t be using them. You can analyze and
    use them if you want when trying to improve the accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We perform this activity only on a subset (400,000 tweets) of the data to save
    time. If you want, you can work on the whole dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the tweets to lowercase to reduce the number of unique words. Keep
    in mind that "`Hello`" and "`hellow`" are not the same to a computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clean the tweets using the `clean_str` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all the stop words from the tweets, as was done in the `Text Preprocessing`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tokenize the tweets and convert them to numbers using the Keras Tokenizer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, pad the tweets to have a maximum of 50 words. This will remove any
    words after the 50-word limit and add 0s if the number of words is less than 50:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the embedding matrix from the GloVe embedding file that we downloaded
    using the `load_embedding` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Split the dataset into training and testing sets with an 80:20 spilt. You can
    experiment with different splits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the LSTM model that will predict the sentiment. You can modify this
    to create your own neural network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Train the model. Here, we train it only for 10 epochs. You can increase the
    number of epochs to try and get a better accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check how well the model is performing by predicting the sentiment of a few
    tweets in the test set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.42: Positive (left) and negative (right) tweets and their predictions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_07_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.42: Positive (left) and negative (right) tweets and their predictions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 8: Tips and Tricks of the Trade'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 21: Classifying Images using InceptionV3'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create functions to get images and labels. Here `PATH` variable contains the
    path to the training dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set `SIZE` and `CHANNELS. SIZE` is the dimension of the square image input.
    `CHANNELS` is the number of channels in the training data images. There are 3
    channels in a RGB image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to preprocess and augment images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, develop the generator that will generate the batches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will read the validation data. Create a function to read the images
    and their labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the validation files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A random sample of the images is shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.16: Sample images from the loaded dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_08_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.16: Sample images from the loaded dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Load the Inception model and pass the shape of the input images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the output dense layer according to our problem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, compile the model to make it ready for training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Evaluate the model and get the accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The accuracy is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.17: Model accuracy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_08_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.17: Model accuracy'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 22: Using Transfer Learning to Predict Images'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set the random number seed so that the results are reproducible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set `SIZE` and `CHANNELS`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SIZE` is the dimension of the square image input. `CHANNELS` is the number
    of channels in the training data images. There are 3 channels in a RGB image.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create functions to get images and labels. Here `PATH` variable contains the
    path to the training dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to preprocess and augment images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the generator that will generate the batches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will read the development and test data. Create a function to read
    the images and their labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now read the development and test files. The split for the train/dev/test set
    is `70%/15%/15%`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot a few images from the dataset to see whether you loaded the files correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the output in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.18: Sample images from the loaded dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_08_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.18: Sample images from the loaded dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Load the Inception model and pass the shape of the input images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This time around, we will freeze the first five layers of the model to help
    with the training time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile the model to make it ready for training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create callbacks for Keras:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The training logs on TensorBoard are shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.19: Training set logs from TensorBoard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_08_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.19: Training set logs from TensorBoard'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You can now fine-tune the hyperparameters taking accuracy of the development
    set as the metric.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The logs of the development set from the TensorBoard tool are shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.20: Validation set logs from TensorBoard](img/C13322_08_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.20: Validation set logs from TensorBoard'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The learning rate decrease can be observed from the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.21: Learning rate log from TensorBoard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_08_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.21: Learning rate log from TensorBoard'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Evaluate the model on the test set and get the accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To understand fully, refer to the following output screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.22: The final accuracy of the model on the test set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_08_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.22: The final accuracy of the model on the test set'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As you can see, the model gets an accuracy of 93.6% on the test set, which
    is different from the accuracy of the development set (93.3% from the TensorBoard
    training logs). The early stopping callback stopped training when there wasn''t
    a significant improvement in the loss of the development set; this helped us save
    some time. The learning rate was reduced after nine epochs, which helped training,
    as can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23: A snippet of the training logs of the model](img/C13322_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.23: A snippet of the training logs of the model'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Preface](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-1)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[About the Book](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-2)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[About the Authors ](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-3)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Learning Objectives](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-4)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Audience](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-5)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Approach](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-6)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Minimum Hardware Requirements](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-7)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Software Requirements](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-8)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installation and Setup](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-9)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Using Kaggle for Faster Experimentation](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-10)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conventions](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-11)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installing the Code Bundle](C13322_Preface_Epub_Final_SW.xhtml#_idParaDest-12)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 1](C13322_01_Epub_Final_SW.xhtml#_idParaDest-13)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Data Science and Data Pre-Processing](C13322_01_Epub_Final_SW.xhtml#_idParaDest-14)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_01_Epub_Final_SW.xhtml#_idParaDest-15)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python Libraries](C13322_01_Epub_Final_SW.xhtml#_idParaDest-16)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Roadmap for Building Machine Learning Models](C13322_01_Epub_Final_SW.xhtml#_idParaDest-17)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Representation](C13322_01_Epub_Final_SW.xhtml#_idParaDest-18)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Independent and Target Variables](C13322_01_Epub_Final_SW.xhtml#_idParaDest-19)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 1: Loading a Sample Dataset and Creating the Feature Matrix and Target
    Matrix](C13322_01_Epub_Final_SW.xhtml#_idParaDest-20)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Cleaning](C13322_01_Epub_Final_SW.xhtml#_idParaDest-21)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 2: Removing Missing Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-22)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 3: Imputing Missing Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-23)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 4: Finding and Removing Outliers in Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-24)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Integration](C13322_01_Epub_Final_SW.xhtml#_idParaDest-25)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 5: Integrating Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-26)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Transformation](C13322_01_Epub_Final_SW.xhtml#_idParaDest-27)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Handling Categorical Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-28)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 6: Simple Replacement of Categorical Data with a Number](C13322_01_Epub_Final_SW.xhtml#_idParaDest-29)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 7: Converting Categorical Data to Numerical Data Using Label Encoding](C13322_01_Epub_Final_SW.xhtml#_idParaDest-30)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 8: Converting Categorical Data to Numerical Data Using One-Hot Encoding](C13322_01_Epub_Final_SW.xhtml#_idParaDest-31)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data in Different Scales](C13322_01_Epub_Final_SW.xhtml#_idParaDest-32)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 9: Implementing Scaling Using the Standard Scaler Method](C13322_01_Epub_Final_SW.xhtml#_idParaDest-33)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 10: Implementing Scaling Using the MinMax Scaler Method](C13322_01_Epub_Final_SW.xhtml#_idParaDest-34)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Discretization](C13322_01_Epub_Final_SW.xhtml#_idParaDest-35)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 11: Discretization of Continuous Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-36)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Train and Test Data](C13322_01_Epub_Final_SW.xhtml#_idParaDest-37)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 12: Splitting Data into Train and Test Sets](C13322_01_Epub_Final_SW.xhtml#_idParaDest-38)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 1: Pre-Processing Using the Bank Marketing Subscription Dataset](C13322_01_Epub_Final_SW.xhtml#_idParaDest-39)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Supervised Learning](C13322_01_Epub_Final_SW.xhtml#_idParaDest-40)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Unsupervised Learning](C13322_01_Epub_Final_SW.xhtml#_idParaDest-41)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Reinforcement Learning](C13322_01_Epub_Final_SW.xhtml#_idParaDest-42)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Performance Metrics](C13322_01_Epub_Final_SW.xhtml#_idParaDest-43)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_01_Epub_Final_SW.xhtml#_idParaDest-44)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 2](C13322_02_Epub_Final_SW.xhtml#_idParaDest-45)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Visualization](C13322_02_Epub_Final_SW.xhtml#_idParaDest-46)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_02_Epub_Final_SW.xhtml#_idParaDest-47)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Functional Approach](C13322_02_Epub_Final_SW.xhtml#_idParaDest-48)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 13: Functional Approach – Line Plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-49)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 14: Functional Approach – Add a Second Line to the Line Plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-50)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 2: Line Plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-51)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 15: Creating a Bar Plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-52)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 3: Bar Plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-53)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 16: Functional Approach – Histogram](C13322_02_Epub_Final_SW.xhtml#_idParaDest-54)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 17: Functional Approach – Box-and-Whisker plot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-55)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 18: Scatterplot](C13322_02_Epub_Final_SW.xhtml#_idParaDest-56)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Object-Oriented Approach Using Subplots](C13322_02_Epub_Final_SW.xhtml#_idParaDest-57)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 19: Single Line Plot using Subplots](C13322_02_Epub_Final_SW.xhtml#_idParaDest-58)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 20: Multiple Line Plots Using Subplots](C13322_02_Epub_Final_SW.xhtml#_idParaDest-59)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 4: Multiple Plot Types Using Subplots](C13322_02_Epub_Final_SW.xhtml#_idParaDest-60)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_02_Epub_Final_SW.xhtml#_idParaDest-61)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 3](C13322_03_Epub_Final_SW.xhtml#_idParaDest-62)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Machine Learning via Scikit-Learn](C13322_03_Epub_Final_SW.xhtml#_idParaDest-63)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_03_Epub_Final_SW.xhtml#_idParaDest-64)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Linear and Logistic Regression](C13322_03_Epub_Final_SW.xhtml#_idParaDest-65)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Simple Linear Regression](C13322_03_Epub_Final_SW.xhtml#_idParaDest-66)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 21: Preparing Data for a Linear Regression Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-67)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 22: Fitting a Simple Linear Regression Model and Determining the
    Intercept and Coefficient](C13322_03_Epub_Final_SW.xhtml#_idParaDest-68)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 23: Generating Predictions and Evaluating the Performance of a Simple
    Linear Regression Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-69)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Multiple Linear Regression](C13322_03_Epub_Final_SW.xhtml#_idParaDest-70)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 24: Fitting a Multiple Linear Regression Model and Determining the
    Intercept and Coefficients](C13322_03_Epub_Final_SW.xhtml#_idParaDest-71)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 5: Generating Predictions and Evaluating the Performance of a Multiple
    Linear Regression Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-72)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Logistic Regression](C13322_03_Epub_Final_SW.xhtml#_idParaDest-73)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 25: Fitting a Logistic Regression Model and Determining the Intercept
    and Coefficients](C13322_03_Epub_Final_SW.xhtml#_idParaDest-74)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 26: Generating Predictions and Evaluating the Performance of a Logistic
    Regression Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-75)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 27: Tuning the Hyperparameters of a Multiple Logistic Regression
    Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-76)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 6: Generating Predictions and Evaluating Performance of a Tuned Logistic
    Regression Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-77)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Max Margin Classification Using SVMs](C13322_03_Epub_Final_SW.xhtml#_idParaDest-78)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 28: Preparing Data for the Support Vector Classifier (SVC) Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-79)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 29: Tuning the SVC Model Using Grid Search](C13322_03_Epub_Final_SW.xhtml#_idParaDest-80)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 7: Generating Predictions and Evaluating the Performance of the SVC
    Grid Search Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-81)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Decision Trees](C13322_03_Epub_Final_SW.xhtml#_idParaDest-82)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 8: Preparing Data for a Decision Tree Classifier](C13322_03_Epub_Final_SW.xhtml#_idParaDest-83)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 30: Tuning a Decision Tree Classifier Using Grid Search](C13322_03_Epub_Final_SW.xhtml#_idParaDest-84)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 31: Programmatically Extracting Tuned Hyperparameters from a Decision
    Tree Classifier Grid Search Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-85)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 9: Generating Predictions and Evaluating the Performance of a Decision
    Tree Classifier Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-86)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Random Forests](C13322_03_Epub_Final_SW.xhtml#_idParaDest-87)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 32: Preparing Data for a Random Forest Regressor](C13322_03_Epub_Final_SW.xhtml#_idParaDest-88)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 10: Tuning a Random Forest Regressor](C13322_03_Epub_Final_SW.xhtml#_idParaDest-89)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 33: Programmatically Extracting Tuned Hyperparameters and Determining
    Feature Importance from a Random Forest Regressor Grid Search Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-90)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 11: Generating Predictions and Evaluating the Performance of a Tuned
    Random Forest Regressor Model](C13322_03_Epub_Final_SW.xhtml#_idParaDest-91)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_03_Epub_Final_SW.xhtml#_idParaDest-92)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 4](C13322_04_Epub_Final_SW.xhtml#_idParaDest-93)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Dimensionality Reduction and Unsupervised Learning](C13322_04_Epub_Final_SW.xhtml#_idParaDest-94)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_04_Epub_Final_SW.xhtml#_idParaDest-95)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Hierarchical Cluster Analysis (HCA)](C13322_04_Epub_Final_SW.xhtml#_idParaDest-96)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 34: Building an HCA Model](C13322_04_Epub_Final_SW.xhtml#_idParaDest-97)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 35: Plotting an HCA Model and Assigning Predictions](C13322_04_Epub_Final_SW.xhtml#_idParaDest-98)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[K-means Clustering](C13322_04_Epub_Final_SW.xhtml#_idParaDest-99)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 36: Fitting k-means Model and Assigning Predictions](C13322_04_Epub_Final_SW.xhtml#_idParaDest-100)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 12: Ensemble k-means Clustering and Calculating Predictions](C13322_04_Epub_Final_SW.xhtml#_idParaDest-101)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 37: Calculating Mean Inertia by n_clusters](C13322_04_Epub_Final_SW.xhtml#_idParaDest-102)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 38: Plotting Mean Inertia by n_clusters](C13322_04_Epub_Final_SW.xhtml#_idParaDest-103)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Principal Component Analysis (PCA)](C13322_04_Epub_Final_SW.xhtml#_idParaDest-104)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 39: Fitting a PCA Model](C13322_04_Epub_Final_SW.xhtml#_idParaDest-105)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 40: Choosing n_components using Threshold of Explained Variance](C13322_04_Epub_Final_SW.xhtml#_idParaDest-106)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 13: Evaluating Mean Inertia by Cluster after PCA Transformation](C13322_04_Epub_Final_SW.xhtml#_idParaDest-107)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 41: Visual Comparison of Inertia by n_clusters](C13322_04_Epub_Final_SW.xhtml#_idParaDest-108)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Supervised Data Compression using Linear Discriminant Analysis (LDA)](C13322_04_Epub_Final_SW.xhtml#_idParaDest-109)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 42: Fitting LDA Model](C13322_04_Epub_Final_SW.xhtml#_idParaDest-110)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 43: Using LDA Transformed Components in Classification Model](C13322_04_Epub_Final_SW.xhtml#_idParaDest-111)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_04_Epub_Final_SW.xhtml#_idParaDest-112)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 5](C13322_05_Epub_Final_SW.xhtml#_idParaDest-113)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Mastering Structured Data](C13322_05_Epub_Final_SW.xhtml#_idParaDest-114)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_05_Epub_Final_SW.xhtml#_idParaDest-115)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Boosting Algorithms](C13322_05_Epub_Final_SW.xhtml#_idParaDest-116)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Gradient Boosting Machine (GBM)](C13322_05_Epub_Final_SW.xhtml#_idParaDest-117)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[XGBoost (Extreme Gradient Boosting)](C13322_05_Epub_Final_SW.xhtml#_idParaDest-118)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 44: Using the XGBoost library to Perform Classification](C13322_05_Epub_Final_SW.xhtml#_idParaDest-119)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[XGBoost Library](C13322_05_Epub_Final_SW.xhtml#_idParaDest-120)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Controlling Model Overfitting](C13322_05_Epub_Final_SW.xhtml#_idParaDest-121)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Handling Imbalanced Datasets](C13322_05_Epub_Final_SW.xhtml#_idParaDest-122)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 14: Training and Predicting the Income of a Person](C13322_05_Epub_Final_SW.xhtml#_idParaDest-123)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[External Memory Usage](C13322_05_Epub_Final_SW.xhtml#_idParaDest-124)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Cross-validation](C13322_05_Epub_Final_SW.xhtml#_idParaDest-125)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 45: Using Cross-validation to Find the Best Hyperparameters](C13322_05_Epub_Final_SW.xhtml#_idParaDest-126)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Saving and Loading a Model](C13322_05_Epub_Final_SW.xhtml#_idParaDest-127)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 46: Creating a Python Pcript that Predicts Based on Real-time Input](C13322_05_Epub_Final_SW.xhtml#_idParaDest-128)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 15: Predicting the Loss of Customers](C13322_05_Epub_Final_SW.xhtml#_idParaDest-129)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Neural Networks](C13322_05_Epub_Final_SW.xhtml#_idParaDest-130)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What Is a Neural Network?](C13322_05_Epub_Final_SW.xhtml#_idParaDest-131)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Optimization Algorithms](C13322_05_Epub_Final_SW.xhtml#_idParaDest-132)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Hyperparameters](C13322_05_Epub_Final_SW.xhtml#_idParaDest-133)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Keras](C13322_05_Epub_Final_SW.xhtml#_idParaDest-134)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 47: Installing the Keras library for Python and Using it to Perform
    Classification](C13322_05_Epub_Final_SW.xhtml#_idParaDest-135)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Keras Library](C13322_05_Epub_Final_SW.xhtml#_idParaDest-136)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 48: Predicting Avocado Price Using Neural Networks](C13322_05_Epub_Final_SW.xhtml#_idParaDest-137)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Categorical Variables](C13322_05_Epub_Final_SW.xhtml#_idParaDest-138)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[One-hot Encoding](C13322_05_Epub_Final_SW.xhtml#_idParaDest-139)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Entity Embedding](C13322_05_Epub_Final_SW.xhtml#_idParaDest-140)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 49: Predicting Avocado Price Using Entity Embedding](C13322_05_Epub_Final_SW.xhtml#_idParaDest-141)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 16: Predicting a Customer''s Purchase Amount](C13322_05_Epub_Final_SW.xhtml#_idParaDest-142)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_05_Epub_Final_SW.xhtml#_idParaDest-143)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 6](C13322_06_Epub_Final_SW.xhtml#_idParaDest-144)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Decoding Images](C13322_06_Epub_Final_SW.xhtml#_idParaDest-145)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_06_Epub_Final_SW.xhtml#_idParaDest-146)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Images](C13322_06_Epub_Final_SW.xhtml#_idParaDest-147)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 50: Classify MNIST Using a Fully Connected Neural Network](C13322_06_Epub_Final_SW.xhtml#_idParaDest-148)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Convolutional Neural Networks](C13322_06_Epub_Final_SW.xhtml#_idParaDest-149)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Convolutional Layer](C13322_06_Epub_Final_SW.xhtml#_idParaDest-150)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Pooling Layer](C13322_06_Epub_Final_SW.xhtml#_idParaDest-151)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Adam Optimizer](C13322_06_Epub_Final_SW.xhtml#_idParaDest-152)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Cross-entropy Loss](C13322_06_Epub_Final_SW.xhtml#_idParaDest-153)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 51: Classify MNIST Using a CNN](C13322_06_Epub_Final_SW.xhtml#_idParaDest-154)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Regularization](C13322_06_Epub_Final_SW.xhtml#_idParaDest-155)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Dropout Layer](C13322_06_Epub_Final_SW.xhtml#_idParaDest-156)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[L1 and L2 Regularization](C13322_06_Epub_Final_SW.xhtml#_idParaDest-157)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Batch Normalization](C13322_06_Epub_Final_SW.xhtml#_idParaDest-158)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 52: Improving Image Classification Using Regularization Using CIFAR-10
    images](C13322_06_Epub_Final_SW.xhtml#_idParaDest-159)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Image Data Preprocessing](C13322_06_Epub_Final_SW.xhtml#_idParaDest-160)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Normalization](C13322_06_Epub_Final_SW.xhtml#_idParaDest-161)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Converting to Grayscale](C13322_06_Epub_Final_SW.xhtml#_idParaDest-162)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Getting All Images to the Same Size](C13322_06_Epub_Final_SW.xhtml#_idParaDest-163)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Other Useful Image Operations](C13322_06_Epub_Final_SW.xhtml#_idParaDest-164)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 17: Predict if an Image Is of a Cat or a Dog](C13322_06_Epub_Final_SW.xhtml#_idParaDest-165)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Augmentation](C13322_06_Epub_Final_SW.xhtml#_idParaDest-166)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Generators](C13322_06_Epub_Final_SW.xhtml#_idParaDest-167)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 53: Classify CIFAR-10 Images with Image Augmentation](C13322_06_Epub_Final_SW.xhtml#_idParaDest-168)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 18: Identifying and Augmenting an Image](C13322_06_Epub_Final_SW.xhtml#_idParaDest-169)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_06_Epub_Final_SW.xhtml#_idParaDest-170)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 7](C13322_07_Epub_Final_SW.xhtml#_idParaDest-171)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Processing Human Language](C13322_07_Epub_Final_SW.xhtml#_idParaDest-172)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_07_Epub_Final_SW.xhtml#_idParaDest-173)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Text Data Processing](C13322_07_Epub_Final_SW.xhtml#_idParaDest-174)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Regular Expressions](C13322_07_Epub_Final_SW.xhtml#_idParaDest-175)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 54: Using RegEx for String Cleaning](C13322_07_Epub_Final_SW.xhtml#_idParaDest-176)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Basic Feature Extraction](C13322_07_Epub_Final_SW.xhtml#_idParaDest-177)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Text Preprocessing](C13322_07_Epub_Final_SW.xhtml#_idParaDest-178)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 55: Preprocessing the IMDB Movie Review Dataset](C13322_07_Epub_Final_SW.xhtml#_idParaDest-179)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Text Processing](C13322_07_Epub_Final_SW.xhtml#_idParaDest-180)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 56: Creating Word Embeddings Using Gensim](C13322_07_Epub_Final_SW.xhtml#_idParaDest-181)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 19: Predicting Sentiments of Movie Reviews](C13322_07_Epub_Final_SW.xhtml#_idParaDest-182)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Recurrent Neural Networks (RNNs)](C13322_07_Epub_Final_SW.xhtml#_idParaDest-183)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LSTMs](C13322_07_Epub_Final_SW.xhtml#_idParaDest-184)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 57: Performing Sentiment Analysis Using LSTM](C13322_07_Epub_Final_SW.xhtml#_idParaDest-185)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 20: Predicting Sentiments from Tweets](C13322_07_Epub_Final_SW.xhtml#_idParaDest-186)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_07_Epub_Final_SW.xhtml#_idParaDest-187)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 8](C13322_08_Epub_Final_SW.xhtml#_idParaDest-188)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Tips and Tricks of the Trade](C13322_08_Epub_Final_SW.xhtml#_idParaDest-189)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction](C13322_08_Epub_Final_SW.xhtml#_idParaDest-190)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Transfer Learning](C13322_08_Epub_Final_SW.xhtml#_idParaDest-191)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Transfer Learning for Image Data](C13322_08_Epub_Final_SW.xhtml#_idParaDest-192)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 58: Using InceptionV3 to Compare and Classify Images](C13322_08_Epub_Final_SW.xhtml#_idParaDest-193)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 21: Classifying Images using InceptionV3](C13322_08_Epub_Final_SW.xhtml#_idParaDest-194)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Useful Tools and Tips](C13322_08_Epub_Final_SW.xhtml#_idParaDest-195)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Train, Development, and Test Datasets](C13322_08_Epub_Final_SW.xhtml#_idParaDest-196)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with Unprocessed Datasets](C13322_08_Epub_Final_SW.xhtml#_idParaDest-197)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[pandas Profiling](C13322_08_Epub_Final_SW.xhtml#_idParaDest-198)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[TensorBoard](C13322_08_Epub_Final_SW.xhtml#_idParaDest-199)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[AutoML](C13322_08_Epub_Final_SW.xhtml#_idParaDest-200)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exercise 59: Get a Well-Performing Network Using Auto-Keras](C13322_08_Epub_Final_SW.xhtml#_idParaDest-201)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Model Visualization Using Keras](C13322_08_Epub_Final_SW.xhtml#_idParaDest-202)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 22: Using Transfer Learning to Predict Images](C13322_08_Epub_Final_SW.xhtml#_idParaDest-203)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Summary](C13322_08_Epub_Final_SW.xhtml#_idParaDest-204)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Appendix](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-205)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 1: Introduction to Data Science and Data Preprocessing](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-206)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 1: Pre-Processing Using the Bank Marketing Subscription Dataset](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-207)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 2: Data Visualization](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-208)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 2: Line Plot](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-209)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 3: Bar Plot](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-210)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 4: Multiple Plot Types Using Subplots](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-211)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 3: Introduction to Machine Learning via Scikit-Learn](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-212)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 5: Generating Predictions and Evaluating the Performance of a Multiple
    Linear Regression Model](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-213)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 6: Generating Predictions and Evaluating Performance of a Tuned Logistic
    Regression Model](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-214)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 7: Generating Predictions and Evaluating the Performance of the SVC
    Grid Search Model](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-215)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 8: Preparing Data for a Decision Tree Classifier](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-216)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 9: Generating Predictions and Evaluating the Performance of a Decision
    Tree Classifier Model](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-217)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 10: Tuning a Random Forest Regressor](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-218)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 11: Generating Predictions and Evaluating the Performance of a Tuned
    Random Forest Regressor Model](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-219)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 4: Dimensionality Reduction and Unsupervised Learning](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-220)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 12: Ensemble k-means Clustering and Calculating Predictions](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-221)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 13: Evaluating Mean Inertia by Cluster after PCA Transformation](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-222)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 5: Mastering Structured Data](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-223)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 14: Training and Predicting the Income of a Person](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-224)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 15: Predicting the Loss of Customers](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-225)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 16: Predicting a Customer''s Purchase Amount](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-226)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 6: Decoding Images](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-227)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 17: Predict if an Image Is of a Cat or a Dog](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-228)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 18: Identifying and Augmenting an Image](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-229)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 7: Processing Human Language](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-230)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 19: Predicting Sentiments of Movie Reviews](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-231)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 20: Predicting Sentiments from Tweets](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-232)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Chapter 8: Tips and Tricks of the Trade](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-233)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 21: Classifying Images using InceptionV3](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-234)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Activity 22: Using Transfer Learning to Predict Images](C13322_Solution_Epub_Final_SW.xhtml#_idParaDest-235)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Landmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Cover](Images/cover.xhtml)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Table of Contents](C13322_FM_Epub_Final_SW.xhtml#_idContainer004)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
