["```py\n$ cabal install hs-gchart\n\n```", "```py\n$ cat input.txt \n2\n5\n3\n7\n4\n1\n19\n18\n17\n14\n15\n16\n\n```", "```py\n    import Graphics.Google.Chart\n    ```", "```py\n    main = do\n      rawInput <- readFile \"input.txt\"\n      let nums = map (read :: String -> Int) (lines rawInput)\n    ```", "```py\n      putStrLn $ chartURL $\n        setSize 500 200 $\n        setTitle \"Example of Plotting a Chart in Haskell\" $\n        setData (encodeDataSimple [nums]) $\n        setLegend [\"Stock Price\"] $\n        newLineChart\n    ```", "```py\n    $ runhaskell Main.hs\n    http://chart.apis.google.com/chart?chs=500x200&chtt=Example+of+Plotting+a+Chart+in+Haskell&chd=s:CFDHEBTSROPQ&chdl=Stock+Price&cht=lc\n\n    ```", "```py\n$ cabal install hs-gchart\n\n```", "```py\n$ cat input.txt \n2\n5\n3\n7\n4\n1\n19\n18\n17\n14\n15\n16\n\n```", "```py\n    import Graphics.Google.Chart\n    ```", "```py\n    main = do\n      rawInput <- readFile \"input.txt\"\n      let nums = map (read :: String -> Int) (lines rawInput)\n    ```", "```py\n      putStrLn $ chartURL $\n        setSize 500 400 $\n        setTitle \"Example of Plotting a Pie Chart in Haskell\" $\n        setData (encodeDataSimple [nums]) $\n        setLabels (lines rawInput) $\n        newPieChart Pie2D\n    ```", "```py\n    $ runhaskell Main.hs\n    http://chart.apis.google.com/chart?chs=500x400&chtt=Example+of+Plotting+a+Pie+Chart+in+Haskell&chd=s:CFDHEBTSROPQ&chl=2|5|3|7|4|1|19|18|17|14|15|16&cht=p\n\n    ```", "```py\n$ cabal install hs-gchart\n\n```", "```py\n$ cat input1.txt \n2\n5\n3\n7\n4\n1\n19\n18\n17\n14\n15\n16\n\n$ cat input2.txt\n4\n2\n6\n7\n8\n2\n18\n17\n16\n17\n15\n14\n\n```", "```py\n    import Graphics.Google.Chart\n    ```", "```py\n    main = do\n      rawInput1 <- readFile \"input1.txt\"\n      rawInput2 <- readFile \"input2.txt\"\n      let nums1 = map (read :: String -> Int) (lines rawInput1)\n      let nums2 = map (read :: String -> Int) (lines rawInput2)\n    ```", "```py\n      putStrLn $ chartURL $\n        setSize 500 400 $\n        setTitle \"Example of Plotting a Bar Chart in Haskell\" $\n        setDataColors [\"00ff00\", \"ff0000\"] $\n        setLegend [\"A\", \"B\"] $\n        setData (encodeDataSimple [nums1, nums2]) $\n        newBarChart Horizontal Grouped\n    ```", "```py\n    $ runhaskell Main.hs\n    http://chart.apis.google.com/chart?chs=500x400&chtt=Example+of+Plotting+a+Bar+Chart+in+Haskell&chco=00ff00,ff0000&chdl=A|B&chd=s:CFDHEBTSROPQ,ECGHICSRQRPO&cht=bhg\n\n    ```", "```py\n$ sudo apt-get install gnuplot-x11\n\n```", "```py\n$ cabal install easyplot\n\n```", "```py\n    import Graphics.EasyPlot\n    ```", "```py\n    main = do\n      let values = [4,5,16,15,14,13,13,17]\n    ```", "```py\n      plot X11 $ \n        Data2D [ Title \"Line Graph\"\n               , Style Linespoints\n               , Color Blue] \n        [] (zip [1..] values)\n    ```", "```py\n$ sudo apt-get install gnuplot-x11\n\n```", "```py\n$ cabal install easyplot\n\n```", "```py\n$ cabal install csv\n\n```", "```py\n$ cat input1.csv\n1,2\n3,2\n2,3\n2,2\n3,1\n2,2\n2,1\n\n```", "```py\n$ cat input2.csv\n7,4\n8,4\n6,4\n7,5\n7,3\n6,4\n7,6\n\n```", "```py\n    import Graphics.EasyPlot\n\n    import Text.CSV\n    ```", "```py\n    convertRawCSV :: [[String]] -> [(Double, Double)]\n    convertRawCSV csv = [ (read x, read y) | [x, y] <- csv ]\n    ```", "```py\n    main = do\n      csv1Raw <- parseCSVFromFile \"input1.csv\"\n      csv2Raw <- parseCSVFromFile \"input2.csv\"\n\n      let csv1 = case csv1Raw of \n            Left err -> []\n            Right csv -> convertRawCSV csv\n\n      let csv2 = case csv2Raw of \n            Left err -> []\n            Right csv -> convertRawCSV csv\n    ```", "```py\n      plot X11 $ [ Data2D [Color Red] [] csv1\n      , Data2D [Color Blue] [] csv2 ]\n    ```", "```py\n$ sudo apt-get install gnuplot-x11\n\n```", "```py\n$ cabal install easyplot\n\n```", "```py\n$ cabal install csv\n\n```", "```py\n$ cat input1.csv\n1,1,1\n1,2,1\n0,1,1\n1,1,0\n2,1,0\n2,1,1\n1,0,1\n\n```", "```py\n$ cat input2.csv\n4,3,2\n3,3,2\n3,2,3\n4,4,3\n5,4,2\n4,2,3\n3,4,3\n\n```", "```py\n    import Graphics.EasyPlot\n\n    import Text.CSV\n    ```", "```py\n    convertRawCSV :: [[String]] -> [(Double, Double, Double)]\n\n    convertRawCSV csv = [ (read x, read y, read z) \n                        | [x, y, z] <- csv ]\n    ```", "```py\n    main = do\n      csv1Raw <- parseCSVFromFile \"input1.csv\"\n      csv2Raw <- parseCSVFromFile \"input2.csv\"\n\n      let csv1 = case csv1Raw of\n            Left err -> []\n            Right csv -> convertRawCSV csv\n\n      let csv2 = case csv2Raw of\n            Left err -> []\n            Right csv -> convertRawCSV csv\n    ```", "```py\n      plot' [Interactive] X11 $ \n        [ Data3D [Color Red] [] csv1\n        , Data3D [Color Blue] [] csv2]\n    ```", "```py\n$ sudo apt-get install graphviz-dev graphviz\n\n```", "```py\n$ cabal install graphviz\n\n```", "```py\n    import Data.Text.Lazy (Text, empty, unpack)\n    import Data.Graph.Inductive (Gr, mkGraph)\n    import Data.GraphViz (GraphvizParams, nonClusteredParams, graphToDot)\n    import Data.GraphViz.Printing (toDot, renderDot)\n    ```", "```py\n    myGraph :: Gr Text Text\n    myGraph = mkGraph [ (1, empty)\n                      , (2, empty)\n                      , (3, empty) ]\n              [ (1, 2, empty) \n              , (1, 3, empty) ]\n    ```", "```py\n    myParams :: GraphvizParams n Text Text () Text\n    myParams = nonClusteredParams\n    ```", "```py\n    main :: IO ()\n    main = putStr $ unpack $ renderDot $ toDot $ \n           graphToDot myParams myGraph\n    ```", "```py\n    $ runhaskell Main.hs > graph.dot\n    ```", "```py\n    $ dot -Tpng graph.dot > graph.png\n    ```", "```py\n$ sudo apt-get install graphviz-dev graphviz\n\n```", "```py\n$ cabal install graphviz\n\n```", "```py\n    import Data.Text.Lazy (Text, pack, unpack)\n    import Data.Graph.Inductive (Gr, mkGraph)\n    import Data.GraphViz (\n      GraphvizParams(..),\n      GlobalAttributes(\n        GraphAttrs,\n        NodeAttrs,\n        EdgeAttrs\n        ),\n      X11Color(Blue, Orange, White),\n      nonClusteredParams,\n      globalAttributes,\n      fmtNode,\n      fmtEdge,\n      graphToDot\n      )\n    import Data.GraphViz.Printing (toDot, renderDot)\n    import Data.GraphViz.Attributes.Complete\n    ```", "```py\n    myGraph :: Gr Text Text\n    myGraph = mkGraph [ (1, pack \"Haskell\")\n                      , (2, pack \"Data Analysis\") \n                      , (3, pack \"Haskell Data Analysis\")\n                      , (4, pack \"Profit!\")] \n             [ (1, 3, pack \"learn\") \n             , (2, 3, pack \"learn\")\n             , (3, 4, pack \"???\")]\n    ```", "```py\n    myParams :: GraphvizParams n Text Text () Text\n    myParams = nonClusteredParams { \n    ```", "```py\n        isDirected       = True\n    ```", "```py\n      , globalAttributes = [myGraphAttrs, myNodeAttrs, myEdgeAttrs]\n    ```", "```py\n      , fmtNode          = myFN\n    ```", "```py\n      , fmtEdge          = myFE\n      }\n    ```", "```py\n     where myGraphAttrs = \n                     GraphAttrs [ RankDir FromLeft\n                                        , BgColor [toWColor Blue] ]\n                 myNodeAttrs = \n                      NodeAttrs [ Shape BoxShape\n                                       , FillColor [toWColor Orange]\n                                       , Style [SItem Filled []] ]\n                 myEdgeAttrs = \n                      EdgeAttrs [ Weight (Int 10) \n                                       , Color [toWColor White]\n                                       , FontColor (toColor White) ]\n                 myFN (n,l) = [(Label . StrLabel) l]\n                 myFE (f,t,l) = [(Label . StrLabel) l]\n    ```", "```py\n    main :: IO ()\n    main = putStr $ unpack $ renderDot $ toDot $ graphToDot myParams myGraph\n    ```", "```py\n    $ runhaskell Main.hs > graph.dot\n\n    ```", "```py\n    $ dot -Tpng graph.dot > graph.png\n\n    ```", "```py\n$ cabal install d3js\n\n```", "```py\n$ cat index.html\n\n```", "```py\n<html>\n  <head>\n    <title>Chart</title>\n  </head>\n  <body>\n    <div id='myChart'></div>\n    <script charset='utf-8' src='http://d3js.org/d3.v3.min.js'></script>\n    <script charset='utf-8' src='generated.js'></script>\n  </body>\n</html>\n```", "```py\n    import qualified Data.Text as T\n    import qualified Data.Text.IO as TIO\n    import D3JS\n    ```", "```py\n    myChart nums numBars = do\n      let dim = (300, 300)\n      elem <- box (T.pack \"#myChart\") dim\n      bars numBars 300 (Data1D nums) elem\n      addFrame (300, 300) (250, 250) elem\n    ```", "```py\n    main = do\n      let nums = [10, 40, 100, 50, 55, 156, 80, 74, 40, 10]\n      let numBars = 5\n    ```", "```py\n      let js = reify $ myChart nums numBars\n      TIO.writeFile \"generated.js\" js\n    ```", "```py\n$ cabal install d3js\n\n```", "```py\n$ cat index.html\n\n```", "```py\n<html>\n  <head>\n    <title>Chart</title>\n  </head>\n  <body>\n    <div id='myChart'></div>\n    <script charset='utf-8' src='http://d3js.org/d3.v3.min.js'></script>\n    <script charset='utf-8' src='generated.js'></script>\n  </body>\n</html>\n```", "```py\n    import D3JS\n    import qualified Data.Text as T\n    import qualified Data.Text.IO as TIO\n    ```", "```py\n    myPlot points = do\n      let dim = (300, 300)\n      elem <- box (T.pack \"#myChart\") dim\n      scatter (Data2D points) elem\n      addFrame (300, 300) (250, 250) elem   \n    ```", "```py\n    main = do\n      let points = [(1,2), (5,10), (139,138), (140,150)]\n    ```", "```py\n      let js = reify $ myPlot points\n      TIO.writeFile \"generated.js\" js\n    ```", "```py\n$ cabal install diagrams\n\n```", "```py\n$ cat input.txt\n\nN 0.2\nW 0.1\nS 0.6\nW 0.05\nS 0.3\nSW 0.1\nSW 0.2\nSW 0.3\nS 0.3\n\n```", "```py\n    {-# LANGUAGE NoMonomorphismRestriction #-}\n    import Diagrams.Prelude\n    import Diagrams.Backend.SVG.CmdLine (mainWith, B)\n    ```", "```py\n    drawPath :: [(Double, Double)] -> Diagram B R2\n    drawPath vectors = fromOffsets . map r2 $ vectors\n    ```", "```py\n    main = do\n      rawInput <- readFile \"input.txt\"\n      let vs = [ makeVector dir (read dist)\n               | [dir, dist] <- map words (lines rawInput)]\n      print vs\n      mainWith $ drawPath vs\n    ```", "```py\n    makeVector :: String -> Double -> (Double, Double)\n    makeVector \"N\" dist = (0, dist)\n    makeVector \"NE\" dist = (dist / sqrt 2, dist / sqrt 2)\n    makeVector \"E\" dist = (dist, 0)\n    makeVector \"SE\" dist = (dist / sqrt 2, -dist / sqrt 2)\n    makeVector \"S\" dist = (0, -dist)\n    makeVector \"SW\" dist = (-dist / sqrt 2, -dist / sqrt 2)\n    makeVector \"W\" dist = (-dist, 0)\n    makeVector \"NW\" dist = (-dist / sqrt 2, dist / sqrt 2)\n    makeVector _ _ = (0, 0)\n    ```", "```py\n    $ ghc --make Main.hs\n    $ ./Main –o output.svg –w 400\n\n    ```"]