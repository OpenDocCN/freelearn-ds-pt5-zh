["```py\njulia> x = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]\n\n```", "```py\njulia> x[1] = NA \nLoadError: UndefVarError: NA not defined \nwhile loading In[2], in expression starting on line 1 \n\n```", "```py\njulia> using DataArrays \njulia> x = DataArray([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) \n\n```", "```py\njulia> X[1] = NA \nNA \njulia> x \n6-element DataArrays.DataArray{Float64,1}: \n 1.1 \n 2.2 \n 3.3 \n 4.4 \n 5.5 \n 6.6 \n\n```", "```py\njulia> true || x \nTrue \n\njulia> true && x[1] \nNA \n\njulia> mean(x) \nNA \n\njulia> mean(x[2:6]) \n4.4 \n\n```", "```py\njulia> using DataArrays\njulia> dvector = data([10,20,30,40,50])\n5-element DataArrays.DataArray{Int64,1}:\n10\n20\n30\n40\n50\n\n```", "```py\njulia> dmatrix = data([10 20 30; 40 50 60])\n2x3 DataArrays.DataArray{Int64,2}:\n10 20 30\n40 50 60\njulia> dmatrix[2,3]\n60\n\n```", "```py\njulia> dropna(x)\n5-element Array{Float64,1}:\n2.2\n3.3\n4.4\n5.5\n6.6\n\n```", "```py\njulia> df = DataFrame(Name = [\"Ajava Rhodiumhi\", \"Las Hushjoin\"],\n            Count = [14.04, 17.3],\n            OS = [\"Ubuntu\", \"Mint\"])\n```", "```py\njulia> df = DataFrame(Name = [\"Ajava Rhodiumhi\", \"Las Hushjoin\"], \nCount = [14.04, 17.3], \nOS = [\"Ubuntu\", \"Mint\"]) \n\n```", "```py\njulia> df2 = DataFrame() \n\njulia> df2[:X] = 1:10 \n\njulia> df2[:Y] = [\"Head\", \"Tail\", \n\"Head\", \"Head\", \n\"Tail\", \"Head\", \n\"Tail\", \"Tail\", \n\"Head\", \"Tail\"] \njulia> df2 \n\n```", "```py\njulia> size(df2) \n(10, 2) \n\n```", "```py\nJulia> head(df2) \n\n```", "```py\njulia> df2[:X] \n10-element DataArrays.DataArray{Int64,1}: \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n... \n\n```", "```py\nJulia> rename!(df2, :X,  :newX) \n\n```", "```py\njulia> rename!(df2, {:X => :newX, :Y => :newY}) \n\n```", "```py\njulia> describe(df2) X\nMin 1.0\n1st Qu. 3.25\nMedian 5.5\nMean 5.5\n3rd Qu. 7.75\nMax 10.0\nNAs 0\nNA% 0.0%\n\nY\nLength 10\nType ASCIIString\nNAs 0\nNA% 0.0%\nUnique 2\n\n```", "```py\nJulia> Pkg.update() \njulia> Pkg.add(\"DataFrames\") \n\n```", "```py\njulia> using DataFrames \n\n```", "```py\nJulia> Pkg.add(\"RDatasets\") \n\n```", "```py\njulia> Rdatasets.packages() \n\n```", "```py\ndatasets - The R Datasets Package \n\n```", "```py\nusing RDatasets \niris_dataset = dataset(\"datasets\", \"iris\") \n\n```", "```py\njulia> using DataFramesjulia> df_iris_sample =\n  readtable(\"iris_sample.csv\",\n  separator = ',')\njulia> df_iris_sample\n\n```", "```py\njulia> df_iris_sample = readtable(\"iris_dataset.tsv\", \nseparator='\\t') \n\n```", "```py\njulia> df_random_dataset = readtable(\"random_dataset.txt\",                                                                    header=false, separator=';') \n\n```", "```py\njulia> methods(readtable)\n3 methods for generic function readtable:\nreadtable(io::IO) at /home/anshul/.julia/v0.4/DataFrames/src/dataframe/io.jl:820\nreadtable(io::IO, nbytes::Integer) at /home/anshul/.julia/v0.4/DataFrames/src/dataframe/io.jl:820\nreadtable(pathname::AbstractString) at /home/anshul/.julia/v0.4/DataFrames/src/dataframe/io.jl:930\n\n```", "```py\njulia> writetable(\"output_df_iris.csv\", df_iris_sample)\n\n```", "```py\njulia> writetable(\"output_df_iris.csv\", df_iris_sample, separator = ',')\n\n```", "```py\njulia> using DataFrames \n\njulia> DfTRoadSafety_Accidents_2015 = readtable(\"DfTRoadSafety_Accidents_2015.csv\") \n\njulia> head(DfTRoadSafety_Accidents_2015) \n\n```", "```py\njulia> names(DfTRoadSafety_Accidents_2015) \n32-element Array{Symbol,1}: \n :_Accident_Index                             \n :Location_Easting_OSGR                       \n :Location_Northing_OSGR                      \n :Longitude                                   \n :Latitude                                    \n :Police_Force                                \n :Accident_Severity                           \n :Number_of_Vehicles                          \n :Number_of_Casualties                        \n :Date                                        \n :Day_of_Week                                 \n :Time                                        \n :Local_Authority_District_                   \n\n :x2nd_Road_Class                             \n :x2nd_Road_Number                            \n :Pedestrian_Crossing_Human_Control           \n :Pedestrian_Crossing_Physical_Facilities     \n :Light_Conditions                            \n :Weather_Conditions                          \n :Road_Surface_Conditions                     \n :Special_Conditions_at_Site                  \n :Carriageway_Hazards                         \n :Urban_or_Rural_Area                         \n :Did_Police_Officer_Attend_Scene_of_Accident \n :LSOA_of_Accident_Location \n\n```", "```py\njulia> DfTRoadSafety_Vehicles_2015 = readtable(\"DfTRoadSafety_Vehicles_2015.csv\") \n\n```", "```py\njulia> DfTRoadSafety_Vehicles_2015 = readtable(\"DfTRoadSafety_Vehicles_2015.csv\") \n\njulia> full_DfTRoadSafety_2015 = \njoin(DfTRoadSafety_Accidents_2015, \nDfTRoadSafety_Vehicles_2015, \non = :_Accident_Index)\n\n```", "```py\njulia> cross_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, kind = :cross) \n\n```", "```py\njulia> left_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :left) \n\n```", "```py\njulia> Cities = [\"Delhi\",\"Amsterdam\",\"Hamburg\"][rand(1:3, 10)] \n\njulia> df1 = DataFrame(Any[[1:10], Cities, \n        rand(10)], [:ID, :City, :RandomValue1]) \n\njulia> df2 = DataFrame(ID = 1:10, City = Cities, \n        RandomValue2 = rand(100:110, 10))  \n\n```", "```py\njulia> full_df1_df2 = join(df1,df2, \n                on = [:ID, :City]) \n\n```", "```py\njulia> right_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :right) \n\njulia> inner_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :inner) \n\njulia> outer_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :outer) \n\njulia> semi_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :semi) \n\njulia> anti_DfTRoadSafety_2014 = join(DfTRoadSafety_Accidents_2014, DfTRoadSafety_Vehicles_2014, on = :_Accident_Index, kind = :anti) \n\n```", "```py\njulia> size(DfTRoadSafety_Accidents_2014) \n(146322,32) \n\n```", "```py\njulia> using RDatasets, DataFrames \n\n```", "```py\nJulia> iris_dataframe [:id] = 1:size(iris_dataframe, 1)  \n# create a new column to track the id of the row \n\nJulia> iris_stack = (iris_dataframe,  [1:4]) \n\n```", "```py\nJulia> iris_stack = stack(iris_dataframe,  [1:4]) \n\nJulia> size(iris_stack) \n(600,4) \nJulia> head(iris_stack) \n\n```", "```py\nJulia> iris_melt = stack(iris_dataframe, [1:4]) \n\n```", "```py\njulia> unstack(iris_melt, :id, :variable, :value) \n\n```", "```py\njulia> unstack(iris_melt, :variable, :value) \n\n```", "```py\nJulia> iris_stackdf = stackdf(iris_dataframe) \n\n```", "```py\njulia> iris_stack = stack(iris_dataframe) \n\n```", "```py\njulia> sort!(iris_dataframe, rev = true) \n\n```", "```py\njulia> sort!(iris_dataframe, cols = [:SepalLength, :PetalLength]) \n\n```", "```py\njulia> formulaX = A ~ B + C\n\n```", "```py\nJulia> pooleddatavector = compact (pooleddatavector) \n\n```", "```py\nJulia>  pooleddatavector = pool(datavector) \n\n```", "```py\njulia> Pkg.add(\"JSON\") \njulia> Pkg.add(\"Requests\") \n\n# import the required libraries \njulia> using JSON, Requests \n\n# Use the reddit URL to fetch the data from \njulia> reddit_url = https://www.reddit.com/r/Julia/ \n\n# fetch the data and store it in a variable \njulia> response = get(\"$(reddit_url)/.json\") \nResponse(200 OK, 21 headers, 55426 bytes in body) \n\n# Parse the data received using JSON.parse \njulia> dataReceived = JSON.parse(Requests.text(response)) \n# Create the required objects \njulia> nextRecord = dataReceived[\"data\"][\"after\"] \njulia> counter = length(dataReceived[\"data\"][\"children\"]) \n\n```", "```py\njulia> statuscode(response) \n200 \n\njulia> HttpCommon.STATUS_CODES[200] \n\"OK\" \n\n```"]