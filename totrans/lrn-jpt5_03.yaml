- en: Jupyter R Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter's native language is Python. Once Jupyter (which was essentially IPython
    before being renamed) became popular for data analysis, a number of people were
    interested in using the suite of R programming analysis tools that are available
    in Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding R scripting to your installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic R scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R dataset access (from a library)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R cluster analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R predictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding R scripting to your installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two big installation platforms are macOS and Windows. There are separate but
    similar steps for making R scripting available in your Jupyter installation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding R scripts to Jupyter on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are operating on macOS, you can add R Scripting using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start off with a large installation of the R environment, which contains
    a number of common packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following packages will be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following new packages will be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'From there, you will invoke your `notebook` as you normally would:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding R scripts to Jupyter on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default installation for Anaconda does not include R—I''m not sure why.
    Once Anaconda is installed, you need to specially install it using the command
    line. Then, we will take the plunge and add R scripting, which is very similar
    to what we did for macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces a detailed view of the packages that are updated. In my case,
    it installed a full set of R packages and runtimes, even though I had used R elsewhere
    on the machine earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you start Jupyter and pull down the kernel menu, you will see R as
    a choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4c94e1f-53fc-476d-a05d-47eeeccb39bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding R packages to Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard installation for R under Jupyter has many packages that are commonly
    used in R programming. However, if you do need to add another package, a small
    number of steps need to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Close down your Notebook (including the server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the command-line window, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Restart your Notebook and the package should be available in your R script,
    for example, `library (name of the R package you want to add)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you may still have problems in R where the core version of R that
    you have installed is out of date, so you will need to upgrade it to use a particular
    library.
  prefs: []
  type: TYPE_NORMAL
- en: R limitations in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we used a variety of packages, both pre-installed and installed
    especially for the example. I have exercised a variety of materials that are available
    in R under Jupyter and have not found any limitations; you can perform most of
    the steps in Jupyter that you would have done under the standard R implementations.
    The only limitation appears to be when you are using *Shiny* or if you are attempting
    to use extensive markdown:'
  prefs: []
  type: TYPE_NORMAL
- en: For Shiny, I think you are mixing purposes—Jupyter is providing a web experience
    and so does Shiny—so I'm not sure how to even decide if this should work. This
    issue is being addressed by the Jupyter development group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using extensive markdown does not appear to be a good idea, either. The intent
    of markdown was to allow Notebook developers to augment the standard output (of
    R) in a more illustrative manner. I think that if you are adding extensive markdown
    to your Notebook, you really need to develop a website—maybe using Shiny and then
    you will have all of the HTML markdown available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic R in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start a new R Notebook and call it `R Basics`. We can enter a small script
    just so we can see how the steps progress for R script. Enter the following into
    separate cells of your Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, you will end up with a starting screen that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34d93979-d811-4a3c-adcd-63b5e7e75317.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should note the aspects of the R Notebook view:'
  prefs: []
  type: TYPE_NORMAL
- en: We have the R logo in the upper-right corner. You will see this logo running
    in other R installations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also the peculiar R O just below the R icon. If the O unfilled circle
    displays, the unfilled circle indicates that the kernel is at rest, and the filled
    circle indicates that the kernel is working.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the menu items are the same as the ones we saw previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a very simple script–set a variable in one cell and then print out
    its value in another cell. Once executed (Cell | Run All), you will see your results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d2547f2-9277-4722-91e0-2c7d899e1771.png)'
  prefs: []
  type: TYPE_IMG
- en: So, just as if you run the script in an R interpreter, you get your output (with
    the numerical prefix). Jupyter has counted the statements so that we have incremental
    numbering of the cells. Jupyter has not done anything special to print out variables
    for debugging; you will have to do that separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the R server-logging statements (a command-line window was created
    when we started Jupyter), we will be able to see the actions that took place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We started the server, created a new Notebook, and saved it as `R Basics`.
    If we open the IPYNB file on disk (using a text editor), we will be able to see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a little different than what we saw in the prior chapter on Python Notebook
    coding. In particular, the metadata clearly targets the script cells to be R script.
    Note that the actual cells are not specific to a language – they are just scripts
    that will be executed as per the metadata directives.
  prefs: []
  type: TYPE_NORMAL
- en: R dataset access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this example, we will use the Iris dataset. Iris is built into R installations
    and is available directly. Let's just pull in the data, gather some simple statistics,
    and plot the data. This will show R accessing a dataset in Jupyter, using an R
    built-in package, as well as some available statistics (since we have R), and
    the interaction with R graphics.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script we will use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we enter this small script into a new R Notebook, we get an initial display
    that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/480d5a96-0550-467e-869d-5bc3d99b2698.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I would expect the standard R statistical summary as output, and I know that
    the Iris plot is pretty interesting. We can see exactly what happened in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff9e8afc-27c0-4da1-8b99-10db79932a59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The plot continues in the following screenshot, as it wouldn''t fit into a
    single page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8166b67-6e45-4f13-8595-92a6ebeb0515.png)'
  prefs: []
  type: TYPE_IMG
- en: A feature of Jupyter is to place larger plots, such as this, into a viewport
    that only shows a part of the image. I was able to drag the image out of the viewport
    window in its entirety for this shot. You can eliminate the viewport boundaries
    and have the entire output displayed by clicking in the viewport and dragging
    it.
  prefs: []
  type: TYPE_NORMAL
- en: R visualizations in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common use of R is to use several visualizations, which are available depending
    on the underlying data. In this section, we will go over some of them to see how
    R interacts with Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: R 3D graphics in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the packages available for 3D graphics is `persp`. The `persp` package
    draws perspective plots over a 2D space.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can enter a basic `persp` command in a new Notebook just by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we will have something like this in a Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/274d678b-b59f-4167-9548-a26049e529f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we run the step (Cell | Run All), we will see the display that''s shown
    in the following screenshot. The first part is the script involved in generating
    the graphic (this is part of the example code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/398f181e-7058-4305-a184-c389b7d08455.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we will see the following graphic display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b973ab13-75ad-4a6e-8b76-5d2afafa4e46.png)'
  prefs: []
  type: TYPE_IMG
- en: R 3D scatterplot in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The R `lattice` package has a Cloud function that will produce 3D scatterplots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script we will use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Prior to running it, we will have something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abac78ac-de21-459e-a1cc-e57cffb85bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we are using markup type cells for comments about the script steps.
    They are also denoted without a script line number in the left-hand column.
  prefs: []
  type: TYPE_NORMAL
- en: If you are copying R script into a Jupyter window, you may run across an issue
    where the print copy you are using has non-standard double quote characters (quotes
    on the left lean to the left, while quotes on the right lean to the right). Once
    copied into Jupyter, you will need to change this to normal double quotes (they
    don't lean; instead, they are vertical).
  prefs: []
  type: TYPE_NORMAL
- en: 'After running this, we will see the following display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/708da976-2c24-4a97-b1a6-07e356691d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: R cluster analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use R's cluster analysis functions to determine the
    clustering in the wheat dataset from [https://uci.edu/](https://uci.edu/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The R script we want to use in Jupyter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once entered into a Notebook, we will have something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c26a8349-6660-4283-ac2a-c011796ce286.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The resulting, generated cluster information is k-means clustering with five
    clusters of sizes; 39, 53, 47, 29, and 30 (Note that I set the seed value for
    random number use, so your results will not vary):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc965192-ac2a-4621-ae4a-4b1336300650.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we generated the information of five clusters (the parameter passed into
    the fit statement). It is a little bothersome that the cluster sum of squares
    vary greatly.
  prefs: []
  type: TYPE_NORMAL
- en: R forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this example, we will forecast the Fraser River levels, given the data from
    [https://datamarket.com/data/set/22nm/fraser-river-at-hope-1913-1990#!ds=22nm&display=line](https://datamarket.com/data/set/22nm/fraser-river-at-hope-1913-1990#!ds=22nm&display=line).
    I was not able to find a suitable source, so I extracted the data by hand from
    the site into a local file.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the R `forecast` package. You have to add this package to your
    setup (as described at the start of this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'The R script we will be using is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of interest in this example are the three plots: simple plot, monthly,
    and computed seasonal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When this is entered into a Notebook, we will get a familiar layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d64e594b-ad91-4b65-b38b-a8cede87ef0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The simple plot (using the R `plot` command) is like the one that''s shown
    in the following screenshot. There is no apparent organization or structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55a97b3a-4e5f-43f6-bb18-57b58053dc99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The monthly plot (using the `monthplot` command) is like what''s shown in the
    following screenshot. River flows appear to be very consistent within a month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/764262d3-8773-4e89-bcfb-9ad3cd93efb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the `seasonalplot` shows, quite dramatically, what we have been trying
    to forecast, that is, definite seasonality to the river flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e3da6f1-9ae0-48cf-a9ea-a26655bc8dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: R machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use an approach for machine learning where we will
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Partition the dataset into a training and testing set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a model of the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the efficiency of our model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning works by featuring a dataset that we will break up into a training
    section and a testing section. We will use the training data to come up with a
    model. We can then prove or test that model against the testing dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a dataset to be usable, we need at least a few hundred observations. I
    am using the housing data from [http://uci.edu](http://uci.edu). Let''s load the
    dataset by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The site documents the names of the variables as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Variables** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| CRIM | Per capita crime rate |'
  prefs: []
  type: TYPE_TB
- en: '| ZN | Residential zone rate percentage |'
  prefs: []
  type: TYPE_TB
- en: '| INDUS | Proportion of non-retail business in town |'
  prefs: []
  type: TYPE_TB
- en: '| CHAS | Proximity to Charles River (Boolean) |'
  prefs: []
  type: TYPE_TB
- en: '| NOX | Nitric oxide concentration |'
  prefs: []
  type: TYPE_TB
- en: '| RM | Average rooms per dwelling |'
  prefs: []
  type: TYPE_TB
- en: '| AGE | Proportion of housing built before 1940 |'
  prefs: []
  type: TYPE_TB
- en: '| DIS | Weighted distance to employment center |'
  prefs: []
  type: TYPE_TB
- en: '| RAD | Accessibility to highway |'
  prefs: []
  type: TYPE_TB
- en: '| TAX | Tax rate per $10,000 |'
  prefs: []
  type: TYPE_TB
- en: '| B | *1,000(Bk-0.63)² Bk* is equal to black population percentage |'
  prefs: []
  type: TYPE_TB
- en: '| LSTAT | Percent lower status population |'
  prefs: []
  type: TYPE_TB
- en: '| MEDV | Median value of owner-occupied homes $1,000''s |'
  prefs: []
  type: TYPE_TB
- en: 'So, let''s apply these so that we can make sense of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can get a summary so that we can get a feel for the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in a screen that looks like this when executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c50d3494-5b79-49cf-a85c-8de9951097dc.png)'
  prefs: []
  type: TYPE_IMG
- en: So, the data is somewhat dated. The median values are very low compared to current
    housing prices in the area.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the statistics are not politically correct – the B factor is a measure
    of the Black population.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, we have a good number of variables. Which ones are likely candidates
    for our model? I have found that the best tool for this is a simple regression
    plot of every variable against every other variable. We can use the following
    command for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'R does what we want, as shown in the following display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcca8722-e598-4df1-9c2b-ab897625fcb1.png)'
  prefs: []
  type: TYPE_IMG
- en: We are looking for either a positive or negative correlation, that is, a somewhat
    45-degree line or a negative 45-degree line. Anything that shows a hodgepodge
    or vertical or horizontal pattern is not going to tell us anything about the data.
  prefs: []
  type: TYPE_NORMAL
- en: The best correlations occurred with RAD (access to highway) and TAX (rate per
    $1,000). Luckily, most of the variables show a good correlation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As housing value is our yardstick, let''s order the data by it before we partition
    it, by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be using the caret package to partition the data, so let''s load that
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can partition the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The split counts appear to be correct. Let''s create our model and see what
    we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the screenshot of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ee8b0a0-9f53-4cdb-aedf-26cd39ec331a.png)'
  prefs: []
  type: TYPE_IMG
- en: It's interesting that several of the variables do not have much of an effect.
    These are `AGE`, `TAX`, and `B`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have our model, so now we can make predictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'I don''t think this summary tells us much. A plot of the two against each other
    (including an `abline` function) is much more informative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the screenshot of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d5ee7a4-410d-44f1-add2-4831d74e0031.png)'
  prefs: []
  type: TYPE_IMG
- en: Visually, it looks to be an excellent correlation between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do some math to see how close we got. A sum of squares will give us
    a good measure. I did not find a built-in method, so I added my own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a sum of the squares of the differences, which is at about 2,500\.
    This sounds significant for just a few hundred observations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added the ability to use R scripts in our Jupyter notebook.
    We added an R library that's not included in the standard R installation, and
    we made a Hello World script in R. We then saw R data access built-in libraries
    and some of the simpler graphics and statistics that are automatically generated.
    We used an R script to generate 3D graphics in a couple of different ways. We
    then performed a standard cluster analysis (which I think is one of the basic
    uses of R) and used one of the available forecasting tools. We also built a prediction
    model and tested its accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn all about Julia scripting using a Jupyter
    notebook.
  prefs: []
  type: TYPE_NORMAL
