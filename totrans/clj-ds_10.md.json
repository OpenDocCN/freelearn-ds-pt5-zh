["```py\nscript/download-data.sh\n\n```", "```py\n(defn bin [n-bins xs]\n  (let [min-x    (apply min xs)\n        range-x  (- (apply max xs) min-x)\n        max-bin  (dec n-bins)\n        bin-fn   (fn [x]\n                   (-> (- x min-x)\n                       (/ range-x)\n                       (* n-bins)\n                       (int)\n                       (min max-bin)))]\n    (map bin-fn xs)))\n```", "```py\n(defn ex-1-1 []\n  (bin 5 (range 20)))\n\n;;(0 0 0 0 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4)\n```", "```py\n(defn ex-1-2 []\n  (frequencies (bin 5 (range 20))))\n\n;;{0 4, 1 4, 2 4, 3 4, 4 4}\n```", "```py\n(defn histogram-2d [xsys n-bins]\n  (-> (map vector\n           (bin n-bins xs)\n           (bin n-bins ys))\n      (frequencies)))\n```", "```py\n(defn ex-10-3 []\n  (histogram-2d (range 20)\n                (reverse (range 20)) 5))\n\n;;{[0 4] 4, [1 3] 4, [2 2] 4, [3 1] 4, [4 0] 4}\n```", "```py\n(defn ex-10-4 []\n  (let [data (load-data :ru-victors)]\n    (histogram-2d (i/$ :turnout data)\n                  (i/$ :victors-share data) 5)))\n\n;; {[4 3] 6782, [2 2] 14680, [0 0] 3, [1 0] 61, [2 3] 2593,\n;;  [3 3] 8171, [1 1] 2689, [3 4] 1188, [4 2] 3084, [3 0] 64,\n;;  [4 1] 1131, [1 4] 13, [1 3] 105, [0 3] 6, [2 4] 193, [0 2] 10,\n;;  [2 0] 496, [0 4] 1, [3 1] 3890, [2 1] 24302, [4 4] 10771,\n;;  [1 2] 1170, [3 2] 13384, [0 1] 4, [4 0] 264}\n```", "```py\n(q/sketch :size [250 250])\n```", "```py\n(defn ex-10-5 []\n  (let [setup #(q/rect 0 0 50 50)]\n    (q/sketch :setup setup\n              :size [250 250])))\n```", "```py\ndefn draw-grid [{:keys [n-bins size]}]\n  (let [[width height] size\n        x-scale (/ width n-bins)\n        y-scale (/ height n-bins)\n        setup (fn []\n                (doseq [x (range n-bins)\n                        y (range n-bins)\n                        :let [x-pos (* x x-scale)\n                              y-pos (- height\n                                       (* (inc y) y-scale))]]\n                  (q/rect x-pos y-pos x-scale y-scale)))]\n    (q/sketch :setup setup :size size)))\n```", "```py\n(defn draw-filled-grid [{:keys [n-bins size fill-fn]}]\n  (let [[width height] size\n        x-scale (/ width n-bins)\n        y-scale (/ height n-bins)\n        setup (fn []\n                (doseq [x (range n-bins)\n                        y (range n-bins)\n                        :let [x-pos (* x x-scale)\n                              y-pos (- height\n                                       (* (inc y) y-scale))]]\n                  (q/fill (fill-fn x y))\n                  (q/rect x-pos y-pos x-scale y-scale)))]\n    (q/sketch :setup setup :size size)))\n```", "```py\n(defn ex-10-6 []\n  (let [data (load-data :ru-victors)\n        n-bins 5\n        hist (histogram-2d (i/$ :turnout data)\n                           (i/$ :victors-share data)\n                           n-bins)\n        max-val (apply max (vals hist))\n        fill-fn (fn [x y]\n                  (-> (get hist [x y] 0)\n                      (/ max-val)\n                      (* 255)))]\n    (draw-filled-grid {:n-bins n-bins\n                       :size [250 250]\n                       :fill-fn fill-fn})))\n```", "```py\n(defn ex-10-7 []\n  (let [data (load-data :ru-victors)\n        n-bins 25\n        hist (histogram-2d (i/$ :turnout data)\n                           (i/$ :victors-share data)\n                           n-bins)\n        max-val (apply max (vals hist))\n        fill-fn (fn [x y]\n                  (-> (get hist [x y] 0)\n                      (/ max-val)\n                      (* 255)))]\n    (draw-filled-grid {:n-bins n-bins\n                       :size [250 250]\n                       :fill-fn fill-fn})))\n```", "```py\n(defn ex-10-8 []\n  (let [data (load-data :ru-victors)\n        n-bins 25\n        hist (histogram-2d (i/$ :turnout data)\n                           (i/$ :victors-share data)\n                           n-bins)\n        mean (s/mean (vals hist))\n        sd   (s/sd   (vals hist))\n        fill-fn (fn [x y]\n                  (-> (get hist [x y] 0)\n                      (- mean)\n                      (/ sd)\n                      (q/map-range -1 3 0 255)))]\n    (draw-filled-grid {:n-bins n-bins\n                       :size [250 250]\n                       :fill-fn fill-fn})))\n```", "```py\n(defn z-score->heat [z-score]\n  (let [colors [(q/color 0 0 255)   ;; Blue\n                (q/color 0 255 255) ;; Turquoise\n                (q/color 0 255 0)   ;; Green\n                (q/color 255 255 0) ;; Yellow\n                (q/color 255 0 0)]  ;; Red\n        offset  (-> (q/map-range z-score -1 3 0 3.999)\n                    (max 0)\n                    (min 3.999))]\n    (q/lerp-color (nth colors offset)\n                  (nth colors (inc offset))\n                  (rem offset 1))))\n```", "```py\n(defn ex-10-9 []\n  (let [data (load-data :ru-victors)\n        n-bins 25\n        hist (histogram-2d (i/$ :turnout data)\n                           (i/$ :victors-share data)\n                           n-bins)\n        mean (s/mean (vals hist))\n        sd   (s/sd   (vals hist))\n        fill-fn (fn [x y]\n                  (-> (get hist [x y] 0)\n                      (- mean)\n                      (/ sd)\n                      (z-score->heat)))]\n    (draw-filled-grid {:n-bins n-bins\n                       :size [250 250]\n                       :fill-fn fill-fn})))\n```", "```py\n(defn draw-filled-grid [{:keys [n-bins size fill-fn]}]\n  (let [[width height] size\n        x-scale (/ width n-bins)\n        y-scale (/ height n-bins)\n        setup (fn []\n                (doseq [x (range n-bins)\n                        y (range n-bins)\n                        :let [x-pos (* x x-scale)\n                              y-pos (- height\n                                       (* (inc y) y-scale))]]\n                  (q/fill (fill-fn x y))\n                  (q/rect x-pos y-pos x-scale y-scale))\n                  (q/save \"heatmap.png\"))]\n    (q/sketch :setup setup :size size)))\n```", "```py\n(defn ex-10-10 []\n  (let [categories [\"0-79\" \"80-89\" \"90-95\" \"96-99\" \"100\"]\n        percentage [5      11      13      30      42   ]]\n    (-> (c/bar-chart categories percentage\n                     :x-label \"Category\"\n                     :y-label \"% Financial Wealth\")\n        (i/view))))\n```", "```py\n(def wealth-distribution\n  (concat (repeat 80 (/ 5  80))\n          (repeat 10 (/ 11 10))\n          (repeat 5  (/ 13 5))\n          (repeat 4  (/ 30 4))\n          (repeat 1  (/ 42 1))))\n\n(defn ex-10-11 []\n  (let [categories (range (count wealth-distribution))]\n    (-> (c/bar-chart categories wealth-distribution\n                     :x-label \"Percentile\"\n                     :y-label \"% Financial Wealth\")\n        (i/view))))\n```", "```py\n(def plot-x 56)\n(def plot-y 60)\n(def plot-width 757)\n(def plot-height 400)\n(def bar-width 7)\n```", "```py\n(defn draw-bars []\n  (let [pc99    (vec (butlast wealth-distribution))\n        pc1     (last wealth-distribution)\n        y-max   (apply max pc99)\n        y-scale (fn [x] (* (/ x y-max) plot-height))\n        offset  (fn [i] (* (quot i 10) 7))]\n    (dotimes [i 99] ;; Draw the 99%\n      (let [bar-height (y-scale (nth pc99 i))]\n        (q/rect (+ plot-x (* i bar-width) (offset i))\n                (+ plot-y (- plot-height bar-height))\n                bar-width bar-height)))\n    (let [n-bars 5  ;; Draw the 1%\n          bar-height (y-scale (/ pc1 n-bars))]\n      (q/rect (+ plot-x (* 100 bar-width) (offset 100))\n              (+ plot-y (- plot-height bar-height))\n              (* bar-width n-bars) bar-height))))\n```", "```py\n(defn ex-10-12 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup draw-bars)))\n```", "```py\n(defn group-offset [i]\n  (* (quot i 10) 7))\n\n(defn draw-axis-labels []\n  (q/fill 0)\n  (q/text-align :left)\n  (q/text-size 12)\n  (doseq [pc (range 0 (inc 100) 10)\n          :let [offset (group-offset pc)\n                x      (* pc bar-width)]]\n    (q/text (str pc \"%\") (+ plot-x x offset) label-y))\n    (q/text \"\\\"The 1%\\\"\" pc1-label-x  pc1-label-y))\n```", "```py\n(defn emboss-text [text x y]\n  (q/fill 255)\n  (q/text text x y)\n  (q/fill 100)\n  (q/text text x (- y 2)))\n\n(defn draw-title []\n  (q/text-size 35)\n  (q/text-leading 35)\n  (q/text-align :center :top)\n  (emboss-text \"ACTUAL DISTRIBUTION\\nOF WEALTH IN THE US\"\n               title-x title-y))\n```", "```py\n(defn ex-10-13 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup #((draw-bars)\n                       (draw-axis-labels)\n     (draw-title)))))\n```", "```py\n(defn draw-shapes []\n  (let [usa    (q/load-shape \"resources/us-mainland.svg\")\n        person (q/load-shape \"resources/person.svg\")\n        colors [(q/color 243 195 73)\n                (q/color 231 119 46)\n                (q/color 77  180 180)\n                (q/color 231 74  69)\n                (q/color 61  76  83)]]\n    (.disableStyle usa)\n    (.disableStyle person)\n    (q/stroke 0 50)\n    (q/fill 200)\n    (q/shape usa 0 0)\n    (dotimes [n 99]\n      (let [quintile (quot n 20)\n            x (-> (* n bar-width)\n                  (+ plot-x)\n                  (+ (group-offset n)))]\n        (q/fill (nth colors quintile))\n        (q/shape person x icons-y icon-width icon-height)))\n        (q/shape person\n             (+ plot-x (* 100 bar-width) (group-offset 100))\n             icons-y icon-width icon-height)))\n```", "```py\n(defn ex-10-14 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup #((draw-shapes)\n                       (draw-bars)\n                       (draw-axis-labels)\n                       (draw-title)))))\n```", "```py\n(defn banknotes [x y width height]\n  (q/no-stroke)\n  (q/fill 80 127 64)\n  (doseq [y (range (* 3 (quot y 3)) (+ y height) 3)\n          x (range x (+ x width) 7)]\n    (q/rect x y 6 2)))\n```", "```py\n(defn ex-10-15 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup #((draw-shapes)\n                       (draw-banknotes)\n                       (draw-axis-labels)\n                       (draw-title)))))\n```", "```py\n(defn area-points [proportions]\n  (let [f (fn [prev area]\n            (-> (- area prev)\n                (* 2)\n                (+ prev)))\n        sum (reduce + proportions)]\n    (->> (reductions f (first proportions) proportions)\n         (map #(/ % sum)))))\n```", "```py\n(defn plot-area [proportions px py width height]\n  (let [ys      (area-points proportions)\n        points  (map vector (range) ys)\n        x-scale (/ width (dec (count ys)))\n        y-scale (/ height (apply max ys))]\n    (q/stroke 0)\n    (q/fill 200)\n    (q/begin-shape)\n    (doseq [[x y] points]\n      (q/vertex (+ px (* x x-scale))\n                (- py (* y y-scale))))\n      (q/end-shape)))\n\n(defn ex-10-16 []\n  (let [expected [3 6.5 12 20 58.5]\n        width  640\n        height 480\n        setup (fn []\n                (q/background 255)\n                (plot-area expected 0 height width height))]\n    (q/sketch :setup setup :size [width height])))\n```", "```py\n(defn plot-full-area [proportions px py width height]\n  (let [ys      (area-points proportions)\n        points  (map vector (range) ys)\n        x-scale (/ width (dec (count ys)))\n        y-scale (/ height (apply max ys))]\n    (q/stroke 0)\n    (q/fill 200)\n    (q/begin-shape)\n    (q/vertex 0 height)\n    (doseq [[x y] points]\n      (q/vertex (+ px (* x x-scale))\n                (- py (* y y-scale))))\n    (q/vertex width height)\n    (q/end-shape)))\n\n(defn ex-10-17 []\n  (let [expected [3 6.5 12 20 58.5]\n        width  640\n        height 480\n        setup (fn []\n                (q/background 255)\n                (plot-full-area expected 0 height width height))]\n    (q/sketch :setup setup :size [width height])))\n```", "```py\n(defn smooth-curve [xs ys]\n  (let [points (map vector xs ys)]\n    (apply q/curve-vertex (first points))\n    (doseq [point points]\n      (apply q/curve-vertex point))\n    (apply q/curve-vertex (last points))))\n```", "```py\n(defn smooth-stroke [xs ys]\n  (q/begin-shape)\n  (q/vertex (first xs) (first ys))\n  (smooth-curve (rest xs) (rest ys))\n  (q/end-shape))\n\n(defn smooth-area [xs ys]\n  (q/begin-shape)\n  (q/vertex (first xs) (first ys))\n  (smooth-curve (rest xs) (rest ys))\n  (q/vertex (last xs) (first ys))\n  (q/end-shape))\n```", "```py\n(defn plot-curve [xs ys fill-color\n                  stroke-color stroke-weight]\n  (let [points (map vector xs ys)]\n    (q/no-stroke)\n    (q/fill fill-color)\n    (smooth-area xs ys)\n    (q/no-fill)\n    (q/stroke stroke-color)\n    (q/stroke-weight stroke-weight)\n    (smooth-stroke xs ys)))\n```", "```py\n(defn plot-smooth-area [proportions px py width height]\n  (let [ys      (cons 0 (area-points proportions))\n        points  (map vector (range) ys)\n        x-scale (/ width (dec (count ys)))\n        y-scale (/ height (apply max ys) -1)]\n    (plot-curve (map (point->px px x-scale) (range (count ys)))\n                (map (point->px py y-scale) ys)\n                (q/color 200)\n                (q/color 0) 2)))\n\n(defn ex-10-18 []\n  (let [expected [3 6.5 12 20 58.5]\n        width  640\n        height 480\n        setup (fn []\n                (q/background 255)\n                (plot-smooth-area expected 0 height\n                                  width height))]\n    (q/sketch :setup setup :size [width height])))\n```", "```py\n(defn plot-areas [series px py width height]\n  (let [series-ys (map area-points series)\n        n-points  (count (first series-ys))\n        x-scale   (point->px px (/ width (dec n-points)))\n        xs        (map x-scale (range n-points))\n        y-max     (apply max (apply concat series-ys))\n        y-scale   (point->px py (/ height y-max -1))]\n    (doseq [ys series-ys]\n      (plot-curve (cons (first xs) xs)\n                  (map y-scale (cons 0 ys))\n                  (q/color 255 100)\n                  (q/color 255 200) 3))))\n\n(defn ex-10-19 []\n  (let [expected [3 6.5 12 20 58.5]\n        ideal    [10.5 14 21.5 22 32]\n        width  640\n        height 480\n        setup (fn []\n                (q/background 100)\n                (plot-areas [expected ideal] 0 height\n                            width height))]\n    (q/sketch :setup setup :size [width height])))\n```", "```py\n(defn draw-expected-ideal []\n  (let [expected [3 6.5 12 20 58.5]\n        ideal    [10.5 14 21.5 22 32]]\n    (plot-areas [expected ideal]\n                plot-x\n                (+ plot-y plot-height)\n                plot-width\n                (* (/ plot-height 0.075) 0.05))\n    (q/text-size 20)\n    (emboss-text \"EXPECTED\" 400 430)\n    (emboss-text \"IDEAL\" 250 430)))\n```", "```py\n(defn ex-10-20 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup #((draw-shapes)\n                       (draw-expected-ideal)\n                       (draw-banknotes)\n                       (draw-axis-labels)\n                       (draw-title)))))\n```", "```py\n(defn ex-10-21 []\n  (let [size [960 540]]\n    (q/sketch :size size\n              :setup #((draw-shapes)\n                       (draw-expected-ideal)\n                       (draw-banknotes)\n                       (draw-axis-labels)\n                       (draw-title))\n              :renderer :pdf\n              :output-file \"wealth-distribution.pdf\")))\n```"]