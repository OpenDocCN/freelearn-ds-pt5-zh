["```py\n    Dataframe <- read.csv(\"data.csv\",sep=\",\")\n\n    ```", "```py\n    Dataframe <- read.table(\"data.csv\", sep=\"\\t\")\n\n    ```", "```py\n    load(\"history.RDATA\")\n\n    ```", "```py\n    load(\"data_variables_a_and_b.rda\")\n\n    ```", "```py\n    write.csv(mydata, \"c:/mydata.csv\", sep=\",\", row.names=FALSE)\n\n    ```", "```py\n    write.table(mydata, \"c:/mydata.txt\", sep=\"\\t\")\n\n    ```", "```py\n    save.image()\n\n    ```", "```py\n    # column vector\n    a <- c(1,2,3)\n\n    # column vector\n    b <- c(2,4,6)\n\n    # saving it to R (.rda) data format\n    save(a, b, file=\" data_variables_a_and_b.rda\")\n\n    ```", "```py\n// Updating the linux package list\nsudo apt-get update\n\n// Upgrading the updated packages\nsudo apt-get dist-upgrade\n\n//First, install the MySQL server and client packages:\nsudo apt-get install mysql-server mysql-client\n\n```", "```py\nmysql -u root -p\n\n```", "```py\n# to install RMySQL library\ninstall.packages(\"RMySQL\")\n\n#Loading RMySQL\nlibrary(RMySQL)\n\n```", "```py\nmydb = dbConnect(MySQL(), user='root', password='', dbname='sample_table', host='localhost')\n\n```", "```py\ndbListTables(mydb)\n\n```", "```py\ndbListFields(mydb, 'sample_table')\n\n```", "```py\nrs = dbSendQuery(mydb, \"select * from sample_table\")\n\n```", "```py\ndataset = fetch(rs, n=-1)\n\n```", "```py\ndbWriteTable(mydb, name='mysql_table_name', value=data.frame.name)\n\n```", "```py\n# defining data matrix\ndatamatrix <- matrix(1:4, 2, 2)\n\n# defining query to insert the data\nquery <- paste(\"INSERT INTO names VALUES(\",datamatrix [1,1], \",\", datamatrix [1,2], \")\")\n\n# command for submitting the defined SQL query dbGetQuery(con, query)\n\n```", "```py\ndbSendQuery(mydb, 'drop table if exists mysql_some_table').\n\n```", "```py\nes <- read.xlsx(\"D:/ga.xlsx\",1) \n\n```", "```py\nr <- res[1:5,]\n\n```", "```py\nress <- write.xlsx(r, \"D:/ga1.xls\") \n\n```", "```py\n    sudo apt-key adv --keyserverhkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n\n    ```", "```py\n    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n\n    ```", "```py\n    sudo apt-get update\n\n    ```", "```py\n    apt-get install mongodb-10gen\n\n    ```", "```py\n        [mongodb]\n        name=MongoDB Repository\n        baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/\n        gpgcheck=0\n        enabled=1\n\n        ```", "```py\n        [mongodb]\n        name=MongoDB Repository\n        baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686/\n        gpgcheck=0\n        enabled=1\n\n        ```", "```py\nyum install mongo-10gen mongo-10gen-server\n\n```", "```py\nsudo service mongodb start\n\n```", "```py\nsudo service mongodb stop\n\n```", "```py\nsudo service mongodb restart\n\n```", "```py\nmongo\n\n```", "```py\nINSERT INTO students VALUES(1,1)\n\n```", "```py\n$db->students->insert(array(\"a\" => 1, \"b\" => 1));\n\n```", "```py\nSELECT a, b FROM students\n\n```", "```py\n$db->students->find(array(), array(\"a\" => 1, \"b\" => 1));\n\n```", "```py\nSELECT * FROM students WHERE age < 15\n\n```", "```py\n$db->students->find(array(\"age\" => array('$lt' => 15)));\n\n```", "```py\nUPDATE students SET a=1 WHERE b='q'\n\n```", "```py\n$db->students->update(array(\"b\" => \"q\"), array('$set' => array(\"a\" => 1)));\n\n```", "```py\nDELETE FROM students WHERE name=\"siddharth\"\n\n```", "```py\n$db->students->remove(array(\"name\" => \" siddharth\"));\n\n```", "```py\n# installing library rmongodb in R\ninstall.packages (rmongodb)\n\n```", "```py\n# loading the library of rmongodb\nlibrary (rmongodb)\n\nMongo connection establishment\nmongo <-mongo.create ()\n\nCheck whether the normal series\nmongo.is.connected (mongo)\n\nCreate a BSON object cache\nbuf <- mongo.bson.buffer.create ()\n\nAdd element to the object buf\nmongo.bson.buffer.append (buf, \"name\", \"Echo\")\n\n```", "```py\nb <- mongo.bson.from.list(list(name=\"Fred\", age=29, city=\"Boston\"))iter <- mongo.bson.iterator.create(b)  # b is of class \"mongo.bson\"while (mongo.bson.iterator.next(iter))print(mongo.bson.iterator.value(iter))\n\n```", "```py\n# To check whether mongo is connected or not in R.\nif (mongo.is.connected(mongo)) {ns <- \"test.people\"\n#Returns a fresh mongo.bson.buffer object ready to have data \n#appended onto it in R.buf <- mongo.bson.buffer.create()mongo.bson.buffer.append(buf, \"name\", \"Joe\")criteria <- mongo.bson.from.buffer(buf)\n\n# mongo.bson.buffer objects are used to build mongo.bson objects.buf <- mongo.bson.buffer.create()\n mongo.bson.buffer.start.object(buf, \"inc\")mongo.bson.buffer.append(buf, \"age\", 1L)mongo.bson.buffer.finish.object(buf)objNew <- mongo.bson.from.buffer(buf)# increment the age field of the first record   matching name \"Joe\"mongo.update(mongo, ns, criteria, objNew)\n\n# mongo.bson.buffer objects are used to build mongo.bson objects.buf <- mongo.bson.buffer.create()mongo.bson.buffer.append(buf, \"name\", \"Jeff\")criteria <- mongo.bson.from.buffer(buf)\n\n# mongo.bson.buffer objects are used to build mongo.bson objects.buf <- mongo.bson.buffer.create()mongo.bson.buffer.append(buf, \"name\", \"Jeff\")mongo.bson.buffer.append(buf, \"age\", 27L)objNew <- mongo.bson.from.buffer(buf)# update the entire record to { name: \"Jeff\", age: 27 }# where name equals \"Jeff\"# if such a record exists; otherwise, insert this as a new reordmongo.update(mongo, ns, criteria, objNew,mongo.update.upsert)# do a shorthand update:mongo.update(mongo, ns, list(name=\"John\"), list(name=\"John\", age=25))}\n\n```", "```py\n// install sqllite by firing the following commands\nsudo apt-get purge sqlite3 sqlite3-doc libsqlite3-0\nsudo apt-get autoremove\nsudo apt-get install sqlite3 sqlite3-doc\n\n```", "```py\n# installing RSQLite library from CRAN in R\nInstall.packages(\"RSQLite\")\n\n```", "```py\n#loading the installed package\nlibrary(\"RSQLite\")\n\n```", "```py\n# connect to db\ncon <- dbConnect(SQLite(), dbname=\"data/first.db\")\n\n# list all tables\ntables <- dbListTables(con)\n\n# exclude sqlite_sequence (contains table information)\ntables <- tables[tables != \"sqlite_sequence\"]\nlDataFrames <- vector(\"list\", length=length(tables))\n\n# create a data.frame for each table\nfor (i in seq(along=tables)) {\n lDataFrames[[i]] <- dbGetQuery(conn=con, statement=paste(\"SELECT * FROM '\", tables[[i]], \"'\", sep=\"\"))\n}\n\n```", "```py\ndbBeginTransaction(con)\nrs <- dbSendQuery(con, \"DELETE from candidates WHERE age > 50\")\nExporting the data from Rdata(USArrests)\ndbWriteTable(con, \"USArrests\", USArrests)\n\n```", "```py\n// updating the packages list\nSudo apt-get update\n\n// installing postgresql \nsudo apt-get install postgresql postgresql-contrib\n\n// creating postgresql user\nsu – postgres createuser\n\n```", "```py\n# installing package from CRAN\ninstall.packages(RPostgreSQL)\nImporting the data into R# loading the installed package\nlibrary(RPostgreSQL)\n\n## load the PostgreSQL driver\ndrv <- dbDriver(\"PostgreSQL\")\n\n## Open a connection\ncon <- dbConnect(drv, dbname=\"oxford\")\n\n## Submits a statement\nrs <- dbSendQuery(con, \"select * from student\")\n\n## fetch all elements from the result set\nfetch(rs,n=-1)\n\n## Closes the connection\ndbDisconnect(con)\n\n## Frees all the resources on the driver\ndbUnloadDriver(drv)\n\n```", "```py\nopendbGetQuery(con, \"BEGIN TRANSACTION\")\nrs <- dbSendQuery(con,\n\"Delete * from sales as p where p.cost>10\")\nif(dbGetInfo(rs, what = \"rowsAffected\") > 250){\n  warning(\"Rolling back transaction\")\n  dbRollback(con)\n}else{\n  dbCommit(con)\n}\n```", "```py\nconn <- dbConnect(\"PostgreSQL\", dbname = \"wireless\")\nif(dbExistsTable(con, \"frame_fuel\")){\n  dbRemoveTable(conn, \"frame_fuel\")\n  dbWriteTable(conn, \"frame_fuel\", fuel.frame)\n}\nif(dbExistsTable(conn, \"RESULTS\")){\n  dbWriteTable(conn, \"RESULTS\", results2000, append = T)\n  else\n  dbWriteTable(conn, \"RESULTS\", results2000)\n}\n```", "```py\n// Downloading the hive source from apache mirror\nwget http://www.motorlogy.com/apache/hive/hive-0.11.0/hive-0.11.0.tar.gz\n\n// For extracting the hive source\ntar xzvf  hive-0.11.0.tar.gz\n\n```", "```py\n    <description> JDBC connect string for a JDBC metastore </ description>\n    </Property>\n\n    <property>\n    <name> javax.jdo.option.ConnectionDriverName </ name>\n    <value> com.mysql.jdbc.Driver </ value>\n    <description> Driver class name for a JDBC metastore </ description>\n    </Property>\n\n    <property>\n    <name> javax.jdo.option.ConnectionUserName </ name>\n    <value> hive </value>\n    <description> username to use against metastore database </ description>\n    </ Property>\n\n    <property>\n    <name> javax.jdo.option.ConnectionPassword </name>\n    <value> hive</value>\n    <description> password to use against metastore database </ description>\n    </Property>\n\n    <property>\n    <name> hive.metastore.warehouse.dir </ name>\n    <value> /user/hive/warehouse </value>\n    <description> location of default database for the warehouse </ description>\n    </Property>\n    ```", "```py\n    log4j.appender.EventCounter = org.apache.hadoop.log.metrics.EventCounter\n\n    ```", "```py\n    export $HIVE_HOME=/usr/local/ hive-0.11.0\n\n    ```", "```py\n    $HADOOP_HOME/bin/ hadoop fs-mkidr /tmp\n    $HADOOP_HOME/bin/ hadoop fs-mkidr /user/hive/warehouse\n    $HADOOP_HOME/bin/ hadoop fs-chmod g+w / tmp\n    $HADOOP_HOME/bin/ hadoop fs-chmod g+w /user/hive/warehouse\n\n    ```", "```py\n    // for setting up java configuration variables\n    sudo R CMD javareconf\n\n    // Installing rJava package\n    install.packages (\"rJava\")\n\n    // Installing RHive package from CRAN\n    install.packages(\"RHive\")\n\n    // Loading RHive library\n    library(\"RHive\")\n\n    ```", "```py\n    rhive.init ()\n\n    ```", "```py\n    rhive.connect (\"192.168.1.210\")\n\n    ```", "```py\n    rhive.list.tables ()\n     tab_name\n    1 hive_algo_t_account\n    2 o_account\n    3 r_t_account\n\n    ```", "```py\n    rhive.desc.table ('o_account');\n     col_name data_type comment\n\n    1 id int\n    2 email string\n    3 create_date string\n\n    ```", "```py\n    rhive.query (\"select * from o_account\");\n\n    ```", "```py\n    rhive.close()\n\n    ```", "```py\n    wget http://apache.cs.utah.edu/hbase/stable/hbase-0.94.11.tar.gz\n\n    tar -xzf hbase-0.94.11.tar.gz\n\n    ```", "```py\n    cd hbase-0.94.11/\n\n    vi conf/hbase-site.xml\n\n    ```", "```py\n        ~ Vi conf / hbase-env.sh \n\n        ```", "```py\n         export JAVA_HOME = /usr/lib/jvm/java-6-sun\n         export HBASE_HOME = /usr/local/hbase-0.94.11\n         export HADOOP_INSTALL = /usr/local/hadoop\n         export HBASE_CLASSPATH = /usr/local/hadoop/conf\n         export HBASE_MANAGES_ZK = true\n\n        ```", "```py\n        Vi conf / hbase-site.xml\n\n        ```", "```py\n            <configuration>\n              <property>\n                <name> hbase.rootdir </name>\n                <value> hdfs://master:9000/hbase </value>\n              </Property>\n\n              <property>\n                <name>hbase.cluster.distributed </name>\n                <value>true</value>\n              </Property>\n\n              <property>\n                 <name>dfs.replication </name>\n                 <value>1</value>\n              </Property>\n\n              <property>\n                <name>hbase.zookeeper.quorum </name>\n                <value>master</value>\n              </Property>\n\n              <property>\n                  <name>hbase.zookeeper.property.clientPort </name>\n                  <value>2181</value>\n              </Property>\n\n              <property>\n                <name>hbase.zookeeper.property.dataDir </name>\n                <value>/root/hadoop/hdata</​​value>\n              </Property>\n            </ Configuration>\n        ```", "```py\n        Cp $HADOOP_HOME/conf/hdfs-site.xml $HBASE_HOME/conf\n        Cp $HADOOP_HOME/hadoop-core-1.0.3.jar $HBASE_HOME/lib\n        Cp $HADOOP_HOME/lib/commons-configuration-1.6.jar $HBASE_HOME/lib\n        Cp $HADOOP_HOME/lib/commons-collections-3.2.1.jar $HBASE_HOME/lib\n\n        ```", "```py\n    get http://archive.apache.org/dist/thrift/0.8.0/thrift-0.8.0.tar.gz\n\n    ```", "```py\n    tar xzvf thrift-0.8.0.tar.gz\n    cd thrift-0.8.0/\n\n    ```", "```py\n    ./Configure\n\n    ```", "```py\n    Make\n    Make install\n\n    ```", "```py\n    $HBASE_HOME/bin/hbase-daemon.sh start\n\n    ```", "```py\n    wget https://github.com/RevolutionAnalytics/rhbase/blob/master/build/rhbase_1.2.0.tar.gz\n\n    ```", "```py\n    R CMD INSTALL rhbase_1.2.0.tar.gz\n\n    ```", "```py\n    hb.list.tables ()\n\n    ```", "```py\n    hb.new.table (\"student\")\n\n    ```", "```py\n    hb.describe.table(\"student_rhbase\")\n\n    ```", "```py\n    hb.get ('student_rhbase', 'mary')\n\n    ```", "```py\n    hb.new.table (\"student_rhbase\", \"info\")\n\n    ```", "```py\n    hb.insert (\"student_rhbase\", list (list (\"mary\", \"info: age\", \"24\")))\n\n    ```", "```py\n    hb.delete.table ('student_rhbase')\n\n    ```"]