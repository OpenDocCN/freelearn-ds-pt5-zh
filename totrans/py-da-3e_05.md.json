["```py\n# Import required libraries NumPy, polynomial and matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate two random vectors\nv1=np.random.rand(10)\nv2=np.random.rand(10)\n\n# Creates a sequence of equally separated values\nsequence = np.linspace(v1.min(),v1.max(), num=len(v1)*10)\n\n# Fit the data to polynomial fit data with 4 degrees of the polynomial\ncoefs = np.polyfit(v1, v2, 3)\n\n# Evaluate polynomial on given sequence\npolynomial_sequence = np.polyval(coefs,sequence)\n\n# plot the polynomial curve\nplt.plot(sequence, polynomial_sequence)\n\n# Show plot\nplt.show()\n```", "```py\n# Import numpy\nimport numpy as np\n\n# Create matrix using NumPy\nmat=np.mat([[2,4],[5,7]])\nprint(\"Matrix:\\n\",mat)\n\n# Calculate determinant\nprint(\"Determinant:\",np.linalg.det(mat))\n\n```", "```py\nMatrix:\n[[2 4]\n[5 7]]\nDeterminant: -5.999999999999998\n```", "```py\n# import required libraries\nimport numpy as np\nfrom numpy.linalg import matrix_rank\n\n# Create a matrix\nmat=np.array([[5, 3, 1],[5, 3, 1],[1, 0, 5]])\n\n# Compute rank of matrix\nprint(\"Matrix: \\n\", mat)\nprint(\"Rank:\",matrix_rank(mat))\n\n```", "```py\nMatrix:\n[[5 3 1]\n[5 3 1]\n[1 0 5]]\nRank: 2\n```", "```py\n# Import numpy\nimport numpy as np\n\n# Create matrix using NumPy\nmat=np.mat([[2,4],[5,7]])\nprint(\"Input Matrix:\\n\",mat)\n\n# Find matrix inverse\ninverse = np.linalg.inv(mat)\nprint(\"Inverse:\\n\",inverse)\n\n```", "```py\nInput Matrix:\n[[2 4]\n[5 7]]\nInverse:\n[[-1.16666667 0.66666667]\n[ 0.83333333 -0.33333333]]\n```", "```py\n# Create matrix A and Vector B using NumPy\nA=np.mat([[1,1],[3,2]])\nprint(\"Matrix A:\\n\",A)\n\nB = np.array([200,450])\nprint(\"Vector B:\", B)\n```", "```py\nMatrix A:\n[[1 1]\n[3 2]]\nVector B: [200 450]\n```", "```py\n# Solve linear equations\nsolution = np.linalg.solve(A, B)\nprint(\"Solution vector x:\", solution)\n\n```", "```py\nSolution vector x: [ 50\\. 150.]\n```", "```py\n# Check the solution\nprint(\"Result:\",np.dot(A,solution))\n\n```", "```py\nResult: [[200\\. 450.]]\n```", "```py\n# import required libraries\nimport numpy as np\nfrom scipy.linalg import svd\n\n# Create a matrix\nmat=np.array([[5, 3, 1],[5, 3, 0],[1, 0, 5]])\n\n# Perform matrix decomposition using SVD\nU, Sigma, V_transpose = svd(mat)\n\nprint(\"Left Singular Matrix:\",U)\nprint(\"Diagonal Matrix: \", Sigma)\nprint(\"Right Singular Matrix:\", V_transpose)\n```", "```py\nLeft Singular Matrix: [[-0.70097269 -0.06420281 -0.7102924 ]\n                       [-0.6748668  -0.26235919  0.68972636]\n                       [-0.23063411  0.9628321   0.14057828]]\n\nDiagonal Matrix: [8.42757145 4.89599358 0.07270729]\n\nRight Singular Matrix: [[-0.84363943 -0.48976369 -0.2200092]\n                        [-0.13684207 -0.20009952 0.97017237]\n                        [ 0.51917893 -0.84858218 -0.10179157]]\n```", "```py\n# Import numpy\nimport numpy as np\n\n# Create matrix using NumPy\nmat=np.mat([[2,4],[5,7]])\nprint(\"Matrix:\\n\",mat)\n\n```", "```py\nMatrix: [[2 4]\n         [5 7]]\n```", "```py\n# Calculate the eigenvalues and eigenvectors\neigenvalues, eigenvectors = np.linalg.eig(mat)\nprint(\"Eigenvalues:\", eigenvalues) \nprint(\"Eigenvectors:\", eigenvectors) \n```", "```py\nEigenvalues: [-0.62347538 9.62347538]\n\nEigenvectors: [[-0.83619408 -0.46462222]\n [ 0.54843365 -0.885509 ]]\n```", "```py\n# Compute eigenvalues \neigenvalues= np.linalg.eigvals(mat)\nprint(\"Eigenvalues:\", eigenvalues) \n```", "```py\nEigenvalues: [-0.62347538 9.62347538]\n```", "```py\n# Import numpy\nimport numpy as np\n\n# Create an array with random values\nrandom_mat=np.random.random((3,3))\nprint(\"Random Matrix: \\n\",random_mat)\n```", "```py\nRandom Matrix: [[0.90613234 0.83146869 0.90874706]\n                [0.59459996 0.46961249 0.61380679]\n                [0.89453322 0.93890312 0.56903598]]\n```", "```py\n# Import required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create an numpy vector of size 5000 with value 0\ncash_balance = np.zeros(5000)\n\ncash_balance[0] = 500\n\n# Generate random numbers using Binomial\nsamples = np.random.binomial(9, 0.5, size=len(cash_balance))\n\n# Update the cash balance\nfor i in range(1, len(cash_balance)):\nif samples[i] < 5:\n    cash_balance[i] = cash_balance[i - 1] - 1\nelse:\n    cash_balance[i] = cash_balance[i - 1] + 1\n\n# Plot the updated cash balance\nplt.plot(np.arange(len(cash_balance)), cash_balance)\nplt.show()\n```", "```py\n# Import required library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nsample_size=225000\n\n# Generate random values sample using normal distribution\nsample = np.random.normal(size=sample_size)\n\n# Create Histogram\nn, bins, patch_list = plt.hist(sample, int(np.sqrt(sample_size)), density=True) \n\n# Set parameters\nmu, sigma=0,1\n\nx= bins\ny= 1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * sigma**2) )\n\n# Plot line plot(or bell curve)\nplt.plot(x,y,color='red',lw=2)\nplt.show()\n```", "```py\n# Import required library\nimport numpy as np\n\n# create small, medium, and large samples for normality test\nsmall_sample = np.random.normal(loc=100, scale=60, size=15)\nmedium_sample = np.random.normal(loc=100, scale=60, size=100)\nlarge_sample = np.random.normal(loc=100, scale=60, size=1000)\n```", "```py\n# Histogram for small\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create distribution plot\nsns.distplot(small_sample)\n\nsns.distplot(small_sample)\n\nplt.show()\n```", "```py\n# Histogram for medium\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create distribution plot\nsns.distplot(medium_sample)\n\nplt.show()\n```", "```py\n# Histogram for large\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create distribution plot\nsns.distplot(large_sample)\n\nplt.show()\n```", "```py\n# Import shapiro function\nfrom scipy.stats import shapiro\n\n# Apply Shapiro-Wilk Test\nprint(\"Shapiro-Wilk Test for Small Sample: \",shapiro(small_sample))\nprint(\"Shapiro-Wilk Test for Medium Sample: \",shapiro(medium_sample))\nprint(\"Shapiro-Wilk Test for Large Sample: \",shapiro(large_sample))\n```", "```py\nShapiro-Wilk Test for Small Sample: (0.9081739783287048, 0.2686822712421417)\nShapiro-Wilk Test for Medium Sample: (0.9661878347396851, 0.011379175819456577)\nShapiro-Wilk Test for Large Sample: (0.9991633892059326, 0.9433153867721558)\n```", "```py\n# Import required library\nimport numpy as np\nfrom scipy.misc import face\nimport matplotlib.pyplot as plt\n\nface_image = face()\nmask_random_array = np.random.randint(0, 3, size=face_image.shape)\n\nfig, ax = plt.subplots(nrows=2, ncols=2)\n\n# Display the Original Image\nplt.subplot(2,2,1)\nplt.imshow(face_image)\nplt.title(\"Original Image\")\nplt.axis('off')\n\n# Display masked array\nmasked_array = np.ma.array(face_image, mask=mask_random_array)\nplt.subplot(2,2,2)\nplt.title(\"Masked Array\")\nplt.imshow(masked_array)\nplt.axis('off')\n\n# Log operation on original image\nplt.subplot(2,2,3)\nplt.title(\"Log Operation on Original\")\nplt.imshow(np.ma.log(face_image).astype('uint8'))\nplt.axis('off')\n\n# Log operation on masked array\nplt.subplot(2,2,4)\nplt.title(\"Log Operation on Masked\")\nplt.imshow(np.ma.log(masked_array).astype('uint8'))\nplt.axis('off')\n\n# Display the subplots\nplt.show()\n```"]