["```py\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.read_excel(io='../data/Online Retail.xlsx', sheet_name='Online Retail')\n```", "```py\nax = df['Quantity'].plot.box(\n    showfliers=False,\n    grid=True,\n    figsize=(10, 7)\n)\n\nax.set_ylabel('Order Quantity')\nax.set_title('Quantity Distribution')\n\nplt.suptitle(\"\")\nplt.show()\n```", "```py\ndf = df.loc[df['Quantity'] > 0]\n```", "```py\nmonthly_orders_df = df.set_index('InvoiceDate')['InvoiceNo'].resample('M').nunique()\n```", "```py\nax = pd.DataFrame(monthly_orders_df.values).plot(\n    grid=True,\n    figsize=(10,7),\n    legend=False\n)\n\nax.set_xlabel('date')\nax.set_ylabel('number of orders/invoices')\nax.set_title('Total Number of Orders Over Time')\n\nplt.xticks(\n    range(len(monthly_orders_df.index)), \n    [x.strftime('%m.%Y') for x in monthly_orders_df.index], \n    rotation=45\n)\n\nplt.show()\n```", "```py\ninvoice_dates = df.loc[\n    df['InvoiceDate'] >= '2011-12-01',\n    'InvoiceDate'\n]\n\nprint('Min date: %s\\nMax date: %s' % (invoice_dates.min(), invoice_dates.max()))\n```", "```py\ndf = df.loc[df['InvoiceDate'] < '2011-12-01']\n```", "```py\ndf['Sales'] = df['Quantity'] * df['UnitPrice']\n\nmonthly_revenue_df = df.set_index('InvoiceDate')['Sales'].resample('M').sum()\n```", "```py\nax = pd.DataFrame(monthly_revenue_df.values).plot(\n    grid=True,\n    figsize=(10,7),\n    legend=False\n)\n\nax.set_xlabel('date')\nax.set_ylabel('sales')\nax.set_title('Total Revenue Over Time')\n\nax.set_ylim([0, max(monthly_revenue_df.values)+100000])\n\nplt.xticks(\n    range(len(monthly_revenue_df.index)), \n    [x.strftime('%m.%Y') for x in monthly_revenue_df.index], \n    rotation=45\n)\n\nplt.show()\n```", "```py\ninvoice_customer_df = df.groupby(\n    by=['InvoiceNo', 'InvoiceDate']\n).agg({\n    'Sales': sum,\n    'CustomerID': max,\n    'Country': max,\n}).reset_index()\n```", "```py\nmonthly_repeat_customers_df = invoice_customer_df.set_index('InvoiceDate').groupby([\n    pd.Grouper(freq='M'), 'CustomerID'\n]).filter(lambda x: len(x) > 1).resample('M').nunique()['CustomerID']\n```", "```py\nmonthly_unique_customers_df = df.set_index('InvoiceDate')['CustomerID'].resample('M').nunique()\n```", "```py\nmonthly_repeat_percentage = monthly_repeat_customers_df/monthly_unique_customers_df*100.0\n```", "```py\nax = pd.DataFrame(monthly_repeat_customers_df.values).plot(\n    figsize=(10,7)\n)\n\npd.DataFrame(monthly_unique_customers_df.values).plot(\n    ax=ax,\n    grid=True\n)\n\nax2 = pd.DataFrame(monthly_repeat_percentage.values).plot.bar(\n    ax=ax,\n    grid=True,\n    secondary_y=True,\n    color='green',\n    alpha=0.2\n)\n\nax.set_xlabel('date')\nax.set_ylabel('number of customers')\nax.set_title('Number of All vs. Repeat Customers Over Time')\n\nax2.set_ylabel('percentage (%)')\n\nax.legend(['Repeat Customers', 'All Customers'])\nax2.legend(['Percentage of Repeat'], loc='upper right')\n\nax.set_ylim([0, monthly_unique_customers_df.values.max()+100])\nax2.set_ylim([0, 100])\n\nplt.xticks(\n    range(len(monthly_repeat_customers_df.index)), \n    [x.strftime('%m.%Y') for x in monthly_repeat_customers_df.index], \n    rotation=45\n)\n\nplt.show()\n```", "```py\nmonthly_rev_repeat_customers_df = invoice_customer_df.set_index('InvoiceDate').groupby([\n    pd.Grouper(freq='M'), 'CustomerID'\n]).filter(lambda x: len(x) > 1).resample('M').sum()['Sales']\n\nmonthly_rev_perc_repeat_customers_df = monthly_rev_repeat_customers_df/monthly_revenue_df * 100.0\n```", "```py\nax = pd.DataFrame(monthly_revenue_df.values).plot(figsize=(12,9))\n\npd.DataFrame(monthly_rev_repeat_customers_df.values).plot(\n    ax=ax,\n    grid=True,\n)\n\nax.set_xlabel('date')\nax.set_ylabel('sales')\nax.set_title('Total Revenue vs. Revenue from Repeat Customers')\n\nax.legend(['Total Revenue', 'Repeat Customer Revenue'])\n\nax.set_ylim([0, max(monthly_revenue_df.values)+100000])\n\nax2 = ax.twinx()\n\npd.DataFrame(monthly_rev_perc_repeat_customers_df.values).plot(\n    ax=ax2,\n    kind='bar',\n    color='g',\n    alpha=0.2\n)\n\nax2.set_ylim([0, max(monthly_rev_perc_repeat_customers_df.values)+30])\nax2.set_ylabel('percentage (%)')\nax2.legend(['Repeat Revenue Percentage'])\n\nax2.set_xticklabels([\n    x.strftime('%m.%Y') for x in monthly_rev_perc_repeat_customers_df.index\n])\n\nplt.show()\n```", "```py\ndate_item_df = df.set_index('InvoiceDate').groupby([\n    pd.Grouper(freq='M'), 'StockCode'\n])['Quantity'].sum()\n```", "```py\n# Rank items by the last month sales\nlast_month_sorted_df = date_item_df.loc['2011-11-30'].sort_values(\n    by='Quantity', ascending=False\n).reset_index()\n```", "```py\ndate_item_df = df.loc[\n    df['StockCode'].isin([23084, 84826, 22197, 22086, '85099B'])\n].set_index('InvoiceDate').groupby([\n    pd.Grouper(freq='M'), 'StockCode'\n])['Quantity'].sum()\n```", "```py\ntrending_itmes_df = date_item_df.reset_index().pivot('InvoiceDate','StockCode').fillna(0)\n\ntrending_itmes_df = trending_itmes_df.reset_index()\ntrending_itmes_df = trending_itmes_df.set_index('InvoiceDate')\ntrending_itmes_df.columns = trending_itmes_df.columns.droplevel(0)\n```", "```py\nax = pd.DataFrame(trending_itmes_df.values).plot(\n    figsize=(10,7),\n    grid=True,\n)\n\nax.set_ylabel('number of purchases')\nax.set_xlabel('date')\nax.set_title('Item Trends over Time')\n\nax.legend(trending_itmes_df.columns, loc='upper left')\n\nplt.xticks(\n    range(len(trending_itmes_df.index)), \n    [x.strftime('%m.%Y') for x in trending_itmes_df.index], \n    rotation=45\n)\n\nplt.show()\n```", "```py\n# install.packages(\"readxl\")\nlibrary(readxl)\n\n#### 1\\. Load Data ####\ndf <- read_excel(\n  path=\"~/Documents/research/data-science-marketing/ch.5/data/Online Retail.xlsx\", \n  sheet=\"Online Retail\"\n)\n```", "```py\nggplot(df, aes(x=\"\", y=Quantity)) + \n  geom_boxplot(outlier.shape = NA) +\n  ylim(c(-15, 25))+\n  ylab(\"order quantity\") +\n  xlab(\"\") +\n  ggtitle(\"Quantity Distribution\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\n# filter out orders with negative quantity (cancel orders)\ndf <- df[which(df$Quantity > 0),]\n```", "```py\n# install.packages(\"lubridate\")\nlibrary(lubridate)\n\ntimeSeriesNumInvoices <- df %>%\n  group_by(InvoiceDate=floor_date(InvoiceDate, \"month\")) %>%\n  summarise(NumOrders=n_distinct(InvoiceNo))\n```", "```py\nggplot(timeSeriesNumInvoices, aes(x=InvoiceDate, y=NumOrders)) +\n  geom_line() +\n  ylim(c(0, max(timeSeriesNumInvoices$NumOrders) + 1000)) +\n  ylab(\"number of orders\") +\n  xlab(\"date\") +\n  ggtitle(\"Number of Orders over Time\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\nsummary(df[which(df$InvoiceDate >= as.Date(\"2011-12-01\")),\"InvoiceDate\"])\n```", "```py\ndf <- df[which(df$InvoiceDate < as.Date(\"2011-12-01\")),]\n```", "```py\ndf$Sales <- df$Quantity * df$UnitPrice\n\ntimeSeriesRevenue <- df %>%\n  group_by(InvoiceDate=floor_date(InvoiceDate, \"month\")) %>%\n  summarise(Sales=sum(Sales))\n```", "```py\nggplot(timeSeriesRevenue, aes(x=InvoiceDate, y=Sales)) +\n  geom_line() +\n  ylim(c(0, max(timeSeriesRevenue$Sales) + 10000)) +\n  ylab(\"sales\") +\n  xlab(\"date\") +\n  ggtitle(\"Revenue over Time\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\ninvoiceCustomerDF <- df %>%\n  group_by(InvoiceNo, InvoiceDate) %>%\n  summarise(CustomerID=max(CustomerID), Sales=sum(Sales))\n```", "```py\ntimeSeriesCustomerDF <- invoiceCustomerDF %>%\n  group_by(InvoiceDate=floor_date(InvoiceDate, \"month\"), CustomerID) %>%\n  summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))\n```", "```py\nrepeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])\n```", "```py\ntimeSeriesRepeatCustomers <- repeatCustomers %>%\n  group_by(InvoiceDate) %>%\n  summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))\n```", "```py\n# Unique Customers\ntimeSeriesUniqCustomers <- df %>%\n  group_by(InvoiceDate=floor_date(InvoiceDate, \"month\")) %>%\n  summarise(Count=n_distinct(CustomerID))\n```", "```py\ntimeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0\ntimeSeriesRepeatCustomers$Total <- timeSeriesUniqCustomers$Count\n```", "```py\nggplot(timeSeriesRepeatCustomers) + \n  geom_line(aes(x=InvoiceDate, y=Total), stat=\"identity\", color=\"navy\") +\n  geom_line(aes(x=InvoiceDate, y=Count), stat=\"identity\", color=\"orange\") +\n  geom_bar(aes(x=InvoiceDate, y=Perc*20), stat=\"identity\", fill='gray', alpha=0.5) +\n  scale_y_continuous(sec.axis = sec_axis(~./20, name=\"Percentage (%)\")) +\n  ggtitle(\"Number of Unique vs. Repeat & Revenue from Repeat Customers\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\npopularItems <- df %>%\n  group_by(InvoiceDate=floor_date(InvoiceDate, \"month\"), StockCode) %>%\n  summarise(Quantity=sum(Quantity))\n```", "```py\ntop5Items <- popularItems[\n    which(popularItems$InvoiceDate == as.Date(\"2011-11-01\")),\n  ] %>%\n  arrange(desc(Quantity)) %>%\n  head(5)\n\ntimeSeriesTop5 <- popularItems[\n  which(popularItems$StockCode %in% top5Items$StockCode),\n]\n```", "```py\nggplot(timeSeriesTop5, aes(x=InvoiceDate, y=Quantity, color=StockCode)) +\n  geom_line() +\n  ylab(\"number of purchases\") +\n  xlab(\"date\") +\n  ggtitle(\"Top 5 Popular Items over Time\") +\n  theme(plot.title=element_text(hjust=0.5))\n```"]