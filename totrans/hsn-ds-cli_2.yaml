- en: Essential Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the command line set up and installed, we will go over a list
    of everyday commands that are considered the basics. Having a fundamental understanding
    of the basic commands will be the building block on which we'll learn the advanced
    commands found later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic command-line navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting input and output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to get help if you're stuck
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize the shell to your liking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Woah... hold your horses, we need to cover some basics about commands. A command
    is a process run by a **POSIX** (**Portable Operating System Interface**) compliant
    **OS** (**Operating System**). OpenGroup maintains the standard in addition to
    it being ratified as an IEEE standard ([http://pubs.opengroup.org/onlinepubs/9699919799/](http://pubs.opengroup.org/onlinepubs/9699919799/)).
    In a POSIX environment, the process being run will have an environment, a current
    working directory, the command line (the path name that invoked the command and
    any arguments), and a series of file descriptors with `stdin`, `stdout`, and `stderr`
    (referred to by integer numbers 0, 1, and 2, respectively) being connected prior
    to handoff to your command.
  prefs: []
  type: TYPE_NORMAL
- en: Now with a little background and an installed command line, you are ready to
    go and we can actually start running commands. We will be going over some basic
    everyday commands. For those that are ready to delve in, let's discuss how we
    locate the commands we can run.
  prefs: []
  type: TYPE_NORMAL
- en: Locating commands is akin to searching through a filing cabinet, what we call
    a filesystem. Commands are just files stored in the filing cabinet, and folders
    or directories are used to organize the files into a hierarchy. Each directory
    may contain many files or other directories, and has a single parent directory.
    To open our filing cabinet, we need to start at the top of the hierarchy, the
    root directory, `/`. The first set of commands you need to know involve commands
    to traverse the filesystem and get your bearings.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log into the command line, it''s likely that you will be in your home
    directory. What this directory is varies by system. To see where you are, try
    the `pwd` (present working directory) command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f33dea1-e0c3-4ae7-9680-00b9b0ead183.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, `ubuntu` is your username. This means you are currently in the `ubuntu`
    directory, which is in the home directory, `/`. From here, if you try to open
    a file with a relative path name, that is, one that doesn't start with a `/`,
    the command line will look for that file in your current directory (you can do
    things with files in other directories without changing your current one, we will
    talk about that in a bit).
  prefs: []
  type: TYPE_NORMAL
- en: 'You might want to create your own directories. To do this, we can try the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dd2763b-779b-4eff-a67f-bd08c9bb32cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Which makes the directory `foo` inside your current directory. If this command
    completes successfully, it won''t print anything. To see the directory we just
    made, we use the list command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f55b0162-993c-4cec-9ee0-de129743abed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It should be on a line by itself. We might want to print a little bit more
    information about the directory. In this case, we can pass some flags to the `ls`
    command to alter what it''s doing. For example, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acb0bf33-bd87-424d-b380-da9cbea5d0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s not too important right now to understand everything printed here, but
    we can see that foo is a directory, not a data file (from the `d` code in the
    front), and the date and time it was created. This is a common pattern among UNIX
    commands. The default version of the command does one thing, and passing in flags
    like `-l`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, commands have arguments, and sometimes flags of commands will have
    arguments, too. A general form of a command might appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, `a`, `b`, `c`, and `d` are flags of the command. What exactly these commands
    are, and what they do, are dependent on the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go into our newly-created directory and mess around with some data files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4797dc7f-fc03-4279-be7c-81edbee31431.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `cd` (or change directory) command changes your current working directory.
    Let''s now string together two commands to create a data file. We will talk about
    this a bit later, but for now we just need a file to mess around with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5e34f5a-8c74-4d61-8496-e9cbe7649e86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This won''t produce any output, but it will create a file called `hello.txt`
    (as we told the shell to redirect `stdout` with `>` to a file) that contains the
    single line of Hello world… text. To see this, we can use the concatenate command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc03dbf8-b6c2-4020-95d7-72194f79e3d6.png)'
  prefs: []
  type: TYPE_IMG
- en: This will print the contents of any file. If we only want to see the first,
    or last, few lines of a file, we could use `head` and `tail` instead of `cat`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this all sounds pretty simple, there’s a good reason: each command in UNIX
    is intended to do one thing and do it well. Often options can be used to tailor
    a command’s behavior. The really neat stuff you can do starts to happen when we
    start tying commands together using pipes and redirection.'
  prefs: []
  type: TYPE_NORMAL
- en: You see, almost every command in UNIX has some way to input data into it. The
    command then takes the input, and, depending on its parameters and flags, transforms
    that input into something else and outputs it. We can use the pipe, `|`, to take
    the output from one command, and feed it into the input of another command. This
    simple but extremely powerful idea will let us do a lot with a few commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try a simple example: let''s use `echo`, with the `-e` flag, to tell
    it to pay attention to control characters, to make a multi-line file (by using
    the `\n`) with some numbers on each line.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecd6cb48-de78-4bd1-807a-47c3c4d08881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, say we wanted to see those numbers sorted. The `sort` command does just
    this. Using a flag to sort to consider the lines to be numbers and not strings,
    we can pipe the output of `cat` into the `sort` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2632f067-bec9-408b-a97c-6674feb21a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we then want to see just the unique numbers in sorted order, we can re-pipe
    this output to the `uniq` command, which returns unique lines from the given input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7bd98ed-de4f-4639-affb-27a8a36aeae3.png)'
  prefs: []
  type: TYPE_IMG
- en: And so on, and so on. We can build up the pipeline we want a bit at a time,
    debugging along the way. You will see this technique throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing: in some of these commands, we have seen the `>`, or redirect.
    Redirection can be used for a number of things, but most of the time it''s used
    to redirect the output of a command to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will replace the contents of the file named filename with the output of
    the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: With these simple tools, you have enough to get started hacking data with bash.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a couple of useful tricks for navigating the command line that, while
    optional, will improve your quality of life. This section has a selection of those
    tricks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bash, by default, saves the history of your commands. It will even save the
    history across sessions. This can be extremely useful because sometimes we make
    a small mistake and don''t want to retype an entire command, or we want to repeat
    the same commands over and over. To see your history, type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c16fcaa2-ab35-4343-ae76-a796592aa0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that there is a numbered list of output commands. To repeat a numbered
    command, you can use the bang character, `!`. `!<number>` will repeat the number
    command verbatim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/753eb9cb-7534-4e98-b784-d808e9d4fc63.png)'
  prefs: []
  type: TYPE_IMG
- en: A double bang, `!!`, will repeat the last command.
  prefs: []
  type: TYPE_NORMAL
- en: You can also cycle through the list of commands with the up and down arrow keys
    on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform a reverse command search by typing *Ctrl* + *R* at an empty
    command line. Then begin typing some substring of a command you’d like to search
    for. Bash will attempt to find a matching command somewhere in your history. If
    multiple commands match, the last one will be picked, but you can cycle through
    the others by pressing *Ctrl* + *R* repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: '`cd -` will take you back to the last directory you came from, even if it''s
    halfway across the system.'
  prefs: []
  type: TYPE_NORMAL
- en: A thing that confuses some people is hitting *Ctrl* + *S*. This will stop all
    output to a terminal session, and it will appear as if your session is frozen.
    To unfreeze the session, simply press  *Ctrl* + Q.
  prefs: []
  type: TYPE_NORMAL
- en: Getting help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of resources available, both built into the command line
    and also externally. One command that you will always find yourself using is the
    `man` command (short for manual page). For example, type in `man man` to read
    what the man command can do. You should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba0123f8-2792-4254-9395-d6e7ed0c431e.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at two options we use just about every day, `man -a` and `man
    -k`, as you will use them a lot for finding man pages at the command line. Go
    ahead and type `man -k .` in the command line to view all of the man pages that
    are installed on the system. If you are using the same Linux distribution as us,
    about 2,000 manuals just scrolled down your screen, that's a lot to read! We don't
    expect you to start from the top and read every one (feel free to do so if you're
    having trouble sleeping), so let’s figure out some smarter ways to navigate all
    of these manuals.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wanted to slowly scroll through the entire list of manuals, you could
    run `man -k . | more` and just keep tapping the space bar to view the entire list.
    However, this is inefficient. Notice in the previous examples we were searching
    using a dot (.) instead of a string. Let''s try this again, but this time remove
    the dot and enter a word:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what you should see on running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d81110fa-d489-4260-a3d5-3bea17f8d450.png)'
  prefs: []
  type: TYPE_IMG
- en: Much better! Now I can quickly see whether there's a man page for the column
    command instead of parsing through thousands of pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manual is terrific, but sometimes it''s not quite enough. Enter the Internet.
    Sites such as Stack Overflow and Stack Exchange can be invaluable when trying
    to figure out esoteric issues with commands, or give nice examples. The Internet
    is a big place: someone will be trying to do what you are doing and it''s likely
    they had the same issues you''re having. Answered questions might already exist
    with your exact issue, or you could submit a new question.'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You might have noticed the prompt every time you enter a command to the left.
    Depending on your system, it might look a little different from mine. Let''s fix
    that! For example, wouldn''t it be great if you didn''t have to type `pwd` all
    the time just to see where you are? Go ahead and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d68f828-548c-4719-8482-7f0d4a80d7f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pretty nifty, right? You can add that command inside your `~/.bash_profile`
    file to keep it permanent. You can use any editor that you like (`vim`, `nano`,
    `emacs`) to open the file. For example, we used `vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's also an easy generator located at [http://ezprompt.net/](http://ezprompt.net/),
    which you can use to customize your bash prompt even further. Take a look!
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the basics and totally tricked out your bash prompt,
    let’s go ahead and work on an actual dataset!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, the command line is very powerful for everyday tasks. We learned
    how to do basic things, such as create files and directories, and navigate a system
    via the command line. We learned about manual pages, where to find help, and how
    to customize the shell.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take what you learned here and apply it against a
    real dataset. Feel free to come back to this chapter as it will be helpful throughout
    the rest of this book.
  prefs: []
  type: TYPE_NORMAL
