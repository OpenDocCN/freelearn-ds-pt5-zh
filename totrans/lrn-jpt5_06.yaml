- en: Jupyter JavaScript Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is a high-level, dynamic, untyped, and interpreted programming language.
    There are several outgrowth languages that are based on JavaScript. In the case
    of Jupyter, the underlying JavaScript is really Node.js. Node.js is an event-based
    framework that uses JavaScript, which can be used to develop large, scalable applications.
    Note that this is in contrast to the earlier languages covered in this book which
    are primarily used for data analysis (Python is a general language as well, but
    has clear aspects that deal with its capabilities of performing data analysis).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript packages to Jupyter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic JavaScript in Jupyter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js `d3` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js `stats-analysis` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js JSON handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js `canvas` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js `plotly` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js asynchronous threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js `decision-tree` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding JavaScript scripting to your installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will install JavaScript scripting on macOS and Windows.
    There are separate steps for getting JavaScript scripting available on your Jupyter
    installation for each environment. The macOS installation is very clean. The Windows
    installation still appears to be in flux, and I would expect the following instructions
    to change over time.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript scripts to Jupyter on macOS or Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I followed the instructions for loading the JavaScript engine for Anaconda
    from [https://github.com/n-riesco/iJavaScript](https://github.com/n-riesco/ijavascript).
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, starting Jupyter will provide the JavaScript (Node.js) engine
    as a choice, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/019ed732-2d3f-49aa-bc4a-5b59eef553ae.png)'
  prefs: []
  type: TYPE_IMG
- en: JavaScript Hello World Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once installed, we can attempt the first JavaScript Notebook by clicking on
    the New menu and selecting JavaScript. We will name the Notebook `Hello, World!` and
    put the following lines in this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This script sets a variable and displays the contents of the variable. After
    entering the script and running (Cell | Run All), we will end up with a Notebook
    screen that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c70ff5e9-b013-448c-9ad3-603ba646dd71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should point out some of the highlights of this page:'
  prefs: []
  type: TYPE_NORMAL
- en: We have the now-familiar language logo in the upper-right corner that depicts
    the type of script in use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is output from every line of the Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More importantly, we can see the true output of the Notebook (following line
    one) where the string is echoed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, the Notebook looks as familiar as the other types we have seen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we look at the contents of the Notebook on disk, we can see similar results
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, using the same Notebook and the JSON file format, Jupyter provides a different
    language for use in the Notebook by changing the `metadata` and `language_info`
    values appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript packages to Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JavaScript language does not normally install additional packages—it makes
    reference to other packages via the runtime include directive which is used in
    your programs. Other packages can be referenced across the network or copied locally
    into your environment. It is assumed that accessing a library across the network
    via a CDN is a more efficient and faster mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, Node.js adds the required verb to the JavaScript syntax. In this case,
    your code requires another module to be loaded, which is assumed to be installed
    in your current environment. To install another module, use `npm`, for example,
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will install the module that's been referenced (including any embedded
    packages that are required) on your machine so that a required statement will
    work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Basic JavaScript in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript, and even Node.js, are not usually noted for data handling, but for
    application (website) development. This differentiates JavaScript coding in Jupyter
    from the languages that we covered earlier. However, the examples in this chapter
    will highlight using JavaScript for application development with data access and
    analysis features.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript limitations in Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript was originally used to specifically address the need for scripting
    inside of an HTML page, usually on the client-side (in a browser). As such, it
    was built to be able to manipulate HTML elements on the page. Several packages
    have been developed to further this feature, even for creating a web server, especially
    using extensions such as Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: The use of any of the HTML manipulation and generation features inside of Jupyter
    runs into a roadblock, since Jupyter expects to control presentation to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js d3 package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `d3` package has data access functionality. In this case, we will read from
    a tab-separated file and compute an average. Note the use of the underscore variable
    name for `lodash`. Variable names starting with an underscore are assumed to be
    private. However, in this case, it is just a play on the name of the package we
    are using, which is `lodash`, or underscore. `lodash` is also a widely used a `utility`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this script to execute, I had to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `d3`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install `lodash`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install `isomorphic-fetch` (`npm install --save isomorphic-fetch es6-promise`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `isomorphic-fetch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The script we will use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This assumes that we have previously loaded the `fs` and `d3` packages using
    `npm`, as described in the previous script.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, I created a `data` directory on my website, since the URL
    that we entered is expected to be an absolute URL, and created a CSV file (`animal.csv`)
    in that directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If we load this script into a Notebook and run it, we get the following output,
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c6b27f8-6ece-42e0-9d88-ad10870f4f2f.png)'
  prefs: []
  type: TYPE_IMG
- en: It's important to note that the `d3` function (many of them, actually) operate
    asynchronously. In our case, we are just printing every row of the file. You can
    imagine more elaborate functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js stats-analysis package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `stats-analysis` package has many of the common statistics that you may
    want to perform on your data. You will have to install this package using `npm`,
    as explained previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had a small set of people''s temperatures to work with, we could get
    some of the statistics on the data readily by using this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When this script is entered in a Notebook, we get something similar to what''s
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a885f097-9c9c-477e-bd46-aa359363eac3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When run, we get the results that are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c0cc74-468c-4ee7-8f83-651dcdfc3e9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Interestingly, `98.5` is considered an outlier. I assume that there is an optional
    parameter to the command that would change the limits used. Otherwise, the results
    are as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The outliers are coming from dealing with the raw data as pure mathematical
    items. So, technically, from the data provided, we have the outliers identified.
    However, we would likely use a different method to determine outliers, knowing
    the domain average human temperatures.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js JSON handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will load a JSON dataset and perform some standard manipulations
    on the data. I am referencing the list of FORD Models from [http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford](http://www.carqueryapi.com/api/0.3/?callback=?&cmd=getModels&make=ford).
    I can''t reference this directly, as it is not a flat file, but an API call. Therefore,
    I downloaded the data into a local file called `fords.json`. Also, the output
    from the API call wraps the JSON like so: `?(json);`. This would have to be removed
    before parsing.'
  prefs: []
  type: TYPE_NORMAL
- en: The scripting we will use is as follows. In the script, `JSON` is a built-in
    package of Node.js, so we can reference this package directly. The `JSON` package
    provides many of the standard tools that you need to handle your JSON files and
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of interest here is the JSON file reader, which constructs a standard JavaScript
    array of objects. Attributes of each object can be referenced by `name`, for example,
    `model.model_name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we pull this script into a new Notebook entry, we get the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e71fc713-c218-46bd-a173-cf97ff1e1d10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the script is executed, we get the expected results, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4572efc-acef-4288-a74c-cfa81553d655.png)'
  prefs: []
  type: TYPE_IMG
- en: Node.js canvas package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `canvas` package is used for generating graphics in Node.js. We can use
    the example from the `canvas` package home page ([https://www.npmjs.com/package/canvas](https://www.npmjs.com/package/canvas)).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install `canvas` and its dependencies. There are directions
    on the home page for the different operating systems, but it is very familiar
    to the tools we have seen before (we have seen them for macOS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This example does not work in Windows. The Windows install required Microsoft
    Visual C++ to be installed. I tried several iterations to no avail.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `canvas` package installed on your machine, we can use a small Node.js
    script to create a graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This script is creating `canvas`, writing `string` as `Jupyter!` across `canvas`,
    and then generating an HTML `img` tag with the graphic.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we run the script in a Notebook, we get the `img` tag as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1a4a82e-dfa7-449f-9fae-d3712bebd296.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can take the `img` tag and save it to an HTML page so it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then open the HTML file with a browser to display our graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c108493-6bf8-47c7-82dd-73fe882a699e.png)'
  prefs: []
  type: TYPE_IMG
- en: Node.js plotly package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`plotly` is a package that works differently to most. To use this software,
    you must register with a `username` so that you are provided with an `api_key`
    (at [https://plot.ly/](https://plot.ly/)). You then place the `username` and `api_key` in
    your script. At that point, you can use all of the `plotly` package features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, like all of the other packages, we need to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, we can reference the `plotly` package as needed. Using a simple
    script, we can generate a `histogram` with `plotly`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once loaded and run in Jupyter as a Notebook, we get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fc767c6-a753-4589-9e67-8efd6ae214fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of creating a local file, or just displaying the graphic on the screen,
    any graphic that is created is stored on Plotly. The output of the `plot` command
    is a set of return values from your graphic's creation. Most important is the
    URL where you can access the graphic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, what should happen is that I should be able to access my graphic (histogram)
    using the URL provided, which is [https://plot.ly/~dantoomey/1](https://plot.ly/~dantoomey/1).
    The returned URL works as expected after inserting a `~` character into the URL.
    However, when I looked around the Plotly website, I did find my graphics in slightly
    different paths than expected. All of your graphics are in your home page, which
    in my case is [https://plot.ly/~dantoomey](https://plot.ly/~dantoomey). I can
    now access all of my graphics. The histogram is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b5e0edf-a875-46ad-8984-3acad0d269e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Node.js asynchronous threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js has built-in mechanisms for creating threads and having them fire asynchronously.
    Using an example from [http://book.mixu.net/node/ch7.html](http://book.mixu.net/node/ch7.html),
    we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This script creates an asynchronous function that operates on a number. For
    every number (`item`), we call upon the inline function, passing the number to
    the function which applies the number to the `results` list. In this case, it
    just triples the number and waits for two seconds. The main loop (at the bottom
    of the script) creates a thread for each number in the list and then waits for
    them all to complete before calling the `final()` routine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Notebook page looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34652c45-a6fc-4291-94d6-e7c90016d892.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we run the script, we get something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5aefacc-b73c-4bd5-aecb-45dae4c77472.png)'
  prefs: []
  type: TYPE_IMG
- en: It is odd to see the delay for the last line of output (from the `final()` routine)
    to display, although we specifically stated to add a delay when we coded the `async`
    function previously.
  prefs: []
  type: TYPE_NORMAL
- en: Also, when I played around with other functions, such as cubing each number,
    the `results` list came back in a very different order. I would not have thought
    such a basic mathematics function would have any effect on performance.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js decision-tree package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `decision-tree` package is an example of a machine learning package. It
    is available at [https://www.npmjs.com/package/decision-tree](https://www.npmjs.com/package/decision-tree).
    The package is installed by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We need a dataset to use for training/developing our decision tree. I am using
    the car MPG dataset from the following web page: [https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees](https://alliance.seas.upenn.edu/~cis520/wiki/index.php?n=Lectures.DecisionTrees).
    It did not seem to be available directly, so I copied it into Excel and saved
    it as a local CSV.
  prefs: []
  type: TYPE_NORMAL
- en: 'The logic for machine learning is very similar:'
  prefs: []
  type: TYPE_NORMAL
- en: Load our dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split into a training set and a testing set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the training set to develop our model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the mode on the test set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, you might use two-thirds of your data for training and one-third
    for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `decision-tree` package and the `car-mpg` dataset, we would have
    a script similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There is wide use of `console.log` to display progressive information about
    the processing that is occurring. I am using the `util()` function further in
    order to display members of objects in use.
  prefs: []
  type: TYPE_NORMAL
- en: The packages must also be installed using `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run this in a Notebook, we end up with the results that are shown at
    the top of the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26107f8f-8baf-4db3-865e-6f1af5d3ab35.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the system is just logging the entries that it finds in the file and presenting
    decision points on the different variables we have assigned. For example, `mpg`
    is `Bad` when `cylinders` is `8`, `displacement` is `400`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We arrive at a model for determining whether `mpg` for a vehicle is acceptable,
    based on the vehicle's characteristics. In this case, we have a bad predictor,
    as noted in the results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to add JavaScript to our Jupyter Notebook. We
    saw some of the limitations of using JavaScript in Jupyter. We had a look at examples
    of several packages that are typical of Node.js coding, including `d3` for graphics,
    `stats-analysis` for statistics, built-in JSON handling, `canvas` for creating
    graphics files, and `plotly`, which is used for generating graphics with a third-party
    tool. We also saw how multi-threaded applications can be developed using Node.js
    under Jupyter. Lastly, we saw machine learning for developing a decision tree.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to create interactive widgets that can
    be used in your Notebook.
  prefs: []
  type: TYPE_NORMAL
