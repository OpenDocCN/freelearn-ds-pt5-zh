["```py\nselect * from housedb where State like 'NY' and City like 'Albany' and YearBuilt > 1990 \n```", "```py\nselect * from housedb where State like 'NY' and City like 'Albany' and YearBuilt > 1990 \n```", "```py\n( \n { \n   \"name\": \"John\", \n   \"address\": \"1 Main St.\", \n   \"notes\": \"Met at conference in 2015\", \n   \"tel\": 2013249978, \n }, \n { \n   \"name\": \"Jack\", \n   \"address\": \"20 J. Blvd\", \n   \"notes\": \"Gym Instructor\", \n   \"tel\": 2054584538, \n   \"fax\": 3482274573 \n } \n) \n```", "```py\n{ \n   \"_id\" : ObjectId(\"597cdbb193acc5c362e7ae96\"), \n   \"firstName\" : \"Rick\", \n   \"age\" : 66, \n   \"frequentFlyer\" : ( \n          \"Delta\" \n   ), \n   \"milesEarned\" : ( \n          88154 \n   ) \n} \n{ \n   \"_id\" : ObjectId(\"597cdbb193acc5c362e7ae97\"), \n   \"firstName\" : \"Nina\", \n   \"age\" : 53, \n   \"frequentFlyer\" : ( \n          \"Delta\", \n          \"JetBlue\", \n          \"Delta\" \n   ), \n   \"milesEarned\" : ( \n          59226, \n          62025, \n          27493 \n   ) \n} \n```", "```py\n( \n   { \n      \"Firstname\":\"John\", \n      \"Age\":15, \n      \"Information\":{ \n         \"Subject\":\"History\", \n         \"Grade\":\"B\" \n      } \n   }, \n   { \n      \"Firstname\":\"Jack\", \n      \"Age\":18, \n      \"Information\":{ \n         \"Subject\":\"Physics\", \n         \"Grade\":\"A\" \n      } \n   }, \n   { \n      \"Firstname\":\"Jill\", \n      \"Age\":17, \n      \"Information\":{ \n         \"Subject\":\"Physics\", \n         \"Grade\":\"A+\" \n      } \n   } \n) \n```", "```py\n(cloudera@quickstart ~)$ lsb_release -a \nLSB Version:     :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch \nDistributor ID:  CentOS \nDescription:     CentOS release 6.7 (Final) \nRelease:  6.7 \nCodename: Final \n```", "```py\nThe first step involved adding the repo as follows. Type in sudo nano /etc/yum.repos.d/mongodb-org-3.4.repo on the command line and enter the text as shown. \n\n(root@quickstart cloudera)# sudo nano /etc/yum.repos.d/mongodb-org-3.4.repo \n\n### Type in the information shown below and press CTRL-X \n### When prompted to save buffer, type in yes\n\n(mongodb-org-3.4)\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc\n```", "```py\n# Back in terminal, type in the following\n\n(cloudera@quickstart ~)$ sudo yum install -y mongodb-org \n\n(...) \n\nInstalling: \n mongodb-org                x86_64         3.4.6-1.el6         mongodb-org-3.4         5.8 k \nInstalling for dependencies: \n mongodb-org-mongos         x86_64         3.4.6-1.el6         mongodb-org-3.4          12 M \n mongodb-org-server         x86_64         3.4.6-1.el6         mongodb-org-3.4          20 M \n mongodb-org-shell          x86_64         3.4.6-1.el6         mongodb-org-3.4          11 M \n mongodb-org-tools          x86_64         3.4.6-1.el6         mongodb-org-3.4          49 M \n\nTransaction Summary \n===================================================================== \nInstall       5 Package(s) \n\nTotal download size: 91 M \nInstalled size: 258 M \nDownloading Packages: \n(1/5): mongodb-org-3.4.6-1.el6.x86_64.rpm                             | 5.8 kB     00:00      \n(...) \n\nInstalled: \n  mongodb-org.x86_64 0:3.4.6-1.el6                                                            \n\nDependency Installed: \n  mongodb-org-mongos.x86_64 0:3.4.6-1.el6       mongodb-org-server.x86_64 0:3.4.6-1.el6       \n  mongodb-org-shell.x86_64 0:3.4.6-1.el6        mongodb-org-tools.x86_64 0:3.4.6-1.el6        \n\nComplete! \n\n### Attempting to start mongo without first starting the daemon will produce an error message ### \n### You need to start the mongo daemon before you can use it ### \n\n(cloudera@quickstart ~)$ mongo MongoDB shell version v3.4.6 \nconnecting to: mongodb://127.0.0.1:27017 \n2017-07-30T10:50:58.708-0700 W NETWORK  (thread1) Failed to connect to 127.0.0.1:27017, in(checking socket for error after poll), reason: Connection refused \n2017-07-30T10:50:58.708-0700 E QUERY    (thread1) Error: couldn't connect to server 127.0.0.1:27017, connection attempt failed : \nconnect@src/mongo/shell/mongo.js:237:13 \n@(connect):1:6 \nexception: connect failed\n```", "```py\n### The first step is to create the MongoDB dbpath - this is where MongoDB will store all data \n\n### Create a folder called, mongodata, this will be the mongo dbpath ### \n\n(cloudera@quickstart ~)$ mkdir mongodata\n```", "```py\n### Start mongod ### \n\n(cloudera@quickstart ~)$ mongod --dbpath mongodata \n2017-07-30T10:52:17.200-0700 I CONTROL  (initandlisten) MongoDB starting : pid=16093 port=27017 dbpath=mongodata 64-bit host=quickstart.cloudera \n(...) \n2017-07-30T10:52:17.321-0700 I INDEX    (initandlisten) build index done.  scanned 0 total records. 0 secs \n2017-07-30T10:52:17.321-0700 I COMMAND  (initandlisten) setting featureCompatibilityVersion to 3.4 \n2017-07-30T10:52:17.321-0700 I NETWORK  (thread1) waiting for connections on port 27017 \n```", "```py\n# Download Files\n# laureates.json and country.json ###\n# Change directory to go to the mongodata folder that you created earlier \n(cloudera@quickstart ~)$ cd mongodata \n\n(cloudera@quickstart mongodata)$ curl -o laureates.json \"http://api.nobelprize.org/v1/laureate.json\" \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current \n                                 Dload  Upload   Total   Spent    Left  Speed \n100  428k    0  428k    0     0   292k      0 --:--:--  0:00:01 --:--:--  354k \n\n### Clean the file laureates.json \n### Delete content upto the first ( on the first line of the file \n### Delete the last } character from the file \n### Store the cleansed dataset in a file called laureates.json \n```", "```py\n(cloudera@quickstart mongodata)$ cat laureates.json | sed 's/^{\"laureates\"://g' | sed 's/}$//g' > mongofile.json \n\n### Import the file laureates.json into MongoDB \n### mongoimport is a utility that is used to import data into MongoDB \n### The command below will import data from the file, mongofile.json \n### Into a db named nobel into a collection (i.e., a table) called laureates \n\n(cloudera@quickstart mongodata)$ mongoimport --jsonArray --db nobel --collection laureates --file mongofile.json 2017-07-30T11:06:35.228-0700   connected to: localhost \n2017-07-30T11:06:35.295-0700   imported 910 documents \n```", "```py\n# The file country.json contains descriptive information about all countries\n# We will use this file for our tutorial\n\n### Download country.json\n\n(cloudera@quickstart mongodata)$ curl -o country.json \"https://raw.githubusercontent.com/xbsd/packtbigdata/master/country.json\" \n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current \n                                 Dload  Upload   Total   Spent    Left  Speed \n100  113k  100  113k    0     0   360k      0 --:--:-- --:--:-- --:--:--  885k \n\n### The file, country.json has already been cleaned and can be imported directly into MongoDB \n(cloudera@quickstart mongodata)$ mongoimport --jsonArray --db nobel --collection country --file country.json 2017-07-30T12:10:35.554-0700   connected to: localhost \n2017-07-30T12:10:35.580-0700   imported 250 documents \n\n### MONGO SHELL ### \n(cloudera@quickstart mongodata)$ mongo MongoDB shell version v3.4.6 \nconnecting to: mongodb://127.0.0.1:27017 \nMongoDB server version: 3.4.6 \nServer has startup warnings:  \n(...) \n\n2017-07-30T10:52:17.298-0700 I CONTROL  (initandlisten)  \n\n### Switch to the database nobel using the 'use <databasename>' command \n> use nobel switched to db nobel \n\n### Show all collections (i.e., tables) \n### This will show the tables that we imported into MongoDB - country and laureates\n> show collections country \nlaureates \n>  \n\n### Collections in MongoDB are the equivalent to tables in SQL \n\n### 1\\. Common Operations \n\n### View collection statistics using db.<dbname>.stats() \n> db.laureates.stats() \n\n   \"ns\" : \"nobel.laureates\", # Name Space \n   \"size\" : 484053,          # Size in Bytes \n   \"count\" : 910,            # Number of Records \n   \"avgObjSize\" : 531,       # Average Object Size \n   \"storageSize\" : 225280,   # Data size \n\n# Check space used (in bytes) \n> db.laureates.storageSize() 225280 \n\n# Check number of records\n> db.laureates.count() 910 \n\n### 2\\. View data from collection \n### \n### There is an extensive list of commands that can be used in MongoDB. As such discussing them all is outside the scope of the text. However, a few of the familiar commands have been given below as a marker to help the reader get started with the platform. \n\n### See first record for laureates using findOne() \n### findOne() will show the first record in the collection \n> db.laureates.findOne() \n\n{ \n   \"_id\" : ObjectId(\"597e202bcd8724f48de485d4\"), \n   \"id\" : \"1\", \n   \"firstname\" : \"Wilhelm Conrad\", \n   \"surname\" : \"RÃ¶ntgen\", \n   \"born\" : \"1845-03-27\", \n   \"died\" : \"1923-02-10\", \n   \"bornCountry\" : \"Prussia (now Germany)\", \n   \"bornCountryCode\" : \"DE\", \n   \"bornCity\" : \"Lennep (now Remscheid)\", \n   \"diedCountry\" : \"Germany\", \n   \"diedCountryCode\" : \"DE\", \n   \"diedCity\" : \"Munich\", \n   \"gender\" : \"male\", \n   \"prizes\" : ( \n          { \n                 \"year\" : \"1901\", \n                 \"category\" : \"physics\", \n                 \"share\" : \"1\", \n                 \"motivation\" : \"\\\"in recognition of the extraordinary services he has rendered by the discovery of the remarkable rays subsequently named after him\\\"\", \n                 \"affiliations\" : ( \n                        { \n                               \"name\" : \"Munich University\", \n                               \"city\" : \"Munich\", \n                               \"country\" : \"Germany\" \n                        } \n                 ) \n          } \n   ) \n} \n\n### See all records for laureates\n> db.laureates.find() \n\n{ \"_id\" : ObjectId(\"597e202bcd8724f48de485d4\"), \"id\" : \"1\", \"firstname\" : \"Wilhelm Conrad\", \"surname\" : \"RÃ¶ntgen\", \"born\" : \"1845-03-27\", \"died\" : \"1923-02-10\", \"bornCountry\" : \"Prussia (now Germany)\", \"bornCountryCode\" : \"DE\", \"bornCity\" : \"Lennep (now Remscheid)\" \n(...) \n\n... \n\n### MongoDB functions accept JSON formatted strings as parameters to options \n### Some examples are shown below for reference \n\n### Query a field - Find all Nobel Laureates who were male \n> db.laureates.find({\"gender\":\"male\"}) \n(...) \n{ \"_id\" : ObjectId(\"597e202bcd8724f48de485d5\"), \"id\" : \"2\", \"firstname\" : \"Hendrik Antoon\", \"surname\" : \"Lorentz\", \"born\" : \"1853-07-18\", \"died\" : \"1928-02-04\", \"bornCountry\" : \"the Netherlands\", \"bornCountryCode\" : \"NL\", \"bornCity\" : \"Arnhem\", \"diedCountry\" : \"the Netherlands\", \"diedCountryCode\" : \"NL\", \"gender\" : \"male\", \"prizes\" : ( { \"year\" : \"1902\", \"category\" : \"physics\", \"share\" : \"2\", \"motivation\" : \"\\\"in recognition of the extraordinary service they rendered by their researches into the influence of magnetism upon radiation phenomena\\\"\", \"affiliations\" : ( { \"name\" : \"Leiden University\", \"city\" : \"Leiden\", \"country\" : \"the Netherlands\" } ) } ) } \n(...) \n```", "```py\n> db.laureates.find({\"bornCountryCode\":\"US\", \"prizes.category\":\"physics\", \"bornCity\": /Chicago/}) \n\n{ \"_id\" : ObjectId(\"597e202bcd8724f48de48638\"), \"id\" : \"103\", \"firstname\" : \"Ben Roy\", \"surname\" : \"Mottelson\", \"born\" : \"1926-07-09\", \"died\" : \"0000-00-00\", \"bornCountry\" : \"USA\", \"bornCountryCode\" : \"US\", \"bornCity\" : \"Chicago, IL\", \n... \n\n### Check number of distinct prize categories using distinct \n> db.laureates.distinct(\"prizes.category\") ( \n   \"physics\", \n   \"chemistry\", \n   \"peace\", \n   \"medicine\", \n   \"literature\", \n   \"economics\" \n) \n\n### Using Comparison Operators \n### MongoDB allows users to chain multiple comparison operators\n### Details on MongoDB operators can be found at: https://docs.mongodb.com/manual/reference/operator/ \n\n# Find Nobel Laureates born in either India or Egypt using the $in operator\n> db.laureates.find ( { bornCountryCode: { $in: (\"IN\",\"EG\") } } ) \n\n{ \"_id\" : ObjectId(\"597e202bcd8724f48de485f7\"), \"id\" : \"37\", \"firstname\" : \"Sir Chandrasekhara Venkata\", \"surname\" : \"Raman\", \"born\" : \"1888-11-07\", \"died\" : \"1970-11-21\", \"bornCountry\" : \"India\", \"bornCountryCode\" : \"IN\", \"bornCity\" : \"Tiruchirappalli\", \"diedCountry\" : \"India\", \"diedCountryCode\" : \"IN\", \"diedCity\" : \"Bangalore\", \"gender\" : \"male\", \"prizes\" : ( { \"year\" : \"1930\", \"category\" : \"physics\", \"share\" : \"1\", \"motivation\" : \"\\\"for his work on the scattering of light and for the discovery of the effect named after him\\\"\", \"affiliations\" : ( { \"name\" : \"Calcutta University\", \"city\" : \"Calcutta\", \"country\" : \"India\" } ) } ) } \n... \n\n### Using Multiple Comparison Operators \n\n### Find Nobel laureates who were born in either US or China and won prize in either Physics or Chemistry using the $and and $or operator \n> db.laureates.find( { \n$and : ({ $or : ( { bornCountryCode : \"US\" }, { bornCountryCode : \"CN\" } ) },\n{ $or : ( { \"prizes.category\" : \"physics\" }, { \"prizes.category\" : \"chemistry\" }  ) } \n    ) \n} ) \n\n{ \"_id\" : ObjectId(\"597e202bcd8724f48de485ee\"), \"id\" : \"28\", \"firstname\" : \"Robert Andrews\", \"surname\" : \"Millikan\", \"born\" : \"1868-03-22\", \"died\" : \"1953-12-19\", \"bornCountry\" : \"USA\", \"bornCountryCode\" : \"US\", \"bornCity\" : \"Morrison, IL\", \"diedCountry\" : \"USA\", \"diedCountryCode\" : \"US\", \"diedCity\" : \"San Marino, CA\", \"gender\" : \"male\", \"prizes\" : ( { \"year\" : \"1923\", \"category\" : \"physics\", \"share\" : \"1\", \"motivation\" : \"\\\"for his work on the elementary charge of electricity and on the photoelectric effect\\\"\", \"affiliations\" : ( { \"name\" : \"California Institute of Technology (Caltech)\", \"city\" : \"Pasadena, CA\", \"country\" : \"USA\" } ) } ) } \n... \n\n### Performing Aggregations is one of the common operations in MongoDB queries \n### MongoDB allows users to perform pipeline aggregations, map-reduce aggregations and single purpose aggregations \n\n### Details on MongoDB aggregations can be found at the URL \n### https://docs.mongodb.com/manual/aggregation/ \n\n### Aggregation Examples \n\n### Count and aggregate total Nobel laureates by year and sort in descending order \n### Step 1: Use the $group operator to indicate that prize.year will be the grouping variable \n### Step 2: Use the $sum operator (accumulator) to sum each entry under a variable called totalPrizes \n### Step 3: Use the $sort operator to rank totalPrizes \n\n> db.laureates.aggregate( \n  {$group: {_id: '$prizes.year', totalPrizes: {$sum: 1}}},  \n  {$sort: {totalPrizes: -1}} \n); \n\n{ \"_id\" : ( \"2001\" ), \"totalPrizes\" : 15 } \n{ \"_id\" : ( \"2014\" ), \"totalPrizes\" : 13 } \n{ \"_id\" : ( \"2002\" ), \"totalPrizes\" : 13 } \n{ \"_id\" : ( \"2000\" ), \"totalPrizes\" : 13 } \n\n(...) \n\n### To count and aggregate total prizes by country of birth \n> db.laureates.aggregate( \n  {$group: {_id: '$bornCountry', totalPrizes: {$sum: 1}}}, \n  {$sort: {totalPrizes: -1}} \n); \n\n{ \"_id\" : \"USA\", \"totalPrizes\" : 257 } \n{ \"_id\" : \"United Kingdom\", \"totalPrizes\" : 84 } \n{ \"_id\" : \"Germany\", \"totalPrizes\" : 61 } \n{ \"_id\" : \"France\", \"totalPrizes\" : 51 } \n...\n\n### MongoDB also supports PCRE (Perl-Compatible) Regular Expressions \n### For more information, see https://docs.mongodb.com/manual/reference/operator/query/regex \n\n### Using Regular Expressions: Find count of nobel laureates by country of birth whose prize was related to 'radiation' (as indicated in the field motivation under prizes) \n\n> db.laureates.aggregate( \n  {$match : { \"prizes.motivation\" : /radiation/ }}, \n  {$group: {_id: '$bornCountry', totalPrizes: {$sum: 1}}},  \n  {$sort: {totalPrizes: -1}} \n); \n\n{ \"_id\" : \"USA\", \"totalPrizes\" : 4 } \n{ \"_id\" : \"Germany\", \"totalPrizes\" : 2 } \n{ \"_id\" : \"the Netherlands\", \"totalPrizes\" : 2 } \n{ \"_id\" : \"United Kingdom\", \"totalPrizes\" : 2 } \n{ \"_id\" : \"France\", \"totalPrizes\" : 1 } \n{ \"_id\" : \"Prussia (now Russia)\", \"totalPrizes\" : 1 } \n\n#### Result: We see that the highest number of prizes (in which radiation was mentioned as a key-word) was the US \n\n### Interestingly, we can also do joins and other similar operations that allow us to combine the data with other data sources \n### In this case, we'd like to join the data in laureates with the data from country information obtained earlier \n### The collection country contains many interesting fields, but for this exercise, we will show how to find the total number of nobel laureates by continent \n\n### The Left Join \n\n### Step 1: Use the $lookup operator to define the from/to fields, collection names and assign the data to a field named countryInfo \n\n### We can join the field bornCountryCode from laureates with the field countryCode from the collection country \n> db.laureates.aggregate( \n  {$lookup: { from: \"country\", localField: \"bornCountryCode\", foreignField: \"countryCode\", as: \"countryInfo\" }}) \n\n{ \"_id\" : ObjectId(\"597e202bcd8724f48de485d4\"), \"id\" : \"1\", \"firstname\" : \"Wilhelm Conrad\", \"surname\" : \"RÃ¶ntgen\", \"born\" : \"1845-03-27\", \"died\" : \"1923-02-10\", \"bornCountry\" : \"Prussia (now Germany)\", \"bornCountryCode\" : \"DE\", \"bornCity\" : \"Lennep (now (..) \"country\" : \"Germany\" } ) } ), \"countryInfo\" : ( { \"_id\" : ObjectId(\"597e2f2bcd8724f48de489aa\"), \"continent\" : \"EU\", \"capital\" : \"Berlin\", \"languages\" : \"de\", \"geonameId\" : 2921044, \"south\" : 47.2701236047002, ...\n\n### With the data joined, we can now perform combined aggregations \n\n### Find the number of Nobel laureates by continent \n> db.laureates.aggregate( \n  {$lookup: { from: \"country\", localField: \"bornCountryCode\", foreignField: \"countryCode\", as: \"countryInfo\" }}, \n  {$group: {_id: '$countryInfo.continent', totalPrizes: {$sum: 1}}}, \n  {$sort: {totalPrizes: -1}} \n); \n\n... ); \n{ \"_id\" : ( \"EU\" ), \"totalPrizes\" : 478 } \n{ \"_id\" : ( \"NA\" ), \"totalPrizes\" : 285 } \n{ \"_id\" : ( \"AS\" ), \"totalPrizes\" : 67 } \n...\nThis indicates that Europe has by far the highest number of Nobel Laureates.  \n```", "```py\n$ cd Downloads/ # cd to the folder where you have downloaded the zip file \n\n$ unzip linuxx86.zip  \nArchive:  linuxx86.zip \n  inflating: q/README.txt             \n  inflating: q/l32/q                  \n  inflating: q/q.q                    \n  inflating: q/q.k                    \n  inflating: q/s.k                    \n  inflating: q/trade.q                \n  inflating: q/sp.q                   \n\n$ mv ~/Downloads/q ~/ \n$ cd ~/q \n$ cd l32 \n$ ./q KDB+ 3.5 2017.06.15 Copyright (C) 1993-2017 Kx Systems \nl32/ 1()core 3830MB cloudera quickstart.cloudera 10.0.2.15 NONEXPIRE   \n\nWelcome to kdb+ 32bit edition \nFor support please see http://groups.google.com/d/forum/personal-kdbplus \nTutorials can be found at http://code.kx.com/wiki/Tutorials \nTo exit, type \\\\ \nTo remove this startup msg, edit q.q \nq)\\\\\n/NOTE THAT YOU MAY NEED TO INSTALL THE FOLLOWING IF YOU GET AN ERROR MESSAGE STATING THAT THE FILE q CANNOT BE FOUND. IN THAT CASE, INSTALL THE REQUISITE SOFTWARE AS SHOWN BELOW \n\n$ sudo dpkg --add-architecture i386 \n$ sudo apt-get update \n$ sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 \n```", "```py\n# Replace YOURAPPTOKEN and 12000000 with your API Key and desired record limit respectively\n\ncd /home/packt; \n\ntime wget -O cms2016.csv 'https://openpaymentsdata.cms.gov/resource/vq63-hu5i.csv?$$app_token=YOURAPPTOKEN&$query=select Physician_First_Name as firstName,Physician_Last_Name as lastName,Recipient_City as city,Recipient_State as state,Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name as company,Total_Amount_of_Payment_USDollars as payment,Date_of_Payment as date,Nature_of_Payment_or_Transfer_of_Value as paymentNature,Product_Category_or_Therapeutic_Area_1 as category,Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_1 as product where covered_recipient_type like \"Covered Recipient Physician\" limit 12000000' \n```", "```py\n# Downloading without using APP TOKEN\n wget -O cms2016.csv 'https://openpaymentsdata.cms.gov/resource/vq63-hu5i.csv?$query=select Physician_First_Name as firstName,Physician_Last_Name as lastName,Recipient_City as city,Recipient_State as state,Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name as company,Total_Amount_of_Payment_USDollars as payment,Date_of_Payment as date,Nature_of_Payment_or_Transfer_of_Value as paymentNature,Product_Category_or_Therapeutic_Area_1 as category,Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_1 as product where covered_recipient_type like \"Covered Recipient Physician\" limit 12000000'\n```", "```py\n# We will start KDB+ - the NoSQL database that we'll use for the tutorial\n\n# Launch the Q Console by typing: \n\npackt@vagrant:~$ rlwrap ~/q/l32/q -s 4 -p 5001 \n\nKDB+ 3.5 2017.06.15 Copyright (C) 1993-2017 Kx Systems \nl32/ 1()core 3951MB packt vagrant 127.0.1.1 NONEXPIRE \n\nWelcome to kdb+ 32bit edition \nFor support please see http://groups.google.com/d/forum/personal-kdbplus \nTutorials can be found at http://code.kx.com/wiki/Tutorials \nTo exit, type \\\\ \nTo remove this startup msg, edit q.q \nq) \n# Enter the following at the Q console. Explanations for each of the commands have been provided in the comments (using /):/change to the home directory for user packt \n\\cd /home/packt/ /Define the schema of the cms table \nd:(`category`city`company`date`firstName`lastName`payment`paymentNature`product`state)!\"SSSZSSFSSS\"; /Read the headersfrom the cms csv file. These will be our table column names \n columns:system \"head -1 cms2016.csv\"; \ncolumns:`$\",\" vs ssr(raze columns;\"\\\"\";\"\"); /Run Garbage Collection \n.Q.gc(); /Load the cms csv file \n\\ts cms2016:(d columns;enlist\",\")0:`:cms2016.csv; /Add a month column to the data \n\\ts cms2016: `month`date xasc update month:`month$date, date:`date$date from cms2016 \n\n.Q.gc(); /Modify character columns to be lower case. The data contains u \n\\ts update lower firstName from `cms2016 \n\\ts update lower lastName from `cms2016 \n\\ts update lower city from `cms2016 \n\\ts update lower state from `cms2016 \n\\ts update lower product from `cms2016 \n\\ts update lower category from `cms2016 \n\\ts update lower paymentNature from `cms2016 \n\\ts update lower company from `cms2016\n.Q.gc() \n\ncms2016:`month`date`firstName`lastName`company`state`city`product`category`payment`paymentNature xcols cms2016 \n\ncount cms2016 /11 million /Function to save the data that was read from the CMS csv file\n savedata:{show (string .z.T),\" Writing: \",string x;cms::delete month from select from cms2016 where month=x; .Q.dpft(`:cms;x;`date;`cms)} \n/Save the data in monthly partitions in the current folder \n savedata each 2016.01m +til 12\n```", "```py\nsystem \"p 5001\" \n\nsystem \"l /home/packt/cms\" \n\n/firstCap: Takes a string (sym) input and capitalizes the first letter of each word separated by a blank space \nfirstCap:{\" \" sv {@(x;0;upper)} each (\" \" vs string x) except enlist \"\"}\n/VARIABLES AND HELPER TABLES \n\n/alldata: Aggregates data from the primary cms database \nalldata: distinct `company`product xasc update showCompany:`$firstCap each company, showProduct:`$firstCap each product from ungroup select distinct product by company from cms where not null product \n\n/minDate: First month \nminDate:exec date from select min date from cms where month=min month \n\n/maxDate: Last month \nmaxDate:exec date from select max date from cms where month=max month \n\n/companyStateCity: Cleans and normalises the company names (capitalisations, etc) \ncompanyStateCity:select asc upper distinct state, asc `$firstCap each distinct city by company from cms \n\n/FUNCTIONS \n/getShowProduct: Function to get product list from company name  getShowProduct:{$((`$\"Select All\") in x;raze exec showProduct from alldata;exec showProduct from alldata where showCompany in x)}\n/getShowState: Function to get state list from company name getShowState:{$((`$\"Select All\") in x;raze exec state from companyStateCity;exec state from companyStateCity where company = exec first company from alldata where showCompany in x)}\n/getShowCity: Function to get city list from company name \ngetShowCity:{$((`$\"Select All\") in x;raze exec city from companyStateCity;exec city from companyStateCity where company = exec first company from alldata where showCompany in x)}\n/getShowInfo: Generic Function for Product, State and City \ngetShowInfo:{y:`$\"|\" vs y;:asc distinct raze raze $(x~`product;getShowProduct each y;x~`state;getShowState each y;x~`city;getShowCity each y;\"\")}\n\n/Example: Run this after loading the entire script after removing the comment mark (/) from the beginning \n/getShowInfo(`state;\"Abb Con-cise Optical Group Llc|Select All|Abbott Laboratories\") \n\n/Convert encoded URL into a Q dictionary \ndecodeJSON:{.j.k .h.uh x} \n\n/Convert atoms to list \nensym:{$(0>type x;enlist x;x)}\n\n/Date functions \n\nwithinDates:{enlist (within;`date;\"D\"$x(`date))} \nwithinMonths:{enlist (within;`month;`month$\"D\"$x(`date))} \n/Helper function to remove null keys \ndelNullDict:{kx!x kx:where {not x~0n} each x}\n/If showdata=enlist 1, \n\n/Function to process the data for displaying results only \n\ngetData:{\"x is the dictionary from web\";d:`$dx:lower delNullDict x; enz:`$delete showData,date,columns from dx; ?(`cms;(withinMonths x),(withinDates x),{(in;x 0;enlist 1_x)} each ((key enz),'value enz);0b;(dc)!dc:ensym `$x`columns)}\n\n/Aggregation Function\n\naggDict:(`$(\"Total Payment\";\"Number of Payments\";\"Minimum Payment\";\"Maximum Payment\";\"Average Payment\"))!((sum;`payment);(#:;`i);(min;`payment);(max;`payment);(avg;`payment))\n/Function to aggregate the data \ngetDataGroups:{(aggDict;x) \"x is the dictionary from web\";d:`$dx:lower delNullDict x; enz:`$delete showData,date,columns,aggVars,aggData from dx; ?(`cms;(withinMonths x),(withinDates x),{(in;x 0;enlist 1_x)} each ((key enz),'value enz);xv!xv:ensym `$x`aggVars;xa!aggDict xa:ensym `$x`aggData)}(aggDict;)\n\n/Generic Function to create error messages\n\nerrtable:{tab:(()Time:enlist `$string .z.Z;Alert:enlist x);(tab;\"Missing Fields\")}\n\n/Validation for input\n\ninitialValidation:{$(0n~x(`company);:errtable `$\"Company must be selected\";(`aggVars in key x) and ((0=count x(`aggVars)) or 0n~x(`aggData));:errtable `$\"Both Metric and Aggregate Data field should be selected when using Aggregate Data option\";x)}\n/Special Handling for some variables, in this case month specialHandling:{0N!x;$(`month in cols x; update `$string month from x;x)}\n\n/Normalise Columns\ncolumnFix:{(`$firstCap each cols x) xcol x}\n\n/Use comma separator for numeric values\ncommaFmt: {((x<0)#\"-\"),(reverse\",\"sv 3 cut reverse string floor a),1_string(a:abs x)mod 1}\n\n/Wrapper for show data and aggregate data options\ngetRes:{0N!x;.Q.gc();st:.z.t;x:decodeJSON x; if (not x ~ ix:initialValidation x;:ix); res:$(`aggData in key x;getDataGroups x;getData x);res:specialHandling res; res:columnFix res;ccms:count cms; cres:count res; en:.z.t; .Q.gc();:(res;`$(string en),\": Processed \",(commaFmt ccms),\" records in \",(string en - st),\" seconds. Returned result with \",(commaFmt cres),\" rows.\\n\")\n```", "```py\nsudo apt-get install software-properties-common libssl-dev libcurl4-openssl-dev gdebi-core rlwrap \n```", "```py\ninstall.packages(c(\"shiny\",\"shinydashboard\",\"data.table\", \n                   \"DT\",\"rjson\",\"jsonlite\",\"shinyjs\",\"devtools\")) \n\nlibrary(devtools) \ndevtools::install_github('kxsystems/rkdb', quiet=TRUE) \n```", "```py\n# # This is a Shiny web application. You can run the application by clicking # the 'Run App' button above. # # Find out more about building applications with Shiny here: # # http://shiny.rstudio.com/ \n\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(data.table)\nlibrary(DT)\nlibrary(rjson)\nlibrary(jsonlite)\nlibrary(shinyjs)\nlibrary(rkdb)\n\nui <- dashboardPage (skin=\"purple\", dashboardHeader(title = \"CMS Open Payments 2016\"),\n  dashboardSidebar(\n  useShinyjs(),\n  sidebarMenu(\n  uiOutput(\"month\"),\n  uiOutput(\"company\"),\n  uiOutput(\"product\"),\n  uiOutput(\"state\"),\n  uiOutput(\"city\"),\n  uiOutput(\"showData\"),\n  uiOutput(\"displayColumns\"),\n  uiOutput(\"aggregationColumns\"),\n  actionButton(\"queryButton\", \"View Results\")\n\n  )\n  ),dashboardBody(\n  tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"packt.css\")),\n  textOutput(\"stats\"),\n  dataTableOutput(\"tableData\")\n  ),\n  title = \"CMS Open Payments Data Mining\"\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output, session) {\n\n  h <- open_connection(\"localhost\",\"5001\")\n\n  minDate <- execute(h,\"minDate\")\n  maxDate <- execute(h,\"maxDate\")\n  startDate <- minDate\n  endDate <- startDate + 31\n\ncmsdata <- data.table(dbColumns=c(\"month\",\"date\",\"firstName\",\"lastName\",\"city\",\"state\",\"company\",\"product\",\"category\",\"payment\",\"paymentNature\"), webColumns=c(\"Month\",\"Date\",\"First Name\",\"Last Name\",\"City\",\"State\",\"Company\",\"Product\",\"Category\",\"Payment\",\"Payment Nature\"))\n\ncompanyData <- execute(h,\"exec distinct showCompany from alldata\")\n\ngbyVars <- c(\"Company\",\"Product\",\"State\",\"City\",\"Category\",\"Payment Nature\")\n\nPLACEHOLDERLIST <- list(\n    placeholder = 'Please select an option below',\n    onInitialize = I('function() { this.setValue(\"\"); }')\n  )\n\nPLACEHOLDERLIST2 <- list(\n    placeholder = 'Select All',\n    onInitialize = I('function() { this.setValue(\"\"); }')\n  )\n\noutput$month <- renderUI({\n    dateRangeInput(\"date\", label = 'PAYMENT DATE', start = startDate, end = endDate, min = minDate, max = maxDate)\n  })\n\noutput$company <- renderUI({\n    selectizeInput(\"company\",\"COMPANY\" , companyData, multiple = TRUE,options = PLACEHOLDERLIST)\n  })\n\noutput$product <- renderUI({\n    productQuery <- paste0(\"getShowInfo(`product;\\\"\",paste(input$company,collapse=\"|\"),\"\\\")\")\n    productVals <- execute(h,productQuery)\n    selectizeInput(\"product\", \"DRUG/PRODUCT\" , productVals, multiple = TRUE,options = PLACEHOLDERLIST2)\n  }) \n\noutput$state <- renderUI({\n    stateQuery <- paste0(\"getShowInfo(`state;\\\"\",paste(input$company,collapse=\"|\"),\"\\\")\")\n    stateVals <- execute(h,stateQuery)\n    selectizeInput(\"state\", \"STATE\" , stateVals, multiple = TRUE,options = PLACEHOLDERLIST2)\n  }) \n\noutput$city <- renderUI({\n    cityQuery <- paste0(\"getShowInfo(`city;\\\"\",paste(input$company,collapse=\"|\"),\"\\\")\")\n    cityVals <- execute(h,cityQuery)\n    selectizeInput(\"city\", \"CITY\" , cityVals, multiple = TRUE,options = PLACEHOLDERLIST2)\n  })\n\noutput$showData <- renderUI({\n    selectInput(\"showData\", label = \"DISPLAY TYPE\", choices = list(\"Show Data\" = 1, \"Aggregate Data\" = 2), selected = 1)\n  })\n\noutput$displayColumns <- renderUI({\n    if (is.null(input$showData)) {selectInput(\"columns\", \"SHOW DATA\",cmsdata$webColumns, selectize = FALSE, multiple = TRUE, size=11)}\n    else if(input$showData == 1) {selectInput(\"columns\", \"SHOW DATA\",cmsdata$webColumns, selectize = FALSE, multiple = TRUE, size=11) } \n    else if(input$showData == 2) {selectInput(\"aggVars\", \"AGGREGATE DATA\",gbyVars, selectize = FALSE, multiple = TRUE, size=6) }\n  }) \n\noutput$aggregationColumns <- renderUI ({ conditionalPanel(\n    condition = \"input.showData != 1\",\n    selectInput(\"aggData\", \"CALCULATE METRICS\" , c(\"Total Payment\",\"Number of Payments\",\"Minimum Payment\",\"Maximum Payment\",\"Average Payment\"), selectize = TRUE, multiple = TRUE)\n  )})\n\ngetTableData <- eventReactive(input$queryButton, {\n    disable(\"queryButton\")\n    queryInfo <- (list(date=as.character(input$date),company=input$company, product=input$product, state=input$state, city=input$city,columns=cmsdata$dbColumns(cmsdata$webColumns %in% input$columns),showData=input$showData))\n    if (input$showData !=1) {queryInfo <- c(queryInfo, list(aggVars=cmsdata$dbColumns(cmsdata$webColumns %in% input$aggVars), aggData=input$aggData))} else {queryInfo <- c(queryInfo)}\n    JSON <- rjson::toJSON(queryInfo)\n    getQuery <- paste0(\"getRes \\\"\",URLencode(JSON),\"\\\"\")\n    finalResults <- execute(h,getQuery)\n    enable(\"queryButton\")\n    print (finalResults)\n    fres <<- finalResults\n    print (class(finalResults((1))))\n    print (finalResults)\n    finalResults\n  })\n\n output$tableData <- renderDataTable({ datatable(getTableData()((1)))})\n output$stats <- renderText({(getTableData())((2))})\n\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```", "```py\n.shiny-text-output, .shiny-bount-output { \n  margin: 1px; \n  font-weight: bold; \n} \n\n.main-header .logo { \nheight: 20px; \nfont-size: 14px; \nfont-weight: bold; \nline-height: 20px; \n} \n\n.main-header .sidebar-toggle { \n  padding: 0px; \n} \n\n.main-header .navbar { \n  min-height: 0px !important; \n} \n\n.left-side, .main-sidebar { \n  padding-top: 15px !important; \n} \n\n.form-group { \n  margin-bottom: 2px; \n} \n\n.selectize-input { \n  min-height: 0px !important; \n  padding-top: 1px !important; \n  padding-bottom: 1px !important; \n  padding-left: 12px !important; \n  padding-right: 12px !important; \n} \n\n.sidebar { \n  height: 99vh;  \n  overflow-y: auto; \n} \n\nsection.sidebar .shiny-input-container { \n    padding: 5px 15px 0px 12px; \n} \n\n.btn { \n  padding: 1px; \n  margin-left: 15px; \n  color:#636363; \n  background-color:#e0f3f8; \n  border-color:#e0f3f8; \n} \n\n.btn.focus, .btn:focus, .btn:hover { \n  color: #4575b4; \n  background-color:#fff; \n  border-color:#fff; \n} \n\npre { \n    display: inline-table; \n    width: 100%; \n    padding: 2px; \n    margin: 0 0 5px; \n    font-size: 12px; \n    line-height: 1.42857143; \n    color: rgb(51, 52, 53); \n    word-break: break-all; \n    word-wrap: break-word; \n    background-color: rgba(10, 9, 9, 0.06); \n    border: 1px rgba(10, 9, 9, 0.06); \n    /* border-radius: 4px */ \n} \n\n.skin-red .sidebar a { \n    color: #fff; \n} \n\n.sidebar { \n  color: #e0f3f8; \n  background-color:#4575b4; \n  border-color:#4575b4; \n}\n```"]