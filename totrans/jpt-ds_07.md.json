["```py\n#read in the CSV file as available as described previously\nvolcanoes = read.csv(\"volcanoes.csv\")\nhead(volcanoes)  \n```", "```py\n#install.packages(\"mapdata\",repos = \"http://cran.us.r-project.org\")\nlibrary(maps)\nmap(\"world\")\npoints(volcanoes$Longitude, volcanoes$Latitude, pch=16, col=\"red\", cex=1)  \n```", "```py\n    library(ggplot2)\n    qplot(Longitude, Latitude, data=volcanoes, color=Type, size=Elev, alpha=0.5)\n\n```", "```py\nlibrary(ggplot2) \nqplot(Sepal.Length, Petal.Length, data=iris, color=Species, size=Petal.Length)  \n```", "```py\nlibrary(ggplot2) \ndsmall <- diamonds[sample(nrow(diamonds), 100), ]\n\n(d <- ggplot(dsmall, aes(carat, price)) + geom_point(aes(shape = cut))) +\nscale_shape(solid = FALSE)  \n```", "```py\nlibrary(ggplot2) \nggplot(data=mpg) + \n geom_point(mapping = aes(x=displ, y=hwy, color=class, size=class))  \n```", "```py\n## app.R ##\n# load the shiny dashboard library\nlibrary(shinydashboard)\n# create a dashboard with title, sidebar and body\nui <- dashboardPage(\n dashboardHeader(title = \"Shiny dashboard\"),\n dashboardSidebar(),\n dashboardBody(\n fluidRow(\n box(plotOutput(\"plot1\", height = 250)), \n box(\n title = \"Controls\",\n sliderInput(\"slider\", \"Number of observations:\", 1, 100, 50)\n )\n )\n )\n)\n# when the server is called upon by system, will generate normalized data and plot it\n# further, every interaction with the user will rerun this set of code generating new data\nserver <- function(input, output) {\n set.seed(122)\n histdata <- rnorm(500)\n output$plot1 <- renderPlot({\n data <- histdata[seq_len(input$slider)]\n hist(data)\n })\n}\n# start the application - this calls upon the browser to get output for display\nshinyApp(ui, server)  \n```", "```py\nlibrary(shinydashboard)\n# only calls upon shiny to create a dashboard page with header, sidebar and body\n# each of these components is defined in the preceding app.R code.\ndashboardPage(\n dashboardHeader(),\n dashboardSidebar(),\n dashboardBody()\n)  \n```", "```py\nnpm install -g jupyter-dashboards-server  \n```", "```py\nC:\\Users\\Dan>jupyter-dashboards-server --KERNEL_GATEWAY_URL=http://my.gateway.com  \n```", "```py\nUsing generated SESSION_SECRET_TOKEN\nJupyter dashboard server listening on 127.0.0.1:3000  \n```", "```py\nconda install jupyter_dashboards -c conda-forge  \n```", "```py\njupyter nbextension enable jupyter_dashboards --py --sys-prefix  \n```", "```py\npip install jupyter_dashboards_bundlers\njupyter bundlerextension enable --sys-prefix --py dashboards_bundlers  \n```", "```py\nPOST /_api/notebooks/[PATH/]NAME  \n```"]