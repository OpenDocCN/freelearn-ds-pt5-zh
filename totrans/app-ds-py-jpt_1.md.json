["```py\n    jupyter notebook\n    ```", "```py\n    [I 20:03:01.045 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/?token=e915bb06866f19ce462d959a9193a94c7c088e81765f9d8a\n    ```", "```py\n    jupyter notebook --help\n    ```", "```py\n    jupyter notebook --port 9000\n    ```", "```py\n    pip install ipython-sql\n    ```", "```py\n    pip install version_information\n    ```", "```py\njupyter nbconvert --to=python lesson-1-notebook.ipynb\n```", "```py\npipreqs lesson-1/\n```", "```py\ncat lesson-1/requirements.txt \nmatplotlib==2.0.2 numpy==1.13.1\npandas==0.20.3 \nrequests==2.18.4 \nseaborn==0.8 \nbeautifulsoup4==4.6.0 \nscikit_learn==0.19.0\n```", "```py\nimport matplotlib.pyplot as plt\n%matplotlib inline import \nseaborn as sns\n# See here for more options: https://matplotlib.org/users/ customizing.html\n%config InlineBackend.figure_format='retina' \nsns.set() # Revert to matplotlib defaults \nplt.rcParams['figure.figsize'] = (9, 6)\nplt.rcParams['axes.labelpad'] = 10 sns.set_style(\"darkgrid\")\n```", "```py\n    Boston House Prices dataset\n    ===========================\n    Notes\n    ------\n    Data Set Characteristics:\n    :Number of Instances: 506\n    :Number of Attributes: 13 numeric/categorical predictive\n    :Median Value (attribute 14) is usually the target\t\n    :Attribute Information (in order):\n    - CRIM\tper capita crime rate by town\n    …\n    …\n    - MEDV     Median value of owner-occupied homes in $1000's\n    :Missing Attribute Values: None\n    ```", "```py\n    df = pd.DataFrame(data=boston['data'], \n    columns=boston['feature_names'])\n    ```", "```py\n    df['MEDV'] = boston['target']\n    ```", "```py\n    y = df['MEDV'].copy() \n    del df['MEDV']\n    df = pd.concat((y, df), axis=1)\n    ```", "```py\n    for col in ['ZN', 'NOX', 'RAD', 'PTRATIO', 'B']:\n    del df[col]\n    ```", "```py\n    cols = ['RM', 'AGE', 'TAX', 'LSTAT', 'MEDV']\n    ```", "```py\n    - RM       average number of rooms per dwelling\n            - AGE      proportion of owner-occupied units built prior to 1940\n            - TAX      full-value property-tax rate per $10,000\n            - LSTAT    % lower status of the population\n            - MEDV     Median value of owner-occupied homes in $1000's\n    ```", "```py\n    df[cols].corr()\n    ```", "```py\n    import matplotlib.pyplot as plt import seaborn as sns\n    %matplotlib inline\n    ax = sns.heatmap(df[cols].corr(),\n    cmap=sns.cubehelix_palette(20, light=0.95,\n    dark=0.15))\n    ax.xaxis.tick_top() # move labels to the top\n    plt.savefig('../figures/lesson-1-boston-housing-corr.png', bbox_inches='tight', dpi=300)\n    ```", "```py\nsns.pairplot(df[cols],\nplot_kws={'alpha': 0.6},\ndiag_kws={'bins': 30})\n```", "```py\n    fig, ax = plt.subplots(1, 2) sns.regplot('RM', 'MEDV', df, ax=ax[0],\n    scatter_kws={'alpha': 0.4})) sns.regplot('LSTAT', 'MEDV', df, ax=ax[1],\n    scatter_kws={'alpha': 0.4}))\n    ```", "```py\n    fig, ax = plt.subplots(1, 2)\n    ax[0] = sns.residplot('RM', 'MEDV', df, ax=ax[0],\n    scatter_kws={'alpha': 0.4}) ax[0].set_ylabel('MDEV residuals $(y-\\hat{y})$') ax[1] = sns.residplot('LSTAT', 'MEDV', df, ax=ax[1],\n    scatter_kws={'alpha': 0.4})\n    ax[1].set_ylabel('')\n    ```", "```py\n    def get_mse(df, feature, target='MEDV'): # Get x, y to model\n    y = df[target].values\n    x = df[feature].values.reshape(-1,1)\n    ...\n    ...\n    error = mean_squared_error(y, y_pred) print('mse = {:.2f}'.format(error)) print()\n    ```", "```py\n    get_mse(df, 'RM') get_mse(df, 'LSTAT')\n    ```", "```py\n    def get_age_category(x): if x < 50:\n    return 'Relatively New' elif 50 <= x < 85:\n    return 'Relatively Old' else:\n    return 'Very Old'\n    df['AGE_category'] = df.AGE.apply(get_age_category)\n    ```", "```py\n    sns.violinplot(x='MEDV', y='AGE_category', data=df, order=['Relatively New', 'Relatively Old',\n    'Very Old']);\n    ```", "```py\n    cols = ['RM', 'AGE', 'TAX', 'LSTAT', 'MEDV', 'AGE_\n    category']\n    sns.pairplot(df[cols], hue='AGE_category',\n    hue_order=['Relatively New', 'Relatively Old',\n    'Very Old'],\n    plot_kws={'alpha': 0.5}, diag_kws={'bins':\n    30});\n    ```"]