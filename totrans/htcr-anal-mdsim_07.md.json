["```py\nimport pandas as pd\npd.set_option('mode.chained_assignment',None)\n\nHOME_PATH = 'C:\\\\Users\\\\Vikas\\\\Desktop\\\\Bk\\\\health-it\\\\ed_predict\\\\data\\\\'\n\ndf_helper = pd.read_csv(\n    HOME_PATH + 'ED_metadata.csv',\n    header=0, \n    dtype={'width': int, 'column_name': str, 'variable_type': str}\n)\n\nprint(df_helper.head(n=5))\n```", "```py\n   width column_name  variable_type\n0      2      VMONTH    CATEGORICAL\n1      1       VDAYR    CATEGORICAL\n2      4     ARRTIME  NONPREDICTIVE\n3      4    WAITTIME     CONTINUOUS\n4      4         LOV  NONPREDICTIVE\n```", "```py\nwidth = df_helper['width'].tolist()\ncol_names = df_helper['column_name'].tolist()\nvar_types = df_helper['variable_type'].tolist()\n```", "```py\ndf_ed = pd.read_fwf(\n    HOME_PATH + 'ED2013',\n    widths=width,\n    header=None,\n    dtype='str'  \n)\n\ndf_ed.columns = col_names\n```", "```py\nprint(df_ed.head(n=5))\n```", "```py\n  VMONTH VDAYR ARRTIME WAITTIME   LOV  AGE AGER AGEDAYS RESIDNCE SEX ...   \\\n0     01     3    0647     0033  0058  046    4     -07       01   2 ...    \n1     01     3    1841     0109  0150  056    4     -07       01   2 ...    \n2     01     3    1333     0084  0198  037    3     -07       01   2 ...    \n3     01     3    1401     0159  0276  007    1     -07       01   1 ...    \n4     01     4    1947     0114  0248  053    4     -07       01   1 ...    \n\n  RX12V3C1 RX12V3C2 RX12V3C3 RX12V3C4 SETTYPE  YEAR   CSTRATM   CPSUM   PATWT  \\\n0      nan      nan      nan      nan       3  2013  20113201  100020  002945   \n1      nan      nan      nan      nan       3  2013  20113201  100020  002945   \n2      nan      nan      nan      nan       3  2013  20113201  100020  002945   \n3      nan      nan      nan      nan       3  2013  20113201  100020  002945   \n4      nan      nan      nan      nan       3  2013  20113201  100020  002945\n```", "```py\n  EDWT  \n0  nan  \n1  nan  \n2  nan  \n3  nan  \n4  nan  \n\n[5 rows x 579 columns]\n```", "```py\nprint(df_ed.shape)\n```", "```py\n(24777, 579)\n```", "```py\nresponse_cols = ['ADMITHOS','TRANOTH','TRANPSYC','OBSHOS','OBSDIS']\n\ndf_ed.loc[:, response_cols] = df_ed.loc[:, response_cols].apply(pd.to_numeric)\n\ndf_ed['ADMITTEMP'] = df_ed[response_cols].sum(axis=1)\ndf_ed['ADMITFINAL'] = 0\ndf_ed.loc[df_ed['ADMITTEMP'] >= 1, 'ADMITFINAL'] = 1\n\ndf_ed.drop(response_cols, axis=1, inplace=True)\ndf_ed.drop('ADMITTEMP', axis=1, inplace=True)\n```", "```py\ndef split_target(data, target_name):\n    target = data[[target_name]]\n    data.drop(target_name, axis=1, inplace=True)\n    return (data, target)\n\nX, y = split_target(df_ed, 'ADMITFINAL')\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.25, random_state=1234\n)\n```", "```py\nprint(y_train.groupby('ADMITFINAL').size())\n```", "```py\nADMITFINAL\n0    15996\n1     2586\ndtype: int64\n```", "```py\nprint(X_train.groupby('VMONTH').size())\n```", "```py\nVMONTH\n01    1757\n02    1396\n03    1409\n04    1719\n05    2032\n06    1749\n07    1696\n08    1034\n09    1240\n10    1306\n11    1693\n12    1551\ndtype: int64\n```", "```py\ndef is_winter(vmonth):\n    if vmonth in ['12','01','02','03']:\n        return 1\n    else:\n        return 0\n\nX_train.loc[:,'WINTER'] = df_ed.loc[:,'VMONTH'].apply(is_winter)\nX_test.loc[:,'WINTER'] = df_ed.loc[:,'VMONTH'].apply(is_winter)\n```", "```py\nX_train.groupby('WINTER').size()\n```", "```py\nWINTER\n0    12469\n1     6113\ndtype: int64\n```", "```py\nX_train.groupby('VDAYR').size()\n```", "```py\nVDAYR\n1    2559\n2    2972\n3    2791\n4    2632\n5    2553\n6    2569\n7    2506\ndtype: int64\n```", "```py\ndef is_night(arrtime):\n    arrtime_int = int(arrtime)\n    if ((arrtime_int >= 0) & (arrtime_int < 800)):\n        return 1\n    elif ((arrtime_int >= 2000) & (arrtime_int < 2400)):\n        return 1\n    else:\n        return 0\n\nX_train.loc[:,'NIGHT'] = df_ed.loc[:,'ARRTIME'].apply(is_night)\nX_test.loc[:,'NIGHT'] = df_ed.loc[:,'ARRTIME'].apply(is_night)\n\nX_train.drop('ARRTIME', axis=1, inplace=True)\nX_test.drop('ARRTIME', axis=1, inplace=True)\n```", "```py\nX_train.loc[:,'WAITTIME'] = X_train.loc[:,'WAITTIME'].apply(pd.to_numeric)\nX_test.loc[:,'WAITTIME'] = X_test.loc[:,'WAITTIME'].apply(pd.to_numeric)\n```", "```py\ndef mean_impute_values(data,col): \n    temp_mean = data.loc[(data[col] != -7) & (data[col] != -9), col].mean()\n    data.loc[(data[col] == -7) | (data[col] == -9), col] = temp_mean \n    return data\n\nX_train = mean_impute_values(X_train,'WAITTIME')\nX_test = mean_impute_values(X_test,'WAITTIME')\n```", "```py\nX_train.drop('LOV', axis=1, inplace=True)\nX_test.drop('LOV', axis=1, inplace=True)\n```", "```py\nX_train.loc[:,'AGE'] = X_train.loc[:,'AGE'].apply(pd.to_numeric)\nX_test.loc[:,'AGE'] = X_test.loc[:,'AGE'].apply(pd.to_numeric)\n\nX_train.drop('AGEDAYS', axis=1, inplace=True)\nX_test.drop('AGEDAYS', axis=1, inplace=True)\n```", "```py\nX_train.drop(['ETHIM','RACER','RACERETH'], axis=1, inplace=True)\nX_test.drop(['ETHIM','RACER','RACERETH'], axis=1, inplace=True)\n```", "```py\nX_train.head(n=5)\n```", "```py\nX_train.drop('PAYTYPER', axis=1, inplace=True)\nX_test.drop('PAYTYPER', axis=1, inplace=True)\n```", "```py\nX_train.loc[:,'TEMPF'] = X_train.loc[:,'TEMPF'].apply(pd.to_numeric)\nX_test.loc[:,'TEMPF'] = X_test.loc[:,'TEMPF'].apply(pd.to_numeric)\n\nX_train = mean_impute_values(X_train,'TEMPF')\nX_test = mean_impute_values(X_test,'TEMPF')\n\nX_train.loc[:,'TEMPF'] = X_train.loc[:,'TEMPF'].apply(lambda x: float(x)/10)\nX_test.loc[:,'TEMPF'] = X_test.loc[:,'TEMPF'].apply(lambda x: float(x)/10)\n```", "```py\nX_train['TEMPF'].head(n=30)\n```", "```py\n15938     98.200000\n5905      98.100000\n4636      98.200000\n9452      98.200000\n7558      99.300000\n17878     99.000000\n21071     97.800000\n20990     98.600000\n4537      98.200000\n7025      99.300000\n2134      97.500000\n5212      97.400000\n9213      97.900000\n2306      97.000000\n6106      98.600000\n2727      98.282103\n4098      99.100000\n5233      98.800000\n5107     100.000000\n18327     98.900000\n19242     98.282103\n3868      97.900000\n12903     98.600000\n12763     98.700000\n8858      99.400000\n8955      97.900000\n16360     98.282103\n6857      97.100000\n6842      97.700000\n22073     97.900000\nName: TEMPF, dtype: float64\n```", "```py\nX_train.loc[:,'PULSE'] = X_train.loc[:,'PULSE'].apply(pd.to_numeric)\nX_test.loc[:,'PULSE'] = X_test.loc[:,'PULSE'].apply(pd.to_numeric)\n```", "```py\ndef mean_impute_vitals(data,col): \n    temp_mean = data.loc[(data[col] != 998) & (data[col] != -9), col].mean()\n    data.loc[(data[col] == 998) | (data[col] == -9), col] = temp_mean \n    return data\n\nX_train = mean_impute_vitals(X_train,'PULSE')\nX_test = mean_impute_vitals(X_test,'PULSE')\n```", "```py\nX_train.loc[:,'RESPR'] = X_train.loc[:,'RESPR'].apply(pd.to_numeric)\nX_test.loc[:,'RESPR'] = X_test.loc[:,'RESPR'].apply(pd.to_numeric)\n\nX_train = mean_impute_values(X_train,'RESPR')\nX_test = mean_impute_values(X_test,'RESPR')\n```", "```py\nX_train.loc[:,'BPSYS'] = X_train.loc[:,'BPSYS'].apply(pd.to_numeric)\nX_test.loc[:,'BPSYS'] = X_test.loc[:,'BPSYS'].apply(pd.to_numeric)\n\nX_train = mean_impute_values(X_train,'BPSYS')\nX_test = mean_impute_values(X_test,'BPSYS')\n```", "```py\nX_train.loc[:,'BPDIAS'] = X_train.loc[:,'BPDIAS'].apply(pd.to_numeric)\nX_test.loc[:,'BPDIAS'] = X_test.loc[:,'BPDIAS'].apply(pd.to_numeric)\n```", "```py\ndef mean_impute_bp_diast(data,col): \n    temp_mean = data.loc[(data[col] != 998) & (data[col] != -9), col].mean()\n    data.loc[data[col] == 998, col] = 40\n    data.loc[data[col] == -9, col] = temp_mean \n    return data\n\nX_train = mean_impute_values(X_train,'BPDIAS')\nX_test = mean_impute_values(X_test,'BPDIAS')\n```", "```py\nX_train.loc[:,'POPCT'] = X_train.loc[:,'POPCT'].apply(pd.to_numeric)\nX_test.loc[:,'POPCT'] = X_test.loc[:,'POPCT'].apply(pd.to_numeric)\n\nX_train = mean_impute_values(X_train,'POPCT')\nX_test = mean_impute_values(X_test,'POPCT')\n```", "```py\nX_train[['TEMPF','PULSE','RESPR','BPSYS','BPDIAS','POPCT']].head(n=20)\n```", "```py\nX_train.loc[:,'PAINSCALE'] = X_train.loc[:,'PAINSCALE'].apply(pd.to_numeric)\nX_test.loc[:,'PAINSCALE'] = X_test.loc[:,'PAINSCALE'].apply(pd.to_numeric)\n```", "```py\ndef mean_impute_pain(data,col): \n    temp_mean = data.loc[(data[col] != -8) & (data[col] != -9), col].mean()\n    data.loc[(data[col] == -8) | (data[col] == -9), col] = temp_mean \n    return data\n\nX_train = mean_impute_pain(X_train,'PAINSCALE')\nX_test = mean_impute_pain(X_test,'PAINSCALE')\n```", "```py\nrfv_codes_path = HOME_PATH + 'RFV_CODES.csv'\n\nrfv_codes = pd.read_csv(rfv_codes_path,header=0,dtype='str')\n```", "```py\nfrom re import sub\n\ndef add_rfv_column(data,code,desc,rfv_columns):\n    column_name = 'rfv_' + sub(\" \", \"_\", desc)\n    data[column_name] = (data[rfv_columns] == rfv_code).any(axis=1).astype('int')\n    return data\n\nrfv_columns = ['RFV1','RFV2','RFV3']\nfor (rfv_code,rfv_desc) in zip(\n    rfv_codes['Code'].tolist(),rfv_codes['Description'].tolist()\n):\n    X_train = add_rfv_column(\n        X_train,\n        rfv_code,\n        rfv_desc,\n        rfv_columns\n    )\n    X_test = add_rfv_column(\n        X_test,\n        rfv_code,\n        rfv_desc,\n        rfv_columns \n    )\n\n# Remove original RFV columns\nX_train.drop(rfv_columns, axis=1, inplace=True)\nX_test.drop(rfv_columns, axis=1, inplace=True)\n```", "```py\nX_train.head(n=5)\n```", "```py\ninj_cols = [\n    'INJURY','INJR1','INJR2','INJPOISAD','INJPOISADR1',\n    'INJPOISADR2','INTENT','INJDETR','INJDETR1','INJDETR2',\n    'CAUSE1','CAUSE2','CAUSE3','CAUSE1R','CAUSE2R','CAUSE3R'\n]\n\nX_train.drop(inj_cols, axis=1, inplace=True)\nX_test.drop(inj_cols, axis=1, inplace=True)\n```", "```py\ndiag_cols= [\n    'DIAG1','DIAG2','DIAG3',\n    'PRDIAG1','PRDIAG2','PRDIAG3',\n    'DIAG1R','DIAG2R','DIAG3R'\n]\n\nX_train.drop(diag_cols, axis=1, inplace=True)\nX_test.drop(diag_cols, axis=1, inplace=True)\n```", "```py\nX_train.loc[:,'TOTCHRON'] = X_train.loc[:,'TOTCHRON'].apply(pd.to_numeric)\nX_test.loc[:,'TOTCHRON'] = X_test.loc[:,'TOTCHRON'].apply(pd.to_numeric)\n\nX_train = mean_impute_values(X_train,'TOTCHRON')\nX_test = mean_impute_values(X_test,'TOTCHRON')\n```", "```py\ntesting_cols = [\n    'ABG','BAC','BLOODCX','BNP','BUNCREAT',\n    'CARDENZ','CBC','DDIMER','ELECTROL','GLUCOSE',\n    'LACTATE','LFT','PTTINR','OTHERBLD','CARDMON',\n    'EKG','HIVTEST','FLUTEST','PREGTEST','TOXSCREN',\n    'URINE','WOUNDCX','URINECX','OTHRTEST','ANYIMAGE',\n    'XRAY','IVCONTRAST','CATSCAN','CTAB','CTCHEST',\n    'CTHEAD','CTOTHER','CTUNK','MRI','ULTRASND',\n    'OTHIMAGE','TOTDIAG','DIAGSCRN'\n]\n\nX_train.drop(testing_cols, axis=1, inplace=True)\nX_test.drop(testing_cols, axis=1, inplace=True)\n```", "```py\nproc_cols = [\n    'PROC','BPAP','BLADCATH','CASTSPLINT','CENTLINE',\n    'CPR','ENDOINT','INCDRAIN','IVFLUIDS','LUMBAR',\n    'NEBUTHER','PELVIC','SKINADH','SUTURE','OTHPROC',\n    'TOTPROC'\n]\n\nX_train.drop(proc_cols, axis=1, inplace=True)\nX_test.drop(proc_cols, axis=1, inplace=True)\n```", "```py\nmed_cols = [\n    'MED1','MED2','MED3','MED4','MED5',\n    'MED6','MED7','MED8','MED9','MED10',\n    'MED11','MED12','GPMED1','GPMED2','GPMED3',\n    'GPMED4','GPMED5','GPMED6','GPMED7','GPMED8',\n    'GPMED9','GPMED10','GPMED11','GPMED12','NUMGIV',\n    'NUMDIS','NUMMED',\n]\n\nX_train.drop(med_cols, axis=1, inplace=True)\nX_test.drop(med_cols, axis=1, inplace=True)\n```", "```py\nprov_cols = [\n    'NOPROVID','ATTPHYS','RESINT','CONSULT','RNLPN',\n    'NURSEPR','PHYSASST','EMT','MHPROV','OTHPROV'\n]\n\nX_train.drop(prov_cols, axis=1, inplace=True)\nX_test.drop(prov_cols, axis=1, inplace=True)\n```", "```py\ndisp_cols = [\n    'NODISP','NOFU','RETRNED','RETREFFU','LEFTBTRI',\n    'LEFTAMA','DOA','DIEDED','TRANNH','OTHDISP',\n    'ADMIT','ADMTPHYS','BOARDED','LOS','HDDIAG1',\n    'HDDIAG2','HDDIAG3','HDDIAG1R','HDDIAG2R','HDDIAG3R',\n    'HDSTAT','ADISP','OBSSTAY','STAY24'\n]\n\nX_train.drop(disp_cols, axis=1, inplace=True)\nX_test.drop(disp_cols, axis=1, inplace=True)\n```", "```py\nimp_cols = [\n    'AGEFL','BDATEFL','SEXFL','ETHNICFL','RACERFL'\n]\n\nX_train.drop(imp_cols, axis=1, inplace=True)\nX_test.drop(imp_cols, axis=1, inplace=True)\n```", "```py\nid_cols = [\n    'HOSPCODE','PATCODE'\n]\n\nX_train.drop(id_cols, axis=1, inplace=True)\nX_test.drop(id_cols, axis=1, inplace=True)\n```", "```py\nemr_cols = [\n    'EBILLANYE','EMRED','HHSMUE','EHRINSE','EDEMOGE',\n    'EDEMOGER','EPROLSTE','EPROLSTER','EVITALE','EVITALER',\n    'ESMOKEE','ESMOKEER','EPNOTESE','EPNOTESER','EMEDALGE',\n    'EMEDALGER','ECPOEE','ECPOEER','ESCRIPE','ESCRIPER',\n    'EWARNE','EWARNER','EREMINDE','EREMINDER','ECTOEE',\n    'ECTOEER','EORDERE','EORDERER','ERESULTE','ERESULTER',\n    'EGRAPHE','EGRAPHER','EIMGRESE','EIMGRESER','EPTEDUE',\n    'EPTEDUER','ECQME','ECQMER','EGENLISTE','EGENLISTER',\n    'EIMMREGE','EIMMREGER','ESUME','ESUMER','EMSGE',\n    'EMSGER','EHLTHINFOE','EHLTHINFOER','EPTRECE','EPTRECER',\n    'EMEDIDE','EMEDIDER','ESHAREE','ESHAREEHRE','ESHAREWEBE',\n    'ESHAREOTHE','ESHAREUNKE','ESHAREREFE','LABRESE1','LABRESE2',\n    'LABRESE3','LABRESE4','LABRESUNKE','LABRESREFE','IMAGREPE1',\n    'IMAGREPE2','IMAGREPE3','IMAGREPE4','IMAGREPUNKE','IMAGREPREFE',\n    'PTPROBE1','PTPROBE2','PTPROBE3','PTPROBE4','PTPROBUNKE',\n    'PTPROBREFE','MEDLISTE1','MEDLISTE2','MEDLISTE3','MEDLISTE4',\n    'MEDLISTUNKE','MEDLISTREFE','ALGLISTE1','ALGLISTE2','ALGLISTE3',\n    'ALGLISTE4','ALGLISTUNKE','ALGLISTREFE','EDPRIM','EDINFO',\n    'MUINC','MUYEAR'\n]\n\nX_train.drop(emr_cols, axis=1, inplace=True)\nX_test.drop(emr_cols, axis=1, inplace=True)\n```", "```py\ndrug_id_cols = [\n    'DRUGID1','DRUGID2','DRUGID3','DRUGID4','DRUGID5',\n    'DRUGID6','DRUGID7','DRUGID8','DRUGID9','DRUGID10',\n    'DRUGID11','DRUGID12'\n]\n\ndrug_lev1_cols = [\n    'RX1V1C1','RX1V1C2','RX1V1C3','RX1V1C4',\n    'RX2V1C1','RX2V1C2','RX2V1C3','RX2V1C4',\n    'RX3V1C1','RX3V1C2','RX3V1C3','RX3V1C4',\n    'RX4V1C1','RX4V1C2','RX4V1C3','RX4V1C4',\n    'RX5V1C1','RX5V1C2','RX5V1C3','RX5V1C4',\n    'RX6V1C1','RX6V1C2','RX6V1C3','RX6V1C4',\n    'RX7V1C1','RX7V1C2','RX7V1C3','RX7V1C4',\n    'RX8V1C1','RX8V1C2','RX8V1C3','RX8V1C4',\n    'RX9V1C1','RX9V1C2','RX9V1C3','RX9V1C4',\n    'RX10V1C1','RX10V1C2','RX10V1C3','RX10V1C4',\n    'RX11V1C1','RX11V1C2','RX11V1C3','RX11V1C4',\n    'RX12V1C1','RX12V1C2','RX12V1C3','RX12V1C4'\n]\n\ndrug_lev2_cols = [\n    'RX1V2C1','RX1V2C2','RX1V2C3','RX1V2C4',\n    'RX2V2C1','RX2V2C2','RX2V2C3','RX2V2C4',\n    'RX3V2C1','RX3V2C2','RX3V2C3','RX3V2C4',\n    'RX4V2C1','RX4V2C2','RX4V2C3','RX4V2C4',\n    'RX5V2C1','RX5V2C2','RX5V2C3','RX5V2C4',\n    'RX6V2C1','RX6V2C2','RX6V2C3','RX6V2C4',\n    'RX7V2C1','RX7V2C2','RX7V2C3','RX7V2C4',\n    'RX8V2C1','RX8V2C2','RX8V2C3','RX8V2C4',\n    'RX9V2C1','RX9V2C2','RX9V2C3','RX9V2C4',\n    'RX10V2C1','RX10V2C2','RX10V2C3','RX10V2C4',\n    'RX11V2C1','RX11V2C2','RX11V2C3','RX11V2C4',\n    'RX12V2C1','RX12V2C2','RX12V2C3','RX12V2C4'\n]\n\ndrug_lev3_cols = [\n    'RX1V3C1','RX1V3C2','RX1V3C3','RX1V3C4',\n    'RX2V3C1','RX2V3C2','RX2V3C3','RX2V3C4',\n    'RX3V3C1','RX3V3C2','RX3V3C3','RX3V3C4',\n    'RX4V3C1','RX4V3C2','RX4V3C3','RX4V3C4',\n    'RX5V3C1','RX5V3C2','RX5V3C3','RX5V3C4',\n    'RX6V3C1','RX6V3C2','RX6V3C3','RX6V3C4',\n    'RX7V3C1','RX7V3C2','RX7V3C3','RX7V3C4',\n    'RX8V3C1','RX8V3C2','RX8V3C3','RX8V3C4',\n    'RX9V3C1','RX9V3C2','RX9V3C3','RX9V3C4',\n    'RX10V3C1','RX10V3C2','RX10V3C3','RX10V3C4',\n    'RX11V3C1','RX11V3C2','RX11V3C3','RX11V3C4',\n    'RX12V3C1','RX12V3C2','RX12V3C3','RX12V3C4'\n]\n\naddl_drug_cols = [\n    'PRESCR1','CONTSUB1','COMSTAT1','RX1CAT1','RX1CAT2',\n    'RX1CAT3','RX1CAT4','PRESCR2','CONTSUB2','COMSTAT2',\n    'RX2CAT1','RX2CAT2','RX2CAT3','RX2CAT4','PRESCR3','CONTSUB3',\n    'COMSTAT3','RX3CAT1','RX3CAT2','RX3CAT3','RX3CAT4','PRESCR4',\n    'CONTSUB4','COMSTAT4','RX4CAT1','RX4CAT2','RX4CAT3',\n    'RX4CAT4','PRESCR5','CONTSUB5','COMSTAT5','RX5CAT1',\n    'RX5CAT2','RX5CAT3','RX5CAT4','PRESCR6','CONTSUB6',\n    'COMSTAT6','RX6CAT1','RX6CAT2','RX6CAT3','RX6CAT4','PRESCR7',\n    'CONTSUB7','COMSTAT7','RX7CAT1','RX7CAT2','RX7CAT3',\n    'RX7CAT4','PRESCR8','CONTSUB8','COMSTAT8','RX8CAT1',\n    'RX8CAT2','RX8CAT3','RX8CAT4','PRESCR9','CONTSUB9',\n    'COMSTAT9','RX9CAT1','RX9CAT2','RX9CAT3','RX9CAT4',\n    'PRESCR10','CONTSUB10','COMSTAT10','RX10CAT1','RX10CAT2',\n    'RX10CAT3','RX10CAT4','PRESCR11','CONTSUB11','COMSTAT11',\n    'RX11CAT1','RX11CAT2','RX11CAT3','RX11CAT4','PRESCR12',\n    'CONTSUB12','COMSTAT12','RX12CAT1','RX12CAT2','RX12CAT3',\n    'RX12CAT4'\n]\n\nX_train.drop(drug_id_cols, axis=1, inplace=True)\nX_train.drop(drug_lev1_cols, axis=1, inplace=True)\nX_train.drop(drug_lev2_cols, axis=1, inplace=True)\nX_train.drop(drug_lev3_cols, axis=1, inplace=True)\nX_train.drop(addl_drug_cols, axis=1, inplace=True)\n\nX_test.drop(drug_id_cols, axis=1, inplace=True)\nX_test.drop(drug_lev1_cols, axis=1, inplace=True)\nX_test.drop(drug_lev2_cols, axis=1, inplace=True)\nX_test.drop(drug_lev3_cols, axis=1, inplace=True)\nX_test.drop(addl_drug_cols, axis=1, inplace=True)\n```", "```py\ndesign_cols = ['CSTRATM','CPSUM','PATWT','EDWT']\n\nX_train.drop(design_cols, axis=1, inplace=True)\nX_test.drop(design_cols, axis=1, inplace=True)\n```", "```py\ncateg_cols = df_helper.loc[\n    df_helper['variable_type'] == 'CATEGORICAL', 'column_name'\n]\n\none_hot_cols = list(set(categ_cols) & set(X_train.columns))\n\nX_train = pd.get_dummies(X_train, columns=one_hot_cols)\n```", "```py\nX_test = pd.get_dummies(X_test, columns=one_hot_cols)\n```", "```py\nX_train.loc[:,X_train.columns] = X_train.loc[:,X_train.columns].apply(pd.to_numeric)\nX_test.loc[:,X_test.columns] = X_test.loc[:,X_test.columns].apply(pd.to_numeric)\n```", "```py\nX_train_cols = X_train.columns\nX_test_cols = X_test.columns\n```", "```py\nX_train = X_train.values\nX_test = X_test.values\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n\nclfs = [LogisticRegression()]\n\nfor clf in clfs:\n    clf.fit(X_train, y_train.ravel())\n    print(type(clf))\n    print('Training accuracy: ' + str(clf.score(X_train, y_train)))\n    print('Validation accuracy: ' + str(clf.score(X_test, y_test)))\n\n    coefs = {\n        'column': [X_train_cols[i] for i in range(len(X_train_cols))],\n        'coef': [clf.coef_[0,i] for i in range(len(X_train_cols))]\n    }\n    df_coefs = pd.DataFrame(coefs)\n    print(df_coefs.sort_values('coef', axis=0, ascending=False))\n```", "```py\n<class 'sklearn.linear_model.logistic.LogisticRegression'>\nTraining accuracy: 0.888978581423\nValidation accuracy: 0.884261501211\n         coef                                             column\n346  2.825056                     rfv_Symptoms_of_onset_of_labor\n696  1.618454                   rfv_Adverse_effect_of_drug_abuse\n95   1.467790                    rfv_Delusions_or_hallucinations\n108  1.435026  rfv_Other_symptoms_or_problems_relating_to_psy...\n688  1.287535                                rfv_Suicide_attempt\n895  1.265043                                          IMMEDR_01\n520  1.264023  rfv_General_psychiatric_or_psychological_exami...\n278  1.213235                                       rfv_Jaundice\n712  1.139245         rfv_For_other_and_unspecified_test_results\n469  1.084806                            rfv_Other_heart_disease\n...\n```", "```py\n...\n898 -0.839861                                          IMMEDR_04\n823 -0.848631                                         BEDDATA_03\n625 -0.873828                               rfv_Hand_and_fingers\n371 -0.960739                                      rfv_Skin_rash\n188 -0.963524                                  rfv_Earache_pain_\n217 -0.968058                                       rfv_Soreness\n899 -1.019763                                          IMMEDR_05\n604 -1.075670                      rfv_Suture__insertion_removal\n235 -1.140021                                      rfv_Toothache\n30  -1.692650                                           LEFTATRI\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\n\nclfs_rf = [RandomForestClassifier(n_estimators=100)]\n\nfor clf in clfs_rf:\n    clf.fit(X_train, y_train.ravel())\n    print(type(clf))\n    print('Training accuracy: ' + str(clf.score(X_train, y_train)))\n    print('Validation accuracy: ' + str(clf.score(X_test, y_test)))\n\n    imps = {\n        'column': [X_train_cols[i] for i in range(len(X_train_cols))],\n        'imp': [clf.feature_importances_[i] for i in range(len(X_train_cols))]\n    }\n    df_imps = pd.DataFrame(imps)\n    print(df_imps.sort_values('imp', axis=0, ascending=False))\n```", "```py\n<class 'sklearn.ensemble.forest.RandomForestClassifier'>\nTraining accuracy: 1.0\nValidation accuracy: 0.885391444713\n                                                column       imp\n1                                                  AGE  0.039517\n13                                               PULSE  0.028348\n15                                               BPSYS  0.026833\n12                                               TEMPF  0.025898\n16                                              BPDIAS  0.025844\n0                                             WAITTIME  0.025111\n14                                               RESPR  0.021329\n17                                               POPCT  0.020407\n29                                            TOTCHRON  0.018417\n896                                          IMMEDR_02  0.016714\n...\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPClassifier \n\n# Scale data\nscaler = StandardScaler() \nscaler.fit(X_train) \nX_train_Tx = scaler.transform(X_train) \nX_test_Tx = scaler.transform(X_test) \n\n# Fit models that require scaling (e.g. neural networks)\nhl_sizes = [150,100,80,60,40,20]\nnn_clfs = [MLPClassifier(hidden_layer_sizes=(size,), random_state=2345, verbose=True) for size in hl_sizes]\n\nfor num, nn_clf in enumerate(nn_clfs):\n    print(str(hl_sizes[num]) + '-unit network:')\n    nn_clf.fit(X_train_Tx, y_train.ravel())\n    print('Training accuracy: ' + str(nn_clf.score(X_train_Tx, y_train)))\n    print('Validation accuracy: ' + str(nn_clf.score(X_test_Tx, y_test)))\n```"]