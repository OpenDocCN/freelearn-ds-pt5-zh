["```py\n#!/bin/bash\n# A function to greet everyone\ngreet_everyone() {\n  echo Hello, World!\n}\ngreet_yourself() {\n  echo Hello, ${USER}\n}\ngreet_everyone\ngreet_yourself\n```", "```py\nchmod +x hello_world.sh\n```", "```py\n./hello_world.sh\n```", "```py\n#!/bin/bash\n# A function to greet everyone\necho Who would you like to greet?\nread name\ngreet_yourself() {\n  echo Hello, ${1:-$USER}!\n}\ngreet_yourself $name\n```", "```py\n<<EOF cat >greetlib.sh\ngreet_yourself() {\n  echo Hello, \\${1:-\\$USER}!\n}\nEOF\n```", "```py\ngreet_yourself() {\n  echo Hello, ${1:-$USER}!\n}\n. ./greetlib.sh\ngreet_yourself “Joey”\n```", "```py\ngreet_yourself --capitalize --name=\"Joey\"\ngreet_yourself --lowercase -- -RoBoT1\n```", "```py\nIFS=:\nfor P in $PATH ; do\n echo $P\ndone\nunset IFS\n```", "```py\nTMP_PATH=/bin:/usr/bin:/sbin:/usr/sbin\nIFS=:\nPATH_ARRAY=($TMP_PATH)\nunset IFS\necho First element - ${PATH_ARRAY}\necho First element - ${PATH_ARRAY[0]}\necho Second element - ${PATH_ARRAY[1]}\necho All elements - ${PATH_ARRAY[*]}\necho All elements - ${PATH_ARRAY[@]}\n```", "```py\nlineinfile() {\n FILE=$1 ; shift\n LINE=”^$1$” ; shift\n CONTEXT=”$1.*” ; shift\n MODE=${1:-add} ; shift\n case “${MODE}” in\n  add)\n   grep -s “${LINE}” “${FILE}” || sed -i -e “s/\\(${CONTEXT}\\)/\\1\\n${LINE}/” “${FILE}”\n   ;;\n  del)\n   grep -s “${LINE}” “${FILE}” || sed -i -e “/${LINE}/d” “${FILE}”\n   ;;\n esac\n}\n```", "```py\nlineinfile <filename> <string> <insert-after-context-string> <add | [del]>\n```", "```py\nncz() {\n OPTIND=1 ; while getopts \":hv\" opt; do\n  case ${opt} in\n   v) VERBOSE=true\n    ;;\n   h|\\?) printf \"Usage: $0 [-v] <host | host:port>\" ; return\n    ;;\n  esac\n done\n shift $(($OPTIND - 1))\n HOST=${1%:*}\n PORT=${1#*:}\n PORT=${2:-$PORT}\n (exec 6<>/dev/tcp/${HOST}/${PORT} 2>&1)\n RC=$?\n case \"${VERBOSE}${RC}\" in\n  true0) printf \"open\\n\";;\n  true*) printf \"closed\\n\";;\n esac\n return $RC\n}\n```", "```py\nncz google.com:80 && echo \"yay!! Interwebz are up!\" || echo \"booh! No kitties for us!\"\n```", "```py\nset term dumb\n```", "```py\n__gnuplot() {\n SIZE=$(stty size 2>/dev/null)\n SIZE=${SIZE:-$(tput lines) $(tput cols)}\n COLS=${SIZE#* }\n ROWS=${SIZE% *}\n XPX=${XPX:-13}\n YPX=${YPX:-24}\n COLUMNS=${COLUMNS:-${COLS}}\n LINES=$((${LINES:-${ROWS}}-3))\n case \"${GNUTERM%% *}\" in\n dumb) X=${COLUMNS} ; Y=${LINES} ; DCS_GUARD=\"cat\" ;;\n png) X=$((XPX*COLUMNS)) ; Y=$((YPX*LINES)) ;\nDCS_GUARD=\"imgcat\";;\n sixelgd) X=$((XPX*COLUMNS)) ; Y=$((YPX*LINES));;\n esac\n sed -i \"s/^set term[[:space:]][^[:space:]]*/set term ${GNUTERM%%\n*}/\" ~/.gnuplot\n GNUTERM=\"${GNUTERM} size $X,$Y\" \\gnuplot \"$@\" | ${DCS_GUARD:-cat}\n}\nalias barchart=\"FUNCNAME=barchart __barchart\"\n__barchart() {\n local STACKED\n local DATA\n OPTIND=1 ; while getopts \":hf:s\" opt; do\n case ${opt} in\n f) [ -r \"${OPTARG}\" ] && DATA=$(printf '$data <<EOD\\n' ; cat \"${OPTARG}\" ; printf 'EOD\\n')\n ;;\n s) STACKED=\"; set style histogram rowstacked ; set boxwidth 0.75\"\n ;;\n h|\\?) printf \"Usage: ${FUNCNAME} [-s] [-f <file>] <gnuplot commands\\n\"\n return\n ;;\n esac\n done\n shift $(($OPTIND - 1))\n {\n cat <<-EOF\n $DATA\n set key autotitle columnheader outside\n set style data histograms ${STACKED}\n set style fill solid border lt -1\n set xtics rotate by -45\n EOF\n printf \"%s\" \"$@\"\n } | gnuplot\n}\n```", "```py\nexport GNUTERM=sixelgd\n```", "```py\nexport GNUTERM=png\n```", "```py\ngnuplot -e \"set terminal $GNUTERM background rgb 'white'; test\"\n```", "```py\nGNUTERM=dumb \\gnuplot\ngnuplot> test\ngnuplot> exit\n```", "```py\nalias gnuplot=\"GNUTERM=$GNUTERM __gnuplot\"\n```", "```py\nhead amazon_reviews_us_Digital_Ebook_Purchase_v1_00.tsv\n```", "```py\nhead -n1 amazon_reviews_us_Digital_Ebook_Purchase_v1_00.tsv\n```", "```py\ncat amazon_reviews_us_Digital_Ebook_Purchase_v1_00.tsv | cut -d $'\\t' -f 4,8-12,15 > test.tsv\n```", "```py\nsqlite3 aws-ebook-reviews.sq3 <<EOF\n.mode csv\n.separator \"\\t\"\n.import test.tsv reviews\nEOF\n```", "```py\nsqlite3 -header -column aws-ebook-reviews.sq3 \" select product_id as ID, strftime('%Y-%m', review_date) DATE, star_rating as STAR, count(product_id) as COUNT from reviews group by ID order by COUNT desc limit 10\"\n```", "```py\nID     DATE STAR    COUNT\n---------- ---------- ---------- ----------\nB00L9B7IKE 2015-01 5      54534\nB005ZOBNOI 2013-09 5      50581\nB006LSZECO 2013-09 3      45467\nB00BAXFECK 2013-10 5      34253\nB003WUYPPG 2013-09 3      30890\nB00DPM7TIG 2014-05 4      28234\nB00JYWUHO4 2014-10 1      26722\nB0089LOG02 2013-09 5      26155\nB00CNQ7HAU 2013-10 5      24454\nB004CFA9RS 2013-09 5      23677\n```", "```py\nsqlite3 -header -column aws-ebook-reviews.sq3 \" select strftime('%Y-%m', review_date) DATE, star_rating as STAR, count(star_rating) as COUNT from reviews where product_id = 'B00L9B7IKE' group by DATE, STAR\"\n```", "```py\nDATE    STAR COUNT\n---------- ---------- ----------\n2015-01   1 30\n2015-01   2 44\n2015-01   3 108\n2015-01   4 304\n2015-01   5 822\n2015-02   1 290\n2015-02   2 352\n2015-02   3 818\n2015-02   4 2040\n2015-02   5 3466\n2015-03   1 446\n2015-03   2 554\n2015-03   3 1294\n2015-03   4 3186\n2015-03   5 5092\n2015-04   1 466\n2015-04   2 508\n2015-04   3 1178\n2015-04   4 2550\n2015-04   5 3806\n2015-05   1 442\n2015-05   2 538\n2015-05   3 1152\n2015-05   4 2174\n2015-05   5 3058\n2015-06   1 382\n2015-06   2 428\n2015-06   3 952\n2015-06   4 1920\n2015-06   5 2898\n2015-07   1 388\n2015-07   2 484\n2015-07   3 972\n2015-07   4 2122\n2015-07   5 3004\n2015-08   1 374\n2015-08   2 458\n2015-08   3 884\n2015-08   4 1762\n2015-08   5 2788\n```", "```py\nsqlite3 -header aws-ebook-reviews.sq3 \"select DATE, MAX(CASE WHEN STAR='1' THEN COUNT END) as '1STAR', MAX(CASE WHEN STAR='2' THEN COUNT END) as '2STAR', MAX(CASE WHEN STAR='3' THEN COUNT END) as '3STAR', MAX(CASE WHEN STAR='4' THEN COUNT END) as '4STAR', MAX(CASE WHEN STAR='5' THEN COUNT END) as '5STAR', SUM(COUNT) as TOTAL from ( select strftime('%Y-%m', review_date) DATE, star_rating as STAR, count(star_rating) as COUNT from reviews where product_id = 'B00L9B7IKE' group by DATE, STAR) results group by DATE\" | tr '|' '\\t' > clusterchart.dat\ncat clusterchart.dat\n```", "```py\nDATE  1STAR 2STAR  3STAR 4STAR 5STAR  TOTAL\n2015-01 30   44 108 304   822 1308\n2015-02 290   352 818 2040  3466 6966\n2015-03 446   554 1294 3186  5092 10572\n2015-04 466   508 1178 2550  3806 8508\n2015-05 442   538 1152 2174  3058 7364\n2015-06 382   428 952 1920  2898 6580\n2015-07 388   484 972 2122  3004 6970\n2015-08 374   458 884 1762  2788 6266\n```", "```py\ngnuplot -e \"set style data histograms ; set style fill solid border lt -1 ; plot 'clusterchart.dat' using 2:xtic(1) ti col, '' u 3 ti col, '' u 4 ti col, '' u 5 ti col, '' u 6 ti col\"\n```", "```py\nGNUTERM=dumb gnuplot -e \"set style data histograms ; set style fill solid border lt -1 ; plot 'clusterchart.dat' using 2:xtic(1) ti col, '' u 3 ti col, '' u 4 ti col, '' u 5 ti col, '' u 6 ti col\"\n```", "```py\nGNUTERM=dumb gnuplot -e \"set style data histograms ; set style fill solid border lt -1 ; plot 'clusterchart.dat' using 2:xtic(1) ti col, '' u 3 ti col, '' u 4 ti col, '' u 5 ti col, '' u 6 ti col\"\n```", "```py\nbarchart -s -f clusterchart.dat 'plot for [i=2:6] $data using i:xtic(1)'\n```", "```py\nbarchart -s -f clusterchart.dat 'plot for [i=2:6] $data using (100.*column(i)/column(7)):xtic(1) title column(i)'\n```"]