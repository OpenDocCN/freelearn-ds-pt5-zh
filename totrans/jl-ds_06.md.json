["```py\njulia> Pkg.update() \njulia> Pkg.add(\"DecisionTree\") \njulia> Pkg.add(\"ScikitLearn\") \njulia> Pkg.add(\"PyPlot\") \n\n```", "```py\njulia> using ScikitLearn \njulia> using DecisionTree \njulia> using PyPlot \n\n```", "```py\njulia> # Create a random dataset \njulia> srand(100) \njulia> X = sort(5 * rand(80)) \njulia> XX = reshape(X, 80, 1) \njulia> y = sin(X) \njulia> y[1:5:end] += 3 * (0.5 - rand(16)) \n\n```", "```py\njulia> # Predict \njulia> X_test = 0:0.01:5.0 \njulia> y_1 = predict(regr_1, hcat(X_test)) \njulia> y_2 = predict(regr_2, hcat(X_test)) \n\n```", "```py\njulia> # Plot the results \njulia> scatter(X, y, c=\"k\", label=\"data\") \njulia> plot(X_test, y_1, c=\"g\", label=\"no pruning\", linewidth=2) \njulia> plot(X_test, y_2, c=\"r\", label=\"pruning_purity_threshold=0.05\", linewidth=2) \n\njulia> xlabel(\"data\") \njulia> ylabel(\"target\") \njulia> title(\"Decision Tree Regression\") \njulia> legend(prop=Dict(\"size\"=>10)) \n\n```", "```py\njulia> Pkg.update \njulia> Pkg.add(\"NaiveBayes\") \n\n```", "```py\njulia> X = [1 1 0 2 1; \n     0 0 3 1 0; \n     1 0 1 0 2] \njulia> y = [:a, :b, :b, :a, :a] \n\n```", "```py\njulia> m = MultinomialNB(unique(y), 3) \njulia> fit(m, X, y) \n\n```", "```py\njulia> Xtest = [0 4 1; \n      2 2 0; \n      1 1 1] \n\n```", "```py\njulia> predict(m, Xtest) \n\n```", "```py\njulia> 3-element Array{Symbol,1}: \n   :b \n   :a \n   :a \n\n```", "```py\njulia> #import necessary libraries \n\njulia> using NaiveBayes \njulia> using RDatasets \n\njulia> iris = dataset(\"datasets\", \"iris\") \n\njulia> #observations in columns and variables in rows \n\njulia> x = array(iris[:, 1:4]) \n\njulia> p,n = size(x) \njulia> # By default species is a PooledDataArray \n\njulia> y = [species for species in iris[:,5]] \n\n```"]