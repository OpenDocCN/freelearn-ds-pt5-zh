["```py\n    y = df['MEDV'].values\n    x = df['LSTAT'].values.reshape(-1,1)\n    ```", "```py\n    from sklearn.preprocessing import PolynomialFeatures poly = PolynomialFeatures(degree=3)\n    ```", "```py\n    x_poly = poly.fit_transform(x)\n    ```", "```py\n    from sklearn.linear_model import LinearRegression clf = \n    LinearRegression()\n    clf.fit(x_poly, y)\n    ```", "```py\n    a_0 = clf.intercept_ + clf.coef_[0] # intercept a_1, a_2, a_3 = clf.coef_[1:]       # other coefficients\n    msg = 'model: y = {:.3f} + {:.3f}x + {:.3f}x^2 + {:.3f}x^3'\\        .format(a_0, a_1, a_2, a_3)print(msg)\n    ```", "```py\n    y_pred = clf.predict(x_poly) resid_MEDV = y - y_pred\n    ```", "```py\n    from sklearn.metrics import mean_squared_error error = mean_squared_error(y, y_pred) print('mse = {:.2f}'.format(error))\n    ```", "```py\n    fig, ax = plt.subplots() # Plot the samples\n    ax.scatter(x.flatten(), y, alpha=0.6)\n    # Plot the polynomial model\n    x_ = np.linspace(2, 38, 50).reshape(-1, 1) x_poly = poly.fit_transform(x_)\n    y_ = clf.predict(x_poly)\n    ax.plot(x_, y_, color='red', alpha=0.8) ax.set_xlabel('LSTAT'); ax.set_ylabel('MEDV');\n    ```", "```py\n    fig, ax = plt.subplots(figsize=(5, 7)) ax.scatter(x, resid_MEDV, alpha=0.6) ax.set_xlabel('LSTAT')\n    ax.set_ylabel('MEDV Residual $(y-\\hat{y})$') plt.axhline(0, color='black', ls='dotted');\n    ```", "```py\n    %%bash\n    head ../data/hr-analytics/hr_data.csv\n    ```", "```py\n    with open('../data/hr-analytics/hr_data.csv') as f: print(len(f.read().splitlines()))\n    ```", "```py\n    df.left.value_counts().plot('barh') print(df.left.isnull().sum()\n    ```", "```py\n    for f in df.columns: try:\n    fig = plt.figure()\n    …\n    …\n    print('-'*30)\n    ```", "```py\n    df.isnull().sum() / len(df) * 100\n    ```", "```py\n    fill_value = df.time_spend_company.median()\n    df.time_spend_company = df.time_spend_company.fillna(fill_ value)\n    ```", "```py\n    sns.boxplot(x='number_project', y='average_montly_hours', data=df)\n    ```", "```py\n    mean_per_project = df.groupby('number_project')\\\n    .average_montly_hours.mean() mean_per_project = dict(mean_per_project) print(mean_per_project)\n    ```", "```py\n    fill_values = df.number_project.map(mean_per_project)\n    df.average_montly_hours = df.average_montly_hours. fillna(fill_values)\n    ```", "```py\n    assert df.isnull().sum().sum() == 0\n    ```", "```py\n    df.left = df.left.map({'no': 0, 'yes': 1}) df = pd.get_dummies(df)\n    ```", "```py\n    df.to_csv('../data/hr-analytics/hr_data_processed.csv', index=False)\n    ```", "```py\n    data = []\n    for i, row in enumerate(soup.find_all('tr')): row_data = row.find_all('td')\n    try:\n    d1, d2, d3 = row_data[1], row_data[5], row_data[6] d1 = d1.find('a').text\n    d2 = float(d2.text)\n    d3 = d3.find_all('span')[1].text.replace('+', '') data.append([d1, d2, d3])\n    except:\n    print('Ignoring row {}'.format(i)\n    ```", "```py\n    url = 'http://www.worldometers.info/world-population/ population-by-country/'\n    IFrame(url, height=300, width=800)\n    ```", "```py\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    ```", "```py\n    soup.find_all('h1')\n    >> [<h1>Countries in the world by population (2017)</h1>]\n    ```", "```py\n    table_headers = soup.find_all('th') table_headers\n    >> [<th>#</th>,\n    <th>Country (or dependency)</th>,\n    <th>Population<br/> (2017)</th>,\n    <th>Yearly<br/> Change</th>,\n    <th>Net<br/> Change</th>,\n    <th>Density<br/> (P/Km²)</th>,\n    <th>Land Area<br/> (Km²)</th>,\n    <th>Migrants<br/> (net)</th>,\n    <th>Fert.<br/> Rate</th>,\n    <th>Med.<br/> Age</th>,\n    <th>Urban<br/> Pop %</th>,\n    <th>World<br/> Share</th>]\n    ```", "```py\n    table_headers = table_headers[1:4] table_headers = [t.text.replace('\\n', '') for t in table_ headers]\n    ```", "```py\n    row_number = 2\n    row_data = soup.find_all('tr')[row_number]\\\n    .find_all('td') \n    ```", "```py\n    >> [<td>2</td>,\n    <td style=\"font-weight: bold; font-size:15px; text-align:left\"><a href=\"/world-population/india- population/\">India</a></td>,\n    <td style=\"font-weight: bold;\">1,339,180,127</td>,\n    <td>1.13 %</td>]\n    ```", "```py\n    d1, d2, d3 = row_data[1:4]\n    ```", "```py\n    print(d1.find('a').text) print(d2.text) print(d3.text)\n    >> India\n    >> 1,339,180,127\n    >> 1.13 %\n    ```", "```py\n    data = []\n    for i, row in enumerate(soup.find_all('tr')): try:\n    d1, d2, d3 = row.find_all('td')[1:4] d1 = d1.find('a').text\n    d2 = d2.text d3 = d3.text\n    data.append([d1, d2, d3]) except:\n    print('Error parsing row {}'.format(i))\n    >> Error parsing row 0\n    ```", "```py\n    >> [['China', '1,409,517,397', '0.43 %'],\n    ['India', '1,339,180,127', '1.13 %'],\n    ['U.S.', '324,459,463', '0.71 %'],\n    ['Indonesia', '263,991,379', '1.10 %'],\n    ['Brazil', '209,288,278', '0.79 %'],\n    ['Pakistan', '197,015,955', '1.97 %'],\n    ['Nigeria', '190,886,311', '2.63 %'],\n    ['Bangladesh', '164,669,751', '1.05 %'],\n    ['Russia', '143,989,754', '0.02 %'],\n    ['Mexico', '129,163,276', '1.27 %']]\n    ```", "```py\n    f_path = '../data/countries/populations.csv' with open(f_path, 'w') as f:\n    f.write('{};{};{}\\n'.format(*table_headers)) for d in data:\n    f.write('{};{};{}\\n'.format(*d))\n    ```", "```py\n    df = pd.read_csv('../data/countries/merged.csv')\n    df['Date of last change'] = pd.to_datetime(df['Date of last change'])\n    ```", "```py\n    source = ColumnDataSource(data=dict( x=df['Interest rate'], y=df['Population'], desc=df['Country'],\n    ))\n    hover = HoverTool(tooltips=[ ('Country', '@desc'),\n    ('Interest Rate (%)', '@x'), ('Population', '@y')\n    ])\n    tools = [hover, PanTool(), BoxZoomTool(), WheelZoomTool(), ResetTool()]\n    p = figure(tools=tools,\n    x_axis_label='Interest Rate (%)', y_axis_label='Population')\n    p.circle('x', 'y', size=10, alpha=0.5, source=source) show(p)\n    ```", "```py\n    def get_year(x):\n    year = x.strftime('%Y')\n    if year in ['2018', '2017', '2016']:\n    return year else: return 'Other'\n    df['Year of last change'] = df['Date of last change']. apply(get_year)\n    ```", "```py\n    year_to_color = { '2018': 'black',\n    '2017': 'blue',\n    '2016': 'orange',\n    'Other':'red'\n    }\n    ```", "```py\n    source = ColumnDataSource(data=dict( x=df['Interest rate'],\n    ...\n    ...\n    fill_color='colors', line_color='black', legend='label')\n    show(p)\n    ```", "```py\n    source = ColumnDataSource(data=dict( x=df['Yearly Change'],\n    ...\n    ...\n    p.circle('x', 'y', size=10, alpha=0.5, source=source, radius='radii')\n    show(p)\n    ```", "```py\n    from sklearn.linear_model import LinearRegression X = df['Yearly Change'].values.reshape(-1, 1)\n    y = df['Interest rate'].values\n    weights = np.sqrt(df['Population'])/1e5\n    lm = LinearRegression()\n    lm.fit(X, y, sample_weight=weights)\n    lm_x = np.linspace(X.flatten().min(), X.flatten().max(), 50)\n    lm_y = lm.predict(lm_x.reshape(-1, 1))\n    ```", "```py\n    source = ColumnDataSource(data=dict( x=df['Yearly Change'], y=df['Interest rate'],\n    ...\n    ...\n    p.line('x', 'y', line_width=2, line_color='red', source=lm_source)\n    show(p)\n    ```"]