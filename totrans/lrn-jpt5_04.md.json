["```py\nPkg.update() \n```", "```py\nINFO: Package database updated \n```", "```py\nPkg.add(\"DataFrames\") \nPkg.add(\"RDatasets\") \nquit(); \n```", "```py\nusing RDatasets\nusing DataFrames\nusing Gadfly\nset_default_plot_size(5inch, 5inch/golden); plot(dataset(\"datasets\",\"iris\"), x=\"SepalWidth\", y=\"SepalLength\", color=\"Species\") \n```", "```py\n{ \n  \"cells\": [ \n    ...<similar to previously displayed> \n  ], \n  \"metadata\": { \n  \"kernelspec\": { \n   \"display_name\": \"Julia 0.6.1\", \n   \"language\": \"julia\", \n   \"name\": \"julia-0.6\" \n  }, \n  \"language_info\": { \n   \"file_extension\": \".jl\", \n   \"mimetype\": \"application/julia\", \n   \"name\": \"julia\", \n   \"version\": \"0.6.1\" \n  } \n }, \n \"nbformat\": 4, \n \"nbformat_minor\": 1 \n} \n\n```", "```py\nusing RDatasets \ndescribe(dataset(\"datasets\", \"iris\"))\n```", "```py\nPkg.add(\"Gadfly\") \n```", "```py\nusing Gadfly \n```", "```py\nusing Gadfly \nsrand(111) \nplot(x=rand(7), y=rand(7)) \n```", "```py\nusing Gadfly \nsrand(111) \nplot(x=randn(113), Geom.histogram(bincount=10)) \n```", "```py\nusing Winston \n# fix the random seed so we have reproducible results \nsrand(111) \n# generate a plot \npl = plot(cumsum(rand(100) .- 0.5), \"g\", cumsum(rand(100) .- 0.5), \"b\") \n# display the plot \ndisplay(pl) \n```", "```py\nPkg.add(\"Vega\") \nusing Vega \nstock = [\"chairs\", \"tables\", \"desks\", \"rugs\", \"lamps\"]; \nquantity = [15, 10, 10, 5, 20]; \npiechart(x = stock, y = quantity) \n```", "```py\n#Pkg.add(\"PyPlot\") \nusing PyPlot \nprecipitation = [0,0,0,0,0,0,0,0,0,0,0.12,0.01,0,0,0,0.37,0,0,0,0,0.01,0,0,0,0.01,0.01,0,0.17,0.01,0.11,0.31] \ndate = collect(1:31) \nfig = figure(1, figsize=(4, 4)) \nplot(date, precipitation, \".\") \ntitle(\"Boston Precipitation\") \nxlabel(\"May 2013\") \nylabel(\"Precipitation\") \n```", "```py\naddprocs(1) \nsrand(111) \nr = remotecall(rand, 2, 3, 4) \ns = @spawnat 2 1 .+ fetch(r) \nfetch(s) \n```", "```py\nfunction larger(x, y)  \n    if (x>y)  \n        return x \n    end \n    return y \nend \nprintln(larger(7,8)) \n```", "```py\nismatch(r\"^\\([0-9]{3}\\)[0-9]{3}-[0-9]{4}$\", \"(781)244-1212\") \nismatch(r\"^\\([0-9]{3}\\)[0-9]{3}-[0-9]{4}$\", \"-781-244-1212\") \n```", "```py\nusing FactCheck \nf(x) = x^3 \nfacts(\"cubes\") do \n    @fact f(2) --> 8 \n    @fact f(2) --> 7 \nEnd \n```", "```py\nusing Base.Test f(x) = x^3 @test f(2) == 8 @test f(2) == 7 \n```"]