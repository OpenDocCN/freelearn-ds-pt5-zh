["```py\n# Import libraries\nimport pandas as pd\n# read the dataset\ndiabetes = pd.read_csv(\"diabetes.csv\")\n\n# Show top 5-records\ndiabetes.head()\n```", "```py\n# split dataset in two parts: feature set and target label\nfeature_set = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree'] features = diabetes[feature_set]\ntarget = diabetes.label\n\n# partition data into training and testing set\nfrom sklearn.model_selection import train_test_split\n\nfeature_train,feature_test, target_train, target_test = \\\ntrain_test_split(features, target, test_size=0.3, random_state=1)\n```", "```py\n# Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\n# Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets\nmodel.fit(feature_train,target_train)\n\n# Forecast the target variable for given test dataset\npredictions = model.predict(feature_test)\n```", "```py\n# Import metrics module for performance evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\n# Calculate model accuracy\nprint(\"Accuracy:\",accuracy_score(target_test, predictions))\n\n# Calculate model precision\nprint(\"Precision:\",precision_score(target_test, predictions))\n\n# Calculate model recall\nprint(\"Recall:\",recall_score(target_test, predictions))\n\n# Calculate model f1 score\nprint(\"F1-Score:\",f1_score(target_test, predictions))\n```", "```py\nAccuracy: 0.7748917748917749\nPrecision: 0.7391304347826086\nRecall: 0.6\nF1-Score: 0.6623376623376623\n```", "```py\n# Import Decision Tree model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create a Decision Tree classifier object\nclf = DecisionTreeClassifier()\n\n# Train the model using training dataset\nclf = clf.fit(feature_train,target_train)\n\n# Predict the response for test dataset\npredictions = clf.predict(feature_test)\n```", "```py\n# Import metrics module for performance evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\n\n# Calculate model accuracy\nprint(\"Accuracy:\",accuracy_score(target_test, predictions))\n\n# Calculate model precision\nprint(\"Precision:\",precision_score(target_test, predictions))\n\n# Calculate model recall\nprint(\"Recall:\",recall_score(target_test, predictions))\n\n# Calculate model f1 score\nprint(\"F1-Score:\",f1_score(target_test, predictions))\n```", "```py\nAccuracy: 0.7229437229437229\nPrecision: 0.6438356164383562\nRecall: 0.5529411764705883\nF1-Score: 0.5949367088607594\n```", "```py\n# Import KNN model\nfrom sklearn.neighbors import KNeighborsClassifier \n\n# Create a KNN classifier object \nmodel = KNeighborsClassifier(n_neighbors=3) \n\n# Train the model using the training dataset \nmodel.fit(feature_train,target_train) \n\n# Predict the target variable for test dataset \npredictions = model.predict(feature_test)\n```", "```py\n# Import metrics module for performance evaluation\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import precision_score \nfrom sklearn.metrics import recall_score \nfrom sklearn.metrics import f1_score \n\n# Calculate model accuracy \nprint(\"Accuracy:\",accuracy_score(target_test, predictions)) \n\n# Calculate model precision \nprint(\"Precision:\",precision_score(target_test, predictions)) \n\n# Calculate model recall \nprint(\"Recall:\",recall_score(target_test, predictions)) \n\n# Calculate model f1 score \nprint(\"F1-Score:\",f1_score(target_test, predictions))\n```", "```py\nAccuracy: 0.7532467532467533\nPrecision: 0.7058823529411765\nRecall: 0.5647058823529412\nF1-Score: 0.6274509803921569\n```", "```py\n# Import SVM model\nfrom sklearn import svm\n\n# Create a SVM classifier object\nclf = svm.SVC(kernel='linear')\n\n# Train the model using the training sets\nclf.fit(feature_train,target_train)\n\n# Predict the target variable for test dataset\npredictions = clf.predict(feature_test)\n```", "```py\n# Import metrics module for performance evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\n\n# Calculate model accuracy\nprint(\"Accuracy:\",accuracy_score(target_test, predictions))\n\n# Calculate model precision\nprint(\"Precision:\",precision_score(target_test, predictions))\n\n# Calculate model recall\nprint(\"Recall:\",recall_score(target_test, predictions))\n\n# Calculate model f1 score\nprint(\"F1-Score:\",f1_score(target_test, predictions))\n```", "```py\nAccuracy: 0.7835497835497836\nPrecision: 0.7868852459016393\nRecall: 0.5647058823529412\nF1-Score: 0.6575342465753424\n```", "```py\n# partition data into training and testing set\nfrom sklearn.model_selection import train_test_split\n\n# split train and test set\nfeature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.3, random_state=1)\n```", "```py\n# Import libraries\nimport pandas as pd\n\n# read the dataset\ndiabetes = pd.read_csv(\"diabetes.csv\")\n\n# split dataset in two parts: feature set and target label\nfeature_set = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']\nfeatures = diabetes[feature_set]\n\ntarget = diabetes.label\n\n# partition data into training and testing set\nfrom sklearn.model_selection import train_test_split\nfeature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.3, random_state=1)\n\n# import logistic regression scikit-learn model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score # for performance evaluation\n\n# instantiate the model\nlogreg = LogisticRegression(solver='lbfgs')\n\n# fit the model with data\nlogreg.fit(feature_train,target_train)\n\n# Forecast the target variable for given test dataset\npredictions = logreg.predict(feature_test)\n\n# Get prediction probability \npredictions_prob = logreg.predict_proba(feature_test)[::,1]\n\n# Import the confusion matrix\nfrom sklearn.metrics import plot_confusion_matrix\n\n# Plot Confusion matrix\nplot_confusion_matrix(logreg , feature_test, target_test, values_format='d')\n```", "```py\n# import classification report\nfrom sklearn.metrics import classification_report\n\n# Create classification report\nprint(classification_report(target_test, predictions, target_names=['Yes(1)','No(0)']))\n\n```", "```py\n# import plot_roc_curve\nfrom sklearn.metrics import plot_roc_curve\n\nplot_roc_curve(logreg , feature_test, target_test)\n```", "```py\n# import ROC AUC score\nfrom sklearn.metrics import roc_auc_score\n\n# Compute the area under ROC curve\nauc = roc_auc_score(target_test, predictions_prob)\n\n# Print auc value\nprint(\"Area Under Curve:\",auc)\n```", "```py\nArea Under Curve: 0.8628525382755843\n```"]