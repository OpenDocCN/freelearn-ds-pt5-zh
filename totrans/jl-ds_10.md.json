["```py\n*Matrix, M (ui) = { r (if item i is rated by the user, u)*\n*0 (if item i is not rated by user, u) }*\n\n```", "```py\nPkg.update() \nPkg.clone(\"https://github.com/abhijithch/RecSys.jl.git\") \n\n```", "```py\njulia -p <number of worker processes> \n\n```", "```py\nusing RecSys \n\nimport RecSys: train, recommend, rmse \n\nif isless(Base.VERSION, v\"0.5.0-\") \n    using SparseVectors \nend \n\n```", "```py\ntype MovieRec \n    movie_names::FileSpec \n    als::ALSWR \n    movie_mat::Nullable{SparseVector{AbstractString,Int64}} \n\n    function MovieRec(trainingset::FileSpec, movie_names::FileSpec) \n        new(movie_names, ALSWR(trainingset, ParShmem()), nothing) \n    end \n\n    function MovieRec(trainingset::FileSpec, movie_names::FileSpec,\n    thread::Bool)  \n   new(movie_names, ALSWR(trainingset, ParThread()), nothing) \n    end      \n\n    function MovieRec(user_item_ratings::FileSpec,\n    item_user_ratings::FileSpec, movie_names::FileSpec) \n        new(movie_names, ALSWR(user_item_ratings, item_user_ratings,\n        ParBlob()), nothing) \n    end \nend \n\n```", "```py\nfunction movie_names(rec::MovieRec) \n    if isnull(rec.movie_mat) \n        A = read_input(rec.movie_names) \n        movie_ids = convert(Array{Int}, A[:,1]) \n        movie_names = convert(Array{AbstractString}, A[:,2]) \n        movie_genres = convert(Array{AbstractString}, A[:,3]) \n        movies = AbstractString[n*\" - \"*g for (n,g) in\n        zip(movie_names, movie_genres)] \n        M = SparseVector(maximum(movie_ids), movie_ids, movies) \n        rec.movie_mat = Nullable(M) \n    end \n\n    get(rec.movie_mat) \nend \n\n```", "```py\ntrain(als, num_iterations, num_factors, lambda)\n\n```", "```py\ntrain(movierec::MovieRec, args...) = train(movierec.als, args...)\n\n```", "```py\nrmse(movierec::MovieRec, args...; kwargs...) = rmse(movierec.als, args...; kwargs...) \n\n```", "```py\nrmse(als, testdataset) \n\n```", "```py\nrecommend(movierec::MovieRec, args...; kwargs...) = recommend(movierec.als, args...; kwargs...) \n\nfunction print_recommendations(rec::MovieRec, recommended::Vector{Int}, watched::Vector{Int}, nexcl::Int) \n    mnames = movie_names(rec) \n\n    print_list(mnames, watched, \"Already watched:\") \n    (nexcl == 0) || println(\"Excluded $(nexcl) movies already watched\") \n    print_list(mnames, recommended, \"Recommended:\") \n    nothing \nend \n\n```", "```py\n[96030] Weekend It Lives, The (Ax 'Em) (1992) - Horror \n[96255] On Top of the Whale (Het dak van de Walvis) (1982) - Fantasy \n[104576] Seasoning House, The (2012) - Horror|Thriller \n[92948] Film About a Woman Who... (1974) - Drama \n[6085] Neil Young: Human Highway (1982) - Comedy|Drama \n[94146] Flower in Hell (Jiokhwa) (1958) - Crime|Drama \n[92083] Zen (2009) - Drama \n[110603] God's Not Dead (2014) - Drama \n[105040] Dragon Day (2013) - Drama|Sci-Fi|Thriller \n[80158] Cartoon All-Stars to the Rescue (1990) - Animation|Children|Comedy|Drama|Fantasy \n\n```", "```py\nfunction test(dataset_path) \n    ratings_file = DlmFile(joinpath(dataset_path, \"ratings.csv\");\n    dlm=',', header=true) \n    movies_file = DlmFile(joinpath(dataset_path, \"movies.csv\");\n    dlm=',', header=true) \n    rec = MovieRec(ratings_file, movies_file) \n    @time train(rec, 10, 10) \n\n    err = rmse(rec) \n    println(\"rmse of the model: $err\") \n\n    println(\"recommending existing user:\") \n    print_recommendations(rec, recommend(rec, 100)...) \n\n    println(\"recommending anonymous user:\") \n    u_idmap = RecSys.user_idmap(rec.als.inp) \n    i_idmap = RecSys.item_idmap(rec.als.inp) \n    # take user 100 \n    actual_user = isempty(u_idmap) ? 100 : findfirst(u_idmap, 100) \n    rated_anon, ratings_anon = RecSys.items_and_ratings(rec.als.inp,\n    actual_user) \n    actual_movie_ids = isempty(i_idmap) ? rated_anon : i_idmap[rated_anon] \n    nmovies = isempty(i_idmap) ? RecSys.nitems(rec.als.inp) :\n    maximum(i_idmap) \n    sp_ratings_anon = SparseVector(nmovies, actual_movie_ids,\n    ratings_anon) \n    print_recommendations(rec, recommend(rec, sp_ratings_anon)...) \n\n    println(\"saving model to model.sav\") \n    clear(rec.als) \n    localize!(rec.als) \n    save(rec, \"model.sav\") \n    nothing \nend \n\n```"]