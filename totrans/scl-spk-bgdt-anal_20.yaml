- en: Accelerating Spark with Alluxio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"It has become appallingly obvious that our technology has exceeded our humanity."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Albert Einstein'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will learn how to use Alluxio with Spark to accelerate the speed of
    processing. Alluxio is an open source distributed memory storage system, useful
    in accelerating the speed of many applications across platforms, including Apache
    Spark.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, the following topics will be covered throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The need for Alluxio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Alluxio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with YARN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Alluxio in Spark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The need for Alluxio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen Apache Spark and the various functionalities around Spark core,
    Streaming, GraphX, Spark SQL, and Spark machine learning. We also looked at many
    use cases and operations surrounding data manipulations and processing. The key
    steps in any processing task are data input, data processing, and data output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shown here is an illustration of a Spark job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00323.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As seen here, the input and output of a job are often dependent on slower storage
    options based on disk, while the processing usually is done using the memory/RAM.
    Since the memory is 100x faster than disk access, the performance of a job can
    clearly improve significantly if we can reduce the disk usage and use memory more.
    It is not necessary or even possible that we do not use any disk at all in any
    job; rather, we just intend to use memory as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: As a start, we can try to cache as much data as possible in the memory in order
    to accelerate the processing using executors. While this might work for some jobs,
    it's not possible to have so much memory in GBs or TBs for large jobs running
    in a distributed cluster running Spark. Moreover, even if there is a big cluster
    for your usage, there will be many users in the environment, thus making it difficult
    to use so many resources for all jobs.
  prefs: []
  type: TYPE_NORMAL
- en: We know of distributed storage systems such as HDFS, S3, and NFS. Similarly,
    if we had a distributed memory system, we could use this as a storage system for
    all the jobs to reduce the I/O needed for a job or intermediate jobs in a pipeline.
    Alluxio provides exactly that by implementing a distributed in-memory filesystem
    that can be used by Spark for all input/output needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Alluxio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alluxio, formerly known as Tachyon, unifies data access and bridges computation
    frameworks and the underlying storage systems. Alluxio''s memory-centric architecture
    enables data access orders of magnitude faster than the existing solutions. Alluxio
    is also Hadoop compatible, thus providing seamless integration into the existing
    infrastructure. The existing data analytics applications, such as Spark and MapReduce
    programs, can run on top of Alluxio without any code change, which means that
    the transition time is insignificant with the benefit of better performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00326.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading Alluxio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can download Alluxio by registering your name and email address using the
    [http://www.alluxio.org/download](http://www.alluxio.org/download) website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can also just go to [http://downloads.alluxio.org/downloads/files](http://downloads.alluxio.org/downloads/files)
    and download the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing and running Alluxio locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will install and run 1.5.0 locally. You can do the same with any other version.
    If you downloaded version 1.5.0, you will see a file like `alluxio-1.5.0-hadoop2.7-bin.tar.gz`.
  prefs: []
  type: TYPE_NORMAL
- en: A prerequisite for Alluxio is to have JDK 7 or higher installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unzip the downloaded `alluxio-1.5.0-hadoop2.7-bin.tar.gz` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, if running locally, Alluxio will need an environment variable to properly
    bind to the host, so run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Format the Alluxio filesystem using the `/bin/alluxio` command.
  prefs: []
  type: TYPE_NORMAL
- en: This step is only required when you run Alluxio for the first time and, when
    run, all the previously stored data and metadata in the Alluxio filesystem will
    be erased.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `/bin/alluxio` format command to format the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Alluxio filesystem locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can stop Alluxio by using a similar syntax.
  prefs: []
  type: TYPE_NORMAL
- en: You can stop Alluxio by running `./bin/alluxio-stop.sh` local.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that Alluxio is running by running the Alluxio script with the `runTests`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Refer to [http://www.alluxio.org/docs/master/en/Running-Alluxio-Locally.html](http://www.alluxio.org/docs/master/en/Running-Alluxio-Locally.html)
    for additional options and details.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the web UI to look at the Alluxio process by opening a browser
    and typing in `http://localhost:19999/`.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Overview tab shows summary information, such as Master Address, Running
    Workers, Version, and Uptime of the cluster. Also shown is the cluster usage summary,
    which shows the workers capacity and filesystem UnderFS Capacity. Then, the storage
    usage summary is also seen, which shows the space capacity and the used space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Browse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Browse tab allows you to look at the current content of the in-memory filesystem.
    This tab shows what is in the filesystem, the name of the file, size, and block
    size, whether we loaded the data into memory, and the ACLs and permissions on
    the file, specifying who can access it and perform operations such as read and
    write. You will see all the files managed in Alluxio in the Browse tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Configuration tab shows all the configuration parameters used. Some of
    the most important parameters are the configuration directory used, CPU resources,
    and memory resource allocations to the master as well as the workers. Also seen
    are the filesystem name, path, JDK settings, and so on. All these can be overridden
    to customize Alluxio for your use cases. Any changes here will also need a restart
    of the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Workers** tab simply shows the workers in the Alluxio cluster. This will
    just show the local machine in our case of local setup, but in a typical cluster
    of many workers, you will see all the worker nodes along with the state of the
    node, the worker''s capacity, the space used, and the last heartbeat received,
    which shows whether a worker is alive and participating in the cluster operations
    or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In-Memory Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The In-Memory Data tab shows the current data in the memory of the Alluxio
    filesystem. This shows the content in the memory of the cluster memory. Typical
    information shown for each of the dataset in memory includes the permissions,
    ownership, creation, and modification times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Logs tab allows you to look at various log files for debugging and monitoring
    purpose. You will see the log file named `master.log` for the master node, the
    log file named `worker.log` for the worker nodes, `task.log`, `proxy.log`, and
    a user log too. Each of the log files grows independently and can be very useful
    in diagnosing problems or just monitoring the health of the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Metrics tab shows metrics useful to monitor the current state of the Alluxio
    filesystem. The main information here includes the capacity of the master node
    and the filesystem capacity. Also shown are the counters of various operations,
    such as logical operations of files created and deleted, and directories created
    and deleted. Another section shows the RPC invocations that you can use to monitor
    the CreateFile, DeleteFile, and GetFileBlockInfo operations, among others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Current features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As seen earlier, Alluxio provides a lot of functionalities to support a high-speed
    in-memory filesystem, significantly accelerating Spark or many other computing
    systems. The current release has many features, and some of the main features
    can be described as in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexible file API** provides a Hadoop compatible filesystem, allowing Hadoop
    MapReduce and Spark to use Alluxio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pluggable under storage** checkpoints in-memory data to the underlying storage
    system, which supports Amazon S3, Google Cloud Storage, OpenStack Swift, HDFS,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tiered storage** can manage SSDs and HDDs in addition to memory, allowing
    for larger datasets to be stored in Alluxio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unified namespace** enables effective data management across different storage
    systems through the mount feature. In addition, transparent naming ensures that
    filenames and the directory hierarchy for objects created in Alluxio are preserved
    when persisting these objects to the underlying storage system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lineage** can achieve high throughput writes without compromising fault-tolerance
    using lineage, where lost output is recovered by reexecuting the jobs that created
    the output, just like the DAGs in Apache Spark.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web UI and command line** allows users to browse the filesystem easily through
    the web UI. Under the debug mode, administrators can view detailed information
    of each file, including locations and checkpoint paths. Users can also use `./bin/alluxio
    fs` to interact with Alluxio, for example, copy data in and out of the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [http://www.alluxio.org/](http://www.alluxio.org/) for the latest features
    and more up-to-date information.
  prefs: []
  type: TYPE_NORMAL
- en: This is all good enough to get Alluxio started locally. Next, we will see how
    to integrate with a cluster manager, such as YARN.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with YARN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YARN is one of the most used cluster managers, followed by Mesos. If you can
    recollect from [Chapter 5](part0148.html#4D4J81-21aec46d8593429cacea59dbdcd64e1c),
    *Tackle Big Data - Spark Comes to The Party*, YARN can manage the resources of
    a Hadoop cluster and allow hundreds of applications to share the cluster resources.
    We can run long-running Spark jobs to process real-time credit card transactions,
    for example, using YARN and Spark integration.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not recommended to try running Alluxio as a YARN application;
    rather, Alluxio should be run as a standalone cluster alongside YARN. Alluxio
    should be run alongside YARN so that all the YARN nodes have access to a local
    Alluxio worker. For YARN and Alluxio to coexist, we must inform YARN of the resources
    used by Alluxio. For instance, YARN needs to know how much memory and CPU to leave
    for Alluxio.
  prefs: []
  type: TYPE_NORMAL
- en: Alluxio worker memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Alluxio worker requires some memory for its JVM process and some memory
    for its RAM disk; 1 GB is generally fine for the JVM memory since this memory
    is only used for buffering and metadata.
  prefs: []
  type: TYPE_NORMAL
- en: The RAM disk memory can be configured by setting `alluxio.worker.memory.size`.
  prefs: []
  type: TYPE_NORMAL
- en: Data stored in non-memory tiers, such as SSD or HDD, does not need to be included
    in the memory-size calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Alluxio master memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Alluxio master stores metadata about every file in Alluxio, so it should
    be at least 1 GB and up to 32 GB for larger cluster deployment.
  prefs: []
  type: TYPE_NORMAL
- en: CPU vcores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each Alluxio worker should have one vcore as a minimum, and Alluxio master can
    use at least one and up to four vcores in production deployments.
  prefs: []
  type: TYPE_NORMAL
- en: To inform YARN of the resources to reserve for Alluxio on each node, modify
    the YARN configuration parameters in `yarn-site.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Change `yarn.nodemanager.resource.memory-mb` to reserve some memory for the
    Alluxio worker.
  prefs: []
  type: TYPE_NORMAL
- en: After determining how much memory to allocate to Alluxio on the node, subtract
    this from `yarn.nodemanager.resource.memory-mb` and update the parameter with
    the new value.
  prefs: []
  type: TYPE_NORMAL
- en: Change `yarn.nodemanager.resource.cpu-vcores` to reserve CPU vcores for the
    Alluxio worker.
  prefs: []
  type: TYPE_NORMAL
- en: After determining how much memory to allocate to Alluxio on the node, subtract
    this from `yarn.nodemanager.resource.cpu-vcores` and update the parameter with
    the new value.
  prefs: []
  type: TYPE_NORMAL
- en: After updating the YARN configuration, restart YARN so that it picks up the
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using Alluxio with Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use Alluxio with Spark, you will need a couple of dependency JARs.
    This is to enable Spark to connect to the Alluxio filesystem and to read/write
    data. Once we start Spark with Alluxio integration, most of the Spark code remains
    exactly the same, with changes only to the reading and writing portions of the
    code as now you have to use `alluxio://` to denote the Alluxio filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: However, once the Alluxio cluster is set up, Spark jobs (executors) will connect
    to Alluxio master for metadata and the Alluxio workers for the actual data read/write
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shown here is an illustration of an Alluxio cluster used from a Spark job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the steps on how to start Spark-shell with Alluxio and run
    some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1**, Change the directory into the directory where Spark was extracted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 2**, Copy the JARs from Alluxio to Spark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 3**, Start Spark-shell with the Alluxio JARs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4, Copy a sample dataset into the Alluxio filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify the file in Alluxio using the Browse tab; it is the Sentiment_Analysis_Dataset10k.csv
    of size 801.29KB file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4\. Access the file with and without Alluxio.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set the Alluxio filesystem configuration in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the text file from Alluxio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the same text file from the local filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you can load Alluxio with a lot of data, Alluxio integration will provide
    greater performance without needing to cache the data. This yields several advantages,
    including removal of the need to cache large datasets by every user who is using
    the Spark cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we explored the use of Alluxio as a way of accelerating Spark
    applications using the in-memory filesystem capabilities of Alluxio. This yields
    several advantages, including removal of the need to cache large datasets by every
    user who is using the Spark cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next appendix, we will explore how to use Apache Zeppelin, a web-based
    notebook to perform interactive data analysis.
  prefs: []
  type: TYPE_NORMAL
