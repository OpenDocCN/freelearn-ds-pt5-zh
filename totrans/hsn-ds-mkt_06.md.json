["```py\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.read_csv('../data/bank-full.csv', sep=\";\")\n```", "```py\ndf['conversion'] = df['y'].apply(lambda x: 0 if x == 'no' else 1)\n```", "```py\nconversion_rate_df = pd.DataFrame(\n    df.groupby('conversion').count()['y'] / df.shape[0] * 100.0\n)\n```", "```py\nconversion_rate_by_job = df.groupby(\n    by='job'\n)['conversion'].sum() / df.groupby(\n    by='job'\n)['conversion'].count() * 100.0\n```", "```py\nax = conversion_rate_by_job.plot(\n    kind='barh',\n    color='skyblue',\n    grid=True,\n    figsize=(10, 7),\n    title='Conversion Rates by Job'\n)\n\nax.set_xlabel('conversion rate (%)')\nax.set_ylabel('Job')\n\nplt.show()\n```", "```py\ndefault_by_conversion_df = pd.pivot_table(\n    df, \n    values='y', \n    index='default', \n    columns='conversion', \n    aggfunc=len\n)\n```", "```py\ndefault_by_conversion_df.plot(\n    kind='pie',\n    figsize=(15, 7),\n    startangle=90,\n    subplots=True,\n    autopct=lambda x: '%0.1f%%' % x\n)\n\nplt.show()\n```", "```py\nax = df[['conversion', 'balance']].boxplot(\n    by='conversion',\n    showfliers=True,\n    figsize=(10, 7)\n)\n\nax.set_xlabel('Conversion')\nax.set_ylabel('Average Bank Balance')\nax.set_title('Average Bank Balance Distributions by Conversion')\n\nplt.suptitle(\"\")\nplt.show()\n```", "```py\nax = df[['conversion', 'balance']].boxplot(\n    by='conversion',\n    showfliers=False,\n    figsize=(10, 7)\n)\n\nax.set_xlabel('Conversion')\nax.set_ylabel('Average Bank Balance')\nax.set_title('Average Bank Balance Distributions by Conversion')\n\nplt.suptitle(\"\")\nplt.show()\n```", "```py\nconversions_by_num_contacts = df.groupby(\n    by='campaign'\n)['conversion'].sum() / df.groupby(\n    by='campaign'\n)['conversion'].count() * 100.0\n```", "```py\nax = conversions_by_num_contacts.plot(\n    kind='bar',\n    figsize=(10, 7),\n    title='Conversion Rates by Number of Contacts',\n    grid=True,\n    color='skyblue'\n)\n\nax.set_xlabel('Number of Contacts')\nax.set_ylabel('Conversion Rate (%)')\n\nplt.show()\n```", "```py\ndf['month'].unique()\n```", "```py\nmonths = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n\ndf['month'] = df['month'].apply(\n    lambda x: months.index(x)+1\n)\n```", "```py\ndf.groupby('month').count()['conversion']\n```", "```py\ndf['job'].unique()\n```", "```py\njobs_encoded_df = pd.get_dummies(df['job'])\njobs_encoded_df.columns = ['job_%s' % x for x in jobs_encoded_df.columns]\n```", "```py\ndf = pd.concat([df, jobs_encoded_df], axis=1)\ndf.head()\n```", "```py\nmarital_encoded_df = pd.get_dummies(df['marital'])\nmarital_encoded_df.columns = ['marital_%s' % x for x in marital_encoded_df.columns]\n```", "```py\ndf = pd.concat([df, marital_encoded_df], axis=1)\n```", "```py\ndf['housing'] = df['housing'].apply(lambda x: 1 if x == 'yes' else 0)\n\ndf['loan'] = df['loan'].apply(lambda x: 1 if x == 'yes' else 0)\n```", "```py\nfrom sklearn import tree\n```", "```py\ndt_model = tree.DecisionTreeClassifier(\n    max_depth=4\n)\n```", "```py\ndt_model.fit(df[features], df[response_var])\n```", "```py\nconda install python-graphviz\n```", "```py\nimport graphviz\n```", "```py\ndot_data = tree.export_graphviz(\n    dt_model, \n    feature_names=features, \n    class_names=['0', '1'], \n    filled=True, \n    rounded=True, \n    special_characters=True\n) \n\ngraph = graphviz.Source(dot_data)\n```", "```py\ndf <- read.csv(\n  file=\"../data/bank-full.csv\", \n  header=TRUE, \n  sep=\";\"\n)\n```", "```py\n# Encode conversions as 0s and 1s\ndf$conversion <- as.integer(df$y) - 1\n```", "```py\nsprintf(\"conversion rate: %0.2f%%\", sum(df$conversion)/nrow(df)*100.0)\n```", "```py\nconversionsByJob <- df %>% \n  group_by(Job=job) %>% \n  summarise(Count=n(), NumConversions=sum(conversion)) %>%\n  mutate(ConversionRate=NumConversions/Count*100.0)\n```", "```py\nggplot(conversionsByJob, aes(x=Job, y=ConversionRate)) +\n  geom_bar(width=0.5, stat=\"identity\") +\n  coord_flip() +\n  ggtitle('Conversion Rates by Job') +\n  xlab(\"Job\") +\n  ylab(\"Conversion Rate (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) \n```", "```py\ndefaultByConversion <- df %>% \n  group_by(Default=default, Conversion=conversion) %>% \n  summarise(Count=n())\n```", "```py\nggplot(defaultByConversion, aes(x=\"\", y=Count, fill=Default)) + \n  geom_bar(width=1, stat = \"identity\", position=position_fill()) +\n  geom_text(aes(x=1.25, label=Count), position=position_fill(vjust = 0.5)) +\n  coord_polar(\"y\") +\n  facet_wrap(~Conversion) +\n  ggtitle('Default (0: Non Conversions, 1: Conversions)') +\n  theme(\n    axis.title.x=element_blank(),\n    axis.title.y=element_blank(),\n    plot.title=element_text(hjust=0.5),\n    legend.position='bottom'\n  )\n```", "```py\nggplot(df, aes(x=\"\", y=balance)) + \n  geom_boxplot() +\n  facet_wrap(~conversion) +\n  ylab(\"balance\") +\n  xlab(\"0: Non-Conversion, 1: Conversion\") +\n  ggtitle(\"Conversion vs. Non-Conversions: Balance\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\nggplot(df, aes(x=\"\", y=balance)) + \n  geom_boxplot(outlier.shape = NA) +\n  scale_y_continuous(limits = c(-2000, 5000)) +\n  facet_wrap(~conversion) +\n  ylab(\"balance\") +\n  xlab(\"0: Non-Conversion, 1: Conversion\") +\n  ggtitle(\"Conversion vs. Non-Conversions: Balance\") +\n  theme(plot.title=element_text(hjust=0.5))\n```", "```py\nconversionsByNumContacts <- df %>% \n  group_by(Campaign=campaign) %>% \n  summarise(Count=n(), NumConversions=sum(conversion)) %>%\n  mutate(ConversionRate=NumConversions/Count*100.0)\n```", "```py\nggplot(conversionsByNumContacts, aes(x=Campaign, y=ConversionRate)) +\n  geom_bar(width=0.5, stat=\"identity\") +\n  ggtitle('Conversion Rates by Number of Contacts') +\n  xlab(\"Number of Contacts\") +\n  ylab(\"Conversion Rate (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) \n```", "```py\nunique(df$month)\n```", "```py\nmonths = lapply(month.abb, function(x) tolower(x))\ndf$month <- match(df$month, months)\n```", "```py\ndf %>% \n  group_by(month) %>% \n  summarise(Count=n())\n```", "```py\ndf$job <- factor(df$job)\ndf$housing <- factor(df$housing)\ndf$marital <- factor(df$marital)\n```", "```py\nlibrary(rpart)\n```", "```py\ninstall.packages(\"rpart\")\n```", "```py\nfit <- rpart(\n  conversion ~ age + balance + campaign + previous + housing + job + marital,\n  method=\"class\", \n  data=df,\n  control=rpart.control(maxdepth=4, cp=0.0001)\n)\n```", "```py\ninstall.packages(\"rattle\")\n```", "```py\nlibrary(rattle)\n```", "```py\nfancyRpartPlot(fit)\n```"]