["```py\nscript/download-data.sh\n\n```", "```py\n(defn ex-7-1 []\n  (->> (io/resource \"ua.base\")\n       (io/reader)\n       (line-seq)\n       (first)))\n\n;; \"1\\t1\\t5\\t874965758\"\n```", "```py\n(defn ex-7-2 []\n  (->> (io/resource \"u.item\")\n       (io/reader)\n       (line-seq)\n       (first)))\n\n;; \"1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\"\n```", "```py\n(defn to-long [s]\n  (Long/parseLong s))\n\n(defn line->rating [line]\n  (->> (s/split line #\"\\t\")\n       (map to-long)\n       (zipmap [:user :item :rating])))\n\n(defn load-ratings [file]\n  (with-open [rdr (io/reader (io/resource file))]\n    (->> (line-seq rdr)\n         (map line->rating)\n         (into []))))\n\n(defn ex-7-3 []\n  (->> (load-ratings \"ua.base\")\n       (first)))\n\n;; {:rating 5, :item 1, :user 1}\n```", "```py\n(defn line->item-tuple [line]\n  (let [[id name] (s/split line #\"\\|\")]\n    (vector (to-long id) name)))\n\n(defn load-items [path]\n  (with-open [rdr (io/reader (io/resource path))]\n    (->> (line-seq rdr)\n         (map line->item-tuple)\n         (into {}))))\n```", "```py\n(defn ex-7-4 []\n  (-> (load-items \"u.item\")\n      (get 1)))\n\n;; \"Toy Story (1995)\"\n```", "```py\n(defn conj-item-difference [dict [i j]]\n  (let [difference (-  (:rating j) (:rating i))]\n    (update-in dict [(:item i) (:item j)] conj difference)))\n\n(defn collect-item-differences [dict items]\n  (reduce conj-item-difference dict\n          (for [i items\n                j items\n                :when (not= i j)]\n            [i j])))\n\n(defn item-differences [user-ratings]\n  (reduce collect-item-differences {} user-ratings))\n```", "```py\n(defn ex-7-5 []\n  (->> (load-ratings \"ua.base\")\n       (group-by :user)\n       (vals)\n       (item-differences)\n       (first)))\n\n;; [893 {558 (-2 4), 453 (-1), 637 (-1), 343 (-2 -2 3 2) ...]\n```", "```py\n(defn ex-7-6 []\n  (let [diffs (->> (load-ratings \"ua.base\")\n                   (group-by :user)\n                   (vals)\n                   (item-differences))]\n    (println \"893:343\" (get-in diffs [893 343]))\n    (println \"343:893\" (get-in diffs [343 893]))))\n\n;; 893:343 (-2 -2 3 2)\n;; 343:893 (2 2 -3 -2)\n```", "```py\n(defn summarize-item-differences [related-items]\n  (let [f (fn [differences]\n            {:mean  (s/mean differences)\n             :count (count  differences)})]\n    (map-vals f related-items)))\n\n(defn slope-one-recommender [ratings]\n  (->> (item-differences ratings)\n       (map-vals summarize-item-differences)))\n\n(defn ex-7-7 []\n  (let [recommender (->> (load-ratings \"ua.base\")\n                         (group-by :user)\n                         (vals)\n                         (slope-one-recommender))]\n    (get-in recommender [893 343])))\n\n;; {:mean 0.25, :count 4}\n```", "```py\n(defn candidates [recommender {:keys [rating item]}]\n  (->> (get recommender item)\n       (map (fn [[id {:keys [mean count]}]]\n              {:item id\n               :rating (+ rating mean)\n               :count count}))))\n\n(defn weighted-rating [[id candidates]]\n  (let [ratings-count (reduce + (map :count candidates))\n        sum-rating (map #(* (:rating %) (:count %)) candidates)\n        weighted-rating (/ (reduce + sum-rating) ratings-count)]\n    {:item id\n     :rating weighted-rating\n     :count  ratings-count}))\n```", "```py\n(defn slope-one-recommend [recommender rated top-n]\n  (let [already-rated  (set (map :item rated))\n        already-rated? (fn [{:keys [id]}]\n                         (contains? already-rated id))\n        recommendations (->> (mapcat #(candidates recommender %)\n                                     rated)\n                             (group-by :item)\n                             (map weighted-rating)\n                             (remove already-rated?)\n                             (sort-by :rating >))]\n    (take top-n recommendations)))\n```", "```py\n(defn ex-7-8 []\n  (let [user-ratings (->> (load-ratings \"ua.base\")\n                          (group-by :user)\n                          (vals))\n        user-1       (first user-ratings)\n        recommender  (->> (rest user-ratings)\n                          (slope-one-recommender))\n        items     (load-items \"u.item\")\n        item-name (fn [item]\n                    (get items (:item item)))]\n    (->> (slope-one-recommend recommender user-1 10)\n         (map item-name))))\n```", "```py\n;; (\"Someone Else's America (1995)\" \"Aiqing wansui (1994)\"\n;;  \"Great Day in Harlem, A (1994)\" \"Pather Panchali (1955)\"\n;;  \"Boys, Les (1997)\" \"Saint of Fort Washington, The (1993)\"\n;;  \"Marlene Dietrich: Shadow and Light (1996) \" \"Anna (1996)\"\n;;  \"Star Kid (1997)\" \"Santa with Muscles (1996)\")\n```", "```py\n (defn load-model [path]\n  (-> (io/resource path)\n      (io/file)\n      (FileDataModel.)))\n```", "```py\n(defn ex-7-9 []\n  (let [model        (load-model \"ua.base\")\n        similarity   (EuclideanDistanceSimilarity. model)\n        neighborhood (NearestNUserNeighborhood. 10 similarity\n                                                model)\n        recommender  (GenericUserBasedRecommender. model\n                                                   neighborhood\n                                                   similarity)\n        items     (load-items \"u.item\")\n        item-name (fn [id] (get items id))]\n    (->> (.recommend recommender 1 5)\n         (map #(item-name (.getItemID %))))))\n\n;; (\"Big Lebowski, The (1998)\" \"Peacemaker, The (1997)\"\n;;  \"Rainmaker, The (1997)\" \"Game, The (1997)\"\n;;  \"Cool Hand Luke (1967)\")\n```", "```py\n(defn recommender-builder [sim n]\n  (reify RecommenderBuilder\n    (buildRecommender [this model]\n      (let [nhood (NearestNUserNeighborhood. n sim model)]\n        (GenericUserBasedRecommender. model nhood sim)))))\n```", "```py\n(defn evaluate-rmse [builder model]\n  (-> (RMSRecommenderEvaluator.)\n      (.evaluate builder nil model 0.7 1.0)))\n```", "```py\n(defn ex-7-10 []\n  (let [model   (load-model \"ua.base\")\n        builder (recommender-builder 10\n                 (EuclideanDistanceSimilarity. model))]\n    (evaluate-rmse builder model)))\n\n;; 0.352\n```", "```py\n(defn ex-7-11 []\n  (let [model   (load-model \"ua.base\")\n        builder (recommender-builder\n                 10 (PearsonCorrelationSimilarity. model))]\n    (evaluate-rmse builder model)))\n\n;; 0.796\n```", "```py\n(defn ex-7-12 []\n  (let [model   (load-model \"ua.base\")\n        builder (recommender-builder\n                 10 (SpearmanCorrelationSimilarity. model))]\n    (-> (RMSRecommenderEvaluator.)\n        (.evaluate builder nil model 0.9 0.1))))\n\n;; 0.907\n```", "```py\n(defn ex-7-13 []\n  (let [model (load-model \"ua.base\")\n        sim   (EuclideanDistanceSimilarity. model)\n        ns    (range 1 10)\n        stats (for [n ns]\n                (let [builder (recommender-builder n sim)]\n                  (do (println n)\n                      (evaluate-rmse builder model))))]\n    (-> (c/scatter-plot ns stats\n                        :x-label \"Neighborhood size\"\n                        :y-label \"RMSE\")\n        (i/view))))\n```", "```py\n(defn evaluate-ir [builder model]\n  (-> (GenericRecommenderIRStatsEvaluator.)\n      (.evaluate builder nil model nil 5\n         GenericRecommenderIRStatsEvaluator/CHOOSE_THRESHOLD\n         1.0)\n      (bean)))\n\n(defn ex-7-14 []\n  (let [model   (load-model \"ua.base\")\n        builder (recommender-builder\n                 10 (EuclideanDistanceSimilarity. model))]\n    (evaluate-ir builder model)))\n```", "```py\n;; {:recall 0.002538071065989847, :reach 1.0,\n;;  :precision 0.002538071065989847,\n;;  :normalizedDiscountedCumulativeGain 0.0019637198336778725,\n;;  :fallOut 0.0011874376015289575,\n;;  :f1Measure 0.002538071065989847,\n;;  :class org.apache.mahout.cf.taste.impl.eval.IRStatisticsImpl}\n```", "```py\n(defn plot-ir [xs stats]\n  (-> (c/xy-plot xs (map :recall stats)\n                 :x-label \"Neighbourhood Size\"\n                 :y-label \"IR Statistic\"\n                 :series-label \"Recall\"\n                 :legend true)\n      (c/add-lines xs (map :precision stats)\n                   :series-label \"Precision\")\n      (c/add-lines xs\n                   (map :normalizedDiscountedCumulativeGain stats)\n                   :series-label \"NDCG\")\n      (i/view)))\n\n(defn ex-7-15 []\n  (let [model   (load-model \"ua.base\")\n        sim     (EuclideanDistanceSimilarity. model)\n        xs      (range 1 10)\n        stats   (for [n xs]\n                  (let [builder (recommender-builder n sim)]\n                    (do (println n)\n                        (evaluate-ir builder model))))]\n    (plot-ir xs stats)))\n```", "```py\n(defn to-boolean-preferences [model]\n  (-> (GenericBooleanPrefDataModel/toDataMap model)\n      (GenericBooleanPrefDataModel.)))\n\n(defn boolean-recommender-builder [sim n]\n  (reify RecommenderBuilder\n    (buildRecommender [this model]\n      (let [nhood (NearestNUserNeighborhood. n sim model)]\n        (GenericBooleanPrefUserBasedRecommender.\n         model nhood sim)))))\n```", "```py\n(defn ex-7-16 []\n  (let [model   (to-boolean-preferences (load-model \"ua.base\"))\n        sim     (TanimotoCoefficientSimilarity. model)\n        xs      (range 1 10)\n        stats   (for [n xs]\n                  (let [builder\n                        (boolean-recommender-builder n sim)]\n                    (do (println n)\n                        (evaluate-ir builder model))))]\n    (plot-ir xs stats)))\n```", "```py\n(defn hash-function [m seed]\n  (fn [x]\n    (-> (Hashing/murmur3_32 seed)\n        (.hashUnencodedChars x)\n        (.asInt)\n        (mod m))))\n\n(defn hash-functions [m k]\n  (map (partial hash-function m) (range k)))\n\n(defn indices-fn [m k]\n  (let [f (apply juxt (hash-functions m k))]\n    (fn [x]\n      (f x))))\n\n(defn bloom-filter [m k]\n  {:filter     (vec (repeat m false))\n   :indices-fn (indices-fn m k)})\n```", "```py\n(defn ex-7-17 []\n  (bloom-filter 8 5))\n\n;; {:filter [false false false false false false false false],\n;;  :indices-fn #<Bloom_filter$indices_fn$fn__43538 \n;;  cljds.ch7.Bloom_filter$indices_fn$fn__43538@3da200c>}\n```", "```py\n(defn set-bit [seq index]\n  (assoc seq index true))\n\n(defn set-bits [seq indices]\n  (reduce set-bit seq indices))\n\n(defn bloom-assoc [{:keys [indices-fn] :as bloom} element]\n  (update-in bloom [:filter] set-bits (indices-fn element)))\n```", "```py\n(defn ex-7-18 []\n  (-> (bloom-filter 8 5)\n      (bloom-assoc \"Indiana Jones\")\n      (:filter)))\n\n;; [true true false true false false false true]\n```", "```py\n(defn bloom-contains? [{:keys [filter indices-fn]} element]\n  (->> (indices-fn element)\n       (map filter)\n       (every? true?)))\n\n(defn ex-7-19 []\n  (-> (bloom-filter 8 5)\n      (bloom-assoc \"Indiana Jones\")\n      (bloom-contains? \"Indiana Jones\")))\n\n;; true\n```", "```py\n(defn ex-7-20 []\n  (-> (bloom-filter 8 5)\n      (bloom-assoc \"Indiana Jones\")\n      (bloom-contains? \"The Fugitive\")))\n\n;; false\n```", "```py\n(defn ex-7-21 []\n  (-> (bloom-filter 8 5)\n      (bloom-assoc \"Indiana Jones\")\n      (bloom-contains? \"Bogus (1996)\")))\n\n;; true\n```", "```py\n(defn rated-items [user-ratings id]\n  (->> (get user-ratings id)\n       (map :item)))\n\n(defn ex-7-22 []\n  (let [ratings      (load-ratings \"ua.base\")\n        user-ratings (group-by :user ratings)\n        user-a       (rated-items user-ratings 405)\n        user-b       (rated-items user-ratings 655)]\n    (println \"User 405:\" (count user-a))\n    (println \"User 655:\" (count user-b))\n    (s/jaccard-index (set user-a) (set user-b))))\n\n;; User 405: 727\n;; User 655: 675\n;; 158/543\n```", "```py\n(defn hash-function [seed]\n  (let [f (Hashing/murmur3_32 seed)]\n    (fn [x]\n      (-> (.hashUnencodedChars f (str x))\n          (.asInt)))))\n\n(defn hash-functions [k]\n  (map hash-function (range k)))\n\n(defn pairwise-min [a b]\n  (map min a b))\n\n(defn minhasher [k]\n  (let [f (apply juxt (hash-functions k))]\n    (fn [coll]\n      (->> (map f coll)\n           (reduce pairwise-min)))))\n```", "```py\n (defn ex-7-23 []\n  (let [ratings      (load-ratings \"ua.base\")\n        user-ratings (group-by :user ratings)\n        minhash (minhasher 10)\n        user-a  (minhash (rated-items user-ratings 405))\n        user-b  (minhash (rated-items user-ratings 655))]\n    (println \"User 405:\" user-a)\n    (println \"User 655:\" user-b)\n    (s/jaccard-index (set user-a) (set user-b))))\n\n;; User 405: #{-2147145175 -2141119028 -2143110220 -2143703868 –\n;; 2144897714 -2145866799 -2139426844 -2140441272 -2146421577 –\n;; 2146662900}\n;; User 655: #{-2144975311 -2140926583 -2141119028 -2141275395 –\n;; 2145738774 -2143703868 -2147345319 -2147134300 -2146421577 –\n;; 2146662900}\n;; 1/4\n```", "```py\n(def lsh-hasher (hash-function 0))\n\n(defn locality-sensitive-hash [r]\n  {:r r :bands {}})\n\n(defn buckets-for [r signature]\n  (->> (partition-all r signature)\n       (map lsh-hasher)\n       (map-indexed vector)))\n\n(defn lsh-assoc [{:keys [r] :as lsh} {:keys [id signature]}]\n  (let [f (fn [lsh [band bucket]]\n            (update-in lsh [:bands band bucket] conj id))]\n    (->> (buckets-for r signature)\n         (reduce f lsh))))\n```", "```py\n(defn ex-7-24 []\n  (let [ratings (load-ratings \"ua.base\")\n        user-ratings (group-by :user ratings)\n        minhash (minhasher 27)\n        user-a  (minhash (rated-items user-ratings 13))\n        lsh     (locality-sensitive-hash 3)]\n    (lsh-assoc lsh {:id 13 :signature user-a})))\n\n;; {:r 3, :bands {8 {220825369 (13)}, 7 {-2054093854 (13)},\n;; 6 {1177598806 (13)}, 5 {-1809511158 (13)}, 4 {-143738650 (13)},\n;; 3 {-704443054 (13)}, 2 {-1217282814 (13)},\n;; 1 {-100016681 (13)}, 0 {1353249231 (13)}}}\n```", "```py\n(defn ex-7-25 []\n  (let [ratings (load-ratings \"ua.base\")\n        user-ratings (group-by :user ratings)\n        minhash (minhasher 27)\n        user-a  (minhash (rated-items user-ratings 13))\n        user-b  (minhash (rated-items user-ratings 655))]\n    (-> (locality-sensitive-hash 3)\n        (lsh-assoc {:id 13  :signature user-a})\n        (lsh-assoc {:id 655 :signature user-b}))))\n\n;; {:r 3, :bands {8 {220825369 (655 13)}, 7 {1126350710 (655),\n;; -2054093854 (13)}, 6 {872296818 (655), 1177598806 (13)},\n;; 5 {-1272446116 (655), -1809511158 (13)}, 4 {-154360221 (655),\n;; -143738650 (13)}, 3 {123070264 (655), -704443054 (13)},\n;; 2 {-1911274538 (655), -1217282814 (13)}, 1 {-115792260 (655),\n;; -100016681 (13)}, 0 {-780811496 (655), 1353249231 (13)}}}\n```", "```py\n(defn lsh-candidates [{:keys [bands r]} signature]\n  (->> (buckets-for r signature)\n       (mapcat (fn [[band bucket]]\n                 (get-in bands [band bucket])))\n       (distinct)))\n```", "```py\n(defn ex-7-26 []\n  (let [ratings (load-ratings \"ua.base\")\n        user-ratings (group-by :user ratings)\n        minhash   (minhasher 27)\n        user-b    (minhash (rated-items user-ratings 655))\n        user-c    (minhash (rated-items user-ratings 405))\n        user-a    (minhash (rated-items user-ratings 13))]\n    (-> (locality-sensitive-hash 3)\n        (lsh-assoc {:id 655 :signature user-b})\n        (lsh-assoc {:id 405 :signature user-c})\n        (lsh-candidates user-a))))\n\n;; (655)\n```", "```py\n(defn ex-7-27 []\n  (i/view (d/get-dataset :iris)))\n```", "```py\n(defn plot-iris-columns [a b]\n  (let [data (->> (d/get-dataset :iris)\n                  (i/$ [a b])\n                  (i/to-matrix))]\n    (-> (c/scatter-plot (i/$ (range 50) 0 data)\n                        (i/$ (range 50) 1 data)\n                        :x-label (name a)\n                        :y-label (name b))\n        (c/add-points (i/$ (range 50 100) 0 data)\n                      (i/$ (range 50 100) 1 data))\n        (c/add-points (i/$ [:not (range 100)] 0 data)\n                      (i/$ [:not (range 100)] 1 data))\n        (i/view))))\n```", "```py\n(defn ex-7-28 []\n  (plot-iris-columns :Sepal.Width\n                     :Sepal.Length))\n```", "```py\n(defn ex-7-29 []\n  (plot-iris-columns :Petal.Width\n                     :Petal.Length))\n```", "```py\n(defn ex-7-30 []\n  (let [data (->> (d/get-dataset :iris)\n                  (i/$ (range 4))\n                  (i/to-matrix))\n        components (s/principal-components data)\n        pc1 (i/$ 0 (:rotation components))\n        pc2 (i/$ 1 (:rotation components))\n        xs (i/mmult data pc1)\n        ys (i/mmult data pc2)]\n    (-> (c/scatter-plot (i/$ (range 50) 0 xs)\n                        (i/$ (range 50) 0 ys)\n                        :x-label \"Principle Component 1\"\n                        :y-label \"Principle Component 2\")\n        (c/add-points (i/$ (range 50 100) 0 xs)\n                      (i/$ (range 50 100) 0 ys))\n        (c/add-points (i/$ [:not (range 100)] 0 xs)\n                      (i/$ [:not (range 100)] 0 ys))\n        (i/view))))\n```", "```py\n(defn project-into [matrix d]\n  (let [svd (i/decomp-svd matrix)]\n    {:U (i/$ (range d) (:U svd))\n     :S (i/diag (take d (:S svd)))\n     :V (i/trans\n         (i/$ (range d) (:V svd)))}))\n```", "```py\n(defn ex-7-31 []\n  (let [matrix (s/sample-mvn 100\n                             :sigma (i/matrix [[1 0.8]\n                                               [0.8 1]]))]\n    (println \"Original\" matrix)\n    (project-into matrix 1)))\n\n;; Original  A 100x2 matrix\n;; :U  A 100x1 matrix\n;; :S  A 1x1 matrix\n;; :V  A 1x2 matrix\n```", "```py\n(defn ex-7-32 []\n  (let [matrix (s/sample-mvn 100\n                             :sigma (i/matrix [[1 0.8]\n                                               [0.8 1]]))\n        svd (project-into matrix 1)\n        projection (i/mmult (:U svd)\n                            (:S svd)\n                            (:V svd))]\n    (-> (c/scatter-plot (i/$ 0 matrix) (i/$ 1 matrix)\n                        :x-label \"x\"\n                        :y-label \"y\"\n                        :series-label \"Original\"\n                        :legend true)\n        (c/add-points (i/$ 0 projection) (i/$ 1 projection)\n                      :series-label \"Projection\")\n        (i/view))))\n```", "```py\n(defn ex-7-33 []\n  (let [svd (->> (d/get-dataset :iris)\n                 (i/$ (range 4))\n                 (i/to-matrix)\n                 (i/decomp-svd))\n        dims 2\n        u (i/$     (range dims) (:U svd))\n        s (i/diag  (take dims   (:S svd)))\n        v (i/trans (i/$ (range dims) (:V svd)))\n        projection (i/mmult u s v)]\n    (-> (c/scatter-plot (i/$ (range 50) 0 projection)\n                        (i/$ (range 50) 1 projection)\n                        :x-label \"Dimension 1\"\n                        :y-label \"Dimension 2\")\n        (c/add-points (i/$ (range 50 100) 0 projection)\n                      (i/$ (range 50 100) 1 projection))\n        (c/add-points (i/$ [:not (range 100)] 0 projection)\n                      (i/$ [:not (range 100)] 1 projection))\n        (i/view))))\n```", "```py\n(defn count-ratings [sc]\n  (-> (spark/text-file sc \"data/ml-100k/ua.base\")\n      (spark/count)))\n\n(defn ex-7-34 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (count-ratings sc)))\n\n;; 90570\n```", "```py\n(defn parse-rating [line]\n  (let [[user item rating time] (->> (str/split line #\"\\t\")\n                                     (map parse-long))]\n    (spark/tuple (mod time 10)\n                 (Rating. user item rating))))\n\n(defn parse-ratings [sc]\n  (->> (spark/text-file sc \"data/ml-100k/ua.base\")\n       (spark/map-to-pair parse-rating)))\n\n(defn ex-7-35 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (->> (parse-ratings sc)\n         (spark/collect)\n         (first))))\n\n;; #sparkling/tuple [8 #<Rating Rating(1,1,5.0)>]\n```", "```py\n(defn training-ratings [ratings]\n  (->> ratings\n       (spark/filter (fn [tuple]\n                       (< (s-de/key tuple) 8)))\n       (spark/values)))\n```", "```py\n(defn ex-7-36 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (let [ratings (spark/cache (parse-ratings sc))\n          train (training-ratings ratings)\n          test  (test-ratings ratings)]\n      (println \"Training:\" (spark/count train))\n      (println \"Test:\"     (spark/count test)))))\n\n;; Training: 72806\n;; Test: 8778\n```", "```py\n(defn alternating-least-squares [data {:keys [rank num-iter\n                                              lambda]}]\n  (ALS/train (to-mllib-rdd data) rank num-iter lambda 10))\n```", "```py\n(defn to-mlib-rdd [rdd]\n  (.rdd rdd))\n\n(defn from-mlib-rdd [rdd]\n  (JavaRDD/fromRDD rdd scala/OBJECT-CLASS-TAG))\n```", "```py\n(defn ex-7-37 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (-> (parse-ratings sc)\n        (training-ratings)\n        (alternating-least-squares {:rank 10\n                                    :num-iter 10\n                                    :lambda 1.0}))))\n```", "```py\n(defn ex-7-38 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (let [options {:rank 10\n                   :num-iter 10\n                   :lambda 1.0}\n          model (-> (parse-ratings sc)\n                    (training-ratings )\n                    (alternating-least-squares options))]\n      (into [] (.recommendProducts model 1 3)))))\n\n;; [#<Rating Rating(1,1463,3.869355232995907)>\n;; #<Rating Rating(1,1536,3.7939806028920993)>\n;; #<Rating Rating(1,1500,3.7130689437266646)>]\n```", "```py\n(defn ex-7-39 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (let [items   (load-items \"u.item\")\n          id->name (fn [id] (get items id))\n          options {:rank 10\n                   :num-iter 10\n                   :lambda 1.0}\n          model (-> (parse-ratings sc)\n                    (training-ratings )\n                    (alternating-least-squares options))]\n      (->> (.recommendProducts model 1 3)\n           (map (comp id->name #(.product %)))))))\n\n;; (\"Boys, Les (1997)\" \"Aiqing wansui (1994)\"\n;; \"Santa with Muscles (1996)\")\n```", "```py\n(defn user-product [rating]\n  (spark/tuple (.user rating)\n               (.product rating)))\n\n(defn user-product-rating [rating]\n  (spark/tuple (user-product rating)\n               (.rating rating))) \n\n(defn predict [model data]\n  (->> (spark/map-to-pair user-product data)\n       (to-mlib-rdd data)\n       (.predict model)\n       (from-mlib-rdd)\n       (spark/map-to-pair user-product-rating)))\n```", "```py\n(defn squared-error [y-hat y]\n  (Math/pow (- y-hat y) 2))\n\n(defn sum-squared-errors [predictions actuals]\n  (->> (spark/join predictions actuals)\n       (spark/values)\n       (spark/map (s-de/val-val-fn squared-error))\n       (spark/reduce +)))\n```", "```py\n(defn rmse [model data]\n  (let [predictions  (spark/cache (predict model data))\n        actuals (->> (spark/map-to-pair user-product-rating\n                                        data)\n                     (spark/cache))]\n    (-> (sum-squared-errors predictions actuals)\n        (/ (spark/count data))\n        (Math/sqrt))))\n```", "```py\n(defn ex-7-40 []\n  (spark/with-context sc (-> (conf/spark-conf)\n                             (conf/master \"local\")\n                             (conf/app-name \"ch7\"))\n    (let [options {:num-iter 10 :lambda 0.1}\n          training (-> (parse-ratings sc)\n                       (training-ratings)\n                       (spark/cache))\n          ranks    (range 2 50 2)\n          errors   (for [rank ranks]\n                     (doto (-> (als training\n                                    (assoc options :rank rank))\n                               (rmse training))\n                       (println \"RMSE for rank\" rank)))]\n      (-> (c/scatter-plot ranks errors\n                          :x-label \"Rank\"\n                          :y-label \"RMSE\")\n          (i/view)))))\n```"]