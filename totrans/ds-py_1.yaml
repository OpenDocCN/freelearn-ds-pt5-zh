- en: '*Chapter 2*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*'
- en: Data Visualization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将能够：
- en: Create and customize line plots, bar plots, histograms, scatterplots, and box-and-whisker
    plots using a functional approach
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数式方法创建和自定义折线图、条形图、直方图、散点图和箱线图
- en: Develop a programmatic, descriptive plot title
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发程序化的、描述性的图表标题
- en: Describe the advantages of using an object-oriented approach to create Matplotlib
    plots
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述使用面向对象方法创建 Matplotlib 图表的优势
- en: Create a callable figure object containing a single axis or multiple axes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含单个轴或多个轴的可调用图表对象
- en: Resize and save figure objects with numerous subplots
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整大小并保存包含多个子图的图表对象
- en: Create and customize common plot types using Matplotlib
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 创建和自定义常见的图表类型。
- en: This chapter will cover various concepts that fall under data visualization.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖属于数据可视化范畴的各种概念。
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: Data visualization is a powerful tool that allows users to digest large amounts
    of data very quickly. There are different types of plots that serve various purposes.
    In business, line plots and bar graphs are very common to display trends over
    time and compare metrics across groups, respectively. Statisticians, on the other
    hand, may be more interested in checking correlations between variables using
    a scatterplot or correlation matrix. They may also use histograms to check the
    distribution of a variable or boxplots to check for outliers. In politics, pie
    charts are widely used for comparing the total data between or among categories.
    Data visualizations can be very intricate and creative, being limited only by
    one's imagination.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是一种强大的工具，允许用户快速消化大量数据。有不同类型的图表用于各种目的。在业务中，折线图和条形图通常用于显示随时间变化的趋势和比较不同组之间的指标。而统计学家可能更感兴趣的是使用散点图或相关矩阵来检查变量之间的相关性。他们还可以使用直方图检查变量的分布或使用箱线图检查异常值。在政治中，饼图广泛用于比较不同类别之间的总数据。数据可视化可以非常复杂和创造性，仅限于个人的想象力。
- en: The Python library Matplotlib is a well-documented, two-dimensional plotting
    library that can be used to create a variety of powerful data visualizations and
    aims to "...make easy things easy and hard things possible" (https://matplotlib.org/index.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 库 Matplotlib 是一个文档良好的二维绘图库，可以用来创建各种强大的数据可视化，其宗旨是“...让简单的事情变得简单，让困难的事情变得可能”（https://matplotlib.org/index.html）。
- en: There are two approaches to creating plots using Matplotlib, the **functional**
    and the **object-oriented approach**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 创建图表的两种方法分别是**函数式方法**和**面向对象方法**。
- en: In the functional approach, one figure is created with a single plot. Plots
    are created and customized by a collection of sequential functions. However, the
    functional approach does not allow us to save the plot to our environment as an
    object; this is possible using the object-oriented approach. In the object-oriented
    approach, we create a **figure object** and assign an axis or numerous axes for
    one plot or multiple subplots, respectively. We can then customize the axis or
    axes and call that single plot or set of multiple plots by calling the figure
    object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式方法中，创建一个包含单个图表的图形。通过一系列顺序函数来创建和自定义图表。但是，函数式方法不允许我们将图表保存到我们的环境中作为一个对象；这可以通过面向对象的方法实现。在面向对象的方法中，我们创建一个**图形对象**，为一个图表或多个子图分配一个轴或多个轴。然后，我们可以自定义轴或轴，并通过调用图形对象来调用单个图表或多个图表集合。
- en: In this chapter, we will use the functional approach to create and customize
    line plots, bar plots, histograms, scatterplots, and box-and-whisker plots. We
    will then learn how to create and customize single-axis and multiple-axes plots
    using the object-oriented approach.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用函数式方法来创建和自定义折线图、条形图、直方图、散点图和箱线图。然后，我们将学习如何使用面向对象的方法来创建和自定义单轴和多轴图。
- en: Functional Approach
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数式方法
- en: The functional approach to plotting in Matplotlib is a way of quickly generating
    a single-axis plot. Often, this is the approach taught to beginners. The functional
    approach allows the user to customize and save plots as image files in a chosen
    directory. In the following exercises and activities, you will learn how to build
    line plots, bar plots, histograms, box-and-whisker plots, and scatterplots using
    the functional approach.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Functional Approach – Line Plot'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get started with Matplotlib, we will begin by creating a line plot and go
    on to customize it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate an array of numbers for the horizontal axis ranging from 0 to 10 in
    20 evenly spaced values using the following code:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an array and save it as object `y`. The snippet of the following code
    cubes the values of `x` and saves it to the array, `y`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the plot as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'See the resultant output here:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.1: Line plot of y and x'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_01.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.1: Line plot of y and x'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add an x-axis label that reads ''`Linearly Spaced Numbers`'' using the following:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a y-axis label that reads ''`y Value`'' using the following line of code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a title that reads ''`x by x cubed`'' using the following line of code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Change the line color to black by specifying the color argument as `k` in the
    `plt.plot()` function:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Print the plot to the console using plt.show().
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check out the following screenshot for the resultant output:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2: Line plot with labeled axes and a black line'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_02.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.2: Line plot with labeled axes and a black line'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Change the line characters into a diamond; use a character argument (that is,
    D) combined with the color character (that is, k) as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'See the figure below for the resultant output:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3: Line plot with unconnected, black diamond markers'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_03.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.3: Line plot with unconnected, black diamond markers'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Connect the diamonds with a solid line by placing ''`-`'' between ''`D`'' and
    ''`k`'' using the following:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Refer to the following figure to see the output:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.4: Line plot with connected, black diamond markers'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_04.jpg)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.4: Line plot with connected, black diamond markers'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Increase the font size of the title using the `fontsize` argument in the `plt.title()`
    function as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print the plot to the console using the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output can be seen in the following figure:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5: Line plot with a larger title'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.5: Line plot with a larger title'
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we used the functional approach to create a single-line line plot and
    styled it to make it more aesthetically pleasing. However, it is not uncommon
    to compare multiple trends in a single plot. Thus, the next exercise will detail
    plotting multiple lines on a line plot and creating a legend to discern the lines.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Functional Approach – Add a Second Line to the Line Plot'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Matplotlib makes adding another line to a line plot very easy by simply specifying
    another `plt.plot()` instance. In this exercise, we will plot the lines for x-cubed
    and x-squared using separate lines:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another y object as we did for the first y object, but this time, square
    x rather than cubing it, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, plot `y2` on the same plot as y by adding `plt.plot(x, y2)` to the existing
    plot.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the output here:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.6: Multiple line plot of y and y2 by x'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_06.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.6: Multiple line plot of y and y2 by x'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Change the color of `y2` to a dotted red line using the following code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is shown in the following figure:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.7: Multiple line plot with y2 as a red, dotted line'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_07.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.7: Multiple line plot with y2 as a red, dotted line'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: To create a legend, we must first create labels for our lines using the label
    argument inside the `plt.plot()` functions.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To label y as ''`x cubed`'', use the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Label `y2` as ''`x squared`'' using the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use `plt.legend(loc='upper left')` to specify the location for the legend.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the following screenshot for the resultant output:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.8: Multiple line plot with a legend'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_08.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.8: Multiple line plot with a legend'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To break a line into new lines, we use ''`\n`'' at the beginning of a new line
    within our string. Thus, using the following code, we can create the title displayed
    here:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check the output in the following screenshot:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.9: A multiple line plot with a multi-line title'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_09.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.9: A multiple line plot with a multi-line title'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: To change the dimensions of our plot, we will need to add `plt.figure(figsize=(10,5))`
    to the top of our `plt` instances. The `figsize` arguments of 10 and 5 specify
    the width and height, respectively.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see the output, refer to the following figure:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10: A multiple line plot with increased figure size'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.10: A multiple line plot with increased figure size'
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we learned how to create and style a single- and multi-line
    plot in Matplotlib using the functional approach. To help solidify our learning,
    we will plot another single-line plot with slightly different styling.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 2: Line Plot'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, we will create a line plot to analyze month-to-month trends
    for items sold in the months January through June. The trend will be positive
    and linear, and will be represented using a dotted, blue line, with star markers.
    The x-axis will be labeled '`Month`' and the y-axis will be labeled '`Items Sold`'.
    The title will say 'Items Sold has been Increasing Linearly:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Create a list of six strings for x containing the months January through June.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a list of six values for y containing values for '`Items Sold`' that
    start at 1000 and increase by 200 in each value, so the final value is 2000.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the described plot.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the following screenshot for the resultant output:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11: Line plot of items sold by month'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.11: Line plot of items sold by month'
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can refer to the solution for this activity on page 333.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have gained a lot of practice creating and customizing line plots.
    Line plots are commonly used for displaying trends. However, when comparing values
    between and/or among groups, bar plots are traditionally the visualization of
    choice. In the following exercise, we will explore how to create a bar plot.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15: Creating a Bar Plot'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will be displaying sales revenue by item type:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list of item types and save it as `x` using the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a list of sales revenue and save it as `y` as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To create a bar plot and print it to the console, refer to the code here:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the resultant output:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.12: Bar plot of sales revenue by item type'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_12.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.12: Bar plot of sales revenue by item type'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add a title reading ''`Sales Revenue by Item Type`'' using the following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create an x-axis label reading ''`Item Type`'' using the following:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a y-axis label reading ''`Sales Revenue ($)`'', using the following:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows the output:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.13: Bar plot with customized axes and title'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_13.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.13: Bar plot with customized axes and title'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We are going to create a title that will change according to the data that
    is plotted. For this example, it will read "`Shoes Produce the Most Sales Revenue`".
    First, we will find the index of the maximum value in y and save it as the `index_of_max_y`
    object using the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save the item from list `x` with an index equaling that of `index_of_max_y`
    to the `most_sold_item` object using the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Make the title programmatic as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check the following output:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.14: Bar plot with a programmatic title'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_14.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.14: Bar plot with a programmatic title'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: If we wish to convert the plot into a horizontal bar plot, we can do so by replacing
    `plt.bar(x, y)` with `plt.barh(x, y)`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output is shown in the following screenshot:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.15: Horizontal bar plot with incorrectly labeled axes'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_15.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.15: Horizontal bar plot with incorrectly labeled axes'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Remember, when a bar plot is transformed from vertical to horizontal, the x
    and y axes need to be switched.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch the x and y labels `from plt.xlabel('Item Type')` and `plt.ylabel('Sales
    Revenue ($)')`, respectively, to `plt.xlabel('Sales Revenue ($)')` and `plt.ylabel('Item
    Type')`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the following output for the final bar plot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16: Horizontal bar plot with correctly labeled axes'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_16.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.16: Horizontal bar plot with correctly labeled axes'
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the previous exercise, we learned how to create a bar plot. Building bar
    plots using Matplotlib is straightforward. In the following activity, we will
    continue to practice building bar plots.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3: Bar Plot'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we will be creating a bar plot comparing the number of NBA
    championships among the five franchises with the most titles. The plot will be
    sorted so that the franchise with the greatest number of titles is on the left
    and the franchise with the least is on the right. The bars will be red, the x-axis
    will be titled ''`NBA Franchises`'', the y-axis will be titled ''`Number of Championships`'',
    and the title will be programmatic, explaining which franchise has the most titles
    and how many they have. Before working on this activity, make sure to research
    the required NBA franchise data online. Additionally, we will rotate the x tick
    labels 45 degrees using `plt.xticks(rotation=45)` so that they do not overlap,
    and we will save our plot to the current directory:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Create a list of five strings for `x` containing the names of the NBA franchises
    with the most titles.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a list of five values for `y` containing values for '`Titles Won`' that
    correspond with the strings in `x`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place x and y into a data frame with the column names '`Team`' and '`Titles`',
    respectively.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sort the data frame in descending order by '`Titles`'.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a programmatic title and save it as `title`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the described plot.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: We can refer to the solution for this activity on page 334.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Line plots and bar plots are two very common and effective types of visualizations
    for reporting trends and comparing groups, respectively. However, for deeper statistical
    analyses, it is important to generate graphs that uncover characteristics of features
    not apparent with line plots and bar plots. Thus, in the following exercises,
    we will run through creating common statistical plots.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16: Functional Approach – Histogram'
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In statistics, it is essential to be aware of the distribution of continuous
    variables prior to running any type of analysis. To display the distribution,
    we will use a histogram. Histograms display the frequency by the bin for a given
    array:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the creation of a histogram, we will generate an array of 100
    normally distributed values with a mean of 0 and a standard deviation of 0.1,
    and save it as y using the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With Matplotlib imported, create the histogram using the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a label for the x-axis titled ''`y Value`'' using the following code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Title the y-axis ''`Frequency`'' using the following line of code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Print it to the console using `plt.show()`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'See the output in the following screenshot:![Figure 2.17: Histogram of y with
    labeled axes](img/C13322_02_17.jpg)'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 2.17: Histogram of y with labeled axes'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: When we look at a histogram, we often determine whether the distribution is
    normal. Sometimes, a distribution may appear normal when it is not, and sometimes
    a distribution may appear not normal when it is normal. There is a test for normality,
    termed the Shapiro-Wilk test. The null hypothesis for the Shapiro-Wilk test is
    that data is normally distributed. Thus, a p-value < 0.05 indicates a non-normal
    distribution while a p-value > 0.05 indicates a normal distribution. We will use
    the results from the Shapiro-Wilk test to create a programmatic title communicating
    to the reader whether the distribution is normal or not.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use tuple unpacking to save the W statistic and the p-value from the Shapiro-Wilk
    test into the `shap_w` and `shap_p` objects, respectively, using the following
    code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will use an if-else statement to determine whether the data is normally distributed
    and store an appropriate string in a `normal_YN` object.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Assign `normal_YN` to our plot using `plt.title(normal_YN)` and print it to
    the console using `plt.show()`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the final output in this screenshot:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.18: A histogram of y with a programmatic title](img/C13322_02_18.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.18: A histogram of y with a programmatic title'
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As mentioned previously, histograms are used for displaying the distribution
    of an array. Another common statistical plot for exploring a numerical feature
    is a box-and-whisker plot, also referred to as a boxplot.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Box-and-whisker plots display the distribution of an array based on the minimum,
    first quartile, median, third quartile, and maximum, but they are primarily used
    to indicate the skew of a distribution and to identify outliers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 17: Functional Approach – Box-and-Whisker plot'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will learn how to create a box-and-whisker plot and portray
    information regarding the shape of the distribution and the number of outliers
    in our title:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate an array of 100 normally distributed numbers with a mean of 0 and
    a standard deviation of 0.1, and save it as y using the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create and display the plot as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the output, refer to the following figure:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.19: Boxplot of y](img/C13322_02_19.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.19: Boxplot of y'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The plot displays a box that represents the interquartile range (IQR). The top
    of the box is the 25th percentile (i.e., Q1) while the bottom of the box is the
    75th percentile (that is, Q3). The orange line going through the box is the median.
    The two lines extending above and below the box are the whiskers. The top of the
    upper whisker is the "maximum" value, which is calculated using Q1 – 1.5*IQR.
    The bottom of the lower whisker is the "minimum" value, which is calculated using
    Q3 + 1.5*IQR. Outliers (or fringe outliers) are displayed as dots above the "maximum"
    whisker or below the "minimum" whisker.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the Shapiro W and p-value from the `shapiro` function as follows:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Refer to the following code to convert `y` into z-scores:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a measure of the data which shows how many standard deviations each
    datapoint is from the mean.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是衡量数据的一种方式，显示每个数据点与均值的标准差差异。
- en: 'Iterate through the `y_z_scores` array to find the number of outliers using
    the following code:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码迭代 `y_z_scores` 数组，以找到离群值的数量：
- en: '[PRE35]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注释
- en: Because the array, y, was generated to be normally distributed, we can expect
    there to be no outliers in the data.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于生成的数组 y 是正态分布的，因此我们可以预期数据中没有离群值。
- en: 'Generate a title that communicates whether the data, as well as the number
    of outliers, is normally distributed. If `shap_p` is greater than 0.05, our data
    is normally distributed. If it is not greater than 0.05, then our data is not
    normally distributed. We can set this up and include the number of outliers with
    the following logic:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个标题，传达数据是否呈正态分布，以及离群值的数量。如果 `shap_p` 大于 0.05，则我们的数据呈正态分布。如果小于 0.05，则数据不呈正态分布。我们可以通过以下逻辑设置并包含离群值的数量：
- en: '[PRE36]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Set our plot title as the programmatically named title using `plt.title` (title)
    and print it to the console using:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `plt.title`（标题）设置我们的图表标题，并通过以下方式打印到控制台：
- en: '[PRE37]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Check the final output in the following screenshot:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下图中检查最终输出：
- en: '![Figure 2.20: A boxplot of y with a programmatic title](img/C13322_02_20.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20：带程序生成标题的 y 的箱线图](img/C13322_02_20.jpg)'
- en: 'Figure 2.20: A boxplot of y with a programmatic title'
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.20：带程序生成标题的 y 的箱线图
- en: Histograms and box-and-whisker plots are effective in exploring the characteristics
    of numerical arrays. However, they do not provide information on the relationships
    between arrays. In the next exercise, we will learn how to create a scatterplot
    – a common visualization to display the relationship between two continuous arrays.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图和箱线图在探索数值数组特征时非常有效。然而，它们并不能提供数组之间关系的信息。在下一个练习中，我们将学习如何创建散点图——一种常见的可视化方式，用于展示两个连续数组之间的关系。
- en: 'Exercise 18: Scatterplot'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 18：散点图
- en: 'In this exercise, we will be creating a scatterplot of weight versus height.
    We will, again, create a title explaining the message of the plot being portrayed:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将创建一个体重与身高的散点图。我们将再次创建一个标题来解释该图所展示的信息：
- en: 'Generate a list of numbers representing height and save it as y using the following:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法生成一个表示身高的数字列表，并将其保存为 y：
- en: '[PRE38]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Generate a list of numbers representing weight and save it as x using the following:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法生成一个表示体重的数字列表，并将其保存为 x：
- en: '[PRE39]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a basic scatterplot with weight on the x-axis and height on the y-axis
    using the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个基本的散点图，体重为 x 轴，身高为 y 轴：
- en: '[PRE40]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Label the x-axis ''`Weight`'' as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 x 轴标记为 '`体重`'，如下所示：
- en: '[PRE41]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Label the y-axis ''`Height`'' as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 y 轴标记为 '`身高`'，如下所示：
- en: '[PRE42]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Print the plot to the console using `plt.show()`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `plt.show()` 将图表打印到控制台。
- en: 'Our output should be similar to the following:'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的输出应类似于以下内容：
- en: '![Figure 2.21: Scatterplot of height by weight'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.21：按体重绘制的身高散点图'
- en: '](img/C13322_02_21.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13322_02_21.jpg)'
- en: 'Figure 2.21: Scatterplot of height by weight'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.21：按体重绘制的身高散点图
- en: 'We want our plot title to inform the reader about the strength of the relationship
    and the Pearson correlation coefficient. Thus, we will calculate the Pearson correlation
    coefficient and interpret the value of the coefficient in the title. To compute
    the Pearson correlation coefficient, refer to the following code:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望图表标题能告知读者关系的强度和 Pearson 相关系数。因此，我们将计算 Pearson 相关系数，并在标题中解释该系数的值。计算 Pearson
    相关系数的代码如下：
- en: '[PRE43]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The Pearson correlation coefficient is an indicator of the strength and direction
    of the linear relationship between two continuous arrays. Using if-else logic,
    we will return the interpretation of the correlation coefficient using the following
    code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pearson 相关系数是一个指标，用于衡量两个连续数组之间线性关系的强度和方向。使用 if-else 逻辑，我们将通过以下代码返回相关系数的解释：
- en: '[PRE44]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, we can use the newly created title object as our title using `plt.title(title)`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用新创建的标题对象作为标题，方法是使用 `plt.title(title)`。
- en: 'Refer to the following figure for the resultant output:'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅下图以了解结果输出：
- en: '![Figure 2.25: Scatterplot of height by weight with programmatic title'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.25：按体重绘制的身高散点图，带程序生成的标题'
- en: '](img/C13322_02_22.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13322_02_22.jpg)'
- en: 'Figure 2.22: Scatterplot of height by weight with programmatic title'
  id: totrans-249
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.22：按体重绘制的身高散点图，带程序生成的标题
- en: Up to this point, we have learned how to create and style an assortment of plots
    for several different purposes using the functional approach. While this approach
    of plotting is effective for generating quick visualizations, it does not allow
    us to create multiple subplots or store the plot as an object in our environment.
    To save the plot as an object in our environment, we must use the object-oriented
    approach, which will be covered in the following exercises and activities.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented Approach Using Subplots
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the functional approach of plotting in Matplotlib does not allow the user
    to save the plot as an object in our environment. In the object-oriented approach,
    we create a figure object that acts as an empty canvas and then we add a set of
    axes, or subplots, to it. The figure object is callable and, if called, will return
    the figure to the console. We will demonstrate how this works by plotting the
    same x and y objects as we did in *Exercise 13*.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 19: Single Line Plot using Subplots'
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we learned about the functional approach of plotting in Matplotlib, we
    began by creating and customizing a line plot. In this exercise, we will create
    and style a line plot using the functional plotting approach:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Save `x` as an array ranging from 0 to 10 in 20 linearly spaced steps as follows:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Save `y` as x cubed using the following:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a figure and a set of axes as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Check out the following screenshot to view the output:'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.23: Callable figure and set of axes'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_23.jpg)'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.23: Callable figure and set of axes'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The `fig` object is now callable and returns the axis on which we can plot.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot y (that is, x squared) by x using the following:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following figure displays the output:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.24: Callable line plot of y by x'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_24.jpg)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.24: Callable line plot of y by x'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Style the plot much the same as in *Exercise 13*. First, change the line color
    and markers as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Set the x-axis label to ''`Linearly Spaced Numbers`'' using the following:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'To set the y-axis to ''`y Value`'' using the following code:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Set the title to ''`As x increases, y increases by x cubed`'' using the following
    code:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following figure displays the output:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.25: Styled, callable line plot of y by x'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_25.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.25: Styled, callable line plot of y by x'
  id: totrans-284
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we created a plot very similar to the first plot in *Exercise
    13*, but now it is a callable object. Another advantage of using the object-oriented
    plotting approach is the ability to create multiple subplots on a single figure
    object.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: In some situations, we want to compare different views of data side by side.
    We can accomplish this in Matplotlib using subplots.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 20: Multiple Line Plots Using Subplots'
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thus, in this exercise, we will plot the same lines as in Exercise 14, but we
    will plot them on two subplots in the same, callable figure object. Subplots are
    laid out using a grid format and are accessible using [row, column] indexing.
    For example, if our figure object contains four subplots organized in two rows
    and two columns, we would index reference the top-left plot using `axes[0,0]`
    and the bottom-right plot using `axes[1,1]`, as shown in the following figure.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.29: Axes index referencing'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_26.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.26: Axes index referencing'
  id: totrans-291
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the remaining exercises and activities, we will get a lot of practice with
    generating subplots and accessing the various axes. In this exercise, we will
    be making multiple line plots using sublots:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create `x`, `y`, and `y2` using the following code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a figure with two axes (that is, subplots) that are side by side (that
    is, 1 row with 2 columns), as follows:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The resultant output is displayed here:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.27: A figure with two subplots'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_27.jpg)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.27: A figure with two subplots'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To access the subplot on the left, refer to it as `axes[0]`. To access the
    plot on the right, refer to it as `axes[1]`. On the left axis, plot y by x using
    the following:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add a title using the following:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Generate an x-axis label using the following line of code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a y-axis label using the following code:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The resultant output is displayed here:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.31: Figure with two subplots, where the left has been created'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C13322_02_28.jpg)'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.28: Figure with two subplots, where the left has been created'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On the right axis, plot `y2` by `x` using the following code:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add a title using the following code:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Generate an x-axis label using the following code:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create a y-axis label using the following code:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The following screenshot displays the output
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.29: Figure with both subplots created](img/C13322_02_29.jpg)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.29: Figure with both subplots created'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We have successfully created two subplots. However, it looks like the y-axis
    of the plot on the right is overlapping the left-hand plot. To prevent the overlapping
    of the plots, use `plt.tight_layout()`.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The figure here displays the output:'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.30: A figure with two non-overlapping subplots'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_30.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.30: A figure with two non-overlapping subplots'
  id: totrans-328
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using the object-oriented approach, we can display both subplots just by calling
    the `fig` object. We will practice object-oriented plotting further in Activity
    4.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4: Multiple Plot Types Using Subplots'
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have learned uptil now how to build, customize, and program line plots,
    bar plots, histograms, scatterplots, and box-and-whisker plots using the functional
    approach. In exercise 19, we were introduced to the object-oriented approach,
    and in exercise 20, we learned how to create a figure with multiple plots using
    subplots. Thus, in this activity, we will be leveraging subplots to create a figure
    with multiple plots and plot types. We will be creating a figure with six subplots.
    The subplots will be displayed in three rows and two columns (see Figure 2.31):'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.31: Layout for subplots'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C13322_02_31.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.31: Layout for subplots'
  id: totrans-334
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once we have generated our figure of six subplots, we access each subplot using
    ''row, column'' indexing (see Figure 2.32):'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.32: Axes index referencing](img/C13322_02_32.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.32: Axes index referencing'
  id: totrans-337
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Thus, to access the line plot (that is, top-left), use `axes[0, 0]`. To access
    the histogram (that is, middle-right), use `axes[1, 1]`. We will be practicing
    this in the following activity:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Import `Items_Sold_by_Week.csv` and `Weight_by_Height.csv` from GitHub and generate
    a normally distributed array of numbers.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a figure with six empty subplots using three rows and two columns that
    do not overlap.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the plot titles with six subplots organized in three rows and two columns
    such that do not overlap.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the '`Line`', '`Bar`' and '`Horizontal Bar`' axes, plot '`Items_Sold`' by
    '`Week`' from '`Items_Sold_by_Week.csv`'.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the '`Histogram`' and '`Box-and-Whisker`' axes, plot the array of 100 normally
    distributed numbers.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the '`Scatter`' axis, plot weight by height with '`Weight_by_Height.csv`'.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Label the x- and y-axis in each subplot.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the size of the figure and save it.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 338.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we used the Python plotting library Matplotlib to create, customize,
    and save plots using the functional approach. We then covered the importance of
    a descriptive title and created our own descriptive, programmatic titles. However,
    the functional approach does not create a callable figure object and it does not
    return subplots. Thus, to create a callable figure object with the potential of
    numerous subplots, we created, customized, and saved our plots using the object-oriented
    approach. Plotting needs can vary analysis to analysis, so covering every possible
    plot in this chapter is not practical. To create powerful plots that meet the
    needs of each individual analysis, it is imperative to become familiar with the
    documentation and examples found on the Matplotlib documentation page.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: In the subsequent chapter, we will apply some of these plotting techniques as
    we dive into machine learning using scikit-learn.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
