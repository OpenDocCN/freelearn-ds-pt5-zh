- en: Chapter 7. Importing and Exporting Data from Various DBs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we are going to see how data from different sources can
    be loaded into R for performing the data analytics operations. Here, we have considered
    some of the popular databases that are being used as data storage, required for
    performing data analytics with different applications and technologies. As we
    know, performing the analytics operations with R is quite easy as compared to
    the other analytics tools and again, it's free and open source. Since, R has available
    methods to use customized functions via installing R packages, many database packages
    are available in CRAN to perform database connection with R. Therefore, the R
    programming language is becoming more and more popular due to database, as well
    as operating system, independence.
  prefs: []
  type: TYPE_NORMAL
- en: We have specially designed this chapter to share knowledge of how data from
    various database systems can be loaded and used into R for performing data modeling.
    In this chapter, we have included several popular database examples for performing
    various DB operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have covered various data sources that are popular and are used with R.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: RData
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HBase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Importing and Exporting Data from Various DBs](img/3282OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding diagram, we can understand that R is supported with several
    database systems to perform data analytics related operations over various databases.
    Since there are a large number of libraries available for R to perform the connection
    with various DBs, we just need to inherit them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table, the possible database systems and the related R packages
    are given for easy understanding of the related R packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Database system name | Useful R packages / function utilities |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Text files | Text data files such as `.csv`, `.txt`, and `.r` |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL | RMySQL |'
  prefs: []
  type: TYPE_TB
- en: '| Excel | Xlsx |'
  prefs: []
  type: TYPE_TB
- en: '| Mongo | RMongo |'
  prefs: []
  type: TYPE_TB
- en: '| SQLlite | RSQLlite |'
  prefs: []
  type: TYPE_TB
- en: '| PostgreSQL | RPostgreSQL |'
  prefs: []
  type: TYPE_TB
- en: '| HDFS | RHDFS |'
  prefs: []
  type: TYPE_TB
- en: '| Hive | RHive |'
  prefs: []
  type: TYPE_TB
- en: '| HBase | RHBase |'
  prefs: []
  type: TYPE_TB
- en: 'As we know, each of the mentioned databases have their own importance with
    the features. Each of these data sources will be described with the following
    points for better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the data into R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export the data from R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we are going to install and interact with R packages that will
    be used for various data operations in R.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will start understanding about databases and how to perform data-related
    operations to forward to data analytics for all databases.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about data files as database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While dealing with the data analytics activities, we need to do data importing,
    loading, or exporting functionalities all the time. Sometimes the same operations
    need to be iterated with R programming language. So, we can use the available
    R function for performing the same data activities.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding different types of files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are commonly four different types of data files used with R for data
    storage operations. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CSV (Comma Separated Values)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Txt (with Tab Separated Values)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .RDATA (R's native data format)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .rda (R's native data format)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing R packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the data file with the format specified earlier, we don't need to install
    extra R packages. We just need to use the built-in functions available with R.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform analytics-related activities, we need to use the following functions
    to get the data into R:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CSV: `read.csv()` is intended for reading the **comma separated value** (**CSV**)
    files, where the decimal point is `",".` The retrieved data will be stored into
    one R object, which is considered as `Dataframe`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'TXT: To retrieve the tab separated values, the `read.table()` function will
    be used with some important parameters and the return type of this function will
    be `Dataframe type`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.RDATA: Here, the .RDATA format is used by R for storing the workspace data
    for a particular time period. It is considered as image file. This will store/retrieve
    all of the data available in the workspace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.rda: This is also R''s native data format, which stores the specific data
    variable as per requirement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exporting the data from R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To export the existing data object from R and to support data files as per
    requirements, we need to use the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CSV: Write the dataframe object into the `csv` data file via the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'TXT: Write the data with the tab delimiters via the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.RDATA: To store the workspace data variables available to R session, use the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.rda: This function is used to store specific data objects that can be reused
    later. Use the following code for saving them to the .`rda` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is world's most popular open source database. Many of the world's largest
    and fastest growing organizations including Facebook, Google, Adobe, and Zappos
    rely on MySQL databases, to save time and money powering high-volume websites,
    business critical systems, and software packages.
  prefs: []
  type: TYPE_NORMAL
- en: Since both R and MySQL both are open source, they can be used for building the
    interactive web analytic applications. Also simple data analytics activities can
    be performed for existing web applications with this unique package.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install MySQL on your Linux machine, you need to follow the given steps
    in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Install MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install RMySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will see how to get MySQL installed on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Log in to MySQL database using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Installing RMySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have installed MySQL on our Linux machine. It''s time to install RMySQL
    – R library from CRAN via the following R commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After the RMySQL library is installed on R, perform MySQL database connection
    by providing the user privileges as provided in MySQL administration console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Learning to list the tables and their structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, the database connection has been done successfully. To list the available
    tables and their structure of data base in MySQL database, look at the following
    commands. To return the available tables created under `mydb` database, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To return a list of data fields created under the `sample_table` table, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Importing the data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We know how to check MySQL tables and their fields. After identification of
    useful data tables, we can import them in R using the following RMySQL command.
    To retrieve the custom data from MySQL database as per the provided SQL query,
    we need to store it in an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The available data-related information can be retrieved from MySQL to R via
    the `fetch` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the specified parameter `n = -1` is used for retrieving all pending records.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding data manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To perform the data operation with MySQL database, we need to fire the SQL queries.
    But in case of RMySQL, we can fire commands with the `dbSendQuery` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a new table with the help of available R dataframe into MySQL database
    can be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To insert R matrix data into the existing data table in MySQL, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes we need to delete a MySQL table when it is no longer of use. We can
    fire the following query to delete the `mysql_some_table` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Understanding Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Excel is a spreadsheet application developed by Microsoft to be run on Windows
    and Mac OS, which has a similar function to R for performing statistical computation,
    graphical visualization, and data modeling. Excel is provided by Microsoft with
    the Microsoft Office bundle, which mainly supports `.xls` spreadsheet data file
    format. In case, we want to read or write to Microsoft Excel spreadsheets from
    within R, we can use many available R packages. But one of the popular and working
    R library is xlsx.
  prefs: []
  type: TYPE_NORMAL
- en: This package programmatically provides control of the Excel files using R. The
    high level API of this allows users to read a spread sheet of the `.xlsx` document
    into a `data.frame` and writing `data.frame` to a file. This package is basically
    developed by *Adrian A. Dragulescu*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are considering the `.xls` file as the data source, which can be built
    and maintained with the help of Microsoft Excel 97/2000/XP/2003.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for the xlsx packages:'
  prefs: []
  type: TYPE_NORMAL
- en: xlsxjars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rJava
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing xlsxX packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Install.packages("xlsxjars")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install.packages("rJava")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install.packages("xlsx")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we have created one excel file and now we want to perform the data analytics
    related operations with R, this is the best package to load the excel file to
    be processed within R.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will store the excel data with sheet 1 into the `es` dataframe
    format in R.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding data manipulation with R and Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following command will be used for selecting the subset of dataframe, `res`,
    which selects the first five rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Exporting the data to Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As per the defined name, the processed data with the dataframe format can be
    stored as a `xls` file to be supported with Excel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Understanding MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a NoSQL-based distributed document data storage. This has been specially
    designed for providing scalable and high performance data storage solutions. In
    many scenarios, it can be used to replace traditional relational database or key/value
    data storage. The biggest feature of Mongo is its query language, which is very
    powerful, and its syntax is somewhat similar to object-oriented query language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the features of MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Set-oriented storage and easy to store the object type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for dynamic queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full index support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rich query language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data fragments processing order to support the expansion of the cloud level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BSON-based file data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported with C, C++, C#, Erlang, Haskell, Java, JavaScript, Perl, PHP, Python,
    Ruby, and Scala
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use R and MongoDB together by installing the following prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rmongodb installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps provided for installation of MongoDB in Ubuntu
    12.04 and CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will see installation steps for Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure Package Management System (APT) using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `/etc/apt/sources.list.d/mongodb.list` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, update the package list of your OS using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the latest version of MongoDB by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we will see the installation steps for CentOs.
  prefs: []
  type: TYPE_NORMAL
- en: Configure Package Management System (YUM).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `/etc/yum.repos.d/mongodb.repo` and use the following configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a 64-bit system use the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'For a 32-bit system use the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Install Packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the following command, install a stable version of MongoDB and the associated
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have successfully installed MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Useful commands for controlling a mongodb service**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the mongodb service we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop the mongodb service we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart the mongodb service we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a Mongo console we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Mapping SQL to MongoDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the mappings of SQL terms to MongoDB terms for better understanding
    of data storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | SQL Term | MongoDB Term |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1. | Database | Database |'
  prefs: []
  type: TYPE_TB
- en: '| 2. | Table | Collection |'
  prefs: []
  type: TYPE_TB
- en: '| 3. | Index | Index |'
  prefs: []
  type: TYPE_TB
- en: '| 4. | Row | Document |'
  prefs: []
  type: TYPE_TB
- en: '| 5. | Column | Field |'
  prefs: []
  type: TYPE_TB
- en: '| 6. | Joining | Embedding & linking |'
  prefs: []
  type: TYPE_TB
- en: Mapping SQL to MongoQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the mapping of SQL statements to Mongo QL statements for
    the understanding of query development/conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | SQL Statement | Mongo QL Statement |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Installing rmongodb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use MongoDB within R, we need to have installed R with the rmongodb library.
    We can install rmongodb from CRAN via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Importing the data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have learned how to install MongoDB in Ubuntu 12.04\. Now, we can perform
    all the necessary operations on our data. In this section, we are going to learn
    how Mongo data can be handled and imported in R for data analytics activity. For
    loading the library we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Objects of the `mongo.bson` class are used to store BSON documents. BSON is
    the form that MongoDB uses to store documents in its database. MongoDB network
    traffic also uses BSON messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Understanding data manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now see how Mongo data object can be operated within R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Understanding SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLite is a relational database management system developed with C programming
    language. SQLite is ACID compliant and implements most of the SQL standard. Unlike
    other database systems, SQLite doesn't have a standalone process to serve data
    to client applications. It's an embedded SQL database engine. SQLite system reads
    and writes directly to the system disk files because it's a file-based database.
    Related SQL database with multiple tables, indices, and views are contained there
    and this database file format is supported as cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quick understanding of ACID properties of transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a set of properties that needs to be fulfilled to perform the transactions.
    They are Atomicity, Consistency, Isolation, and Durability. which are explained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Atomicity refers to the guarantee that all the tasks of the database are performed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency ensures that the database remains in a consistent manner throughout,
    similar to how it was before we started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolation refers to the requirement that other operations cannot access or see
    the data in an intermediate state during a transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Durability refers to the guarantee that once the user has been notified of success,
    the transaction will persist, and not be undone. This means it will survive system
    failure, and that the database system has checked the integrity constraints and
    won't need to abort the transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding features of SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the features of SQLite database that follows ACID properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Zero configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform-supported disk format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster than client-server type of database system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to use API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will require the following prerequisites for using SQLite and R together:'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSQLite installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the SQLite database in Ubuntu, follow the given commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Installing RSQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install RSQLite by following the given command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Importing the data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see how to insert the data into R with the RSQLite package.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load an installed package, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following commands, you can connect to DB and list all tables from
    the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Understanding data manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can manipulate the dataset using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Understanding PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL is an open source object relational database management system. PostgreSQL
    runs on most of the operating systems such as Linux, UNIX, and Windows. It supports
    text, image, sound, and video data sources. It supports programming technologies
    such as C, C++, Java, Python, Ruby, and Tcl.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding features of PostgreSQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the features of PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: Complex SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully ACID complaint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL subselects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to have installed the following prerequisites for using PostgreSQL
    in R:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postgre SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing RPostgre SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn about installing PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given commands will be followed for the installation of PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Installing RPostgreSQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now see how to install and use RPostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following code, we will learn how to operate data stored at PostgreSQL
    from within R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Exporting the data from R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how to load data, write the contents
    of the dataframe value into the table name specified, and remove the specified
    table from the database connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Understanding Hive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hive is a Hadoop-based data warehousing-like framework developed by Facebook.
    It allows users to fire queries in SQL, with languages like HiveQL, which are
    highly abstracted to Hadoop MapReduce. This allows SQL programmers with no MapReduce
    experience to use the warehouse and makes it easier to integrate with business
    intelligence and visualization tools for real-time query processing.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding features of Hive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the features of Hive:'
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate Query Language (HQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports UDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different storage type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hadoop integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prerequisites for RHive are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assume here that our readers have already configured Hadoop; else they can
    learn Hadoop installation from [Chapter 1](ch01.html "Chapter 1. Getting Ready
    to Use R and Hadoop"), *Getting Ready to Use R and Hadoop*. As Hive will be required
    for running RHive, we will first see how Hive can be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Hive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The commands to install Hive are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Hive configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To setup Hive configuration, we need to update the `hive-site.xml` file with
    a few additions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `hive-site.xml` using the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `hive-log4j.properties` by adding the following line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the environment variables by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In HDFS, create specific directories for Hive:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To start the hive server, the `hive --service hiveserver` command needs to be
    called from `HIVE_HOME`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Installing RHive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install the dependant library, `rjava`, using the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding RHive operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will see how we can load and operate over Hive datasets in R using the RHive
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize RHive we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To connect with the Hive server we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To view all tables we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To view the table structure we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the HQL queries we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To close connection to the Hive server we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding HBase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache HBase is a distributed Big Data store for Hadoop. This allows random,
    real-time, read/write access to Big Data. This is designed as a column-oriented,
    data-storage model, innovated after being inspired by Google Big table.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding HBase features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the features for HBase:'
  prefs: []
  type: TYPE_NORMAL
- en: RESTful web service with XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear and modular scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strict consistent reads and writes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensible shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block cache and Bloom filters for real-time queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pre-requisites for RHBase are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HBase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thrift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we assume that users have already configured Hadoop for their Linux machine.
    If anyone wishes to know how to install Hadoop on Linux, please refer to [Chapter
    1](ch01.html "Chapter 1. Getting Ready to Use R and Hadoop"), *Getting Ready to
    Use R and Hadoop*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing HBase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the steps for installing HBase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the tar file of HBase and extract it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to HBase installation directory and update the configuration files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the configuration files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update `hbase-env.sh`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the configuration for HBase:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `hbase-site.xmlzxml`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Change `hbase-site.cml`, which should look like the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If a separate zookeper setup is used, the configuration needs to be changed.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the Hadoop environment configuration files and libraries.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Installing thrift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the steps for installing thrift:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the thrift source from the Internet and place it to client. We will
    do it with Ubuntu O.S 12.04:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To extract the downloaded `.tar.gz` file, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile the configuration parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install thrift:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start the HBase thrift server we need to call the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing RHBase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After installing HBase , we will see how to get the RHBase library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `rhbase` we use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install the downloaded package we use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Importing the data into R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once RHBase is installed, we can load the dataset in R from HBase with the
    help of RHBase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all tables we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a new table we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To display the table structure we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To read data we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding data manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will see how to operate over the dataset of HBase from within R:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the table we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To insert the data we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To delete a sheet we use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how various R packages that are integrated with
    various database systems and their data sets can be loaded in R to perform data
    analytics. Most of the popular database systems have their R packages to load
    the data, update, as well as query the data to analyze them.
  prefs: []
  type: TYPE_NORMAL
