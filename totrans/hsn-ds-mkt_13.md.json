["```py\nimport pandas as pd\n\ndf = pd.read_excel('../data/Online Retail.xlsx', sheet_name='Online Retail')\n```", "```py\n        df = df.loc[df['Quantity'] > 0]\n```", "```py\n        df = df[pd.notnull(df['CustomerID'])]\n```", "```py\n        df = df.loc[df['InvoiceDate'] < '2011-12-01']\n```", "```py\n        df['Sales'] = df['Quantity'] * df['UnitPrice']\n```", "```py\n        orders_df = df.groupby(['CustomerID', 'InvoiceNo']).agg({\n            'Sales': sum,\n            'InvoiceDate': max\n        })\n```", "```py\ndef groupby_mean(x):\n    return x.mean()\n\ndef groupby_count(x):\n    return x.count()\n\ndef purchase_duration(x):\n    return (x.max() - x.min()).days\n\ndef avg_frequency(x):\n    return (x.max() - x.min()).days/x.count()\n\ngroupby_mean.__name__ = 'avg'\ngroupby_count.__name__ = 'count'\npurchase_duration.__name__ = 'purchase_duration'\navg_frequency.__name__ = 'purchase_frequency'\n\nsummary_df = orders_df.reset_index().groupby('CustomerID').agg({\n    'Sales': [min, max, sum, groupby_mean, groupby_count],\n    'InvoiceDate': [min, max, purchase_duration, avg_frequency]\n})\n```", "```py\nsummary_df.columns = ['_'.join(col).lower() for col in summary_df.columns]\nsummary_df = summary_df.loc[summary_df['invoicedate_purchase_duration'] > 0]\n\nax = summary_df.groupby('sales_count').count()['sales_avg'][:20].plot(\n    kind='bar', \n    color='skyblue',\n    figsize=(12,7), \n    grid=True\n)\n\nax.set_ylabel('count')\n\nplt.show()\n```", "```py\nax = summary_df['invoicedate_purchase_frequency'].hist(\n    bins=20,\n    color='skyblue',\n    rwidth=0.7,\n    figsize=(12,7)\n)\n\nax.set_xlabel('avg. number of days between purchases')\nax.set_ylabel('count')\n\nplt.show()\n```", "```py\nclv_freq = '3M'\n\ndata_df = orders_df.reset_index().groupby([\n    'CustomerID',\n    pd.Grouper(key='InvoiceDate', freq=clv_freq)\n]).agg({\n    'Sales': [sum, groupby_mean, groupby_count],\n})\n\ndata_df.columns = ['_'.join(col).lower() for col in data_df.columns]\ndata_df = data_df.reset_index()\n```", "```py\ndate_month_map = {\n    str(x)[:10]: 'M_%s' % (i+1) for i, x in enumerate(\n        sorted(data_df.reset_index()['InvoiceDate'].unique(), reverse=True)\n    )\n}\n\ndata_df['M'] = data_df['InvoiceDate'].apply(lambda x: date_month_map[str(x)[:10]])\n```", "```py\nfeatures_df = pd.pivot_table(\n    data_df.loc[data_df['M'] != 'M_1'], \n    values=['sales_sum', 'sales_avg', 'sales_count'], \n    columns='M', \n    index='CustomerID'\n)\n\nfeatures_df.columns = ['_'.join(col) for col in features_df.columns]\n```", "```py\nfeatures_df = features_df.fillna(0)\n```", "```py\nresponse_df = data_df.loc[\n    data_df['M'] == 'M_1',\n    ['CustomerID', 'sales_sum']\n]\n\nresponse_df.columns = ['CustomerID', 'CLV_'+clv_freq]\n```", "```py\nsample_set_df = features_df.merge(\n    response_df, \n    left_index=True, \n    right_on='CustomerID',\n    how='left'\n)\n\nsample_set_df = sample_set_df.fillna(0)\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\ntarget_var = 'CLV_'+clv_freq\nall_features = [x for x in sample_set_df.columns if x not in ['CustomerID', target_var]]\n\nx_train, x_test, y_train, y_test = train_test_split(\n    sample_set_df[all_features], \n    sample_set_df[target_var], \n    test_size=0.3\n)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n\nreg_fit = LinearRegression()\nreg_fit.fit(x_train, y_train)\n```", "```py\nreg_fit.intercept_\n```", "```py\nreg_fit.coef_\n```", "```py\ntrain_preds = reg_fit.predict(x_train)\ntest_preds = reg_fit.predict(x_test)\n```", "```py\nfrom sklearn.metrics import r2_score, median_absolute_error\n```", "```py\nr2_score(y_true=y_train, y_pred=train_preds)\nmedian_absolute_error(y_true=y_train, y_pred=train_preds)\n```", "```py\nplt.scatter(y_test, test_preds)\nplt.plot([0, max(y_test)], [0, max(test_preds)], color='gray', lw=1, linestyle='--')\n\nplt.xlabel('actual')\nplt.ylabel('predicted')\nplt.title('Out-of-Sample Actual vs. Predicted')\nplt.grid()\n\nplt.show()\n```", "```py\nlibrary(dplyr)\nlibrary(readxl)\n\n#### 1\\. Load Data ####\ndf <- read_excel(\n  path=\"~/Documents/data-science-for-marketing/ch.9/data/Online Retail.xlsx\", \n  sheet=\"Online Retail\"\n)\n```", "```py\n        df <- df[which(df$Quantity > 0),]\n```", "```py\n        df <- na.omit(df)\n```", "```py\n        df <- df[which(df$InvoiceDate < '2011-12-01'),]\n```", "```py\n        df$Sales <- df$Quantity * df$UnitPrice\n```", "```py\n# per order data\nordersDF <- df %>% \n  group_by(CustomerID, InvoiceNo) %>% \n  summarize(Sales=sum(Sales), InvoiceDate=max(InvoiceDate))\n```", "```py\n# order amount & frequency summary\nsummaryDF <- ordersDF %>%\n  group_by(CustomerID) %>%\n  summarize(\n    SalesMin=min(Sales), SalesMax=max(Sales), SalesSum=sum(Sales), \n    SalesAvg=mean(Sales), SalesCount=n(),\n    InvoiceDateMin=min(InvoiceDate), InvoiceDateMax=max(InvoiceDate), \n    PurchaseDuration=as.double(floor(max(InvoiceDate)-min(InvoiceDate))),\n    PurchaseFrequency=as.double(floor(max(InvoiceDate)-min(InvoiceDate)))/n()\n  )\n```", "```py\nsummaryDF <- summaryDF[which(summaryDF$PurchaseDuration > 0),]\n\nsalesCount <- summaryDF %>% \n  group_by(SalesCount) %>% \n  summarize(Count=n())\n\nggplot(salesCount[1:19,], aes(x=SalesCount, y=Count)) +\n  geom_bar(width=0.5, stat=\"identity\") +\n  ggtitle('') +\n  xlab(\"Sales Count\") +\n  ylab(\"Count\") +\n  theme(plot.title = element_text(hjust = 0.5))\n```", "```py\nhist(\n  summaryDF$PurchaseFrequency, \n  breaks=20,\n  xlab='avg. number of days between purchases',\n  ylab='count',\n  main=''\n)\n```", "```py\n# group data into every 3 months\nlibrary(lubridate)\n\nordersDF$Quarter = as.character(round_date(ordersDF$InvoiceDate, '3 months'))\n\ndataDF <- ordersDF %>%\n  group_by(CustomerID, Quarter) %>%\n  summarize(SalesSum=sum(Sales), SalesAvg=mean(Sales), SalesCount=n())\n```", "```py\ndataDF$Quarter[dataDF$Quarter == \"2012-01-01\"] <- \"Q1\"\ndataDF$Quarter[dataDF$Quarter == \"2011-10-01\"] <- \"Q2\"\ndataDF$Quarter[dataDF$Quarter == \"2011-07-01\"] <- \"Q3\"\ndataDF$Quarter[dataDF$Quarter == \"2011-04-01\"] <- \"Q4\"\ndataDF$Quarter[dataDF$Quarter == \"2011-01-01\"] <- \"Q5\"\n```", "```py\n# install.packages('reshape2')\nlibrary(reshape2)\n\nsalesSumFeaturesDF <- dcast(\n  dataDF[which(dataDF$Quarter != \"Q1\"),], \n  CustomerID ~ Quarter, \n  value.var=\"SalesSum\"\n)\ncolnames(salesSumFeaturesDF) <- c(\"CustomerID\", \"SalesSum.Q2\", \"SalesSum.Q3\", \"SalesSum.Q4\", \"SalesSum.Q5\")\n\nsalesAvgFeaturesDF <- dcast(\n  dataDF[which(dataDF$Quarter != \"Q1\"),], \n  CustomerID ~ Quarter, \n  value.var=\"SalesAvg\"\n)\ncolnames(salesAvgFeaturesDF) <- c(\"CustomerID\", \"SalesAvg.Q2\", \"SalesAvg.Q3\", \"SalesAvg.Q4\", \"SalesAvg.Q5\")\n\nsalesCountFeaturesDF <- dcast(\n  dataDF[which(dataDF$Quarter != \"Q1\"),], \n  CustomerID ~ Quarter, \n  value.var=\"SalesCount\"\n)\ncolnames(salesCountFeaturesDF) <- c(\"CustomerID\", \"SalesCount.Q2\", \"SalesCount.Q3\", \"SalesCount.Q4\", \"SalesCount.Q5\")\n\nfeaturesDF <- merge(\n  merge(salesSumFeaturesDF, salesAvgFeaturesDF, by=\"CustomerID\"),\n  salesCountFeaturesDF, by=\"CustomerID\"\n)\nfeaturesDF[is.na(featuresDF)] <- 0\n```", "```py\nresponseDF <- dataDF[which(dataDF$Quarter == \"Q1\"),] %>% \n    select(CustomerID, SalesSum)\n\ncolnames(responseDF) <- c(\"CustomerID\", \"CLV_3_Month\")\n```", "```py\nsampleDF <- merge(featuresDF, responseDF, by=\"CustomerID\", all.x=TRUE)\nsampleDF[is.na(sampleDF)] <- 0\n```", "```py\n# train/test set split\nlibrary(caTools)\n\nsample <- sample.split(sampleDF$CustomerID, SplitRatio = .8)\n\ntrain <- as.data.frame(subset(sampleDF, sample == TRUE))[,-1]\ntest <- as.data.frame(subset(sampleDF, sample == FALSE))[,-1]\n```", "```py\n# Linear regression model\nregFit <- lm(CLV_3_Month ~ ., data=train)\n```", "```py\nsummary(regFit)\n```", "```py\ntrain_preds <- predict(regFit, train)\ntest_preds <- predict(regFit, test)\n```", "```py\n# R-squared\n# install.packages('miscTools')\nlibrary(miscTools)\n\ninSampleR2 <- rSquared(train$CLV_3_Month, resid=train$CLV_3_Month - train_preds)\noutOfSampleR2 <- rSquared(test$CLV_3_Month, resid=test$CLV_3_Month - test_preds)\n```", "```py\n# Median Absolute Error\ninSampleMAE <- median(abs(train$CLV_3_Month - train_preds))\noutOfSampleMAE <- median(abs(test$CLV_3_Month - test_preds))\n```", "```py\nplot(\n  test$CLV_3_Month, \n  test_preds, \n  xlab='actual', \n  ylab='predicted', \n  main='Out-of-Sample Actual vs. Predicted'\n)\nabline(a=0, b=1)\n```"]